// MEF.h

#ifndef _MEF_h
#define _MEF_h

#if defined(ARDUINO) && ARDUINO >= 100
	#include "arduino.h"
#else
	#include "WProgram.h"
#endif


/*******************************************************************************
* image
* filename: unsaved
* name: Clock16bitsNew
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/


 typedef struct {
	 const uint16_t *data;
	 uint16_t width;
	 uint16_t height;
	 uint8_t dataSize;
	 } tImage;


#include <stdint.h>

static const uint16_t Clock16bitsNew[1024] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0xf3c0, 0xfba0, 0xfbc0, 0xfc00, 0xfc00, 0xfc00, 0xfbe0, 0xfbc0, 0xc300, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xc300, 0xfbc0, 0xfbe0, 0xfc00, 0xfc00, 0xfc00, 0xfbc0, 0xfba0, 0xf3c0, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xfc43, 0xf468, 0xeae0, 0xfbe0, 0xfc21, 0xfc21, 0xfbc0, 0xf360, 0xeb00, 0xf401, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf3e1, 0xeb00, 0xf360, 0xfbc0, 0xfc21, 0xfc21, 0xfbe0, 0xeb00, 0xf489, 0xfc64, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0xc300, 0xf320, 0xeb42, 0xfc44, 0xfce7, 0xfd08, 0xfca7, 0xf361, 0xeae0, 0xf360, 0x0000, 0xcf1d, 0xefbf, 0xdf7e, 0xbe7a, 0x9556, 0xa5b8, 0x0000, 0xf340, 0xeae0, 0xf381, 0xfca7, 0xfd08, 0xfce7, 0xfc44, 0xeb42, 0xf340, 0xc2e0, 0x0000, 0x0000,
	0x0000, 0x9240, 0xfbc0, 0xf3e2, 0xfcc7, 0xfd8c, 0xfdae, 0xfd4d, 0xf362, 0xeac0, 0xf340, 0x0000, 0xa3c7, 0xbe16, 0xeeb5, 0xe673, 0xcdd0, 0xa4ce, 0x9cf1, 0xac08, 0xd360, 0xf340, 0xeac0, 0xf383, 0xfd4d, 0xfdae, 0xfd8c, 0xfcc7, 0xf3e2, 0xfbc0, 0x0000, 0x0000,
	0x0000, 0xfbe0, 0xfc42, 0xfd08, 0xfdae, 0xfe11, 0xf50c, 0xeb01, 0xe2c1, 0xe3a3, 0xfc61, 0xfd45, 0xfe2c, 0xfeb0, 0xfeb0, 0xfe6d, 0xfe4c, 0xfe4b, 0xfe8f, 0xfe2c, 0xfd45, 0xfc82, 0xe3a3, 0xe2c0, 0xeb21, 0xf52d, 0xfe11, 0xfdae, 0xfd08, 0xfc42, 0xf3e0, 0x0000,
	0x0000, 0xfc20, 0xfcc6, 0xfd8d, 0xfdb0, 0xf427, 0xeac0, 0xdb24, 0x8b8b, 0xe529, 0xfe4d, 0xfe2c, 0xfdea, 0xfe2d, 0xfda8, 0xfd45, 0xfd45, 0xfe0c, 0xfe90, 0xfe90, 0xfeb1, 0xfe2d, 0xe507, 0x938a, 0xdb03, 0xeac0, 0xf448, 0xfdd0, 0xfd8d, 0xfcc6, 0xfc20, 0x0000,
	0x0000, 0xfc21, 0xfcc8, 0xf468, 0xeb21, 0xeac1, 0xc3ea, 0xbd0f, 0xf5ab, 0xfdeb, 0xfd25, 0xfd06, 0xec68, 0xdba7, 0xab28, 0x9329, 0x9309, 0xab28, 0xd3a8, 0xec68, 0xfdad, 0xfd88, 0xfe0d, 0xf589, 0xbcee, 0xcbc9, 0xeac1, 0xeb21, 0xf488, 0xfcc8, 0xfc21, 0x0000,
	0x79e0, 0xf3a0, 0xf320, 0xeac0, 0xeb21, 0xe3e4, 0xc50e, 0xfdab, 0xfd27, 0xfca3, 0xeba3, 0xa308, 0x534f, 0x4c54, 0x6516, 0x6d57, 0x6d57, 0x5d16, 0x4c54, 0x534f, 0x9ae8, 0xe3c6, 0xfdac, 0xfdcd, 0xfce6, 0xc4cc, 0xebe3, 0xeb01, 0xeac0, 0xf341, 0xf3a0, 0x0000,
	0x79e0, 0xf320, 0xeb00, 0xf360, 0xb2a0, 0xfc20, 0xfd49, 0xfca5, 0xf422, 0xd304, 0x5b2d, 0x6516, 0x9ebb, 0xaedb, 0xaedb, 0x9e39, 0x85b6, 0x7e39, 0x7618, 0x8639, 0x6516, 0x530d, 0xcae5, 0xf444, 0xf442, 0xfc63, 0xfc20, 0xcb00, 0xf360, 0xeb00, 0xf340, 0x0000,
	0x0000, 0xaaa0, 0x81e0, 0x0000, 0xaac0, 0xfca5, 0xf465, 0xf3c1, 0xc2a3, 0x53b0, 0x967a, 0xc6bb, 0xdf7d, 0xcf3d, 0xbf1c, 0xa69a, 0x9639, 0x8e59, 0x7e39, 0x6df8, 0x5492, 0x8639, 0x4bb0, 0xba83, 0xf3a1, 0xf3e1, 0xfc01, 0xcb40, 0x0000, 0x8200, 0xaaa0, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xfbe0, 0xf488, 0xf360, 0xdaa1, 0x5b6f, 0xa6bb, 0xefbe, 0xefbe, 0xdf7e, 0xcf5d, 0xbf1c, 0xaedb, 0x9eba, 0x8e7a, 0x7e39, 0x7618, 0x7618, 0x7618, 0x865a, 0x4b90, 0xd261, 0xf360, 0xf360, 0xfbe0, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xa280, 0xfc45, 0xf361, 0xeac0, 0x7289, 0x965a, 0xdf7d, 0xefbe, 0xefbe, 0xdf7e, 0xcf5d, 0xbf1c, 0xaefb, 0xa6bb, 0x969a, 0x7d55, 0x7e39, 0x7e39, 0x7e39, 0x7e39, 0x8e3a, 0x6289, 0xe2a0, 0xf3c4, 0xf3a1, 0xc320, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf3c0, 0xf406, 0xf382, 0xca62, 0x6cf5, 0xa638, 0xdf7e, 0xdf9e, 0xdf7e, 0xd75d, 0xc73d, 0xbf1c, 0xaefc, 0xa6bb, 0x9639, 0x74b3, 0x8659, 0x8659, 0x865a, 0x865a, 0x6d14, 0x64f6, 0xba22, 0xeb62, 0xeb00, 0xfbe0, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xfbc0, 0xf406, 0xeba4, 0x8246, 0x9e9b, 0xcf5d, 0xd75d, 0xefbe, 0xe79e, 0xcf5d, 0xc73d, 0xbf1c, 0xaefc, 0xa6db, 0x7c71, 0x85b7, 0x8e9a, 0x8e9a, 0x8e9a, 0x8e9a, 0x8e7a, 0x969b, 0x7247, 0xeac0, 0xeb00, 0xf380, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf424, 0xf3e6, 0xe2e1, 0x736d, 0xb71c, 0xc73d, 0xcf5d, 0xcf5d, 0xcf5d, 0xc73d, 0xbf3c, 0xbf1c, 0xb6fc, 0x9dd7, 0x6bae, 0x96bb, 0x96bb, 0x96bb, 0x9ebb, 0x9ebb, 0x9ebb, 0xa6dc, 0x6b8f, 0xe280, 0xeb22, 0xf361, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf425, 0xeb01, 0xda40, 0x7cb3, 0xb71c, 0xc73d, 0xc73d, 0xc75d, 0xc73d, 0xc73d, 0xbf3d, 0xbf1c, 0xb71c, 0x7c51, 0x7cb3, 0xa6db, 0xa6dc, 0xa6dc, 0xa6fc, 0xa6fc, 0xa6fc, 0xa6fc, 0x74d4, 0xda61, 0xeb64, 0xeb21, 0x9a60, 0x0000, 0x0000,
	0x0000, 0x0000, 0x7a00, 0xf3c3, 0xeaa0, 0xda40, 0x84f5, 0x9df8, 0xbedb, 0xc73d, 0xc73d, 0xc73d, 0xc73d, 0xbf3d, 0xbf3c, 0x9596, 0x84d3, 0xaefc, 0xaf1c, 0xaf1c, 0xb71c, 0xb71c, 0xb71c, 0xa69a, 0x95d7, 0x7516, 0xd261, 0xeae1, 0xeb01, 0x9a60, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf3a3, 0xeaa0, 0xda60, 0x84f4, 0xae7a, 0xbefc, 0xc75d, 0xc75d, 0xc75d, 0xc75d, 0xc73d, 0xbf3d, 0x9d96, 0x8cf4, 0xa618, 0xbf3d, 0xbf3d, 0xbf3d, 0xbf3d, 0xbf3d, 0xb6fc, 0xae9a, 0x7d15, 0xda41, 0xeae2, 0xe301, 0x9a60, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf382, 0xeb44, 0xe2e3, 0x8c50, 0xb71c, 0xc73d, 0xcf5d, 0xcf5d, 0xcf5d, 0xcf5d, 0xc75d, 0xc75d, 0xc75d, 0xc75d, 0x9d75, 0x9d55, 0xc73d, 0xc75d, 0xc75d, 0xc75d, 0xc75d, 0xb73d, 0x7c72, 0xdaa2, 0xe2c2, 0xe2e0, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf3a1, 0xeba7, 0xeb04, 0x92e9, 0xbf3d, 0xbf3d, 0xcf5d, 0xcf7d, 0xd77d, 0xd77d, 0xd77d, 0xd77e, 0xd77e, 0xd77e, 0xd77e, 0xc6bb, 0x9d55, 0xc71c, 0xd77e, 0xcf7e, 0xc75d, 0xbf5e, 0x830b, 0xe2c2, 0xe281, 0xe2e0, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xf3a0, 0xeb66, 0xe324, 0xc222, 0xa67b, 0xcf5d, 0xcf5d, 0xcf5d, 0xd77e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xadf7, 0xae18, 0xcf7e, 0xc73d, 0xa69b, 0xb264, 0xe261, 0xe220, 0xeb40, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0xb2c0, 0xeb43, 0xe2e4, 0xda40, 0x93cd, 0xa5f8, 0xcf3d, 0xd77e, 0xd77e, 0xd77e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xdf9e, 0xd79e, 0xd79e, 0xbebb, 0xae18, 0xae18, 0x83ef, 0xda82, 0xe220, 0xda20, 0xcb20, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xf380, 0xe282, 0xe282, 0xca01, 0x9db7, 0xdf9e, 0xe79e, 0xe7be, 0xe7be, 0xe7be, 0xe7be, 0xe7be, 0xe7be, 0xe7bf, 0xe7bf, 0xe7bf, 0xe7bf, 0xe7bf, 0xdfbf, 0x9597, 0xc264, 0xda00, 0xda00, 0xe2c0, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0xc300, 0xeae1, 0xe282, 0xe261, 0xba23, 0xae39, 0xefdf, 0xefdf, 0xefdf, 0xefdf, 0xefdf, 0xefdf, 0xefdf, 0xefdf, 0xefdf, 0xefdf, 0xe77e, 0xefdf, 0xae5a, 0xb286, 0xda21, 0xd9e0, 0xd200, 0xd320, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf3a0, 0xe261, 0xda00, 0xd9e0, 0xba23, 0xa555, 0xadf8, 0xf7df, 0xffff, 0xf7ff, 0xe73d, 0xd6ba, 0xf7ff, 0xf7ff, 0xf7ff, 0xb659, 0x9d76, 0xb286, 0xda21, 0xd9e0, 0xd1c0, 0xe320, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf380, 0xd9e0, 0xd9c0, 0xd9e0, 0xd202, 0xa34a, 0xadd8, 0xd77e, 0xefdf, 0xdf3c, 0xce9a, 0xefdf, 0xd77e, 0xa5f8, 0x9b6b, 0xd264, 0xda01, 0xd9c0, 0xd1a0, 0xe2e0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xeb80, 0xda00, 0xd9e0, 0xd9e0, 0xda21, 0xd222, 0xbaa6, 0xab6b, 0xa3ed, 0xa3ed, 0xa38b, 0xb2e7, 0xd263, 0xda62, 0xd9e0, 0xd9e0, 0xd1c0, 0xdb00, 0x8a20, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xc4ed, 0x8d13, 0xcae3, 0xda81, 0xe2a2, 0xe2a2, 0xe2a2, 0xe2c3, 0xe304, 0xe324, 0xe2e3, 0xe2a2, 0xe2a2, 0xe2c2, 0xda82, 0xc282, 0x8cb2, 0xcd0e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8a02, 0xfd2c, 0xdccf, 0xcb65, 0xeb80, 0xe321, 0xdb22, 0xe343, 0xe383, 0xe383, 0xe383, 0xe383, 0xe363, 0xdb02, 0xdae1, 0xe320, 0xcb24, 0xd4af, 0xfd4d, 0x9a42, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xb304, 0xfd6d, 0xe240, 0xda80, 0x0000, 0x0000, 0xbae0, 0xe360, 0xe340, 0xe341, 0xe341, 0xe320, 0xe340, 0xbae0, 0x81e0, 0x0000, 0xca40, 0xe240, 0xfd6d, 0xc365, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xb3ea, 0xf428, 0xa1e0, 0x2880, 0x0000, 0x0000, 0x0000, 0x0000, 0x1040, 0x1880, 0x1880, 0x1860, 0x0000, 0x0000, 0x0000, 0x0000, 0x2880, 0xa1e0, 0xf428, 0xcc8b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1105, 0x1946, 0x0021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x1946, 0x1125, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
const tImage _Clock16bitsNew = { Clock16bitsNew, 32, 32,
	16 };


// Includes //
#include "Display.h"
#include "Display_Menu_Select_Rele.h"
#include "Display_Estate_Init.h"
#include "Display_Menu_Select_Home.h"
#include "Display_Menu_Init.h"

// Functions //
void MEF_Init(void);
void MEF_Updated(void);
void Menu_Actual(void);
extern void Push_Antirrebote(void);

// Variables //
extern bool Est_Task_Menu, Est_Task_Blink, Est_Task_Encoder;
extern uint8_t	maxSteps, minSteps;
typedef enum
{
	ESTATE_INIT,
	ESTATE_IDLE,
	ESTATE_MENU,
	ESTATE_ENCODER,
	ESTATE_BLINK,
}MEFestate_t;
MEFestate_t Actual_Estate;

typedef enum
{
	MENU_INIT,
	MENU_SELECT_HOME,
	MENU_SELECT_RELE,
	MENU_SELECT_THEME,
	MENU_SELECT_RTC,
}MENUestate_t;
MENUestate_t Actual_Menu;
// End //

// ************************************************** //
void MEF_Init(void)
{
	Actual_Estate = ESTATE_INIT;
	Actual_Menu = MENU_INIT;

	return;
}

void MEF_Updated(void)
{
	switch (Actual_Estate)
	{
	case ESTATE_INIT:
	{
		//Display_ESTATE_INIT();

		Actual_Estate = ESTATE_MENU;
		break;
	}
	case ESTATE_IDLE:
	{
		if (Est_Task_Blink == true)			Actual_Estate = ESTATE_BLINK;
		else if (Est_Task_Menu == true)		Actual_Estate = ESTATE_MENU;
		else if (Est_Task_Encoder == true)	Actual_Estate = ESTATE_ENCODER;
		
		break;
	}
	case ESTATE_MENU:
	{
		Menu_Actual();

		Est_Task_Menu == false;

		// Transition //
		Actual_Estate = ESTATE_IDLE;
		break;
	}
	case ESTATE_ENCODER:
	{
		if (digitalRead(ENCODER_B_READ) == HIGH && digitalRead(19) == LOW)		Opc++;
		else if (digitalRead(ENCODER_B_READ) == LOW && digitalRead(19) == LOW)	Opc--;

		if (Opc > maxSteps)			Opc = maxSteps;
		else if (Opc < minSteps)	Opc = minSteps;

		Est_Task_Encoder == false;

		// Transition //
		Actual_Estate = ESTATE_IDLE;
		break;
	}
	case ESTATE_BLINK:
	{
		BLINK;

		Est_Task_Blink == false;

		// Tansition //
		Actual_Estate = ESTATE_IDLE;
		break;
	}
	}

	return;
}

void Menu_Actual(void)
{
	switch (Actual_Menu)
	{
	case MENU_INIT:
	{
		Display_MENU_INIT();
		Opc = 1;

		tft.drawRGBBitmap (10, 10, Clock16bitsNew, 32, 32);

		Actual_Menu = MENU_SELECT_HOME;
		break;
	}
	case MENU_SELECT_HOME:
	{
		uint8_t B_est,A_est;

		maxSteps = 3;
		minSteps = 1;

		Display_MENU_SELECT_HOME();
		
		tft.setCursor(10, 210);
		tft.setTextColor(actual_theme.letterColour, actual_theme.backgroundletterColour);
		tft.print(Opc);
		
		B_est = digitalRead(ENCODER_B_READ);
		tft.setCursor(100, 210);
		tft.print("B:"),tft.print(B_est);
		A_est = digitalRead(19);
		tft.setCursor(50, 210);
		tft.print("A:"),tft.print(A_est);

		//if (Opc == 1 && digitalRead(ENCODER_PUSH_READ))	Push_Antirrebote(),Actual_Menu = MENU_SELECT_RELE;
		//if (Opc == 2 && digitalRead(ENCODER_PUSH_READ))	Push_Antirrebote(), Actual_Menu = MENU_SELECT_RTC;

		break;
	}
	case MENU_SELECT_RELE:
	{


		break;
	}
	case MENU_SELECT_RTC:
	{


		break;
	}
	case MENU_SELECT_THEME:
	{


		break;
	}
	}

	return;
}
// ************************************************** //





#endif




Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Dec 18 18:41:55 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F886
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=3
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	intentry,global,class=CODE,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.20
    71                           ; Generated 09/04/2020 GMT
    72                           ; 
    73                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F886 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0009                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  0087                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  008F                     	;# 
   147  0090                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0093                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  0105                     	;# 
   166  0107                     	;# 
   167  0108                     	;# 
   168  0109                     	;# 
   169  010C                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  0185                     	;# 
   175  0187                     	;# 
   176  0188                     	;# 
   177  0189                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0009                     	;# 
   189  000A                     	;# 
   190  000B                     	;# 
   191  000C                     	;# 
   192  000D                     	;# 
   193  000E                     	;# 
   194  000E                     	;# 
   195  000F                     	;# 
   196  0010                     	;# 
   197  0011                     	;# 
   198  0012                     	;# 
   199  0013                     	;# 
   200  0014                     	;# 
   201  0015                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0017                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  001D                     	;# 
   212  001E                     	;# 
   213  001F                     	;# 
   214  0081                     	;# 
   215  0085                     	;# 
   216  0086                     	;# 
   217  0087                     	;# 
   218  0089                     	;# 
   219  008C                     	;# 
   220  008D                     	;# 
   221  008E                     	;# 
   222  008F                     	;# 
   223  0090                     	;# 
   224  0091                     	;# 
   225  0092                     	;# 
   226  0093                     	;# 
   227  0093                     	;# 
   228  0093                     	;# 
   229  0094                     	;# 
   230  0095                     	;# 
   231  0096                     	;# 
   232  0097                     	;# 
   233  0098                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  009F                     	;# 
   241  0105                     	;# 
   242  0107                     	;# 
   243  0108                     	;# 
   244  0109                     	;# 
   245  010C                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  010F                     	;# 
   250  0185                     	;# 
   251  0187                     	;# 
   252  0188                     	;# 
   253  0189                     	;# 
   254  018C                     	;# 
   255  018D                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0009                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  000E                     	;# 
   271  000F                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  001D                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  0081                     	;# 
   291  0085                     	;# 
   292  0086                     	;# 
   293  0087                     	;# 
   294  0089                     	;# 
   295  008C                     	;# 
   296  008D                     	;# 
   297  008E                     	;# 
   298  008F                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0093                     	;# 
   303  0093                     	;# 
   304  0093                     	;# 
   305  0094                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0098                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009C                     	;# 
   314  009D                     	;# 
   315  009E                     	;# 
   316  009F                     	;# 
   317  0105                     	;# 
   318  0107                     	;# 
   319  0108                     	;# 
   320  0109                     	;# 
   321  010C                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  010F                     	;# 
   326  0185                     	;# 
   327  0187                     	;# 
   328  0188                     	;# 
   329  0189                     	;# 
   330  018C                     	;# 
   331  018D                     	;# 
   332  0000                     	;# 
   333  0001                     	;# 
   334  0002                     	;# 
   335  0003                     	;# 
   336  0004                     	;# 
   337  0005                     	;# 
   338  0006                     	;# 
   339  0007                     	;# 
   340  0009                     	;# 
   341  000A                     	;# 
   342  000B                     	;# 
   343  000C                     	;# 
   344  000D                     	;# 
   345  000E                     	;# 
   346  000E                     	;# 
   347  000F                     	;# 
   348  0010                     	;# 
   349  0011                     	;# 
   350  0012                     	;# 
   351  0013                     	;# 
   352  0014                     	;# 
   353  0015                     	;# 
   354  0015                     	;# 
   355  0016                     	;# 
   356  0017                     	;# 
   357  0018                     	;# 
   358  0019                     	;# 
   359  001A                     	;# 
   360  001B                     	;# 
   361  001B                     	;# 
   362  001C                     	;# 
   363  001D                     	;# 
   364  001E                     	;# 
   365  001F                     	;# 
   366  0081                     	;# 
   367  0085                     	;# 
   368  0086                     	;# 
   369  0087                     	;# 
   370  0089                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  008F                     	;# 
   375  0090                     	;# 
   376  0091                     	;# 
   377  0092                     	;# 
   378  0093                     	;# 
   379  0093                     	;# 
   380  0093                     	;# 
   381  0094                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0097                     	;# 
   385  0098                     	;# 
   386  0099                     	;# 
   387  009A                     	;# 
   388  009B                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  009F                     	;# 
   393  0105                     	;# 
   394  0107                     	;# 
   395  0108                     	;# 
   396  0109                     	;# 
   397  010C                     	;# 
   398  010C                     	;# 
   399  010D                     	;# 
   400  010E                     	;# 
   401  010F                     	;# 
   402  0185                     	;# 
   403  0187                     	;# 
   404  0188                     	;# 
   405  0189                     	;# 
   406  018C                     	;# 
   407  018D                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0009                     	;# 
   417  000A                     	;# 
   418  000B                     	;# 
   419  000C                     	;# 
   420  000D                     	;# 
   421  000E                     	;# 
   422  000E                     	;# 
   423  000F                     	;# 
   424  0010                     	;# 
   425  0011                     	;# 
   426  0012                     	;# 
   427  0013                     	;# 
   428  0014                     	;# 
   429  0015                     	;# 
   430  0015                     	;# 
   431  0016                     	;# 
   432  0017                     	;# 
   433  0018                     	;# 
   434  0019                     	;# 
   435  001A                     	;# 
   436  001B                     	;# 
   437  001B                     	;# 
   438  001C                     	;# 
   439  001D                     	;# 
   440  001E                     	;# 
   441  001F                     	;# 
   442  0081                     	;# 
   443  0085                     	;# 
   444  0086                     	;# 
   445  0087                     	;# 
   446  0089                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  008F                     	;# 
   451  0090                     	;# 
   452  0091                     	;# 
   453  0092                     	;# 
   454  0093                     	;# 
   455  0093                     	;# 
   456  0093                     	;# 
   457  0094                     	;# 
   458  0095                     	;# 
   459  0096                     	;# 
   460  0097                     	;# 
   461  0098                     	;# 
   462  0099                     	;# 
   463  009A                     	;# 
   464  009B                     	;# 
   465  009C                     	;# 
   466  009D                     	;# 
   467  009E                     	;# 
   468  009F                     	;# 
   469  0105                     	;# 
   470  0107                     	;# 
   471  0108                     	;# 
   472  0109                     	;# 
   473  010C                     	;# 
   474  010C                     	;# 
   475  010D                     	;# 
   476  010E                     	;# 
   477  010F                     	;# 
   478  0185                     	;# 
   479  0187                     	;# 
   480  0188                     	;# 
   481  0189                     	;# 
   482  018C                     	;# 
   483  018D                     	;# 
   484  0000                     	;# 
   485  0001                     	;# 
   486  0002                     	;# 
   487  0003                     	;# 
   488  0004                     	;# 
   489  0005                     	;# 
   490  0006                     	;# 
   491  0007                     	;# 
   492  0009                     	;# 
   493  000A                     	;# 
   494  000B                     	;# 
   495  000C                     	;# 
   496  000D                     	;# 
   497  000E                     	;# 
   498  000E                     	;# 
   499  000F                     	;# 
   500  0010                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0013                     	;# 
   504  0014                     	;# 
   505  0015                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  001D                     	;# 
   516  001E                     	;# 
   517  001F                     	;# 
   518  0081                     	;# 
   519  0085                     	;# 
   520  0086                     	;# 
   521  0087                     	;# 
   522  0089                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  008F                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0093                     	;# 
   531  0093                     	;# 
   532  0093                     	;# 
   533  0094                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0098                     	;# 
   538  0099                     	;# 
   539  009A                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  009F                     	;# 
   545  0105                     	;# 
   546  0107                     	;# 
   547  0108                     	;# 
   548  0109                     	;# 
   549  010C                     	;# 
   550  010C                     	;# 
   551  010D                     	;# 
   552  010E                     	;# 
   553  010F                     	;# 
   554  0185                     	;# 
   555  0187                     	;# 
   556  0188                     	;# 
   557  0189                     	;# 
   558  018C                     	;# 
   559  018D                     	;# 
   560  0000                     	;# 
   561  0001                     	;# 
   562  0002                     	;# 
   563  0003                     	;# 
   564  0004                     	;# 
   565  0005                     	;# 
   566  0006                     	;# 
   567  0007                     	;# 
   568  0009                     	;# 
   569  000A                     	;# 
   570  000B                     	;# 
   571  000C                     	;# 
   572  000D                     	;# 
   573  000E                     	;# 
   574  000E                     	;# 
   575  000F                     	;# 
   576  0010                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0013                     	;# 
   580  0014                     	;# 
   581  0015                     	;# 
   582  0015                     	;# 
   583  0016                     	;# 
   584  0017                     	;# 
   585  0018                     	;# 
   586  0019                     	;# 
   587  001A                     	;# 
   588  001B                     	;# 
   589  001B                     	;# 
   590  001C                     	;# 
   591  001D                     	;# 
   592  001E                     	;# 
   593  001F                     	;# 
   594  0081                     	;# 
   595  0085                     	;# 
   596  0086                     	;# 
   597  0087                     	;# 
   598  0089                     	;# 
   599  008C                     	;# 
   600  008D                     	;# 
   601  008E                     	;# 
   602  008F                     	;# 
   603  0090                     	;# 
   604  0091                     	;# 
   605  0092                     	;# 
   606  0093                     	;# 
   607  0093                     	;# 
   608  0093                     	;# 
   609  0094                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  009F                     	;# 
   621  0105                     	;# 
   622  0107                     	;# 
   623  0108                     	;# 
   624  0109                     	;# 
   625  010C                     	;# 
   626  010C                     	;# 
   627  010D                     	;# 
   628  010E                     	;# 
   629  010F                     	;# 
   630  0185                     	;# 
   631  0187                     	;# 
   632  0188                     	;# 
   633  0189                     	;# 
   634  018C                     	;# 
   635  018D                     	;# 
   636  0000                     	;# 
   637  0001                     	;# 
   638  0002                     	;# 
   639  0003                     	;# 
   640  0004                     	;# 
   641  0005                     	;# 
   642  0006                     	;# 
   643  0007                     	;# 
   644  0009                     	;# 
   645  000A                     	;# 
   646  000B                     	;# 
   647  000C                     	;# 
   648  000D                     	;# 
   649  000E                     	;# 
   650  000E                     	;# 
   651  000F                     	;# 
   652  0010                     	;# 
   653  0011                     	;# 
   654  0012                     	;# 
   655  0013                     	;# 
   656  0014                     	;# 
   657  0015                     	;# 
   658  0015                     	;# 
   659  0016                     	;# 
   660  0017                     	;# 
   661  0018                     	;# 
   662  0019                     	;# 
   663  001A                     	;# 
   664  001B                     	;# 
   665  001B                     	;# 
   666  001C                     	;# 
   667  001D                     	;# 
   668  001E                     	;# 
   669  001F                     	;# 
   670  0081                     	;# 
   671  0085                     	;# 
   672  0086                     	;# 
   673  0087                     	;# 
   674  0089                     	;# 
   675  008C                     	;# 
   676  008D                     	;# 
   677  008E                     	;# 
   678  008F                     	;# 
   679  0090                     	;# 
   680  0091                     	;# 
   681  0092                     	;# 
   682  0093                     	;# 
   683  0093                     	;# 
   684  0093                     	;# 
   685  0094                     	;# 
   686  0095                     	;# 
   687  0096                     	;# 
   688  0097                     	;# 
   689  0098                     	;# 
   690  0099                     	;# 
   691  009A                     	;# 
   692  009B                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009E                     	;# 
   696  009F                     	;# 
   697  0105                     	;# 
   698  0107                     	;# 
   699  0108                     	;# 
   700  0109                     	;# 
   701  010C                     	;# 
   702  010C                     	;# 
   703  010D                     	;# 
   704  010E                     	;# 
   705  010F                     	;# 
   706  0185                     	;# 
   707  0187                     	;# 
   708  0188                     	;# 
   709  0189                     	;# 
   710  018C                     	;# 
   711  018D                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0093                     	;# 
   761  0094                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009C                     	;# 
   770  009D                     	;# 
   771  009E                     	;# 
   772  009F                     	;# 
   773  0105                     	;# 
   774  0107                     	;# 
   775  0108                     	;# 
   776  0109                     	;# 
   777  010C                     	;# 
   778  010C                     	;# 
   779  010D                     	;# 
   780  010E                     	;# 
   781  010F                     	;# 
   782  0185                     	;# 
   783  0187                     	;# 
   784  0188                     	;# 
   785  0189                     	;# 
   786  018C                     	;# 
   787  018D                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0009                     	;# 
   797  000A                     	;# 
   798  000B                     	;# 
   799  000C                     	;# 
   800  000D                     	;# 
   801  000E                     	;# 
   802  000E                     	;# 
   803  000F                     	;# 
   804  0010                     	;# 
   805  0011                     	;# 
   806  0012                     	;# 
   807  0013                     	;# 
   808  0014                     	;# 
   809  0015                     	;# 
   810  0015                     	;# 
   811  0016                     	;# 
   812  0017                     	;# 
   813  0018                     	;# 
   814  0019                     	;# 
   815  001A                     	;# 
   816  001B                     	;# 
   817  001B                     	;# 
   818  001C                     	;# 
   819  001D                     	;# 
   820  001E                     	;# 
   821  001F                     	;# 
   822  0081                     	;# 
   823  0085                     	;# 
   824  0086                     	;# 
   825  0087                     	;# 
   826  0089                     	;# 
   827  008C                     	;# 
   828  008D                     	;# 
   829  008E                     	;# 
   830  008F                     	;# 
   831  0090                     	;# 
   832  0091                     	;# 
   833  0092                     	;# 
   834  0093                     	;# 
   835  0093                     	;# 
   836  0093                     	;# 
   837  0094                     	;# 
   838  0095                     	;# 
   839  0096                     	;# 
   840  0097                     	;# 
   841  0098                     	;# 
   842  0099                     	;# 
   843  009A                     	;# 
   844  009B                     	;# 
   845  009C                     	;# 
   846  009D                     	;# 
   847  009E                     	;# 
   848  009F                     	;# 
   849  0105                     	;# 
   850  0107                     	;# 
   851  0108                     	;# 
   852  0109                     	;# 
   853  010C                     	;# 
   854  010C                     	;# 
   855  010D                     	;# 
   856  010E                     	;# 
   857  010F                     	;# 
   858  0185                     	;# 
   859  0187                     	;# 
   860  0188                     	;# 
   861  0189                     	;# 
   862  018C                     	;# 
   863  018D                     	;# 
   864  0000                     	;# 
   865  0001                     	;# 
   866  0002                     	;# 
   867  0003                     	;# 
   868  0004                     	;# 
   869  0005                     	;# 
   870  0006                     	;# 
   871  0007                     	;# 
   872  0009                     	;# 
   873  000A                     	;# 
   874  000B                     	;# 
   875  000C                     	;# 
   876  000D                     	;# 
   877  000E                     	;# 
   878  000E                     	;# 
   879  000F                     	;# 
   880  0010                     	;# 
   881  0011                     	;# 
   882  0012                     	;# 
   883  0013                     	;# 
   884  0014                     	;# 
   885  0015                     	;# 
   886  0015                     	;# 
   887  0016                     	;# 
   888  0017                     	;# 
   889  0018                     	;# 
   890  0019                     	;# 
   891  001A                     	;# 
   892  001B                     	;# 
   893  001B                     	;# 
   894  001C                     	;# 
   895  001D                     	;# 
   896  001E                     	;# 
   897  001F                     	;# 
   898  0081                     	;# 
   899  0085                     	;# 
   900  0086                     	;# 
   901  0087                     	;# 
   902  0089                     	;# 
   903  008C                     	;# 
   904  008D                     	;# 
   905  008E                     	;# 
   906  008F                     	;# 
   907  0090                     	;# 
   908  0091                     	;# 
   909  0092                     	;# 
   910  0093                     	;# 
   911  0093                     	;# 
   912  0093                     	;# 
   913  0094                     	;# 
   914  0095                     	;# 
   915  0096                     	;# 
   916  0097                     	;# 
   917  0098                     	;# 
   918  0099                     	;# 
   919  009A                     	;# 
   920  009B                     	;# 
   921  009C                     	;# 
   922  009D                     	;# 
   923  009E                     	;# 
   924  009F                     	;# 
   925  0105                     	;# 
   926  0107                     	;# 
   927  0108                     	;# 
   928  0109                     	;# 
   929  010C                     	;# 
   930  010C                     	;# 
   931  010D                     	;# 
   932  010E                     	;# 
   933  010F                     	;# 
   934  0185                     	;# 
   935  0187                     	;# 
   936  0188                     	;# 
   937  0189                     	;# 
   938  018C                     	;# 
   939  018D                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0009                     	;# 
   949  000A                     	;# 
   950  000B                     	;# 
   951  000C                     	;# 
   952  000D                     	;# 
   953  000E                     	;# 
   954  000E                     	;# 
   955  000F                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0013                     	;# 
   960  0014                     	;# 
   961  0015                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  001D                     	;# 
   972  001E                     	;# 
   973  001F                     	;# 
   974  0081                     	;# 
   975  0085                     	;# 
   976  0086                     	;# 
   977  0087                     	;# 
   978  0089                     	;# 
   979  008C                     	;# 
   980  008D                     	;# 
   981  008E                     	;# 
   982  008F                     	;# 
   983  0090                     	;# 
   984  0091                     	;# 
   985  0092                     	;# 
   986  0093                     	;# 
   987  0093                     	;# 
   988  0093                     	;# 
   989  0094                     	;# 
   990  0095                     	;# 
   991  0096                     	;# 
   992  0097                     	;# 
   993  0098                     	;# 
   994  0099                     	;# 
   995  009A                     	;# 
   996  009B                     	;# 
   997  009C                     	;# 
   998  009D                     	;# 
   999  009E                     	;# 
  1000  009F                     	;# 
  1001  0105                     	;# 
  1002  0107                     	;# 
  1003  0108                     	;# 
  1004  0109                     	;# 
  1005  010C                     	;# 
  1006  010C                     	;# 
  1007  010D                     	;# 
  1008  010E                     	;# 
  1009  010F                     	;# 
  1010  0185                     	;# 
  1011  0187                     	;# 
  1012  0188                     	;# 
  1013  0189                     	;# 
  1014  018C                     	;# 
  1015  018D                     	;# 
  1016                           
  1017                           	psect	idataCOMMON
  1018  1517                     __pidataCOMMON:
  1019                           
  1020                           ;initializer for _Delay100ms
  1021  1517  34E8               	retlw	232
  1022  1518  3403               	retlw	3
  1023                           
  1024                           	psect	idataBANK0
  1025  151D                     __pidataBANK0:	
  1026                           ;initializer for _Delay1s
  1027                           
  1028  151D  3410               	retlw	16
  1029  151E  3427               	retlw	39
  1030                           
  1031                           ;initializer for _Delay200ms
  1032  151F  34D0               	retlw	208
  1033  1520  3407               	retlw	7
  1034                           
  1035                           	psect	idataBANK1
  1036  1530                     __pidataBANK1:
  1037                           
  1038                           ;initializer for Pant_Inicio@F1325
  1039  1530  3406               	retlw	6
  1040  1531  3409               	retlw	9
  1041  1532  3409               	retlw	9
  1042  1533  3406               	retlw	6
  1043  1534  3400               	retlw	0
  1044  1535  3400               	retlw	0
  1045  1536  3400               	retlw	0
  1046  1537  3400               	retlw	0
  1047                           
  1048                           	psect	strings
  1049  0700                     __pstrings:
  1050  0700                     stringtab:
  1051  0700                     __stringtab:
  1052                           
  1053                           ;	String table - string pointers are 1 byte each
  1054  0700  1BFF               	btfsc	btemp+1,7
  1055  0701  2F0A               	ljmp	stringcode
  1056  0702  1383               	bcf	3,7
  1057  0703  187F               	btfsc	btemp+1,0
  1058  0704  1783               	bsf	3,7
  1059  0705  0800               	movf	0,w
  1060  0706  0A84               	incf	4,f
  1061  0707  1903               	skipnz
  1062  0708  0AFF               	incf	btemp+1,f
  1063  0709  0008               	return
  1064  070A                     stringcode:
  1065  070A                     stringdir:
  1066  070A  3007               	movlw	high stringdir
  1067  070B  008A               	movwf	10
  1068  070C  0804               	movf	4,w
  1069  070D  0A84               	incf	4,f
  1070  070E  0782               	addwf	2,f
  1071  070F                     __stringbase:
  1072  070F  3400               	retlw	0
  1073  0710                     __end_of__stringtab:
  1074  0710                     _dpowers:
  1075  0710  3401               	retlw	1
  1076  0711  3400               	retlw	0
  1077  0712  340A               	retlw	10
  1078  0713  3400               	retlw	0
  1079  0714  3464               	retlw	100
  1080  0715  3400               	retlw	0
  1081  0716  34E8               	retlw	232
  1082  0717  3403               	retlw	3
  1083  0718  3410               	retlw	16
  1084  0719  3427               	retlw	39
  1085  071A                     __end_of_dpowers:
  1086  000E                     _TMR1	set	14
  1087  001E                     _ADRESH	set	30
  1088  001F                     _ADCON0	set	31
  1089  001F                     _ADCON0bits	set	31
  1090  0010                     _T1CONbits	set	16
  1091  0007                     _PORTCbits	set	7
  1092  0006                     _PORTBbits	set	6
  1093  0005                     _PORTAbits	set	5
  1094  0007                     _PORTC	set	7
  1095  0006                     _PORTB	set	6
  1096  0005                     _PORTA	set	5
  1097  0034                     _RB4	set	52
  1098  005F                     _GIE	set	95
  1099  005E                     _PEIE	set	94
  1100  0080                     _TMR1ON	set	128
  1101  0060                     _TMR1IF	set	96
  1102  009E                     _ADRESL	set	158
  1103  009F                     _ADCON1bits	set	159
  1104  0087                     _TRISCbits	set	135
  1105  0086                     _TRISBbits	set	134
  1106  0087                     _TRISC	set	135
  1107  0086                     _TRISB	set	134
  1108  0085                     _TRISAbits	set	133
  1109  0434                     _TRISB4	set	1076
  1110  0460                     _TMR1IE	set	1120
  1111  0105                     _WDTCONbits	set	261
  1112  0188                     _ANSELbits	set	392
  1113  0189                     _ANSELHbits	set	393
  1114  071A                     STR_3:
  1115  071A  3420               	retlw	32	;' '
  1116  071B  3420               	retlw	32	;' '
  1117  071C  3420               	retlw	32	;' '
  1118  071D  3444               	retlw	68	;'D'
  1119  071E  3445               	retlw	69	;'E'
  1120  071F  3420               	retlw	32	;' '
  1121  0720  3449               	retlw	73	;'I'
  1122  0721  344E               	retlw	78	;'N'
  1123  0722  3459               	retlw	89	;'Y'
  1124  0723  3445               	retlw	69	;'E'
  1125  0724  3443               	retlw	67	;'C'
  1126  0725  3454               	retlw	84	;'T'
  1127  0726  344F               	retlw	79	;'O'
  1128  0727  3452               	retlw	82	;'R'
  1129  0728  3445               	retlw	69	;'E'
  1130  0729  3453               	retlw	83	;'S'
  1131  072A  3420               	retlw	32	;' '
  1132  072B  3420               	retlw	32	;' '
  1133  072C  3420               	retlw	32	;' '
  1134  072D  3420               	retlw	32	;' '
  1135  072E  3400               	retlw	0
  1136  072F                     STR_2:
  1137  072F  3450               	retlw	80	;'P'
  1138  0730  3452               	retlw	82	;'R'
  1139  0731  344F               	retlw	79	;'O'
  1140  0732  3442               	retlw	66	;'B'
  1141  0733  3441               	retlw	65	;'A'
  1142  0734  3444               	retlw	68	;'D'
  1143  0735  344F               	retlw	79	;'O'
  1144  0736  3452               	retlw	82	;'R'
  1145  0737  3420               	retlw	32	;' '
  1146  0738  3441               	retlw	65	;'A'
  1147  0739  3455               	retlw	85	;'U'
  1148  073A  3454               	retlw	84	;'T'
  1149  073B  344F               	retlw	79	;'O'
  1150  073C  344D               	retlw	77	;'M'
  1151  073D  344F               	retlw	79	;'O'
  1152  073E  3454               	retlw	84	;'T'
  1153  073F  3452               	retlw	82	;'R'
  1154  0740  3449               	retlw	73	;'I'
  1155  0741  345A               	retlw	90	;'Z'
  1156  0742  3420               	retlw	32	;' '
  1157  0743  3400               	retlw	0
  1158  0744                     STR_1:
  1159  0744  343D               	retlw	61	;'='
  1160  0745  343D               	retlw	61	;'='
  1161  0746  343D               	retlw	61	;'='
  1162  0747  343D               	retlw	61	;'='
  1163  0748  343D               	retlw	61	;'='
  1164  0749  343D               	retlw	61	;'='
  1165  074A  343D               	retlw	61	;'='
  1166  074B  343D               	retlw	61	;'='
  1167  074C  343D               	retlw	61	;'='
  1168  074D  343D               	retlw	61	;'='
  1169  074E  343D               	retlw	61	;'='
  1170  074F  343D               	retlw	61	;'='
  1171  0750  343D               	retlw	61	;'='
  1172  0751  343D               	retlw	61	;'='
  1173  0752  343D               	retlw	61	;'='
  1174  0753  343D               	retlw	61	;'='
  1175  0754  343D               	retlw	61	;'='
  1176  0755  343D               	retlw	61	;'='
  1177  0756  343D               	retlw	61	;'='
  1178  0757  343D               	retlw	61	;'='
  1179  0758  3400               	retlw	0
  1180  0759                     STR_17:
  1181  0759  344C               	retlw	76	;'L'
  1182  075A  3449               	retlw	73	;'I'
  1183  075B  344D               	retlw	77	;'M'
  1184  075C  3450               	retlw	80	;'P'
  1185  075D  342E               	retlw	46	;'.'
  1186  075E  3420               	retlw	32	;' '
  1187  075F  3455               	retlw	85	;'U'
  1188  0760  344C               	retlw	76	;'L'
  1189  0761  3454               	retlw	84	;'T'
  1190  0762  3452               	retlw	82	;'R'
  1191  0763  3441               	retlw	65	;'A'
  1192  0764  3453               	retlw	83	;'S'
  1193  0765  344F               	retlw	79	;'O'
  1194  0766  344E               	retlw	78	;'N'
  1195  0767  3449               	retlw	73	;'I'
  1196  0768  3444               	retlw	68	;'D'
  1197  0769  344F               	retlw	79	;'O'
  1198  076A  3400               	retlw	0
  1199  076B                     STR_31:
  1200  076B  3450               	retlw	80	;'P'
  1201  076C  3472               	retlw	114	;'r'
  1202  076D  346F               	retlw	111	;'o'
  1203  076E  3463               	retlw	99	;'c'
  1204  076F  3465               	retlw	101	;'e'
  1205  0770  3473               	retlw	115	;'s'
  1206  0771  346F               	retlw	111	;'o'
  1207  0772  3420               	retlw	32	;' '
  1208  0773  3444               	retlw	68	;'D'
  1209  0774  3465               	retlw	101	;'e'
  1210  0775  3474               	retlw	116	;'t'
  1211  0776  3465               	retlw	101	;'e'
  1212  0777  346E               	retlw	110	;'n'
  1213  0778  3469               	retlw	105	;'i'
  1214  0779  3464               	retlw	100	;'d'
  1215  077A  346F               	retlw	111	;'o'
  1216  077B  3400               	retlw	0
  1217  077C                     STR_14:
  1218  077C  3450               	retlw	80	;'P'
  1219  077D  3455               	retlw	85	;'U'
  1220  077E  344C               	retlw	76	;'L'
  1221  077F  3456               	retlw	86	;'V'
  1222  0780  3445               	retlw	69	;'E'
  1223  0781  3452               	retlw	82	;'R'
  1224  0782  3449               	retlw	73	;'I'
  1225  0783  345A               	retlw	90	;'Z'
  1226  0784  3441               	retlw	65	;'A'
  1227  0785  3443               	retlw	67	;'C'
  1228  0786  3449               	retlw	73	;'I'
  1229  0787  344F               	retlw	79	;'O'
  1230  0788  344E               	retlw	78	;'N'
  1231  0789  3400               	retlw	0
  1232  078A                     STR_22:
  1233  078A  3454               	retlw	84	;'T'
  1234  078B  3445               	retlw	69	;'E'
  1235  078C  344D               	retlw	77	;'M'
  1236  078D  3450               	retlw	80	;'P'
  1237  078E  3445               	retlw	69	;'E'
  1238  078F  3452               	retlw	82	;'R'
  1239  0790  3441               	retlw	65	;'A'
  1240  0791  3454               	retlw	84	;'T'
  1241  0792  3455               	retlw	85	;'U'
  1242  0793  3452               	retlw	82	;'R'
  1243  0794  3441               	retlw	65	;'A'
  1244  0795  343A               	retlw	58	;':'
  1245  0796  3400               	retlw	0
  1246  0797                     STR_20:
  1247  0797  3454               	retlw	84	;'T'
  1248  0798  3449               	retlw	73	;'I'
  1249  0799  3445               	retlw	69	;'E'
  1250  079A  344D               	retlw	77	;'M'
  1251  079B  3450               	retlw	80	;'P'
  1252  079C  344F               	retlw	79	;'O'
  1253  079D  343A               	retlw	58	;':'
  1254  079E  3400               	retlw	0
  1255  079F                     STR_16:
  1256  079F  3446               	retlw	70	;'F'
  1257  07A0  344C               	retlw	76	;'L'
  1258  07A1  3455               	retlw	85	;'U'
  1259  07A2  344A               	retlw	74	;'J'
  1260  07A3  344F               	retlw	79	;'O'
  1261  07A4  3400               	retlw	0
  1262  07A5                     STR_18:
  1263  07A5  3452               	retlw	82	;'R'
  1264  07A6  3450               	retlw	80	;'P'
  1265  07A7  344D               	retlw	77	;'M'
  1266  07A8  343A               	retlw	58	;':'
  1267  07A9  3400               	retlw	0
  1268  07AA                     STR_19:
  1269  07AA  3450               	retlw	80	;'P'
  1270  07AB  3457               	retlw	87	;'W'
  1271  07AC  344D               	retlw	77	;'M'
  1272  07AD  343A               	retlw	58	;':'
  1273  07AE  3400               	retlw	0
  1274  07AF                     STR_15:
  1275  07AF  3446               	retlw	70	;'F'
  1276  07B0  3455               	retlw	85	;'U'
  1277  07B1  3447               	retlw	71	;'G'
  1278  07B2  3441               	retlw	65	;'A'
  1279  07B3  3400               	retlw	0
  1280  07B4                     STR_25:
  1281  07B4  3425               	retlw	37	;'%'
  1282  07B5  3430               	retlw	48	;'0'
  1283  07B6  3432               	retlw	50	;'2'
  1284  07B7  3464               	retlw	100	;'d'
  1285  07B8  3400               	retlw	0
  1286  07B9                     STR_24:
  1287  07B9  3425               	retlw	37	;'%'
  1288  07BA  3430               	retlw	48	;'0'
  1289  07BB  3435               	retlw	53	;'5'
  1290  07BC  3475               	retlw	117	;'u'
  1291  07BD  3400               	retlw	0
  1292  07BE                     STR_5:
  1293  07BE  343E               	retlw	62	;'>'
  1294  07BF  3400               	retlw	0
  1295  07C0                     STR_23:
  1296  07C0  3443               	retlw	67	;'C'
  1297  07C1  3400               	retlw	0
  1298  072D                     
  1299                           	psect	cinit
  1300  0013                     start_initialization:	
  1301                           ; #config settings
  1302                           
  1303  0013                     __initialization:
  1304                           
  1305                           ; Initialize objects allocated to BANK1
  1306  0013  1383               	bcf	3,7	;select IRP bank0
  1307  0014  30C5               	movlw	low (__pdataBANK1+8)
  1308  0015  00FD               	movwf	btemp+-1
  1309  0016  3015               	movlw	high __pidataBANK1
  1310  0017  00FE               	movwf	btemp
  1311  0018  3030               	movlw	low __pidataBANK1
  1312  0019  00FF               	movwf	btemp+1
  1313  001A  30BD               	movlw	low __pdataBANK1
  1314  001B  0084               	movwf	4
  1315  001C  160A  118A  254E  120A  118A  	fcall	init_ram0
  1316                           
  1317                           ; Initialize objects allocated to BANK0
  1318  0021  3070               	movlw	low (__pdataBANK0+4)
  1319  0022  00FD               	movwf	btemp+-1
  1320  0023  3015               	movlw	high __pidataBANK0
  1321  0024  00FE               	movwf	btemp
  1322  0025  301D               	movlw	low __pidataBANK0
  1323  0026  00FF               	movwf	btemp+1
  1324  0027  306C               	movlw	low __pdataBANK0
  1325  0028  0084               	movwf	4
  1326  0029  160A  118A  254E  120A  118A  	fcall	init_ram0
  1327                           
  1328                           ; Initialize objects allocated to COMMON
  1329  002E  160A  118A  2517  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1330  0033  00F8               	movwf	__pdataCOMMON& (0+127)
  1331  0034  160A  118A  2518  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1332  0039  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
  1333                           
  1334                           ; Clear objects allocated to BANK1
  1335  003A  30A0               	movlw	low __pbssBANK1
  1336  003B  0084               	movwf	4
  1337  003C  30BD               	movlw	low (__pbssBANK1+29)
  1338  003D  160A  118A  2528  120A  118A  	fcall	clear_ram0
  1339                           
  1340                           ; Clear objects allocated to BANK0
  1341  0042  3064               	movlw	low __pbssBANK0
  1342  0043  0084               	movwf	4
  1343  0044  306C               	movlw	low (__pbssBANK0+8)
  1344  0045  160A  118A  2528   	fcall	clear_ram0
  1345                           
  1346                           ; Clear objects allocated to COMMON
  1347  0048  01FA               	clrf	__pbssCOMMON& (0+127)
  1348  0049                     end_of_initialization:	
  1349                           ;End of C runtime variable initialization code
  1350                           
  1351  0049                     __end_of__initialization:
  1352  0049  0183               	clrf	3
  1353  004A  160A  118A  2E73   	ljmp	_main	;jump to C main() function
  1354                           
  1355                           	psect	bssCOMMON
  1356  007A                     __pbssCOMMON:
  1357  007A                     _Mostrar:
  1358  007A                     	ds	1
  1359                           
  1360                           	psect	dataCOMMON
  1361  0078                     __pdataCOMMON:
  1362  0078                     _Delay100ms:
  1363  0078                     	ds	2
  1364                           
  1365                           	psect	bssBANK0
  1366  0064                     __pbssBANK0:
  1367  0064                     _Estado_Actual:
  1368  0064                     	ds	1
  1369  0065                     _Reset:
  1370  0065                     	ds	1
  1371  0066                     _Output:
  1372  0066                     	ds	1
  1373  0067                     _mod_tiempo:
  1374  0067                     	ds	1
  1375  0068                     _Seg:
  1376  0068                     	ds	1
  1377  0069                     _Min:
  1378  0069                     	ds	1
  1379  006A                     _Pwm:
  1380  006A                     	ds	1
  1381  006B                     _Modo:
  1382  006B                     	ds	1
  1383                           
  1384                           	psect	dataBANK0
  1385  006C                     __pdataBANK0:
  1386  006C                     _Delay1s:
  1387  006C                     	ds	2
  1388  006E                     _Delay200ms:
  1389  006E                     	ds	2
  1390                           
  1391                           	psect	bssBANK1
  1392  00A0                     __pbssBANK1:
  1393  00A0                     Pant_Inicio@F1327:
  1394  00A0                     	ds	8
  1395  00A8                     _Pw_PwmS1:
  1396  00A8                     	ds	3
  1397  00AB                     _Per_PwmS1:
  1398  00AB                     	ds	3
  1399  00AE                     _Rpm:
  1400  00AE                     	ds	2
  1401  00B0                     _PER_T_S1:
  1402  00B0                     	ds	2
  1403  00B2                     _P_W_T_S1:
  1404  00B2                     	ds	2
  1405  00B4                     _PwmS1:
  1406  00B4                     	ds	2
  1407  00B6                     _freqPwmS1:
  1408  00B6                     	ds	2
  1409  00B8                     _Subestado_Actual:
  1410  00B8                     	ds	1
  1411  00B9                     _Temporizador:
  1412  00B9                     	ds	1
  1413  00BA                     _Act_Variables:
  1414  00BA                     	ds	1
  1415  00BB                     _Temp:
  1416  00BB                     	ds	1
  1417  00BC                     _Act_PwmS1:
  1418  00BC                     	ds	1
  1419                           
  1420                           	psect	dataBANK1
  1421  00BD                     __pdataBANK1:
  1422  00BD                     Pant_Inicio@F1325:
  1423  00BD                     	ds	8
  1424                           
  1425                           	psect	inittext
  1426  154A                     init_fetch0:	
  1427                           ;	Called with low address in FSR and high address in W
  1428                           
  1429  154A  087E               	movf	126,w
  1430  154B  008A               	movwf	10
  1431  154C  087F               	movf	127,w
  1432  154D  0082               	movwf	2
  1433  154E                     init_ram0:	
  1434                           ;Called with:
  1435                           ;	high address of idata address in btemp 
  1436                           ;	low address of idata address in btemp+1 
  1437                           ;	low address of data in FSR
  1438                           ;	high address + 1 of data in btemp-1
  1439                           
  1440  154E  254A  160A  118A   	fcall	init_fetch0
  1441  1551  0080               	movwf	0
  1442  1552  0A84               	incf	4,f
  1443  1553  0804               	movf	4,w
  1444  1554  067D               	xorwf	125,w
  1445  1555  1903               	btfsc	3,2
  1446  1556  3400               	retlw	0
  1447  1557  0AFF               	incf	127,f
  1448  1558  1903               	btfsc	3,2
  1449  1559  0AFE               	incf	126,f
  1450  155A  2D4E               	goto	init_ram0
  1451                           
  1452                           	psect	clrtext
  1453  1528                     clear_ram0:	
  1454                           ;	Called with FSR containing the base address, and
  1455                           ;	W with the last address+1
  1456                           
  1457  1528  0064               	clrwdt	;clear the watchdog before getting into this loop
  1458  1529                     clrloop0:
  1459  1529  0180               	clrf	0	;clear RAM location pointed to by FSR
  1460  152A  0A84               	incf	4,f	;increment pointer
  1461  152B  0604               	xorwf	4,w	;XOR with final address
  1462  152C  1903               	btfsc	3,2	;have we reached the end yet?
  1463  152D  3400               	retlw	0	;all done for this memory range, return
  1464  152E  0604               	xorwf	4,w	;XOR again to restore value
  1465  152F  2D29               	goto	clrloop0	;do the next byte
  1466                           
  1467                           	psect	cstackBANK1
  1468  00C5                     __pcstackBANK1:
  1469  00C5                     MEF_Subest_Actualizacion@i:
  1470                           
  1471                           ; 1 bytes @ 0x0
  1472  00C5                     	ds	1
  1473  00C6                     ??_MEF_Actualizacion:
  1474                           
  1475                           ; 1 bytes @ 0x1
  1476  00C6                     	ds	2
  1477                           
  1478                           	psect	cstackCOMMON
  1479  0070                     __pcstackCOMMON:
  1480  0070                     ?_isdigit:
  1481  0070                     ?_Pines_Init:	
  1482                           ; 1 bit 
  1483                           
  1484  0070                     ?_MEF_Init:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?_LCD_init:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ?_Pwm_init:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?_Adc_init:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     ?_MEF_Actualizacion:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?_Task_Ready:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ??_Task_Ready:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_Pant_Inicio:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_Select_Modo:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_MEF_Subest_Actualizacion:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ?_Pant_Modos:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_Pant_Val_Act:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_Lec_Adc_Modo_Pulv:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_Lec_Adc_Modo_Fuga:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ?_Lec_Adc_Modo_Flujo:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_Salida_Modo_Pulv:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_Salida_Modo_Fuga:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ?_Salida_Modo_Flujo:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_Detener:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_Pant_Temporizador:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ?_LCD_command:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_Pant_Menu:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_Pant_Selector:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_Pant_Detener:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_Adc_Rpm_Read:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_Adc_Pwm_Read:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ?_Adc_Min_Read:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ?_Adc_Temp_Read:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ?_LCD_date:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_main:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ?_Antirrebote:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_ISR:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ??_ISR:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583                           
  1584                           ; 1 bytes @ 0x0
  1585  0070                     	ds	3
  1586  0073                     ??_Pines_Init:
  1587  0073                     ??_MEF_Init:	
  1588                           ; 1 bytes @ 0x3
  1589                           
  1590  0073                     ??_Pwm_init:	
  1591                           ; 1 bytes @ 0x3
  1592                           
  1593  0073                     ??_Adc_init:	
  1594                           ; 1 bytes @ 0x3
  1595                           
  1596  0073                     ??_Salida_Modo_Pulv:	
  1597                           ; 1 bytes @ 0x3
  1598                           
  1599  0073                     ??_Salida_Modo_Fuga:	
  1600                           ; 1 bytes @ 0x3
  1601                           
  1602  0073                     ??_Salida_Modo_Flujo:	
  1603                           ; 1 bytes @ 0x3
  1604                           
  1605  0073                     ??_LCD_command:	
  1606                           ; 1 bytes @ 0x3
  1607                           
  1608  0073                     ??_LCD_date:	
  1609                           ; 1 bytes @ 0x3
  1610                           
  1611  0073                     ??_isdigit:	
  1612                           ; 1 bytes @ 0x3
  1613                           
  1614  0073                     ??_Antirrebote:	
  1615                           ; 1 bytes @ 0x3
  1616                           
  1617  0073                     ?_Adc:	
  1618                           ; 1 bytes @ 0x3
  1619                           
  1620  0073                     ?___lwdiv:	
  1621                           ; 2 bytes @ 0x3
  1622                           
  1623  0073                     ?___ftpack:	
  1624                           ; 2 bytes @ 0x3
  1625                           
  1626  0073                     _isdigit$1272:	
  1627                           ; 3 bytes @ 0x3
  1628                           
  1629  0073                     ___lwdiv@divisor:	
  1630                           ; 1 bytes @ 0x3
  1631                           
  1632  0073                     ___ftpack@arg:	
  1633                           ; 2 bytes @ 0x3
  1634                           
  1635                           
  1636                           ; 3 bytes @ 0x3
  1637  0073                     	ds	1
  1638  0074                     isdigit@c:
  1639                           
  1640                           ; 1 bytes @ 0x4
  1641  0074                     	ds	1
  1642  0075                     ??_Adc:
  1643  0075                     LCD_command@cmd:	
  1644                           ; 1 bytes @ 0x5
  1645                           
  1646  0075                     LCD_date@date:	
  1647                           ; 1 bytes @ 0x5
  1648                           
  1649  0075                     ___lwdiv@dividend:	
  1650                           ; 1 bytes @ 0x5
  1651                           
  1652                           
  1653                           ; 2 bytes @ 0x5
  1654  0075                     	ds	1
  1655  0076                     ??_LCD_init:
  1656  0076                     ?_LCD_character:	
  1657                           ; 1 bytes @ 0x6
  1658                           
  1659  0076                     ??_LCD_array:	
  1660                           ; 1 bytes @ 0x6
  1661                           
  1662  0076                     ??_LCD_xy:	
  1663                           ; 1 bytes @ 0x6
  1664                           
  1665  0076                     LCD_character@caracter:	
  1666                           ; 1 bytes @ 0x6
  1667                           
  1668  0076                     ___ftpack@exp:	
  1669                           ; 1 bytes @ 0x6
  1670                           
  1671                           
  1672                           ; 1 bytes @ 0x6
  1673  0076                     	ds	1
  1674  0077                     ??_LCD_character:
  1675  0077                     ??___wmul:	
  1676                           ; 1 bytes @ 0x7
  1677                           
  1678  0077                     ??___lwdiv:	
  1679                           ; 1 bytes @ 0x7
  1680                           
  1681  0077                     ??___lwmod:	
  1682                           ; 1 bytes @ 0x7
  1683                           
  1684  0077                     ___ftpack@sign:	
  1685                           ; 1 bytes @ 0x7
  1686                           
  1687  0077                     ___lwmod@counter:	
  1688                           ; 1 bytes @ 0x7
  1689                           
  1690                           
  1691                           ; 1 bytes @ 0x7
  1692  0077                     	ds	1
  1693  0078                     ??_Select_Modo:
  1694  0078                     ??_Pant_Modos:	
  1695                           ; 1 bytes @ 0x8
  1696                           
  1697  0078                     ??_Lec_Adc_Modo_Pulv:	
  1698                           ; 1 bytes @ 0x8
  1699                           
  1700  0078                     ??_Lec_Adc_Modo_Fuga:	
  1701                           ; 1 bytes @ 0x8
  1702                           
  1703  0078                     ??_Lec_Adc_Modo_Flujo:	
  1704                           ; 1 bytes @ 0x8
  1705                           
  1706  0078                     ??_Pant_Menu:	
  1707                           ; 1 bytes @ 0x8
  1708                           
  1709  0078                     ??_Pant_Selector:	
  1710                           ; 1 bytes @ 0x8
  1711                           
  1712  0078                     ??_Pant_Detener:	
  1713                           ; 1 bytes @ 0x8
  1714                           
  1715  0078                     ??_Adc_Pwm_Read:	
  1716                           ; 1 bytes @ 0x8
  1717                           
  1718  0078                     ??_Adc_Min_Read:	
  1719                           ; 1 bytes @ 0x8
  1720                           
  1721  0078                     ??_Adc_Temp_Read:	
  1722                           ; 1 bytes @ 0x8
  1723                           
  1724  0078                     ??_main:	
  1725                           ; 1 bytes @ 0x8
  1726                           
  1727  0078                     ??___awtoft:	
  1728                           ; 1 bytes @ 0x8
  1729                           
  1730                           
  1731                           	psect	cstackBANK0
  1732  0020                     __pcstackBANK0:	
  1733                           ; 1 bytes @ 0x8
  1734                           
  1735  0020                     ?_LCD_array:
  1736  0020                     ?_LCD_xy:	
  1737                           ; 1 bytes @ 0x0
  1738                           
  1739  0020                     ??___ftpack:	
  1740                           ; 1 bytes @ 0x0
  1741                           
  1742  0020                     LCD_init@i:	
  1743                           ; 1 bytes @ 0x0
  1744                           
  1745  0020                     LCD_character@adress:	
  1746                           ; 1 bytes @ 0x0
  1747                           
  1748  0020                     Adc@channel:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0020                     ___lwdiv@counter:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0020                     LCD_array@x:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0020                     LCD_xy@x:	
  1758                           ; 2 bytes @ 0x0
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x0
  1762  0020                     	ds	1
  1763  0021                     LCD_character@i:
  1764  0021                     Adc@convertion:	
  1765                           ; 1 bytes @ 0x1
  1766                           
  1767  0021                     ___lwdiv@quotient:	
  1768                           ; 2 bytes @ 0x1
  1769                           
  1770                           
  1771                           ; 2 bytes @ 0x1
  1772  0021                     	ds	1
  1773  0022                     LCD_array@y:
  1774  0022                     LCD_xy@y:	
  1775                           ; 2 bytes @ 0x2
  1776                           
  1777                           
  1778                           ; 2 bytes @ 0x2
  1779  0022                     	ds	1
  1780  0023                     ?___wmul:
  1781  0023                     ?___lwmod:	
  1782                           ; 2 bytes @ 0x3
  1783                           
  1784  0023                     ?___awtoft:	
  1785                           ; 2 bytes @ 0x3
  1786                           
  1787  0023                     ___wmul@multiplier:	
  1788                           ; 3 bytes @ 0x3
  1789                           
  1790  0023                     ___awtoft@c:	
  1791                           ; 2 bytes @ 0x3
  1792                           
  1793  0023                     ___lwmod@divisor:	
  1794                           ; 2 bytes @ 0x3
  1795                           
  1796                           
  1797                           ; 2 bytes @ 0x3
  1798  0023                     	ds	1
  1799  0024                     LCD_array@date:
  1800                           
  1801                           ; 2 bytes @ 0x4
  1802  0024                     	ds	1
  1803  0025                     ___wmul@multiplicand:
  1804  0025                     ___lwmod@dividend:	
  1805                           ; 2 bytes @ 0x5
  1806                           
  1807                           
  1808                           ; 2 bytes @ 0x5
  1809  0025                     	ds	1
  1810  0026                     ??_Pant_Inicio:
  1811  0026                     ??_Detener:	
  1812                           ; 1 bytes @ 0x6
  1813                           
  1814  0026                     ___awtoft@sign:	
  1815                           ; 1 bytes @ 0x6
  1816                           
  1817                           
  1818                           ; 1 bytes @ 0x6
  1819  0026                     	ds	1
  1820  0027                     ?___ftmul:
  1821  0027                     ___wmul@product:	
  1822                           ; 3 bytes @ 0x7
  1823                           
  1824  0027                     ___ftmul@f1:	
  1825                           ; 2 bytes @ 0x7
  1826                           
  1827                           
  1828                           ; 3 bytes @ 0x7
  1829  0027                     	ds	2
  1830  0029                     ?_sprintf:
  1831  0029                     Detener@i:	
  1832                           ; 2 bytes @ 0x9
  1833                           
  1834  0029                     sprintf@f:	
  1835                           ; 1 bytes @ 0x9
  1836                           
  1837                           
  1838                           ; 1 bytes @ 0x9
  1839  0029                     	ds	1
  1840  002A                     ___ftmul@f2:
  1841  002A                     Pant_Inicio@caracter1:	
  1842                           ; 3 bytes @ 0xA
  1843                           
  1844                           
  1845                           ; 8 bytes @ 0xA
  1846  002A                     	ds	2
  1847  002C                     ??_sprintf:
  1848                           
  1849                           ; 1 bytes @ 0xC
  1850  002C                     	ds	1
  1851  002D                     ??___ftmul:
  1852                           
  1853                           ; 1 bytes @ 0xD
  1854  002D                     	ds	2
  1855  002F                     sprintf@prec:
  1856                           
  1857                           ; 1 bytes @ 0xF
  1858  002F                     	ds	1
  1859  0030                     sprintf@ap:
  1860  0030                     ___ftmul@exp:	
  1861                           ; 1 bytes @ 0x10
  1862                           
  1863                           
  1864                           ; 1 bytes @ 0x10
  1865  0030                     	ds	1
  1866  0031                     sprintf@val:
  1867  0031                     ___ftmul@f3_as_product:	
  1868                           ; 2 bytes @ 0x11
  1869                           
  1870                           
  1871                           ; 3 bytes @ 0x11
  1872  0031                     	ds	1
  1873  0032                     Pant_Inicio@caracter:
  1874                           
  1875                           ; 8 bytes @ 0x12
  1876  0032                     	ds	1
  1877  0033                     sprintf@flag:
  1878                           
  1879                           ; 1 bytes @ 0x13
  1880  0033                     	ds	1
  1881  0034                     ___ftmul@cntr:
  1882  0034                     sprintf@width:	
  1883                           ; 1 bytes @ 0x14
  1884                           
  1885                           
  1886                           ; 2 bytes @ 0x14
  1887  0034                     	ds	1
  1888  0035                     ___ftmul@sign:
  1889                           
  1890                           ; 1 bytes @ 0x15
  1891  0035                     	ds	1
  1892  0036                     ?___ftdiv:
  1893  0036                     sprintf@c:	
  1894                           ; 3 bytes @ 0x16
  1895                           
  1896  0036                     ___ftdiv@f2:	
  1897                           ; 1 bytes @ 0x16
  1898                           
  1899                           
  1900                           ; 3 bytes @ 0x16
  1901  0036                     	ds	1
  1902  0037                     sprintf@sp:
  1903                           
  1904                           ; 1 bytes @ 0x17
  1905  0037                     	ds	1
  1906  0038                     ??_Pant_Val_Act:
  1907  0038                     ??_Pant_Temporizador:	
  1908                           ; 1 bytes @ 0x18
  1909                           
  1910                           
  1911                           ; 1 bytes @ 0x18
  1912  0038                     	ds	1
  1913  0039                     ___ftdiv@f1:
  1914                           
  1915                           ; 3 bytes @ 0x19
  1916  0039                     	ds	1
  1917  003A                     Pant_Val_Act@buffer:
  1918  003A                     Pant_Temporizador@buffer:	
  1919                           ; 20 bytes @ 0x1A
  1920                           
  1921                           
  1922                           ; 20 bytes @ 0x1A
  1923  003A                     	ds	2
  1924  003C                     ??___ftdiv:
  1925                           
  1926                           ; 1 bytes @ 0x1C
  1927  003C                     	ds	3
  1928  003F                     ___ftdiv@cntr:
  1929                           
  1930                           ; 1 bytes @ 0x1F
  1931  003F                     	ds	1
  1932  0040                     ___ftdiv@f3:
  1933                           
  1934                           ; 3 bytes @ 0x20
  1935  0040                     	ds	3
  1936  0043                     ___ftdiv@exp:
  1937                           
  1938                           ; 1 bytes @ 0x23
  1939  0043                     	ds	1
  1940  0044                     ___ftdiv@sign:
  1941                           
  1942                           ; 1 bytes @ 0x24
  1943  0044                     	ds	1
  1944  0045                     ?___fttol:
  1945  0045                     ___fttol@f1:	
  1946                           ; 4 bytes @ 0x25
  1947                           
  1948                           
  1949                           ; 3 bytes @ 0x25
  1950  0045                     	ds	4
  1951  0049                     ??___fttol:
  1952                           
  1953                           ; 1 bytes @ 0x29
  1954  0049                     	ds	3
  1955  004C                     ___fttol@sign1:
  1956                           
  1957                           ; 1 bytes @ 0x2C
  1958  004C                     	ds	1
  1959  004D                     ___fttol@lval:
  1960                           
  1961                           ; 4 bytes @ 0x2D
  1962  004D                     	ds	4
  1963  0051                     ___fttol@exp1:
  1964                           
  1965                           ; 1 bytes @ 0x31
  1966  0051                     	ds	1
  1967  0052                     ??_Adc_Rpm_Read:
  1968  0052                     _Adc_Pwm_Read$1470:	
  1969                           ; 1 bytes @ 0x32
  1970                           
  1971  0052                     _Adc_Min_Read$1471:	
  1972                           ; 3 bytes @ 0x32
  1973                           
  1974  0052                     _Adc_Temp_Read$1472:	
  1975                           ; 3 bytes @ 0x32
  1976                           
  1977                           
  1978                           ; 3 bytes @ 0x32
  1979  0052                     	ds	4
  1980  0056                     _Adc_Rpm_Read$1469:
  1981                           
  1982                           ; 3 bytes @ 0x36
  1983  0056                     	ds	3
  1984  0059                     Adc_Rpm_Read@cent:
  1985                           
  1986                           ; 2 bytes @ 0x39
  1987  0059                     	ds	2
  1988  005B                     Adc_Rpm_Read@uni_m:
  1989                           
  1990                           ; 2 bytes @ 0x3B
  1991  005B                     	ds	2
  1992  005D                     Adc_Rpm_Read@dec_m:
  1993                           
  1994                           ; 2 bytes @ 0x3D
  1995  005D                     	ds	2
  1996  005F                     Adc_Rpm_Read@valor:
  1997                           
  1998                           ; 2 bytes @ 0x3F
  1999  005F                     	ds	2
  2000  0061                     ??_MEF_Subest_Actualizacion:
  2001                           
  2002                           ; 1 bytes @ 0x41
  2003  0061                     	ds	3
  2004                           
  2005                           	psect	maintext
  2006  1673                     __pmaintext:	
  2007 ;;
  2008 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2009 ;;
  2010 ;; *************** function _main *****************
  2011 ;; Defined at:
  2012 ;;		line 35 in file "Main.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : B00/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0
  2028 ;;      Temps:          0       0       0       0       0
  2029 ;;      Totals:         0       0       0       0       0
  2030 ;;Total ram usage:        0 bytes
  2031 ;; Hardware stack levels required when called:    8
  2032 ;; This function calls:
  2033 ;;		_Adc_init
  2034 ;;		_LCD_init
  2035 ;;		_MEF_Actualizacion
  2036 ;;		_MEF_Init
  2037 ;;		_Pines_Init
  2038 ;;		_Pwm_init
  2039 ;; This function is called by:
  2040 ;;		Startup code after reset
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           
  2045                           ;psect for function _main
  2046  1673                     _main:
  2047                           
  2048                           ;Main.c: 38:     Pines_Init();
  2049                           
  2050                           ;incstack = 0
  2051                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2052  1673  160A  118A  2586  160A  118A  	fcall	_Pines_Init
  2053                           
  2054                           ;Main.c: 39:     MEF_Init();
  2055  1678  160A  118A  2521  160A  118A  	fcall	_MEF_Init
  2056                           
  2057                           ;Main.c: 40:     LCD_init();
  2058  167D  120A  158A  2282  160A  118A  	fcall	_LCD_init
  2059                           
  2060                           ;Main.c: 41:     Pwm_init();
  2061  1682  160A  118A  259F  160A  118A  	fcall	_Pwm_init
  2062                           
  2063                           ;Main.c: 42:     Adc_init();
  2064  1687  160A  118A  25DC  160A  118A  	fcall	_Adc_init
  2065                           
  2066                           ;Main.c: 44:     TMR1IE=1,TMR1IF=1;
  2067  168C  1683               	bsf	3,5	;RP0=1, select bank1
  2068  168D  1303               	bcf	3,6	;RP1=0, select bank1
  2069  168E  140C               	bsf	12,0	;volatile
  2070  168F  1283               	bcf	3,5	;RP0=0, select bank0
  2071  1690  1303               	bcf	3,6	;RP1=0, select bank0
  2072  1691  140C               	bsf	12,0	;volatile
  2073                           
  2074                           ;Main.c: 46:     WDTCONbits.SWDTEN = 1;
  2075  1692  1283               	bcf	3,5	;RP0=0, select bank2
  2076  1693  1703               	bsf	3,6	;RP1=1, select bank2
  2077  1694  1405               	bsf	5,0	;volatile
  2078                           
  2079                           ;Main.c: 47:     WDTCONbits.WDTPS = 0b1010;
  2080  1695  0805               	movf	5,w	;volatile
  2081  1696  39E1               	andlw	-31
  2082  1697  3814               	iorlw	20
  2083  1698  0085               	movwf	5	;volatile
  2084  1699                     l4864:
  2085                           
  2086                           ;Main.c: 50:     {;Main.c: 51:         MEF_Actualizacion();
  2087  1699  120A  158A  20E6  160A  118A  	fcall	_MEF_Actualizacion
  2088  169E  2E99               	goto	l4864
  2089  169F                     __end_of_main:
  2090                           
  2091                           	psect	text1
  2092  159F                     __ptext1:	
  2093 ;; *************** function _Pwm_init *****************
  2094 ;; Defined at:
  2095 ;;		line 5 in file "Pwm_Soft.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;		None
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  1    wreg      void 
  2102 ;; Registers used:
  2103 ;;		wreg, status,2, status,0
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2109 ;;      Params:         0       0       0       0       0
  2110 ;;      Locals:         0       0       0       0       0
  2111 ;;      Temps:          0       0       0       0       0
  2112 ;;      Totals:         0       0       0       0       0
  2113 ;;Total ram usage:        0 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    2
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           
  2124                           ;psect for function _Pwm_init
  2125  159F                     _Pwm_init:
  2126                           
  2127                           ;Pwm_Soft.c: 7:     ANSELHbits.ANS11 = 0;
  2128                           
  2129                           ;incstack = 0
  2130                           ; Regs used in _Pwm_init: [wreg+status,2+status,0]
  2131  159F  1683               	bsf	3,5	;RP0=1, select bank3
  2132  15A0  1703               	bsf	3,6	;RP1=1, select bank3
  2133  15A1  1189               	bcf	9,3	;volatile
  2134                           
  2135                           ;Pwm_Soft.c: 10:     T1CONbits.TMR1GE = 0;
  2136  15A2  1283               	bcf	3,5	;RP0=0, select bank0
  2137  15A3  1303               	bcf	3,6	;RP1=0, select bank0
  2138  15A4  1310               	bcf	16,6	;volatile
  2139                           
  2140                           ;Pwm_Soft.c: 11:     T1CONbits.T1SYNC = 1;
  2141  15A5  1510               	bsf	16,2	;volatile
  2142                           
  2143                           ;Pwm_Soft.c: 12:     T1CONbits.TMR1CS = 0;
  2144  15A6  1090               	bcf	16,1	;volatile
  2145                           
  2146                           ;Pwm_Soft.c: 13:     T1CONbits.T1CKPS = 0b01;
  2147  15A7  0810               	movf	16,w	;volatile
  2148  15A8  39CF               	andlw	-49
  2149  15A9  3810               	iorlw	16
  2150  15AA  0090               	movwf	16	;volatile
  2151                           
  2152                           ;Pwm_Soft.c: 14:     T1CONbits.TMR1ON = 1;
  2153  15AB  1410               	bsf	16,0	;volatile
  2154                           
  2155                           ;Pwm_Soft.c: 16:     TMR1 = 65285;
  2156  15AC  30FF               	movlw	255
  2157  15AD  008F               	movwf	15	;volatile
  2158  15AE  3005               	movlw	5
  2159  15AF  008E               	movwf	14	;volatile
  2160                           
  2161                           ;Pwm_Soft.c: 19:     PEIE = 1;
  2162  15B0  170B               	bsf	11,6	;volatile
  2163                           
  2164                           ;Pwm_Soft.c: 20:     GIE = 1;
  2165  15B1  178B               	bsf	11,7	;volatile
  2166                           
  2167                           ;Pwm_Soft.c: 21:     TMR1IE = 0;
  2168  15B2  1683               	bsf	3,5	;RP0=1, select bank1
  2169  15B3  1303               	bcf	3,6	;RP1=0, select bank1
  2170  15B4  100C               	bcf	12,0	;volatile
  2171                           
  2172                           ;Pwm_Soft.c: 22:     TMR1IF = 1;
  2173  15B5  1283               	bcf	3,5	;RP0=0, select bank0
  2174  15B6  1303               	bcf	3,6	;RP1=0, select bank0
  2175  15B7  140C               	bsf	12,0	;volatile
  2176  15B8  0008               	return
  2177  15B9                     __end_of_Pwm_init:
  2178                           
  2179                           	psect	text2
  2180  1586                     __ptext2:	
  2181 ;; *************** function _Pines_Init *****************
  2182 ;; Defined at:
  2183 ;;		line 57 in file "Main.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         0       0       0       0       0
  2198 ;;      Locals:         0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0
  2200 ;;      Totals:         0       0       0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    2
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _Pines_Init
  2213  1586                     _Pines_Init:
  2214                           
  2215                           ;Main.c: 60:     TRISAbits.TRISA5 = 0;
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in _Pines_Init: [wreg+status,2]
  2219  1586  1683               	bsf	3,5	;RP0=1, select bank1
  2220  1587  1303               	bcf	3,6	;RP1=0, select bank1
  2221  1588  1285               	bcf	5,5	;volatile
  2222                           
  2223                           ;Main.c: 61:     PORTA = 0;
  2224  1589  1283               	bcf	3,5	;RP0=0, select bank0
  2225  158A  1303               	bcf	3,6	;RP1=0, select bank0
  2226  158B  0185               	clrf	5	;volatile
  2227                           
  2228                           ;Main.c: 62:     PORTB = 0;
  2229  158C  0186               	clrf	6	;volatile
  2230                           
  2231                           ;Main.c: 63:     PORTC = 0;
  2232  158D  0187               	clrf	7	;volatile
  2233                           
  2234                           ;Main.c: 64:     TRISB = 0xFF;
  2235  158E  30FF               	movlw	255
  2236  158F  1683               	bsf	3,5	;RP0=1, select bank1
  2237  1590  1303               	bcf	3,6	;RP1=0, select bank1
  2238  1591  0086               	movwf	6	;volatile
  2239                           
  2240                           ;Main.c: 65:     TRISC = 0x00;
  2241  1592  0187               	clrf	7	;volatile
  2242                           
  2243                           ;Main.c: 66:     ANSELHbits.ANS12 = 0;
  2244  1593  1683               	bsf	3,5	;RP0=1, select bank3
  2245  1594  1703               	bsf	3,6	;RP1=1, select bank3
  2246  1595  1209               	bcf	9,4	;volatile
  2247                           
  2248                           ;Main.c: 67:     ANSELHbits.ANS11 = 0;
  2249  1596  1189               	bcf	9,3	;volatile
  2250                           
  2251                           ;Main.c: 68:     ANSELHbits.ANS10 = 0;
  2252  1597  1109               	bcf	9,2	;volatile
  2253                           
  2254                           ;Main.c: 69:     ANSELHbits.ANS8 = 0;
  2255  1598  1009               	bcf	9,0	;volatile
  2256                           
  2257                           ;Main.c: 70:     ANSELHbits.ANS9 = 0;
  2258  1599  1089               	bcf	9,1	;volatile
  2259                           
  2260                           ;Main.c: 71:     ANSELbits.ANS4 = 0;
  2261  159A  1208               	bcf	8,4	;volatile
  2262                           
  2263                           ;Main.c: 73:     TRISBbits.TRISB4 = 0;
  2264  159B  1683               	bsf	3,5	;RP0=1, select bank1
  2265  159C  1303               	bcf	3,6	;RP1=0, select bank1
  2266  159D  1206               	bcf	6,4	;volatile
  2267  159E  0008               	return
  2268  159F                     __end_of_Pines_Init:
  2269                           
  2270                           	psect	text3
  2271  1521                     __ptext3:	
  2272 ;; *************** function _MEF_Init *****************
  2273 ;; Defined at:
  2274 ;;		line 40 in file "MEF.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		status,2
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2288 ;;      Params:         0       0       0       0       0
  2289 ;;      Locals:         0       0       0       0       0
  2290 ;;      Temps:          0       0       0       0       0
  2291 ;;      Totals:         0       0       0       0       0
  2292 ;;Total ram usage:        0 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    2
  2295 ;; This function calls:
  2296 ;;		Nothing
  2297 ;; This function is called by:
  2298 ;;		_main
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           
  2303                           ;psect for function _MEF_Init
  2304  1521                     _MEF_Init:
  2305                           
  2306                           ;MEF.c: 42:     Estado_Actual = ESTADO_INICIO;
  2307                           
  2308                           ;incstack = 0
  2309                           ; Regs used in _MEF_Init: [status,2]
  2310  1521  1283               	bcf	3,5	;RP0=0, select bank0
  2311  1522  1303               	bcf	3,6	;RP1=0, select bank0
  2312  1523  01E4               	clrf	_Estado_Actual
  2313                           
  2314                           ;MEF.c: 43:     Subestado_Actual = SUBEST_INICIAL;
  2315  1524  1683               	bsf	3,5	;RP0=1, select bank1
  2316  1525  1303               	bcf	3,6	;RP1=0, select bank1
  2317  1526  01B8               	clrf	_Subestado_Actual^(0+128)
  2318  1527  0008               	return
  2319  1528                     __end_of_MEF_Init:
  2320                           
  2321                           	psect	text4
  2322  08E6                     __ptext4:	
  2323 ;; *************** function _MEF_Actualizacion *****************
  2324 ;; Defined at:
  2325 ;;		line 48 in file "MEF.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2339 ;;      Params:         0       0       0       0       0
  2340 ;;      Locals:         0       0       0       0       0
  2341 ;;      Temps:          0       0       2       0       0
  2342 ;;      Totals:         0       0       2       0       0
  2343 ;;Total ram usage:        2 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    7
  2346 ;; This function calls:
  2347 ;;		_Antirrebote
  2348 ;;		_MEF_Subest_Actualizacion
  2349 ;;		_Pant_Inicio
  2350 ;;		_Select_Modo
  2351 ;; This function is called by:
  2352 ;;		_main
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function _MEF_Actualizacion
  2358  08E6                     _MEF_Actualizacion:
  2359                           
  2360                           ;MEF.c: 50:     switch(Estado_Actual)
  2361                           
  2362                           ;incstack = 0
  2363                           ; Regs used in _MEF_Actualizacion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2364  08E6  2928               	goto	l4762
  2365  08E7                     l4712:
  2366                           
  2367                           ;MEF.c: 53:         {;MEF.c: 54:             Pant_Inicio();
  2368  08E7  120A  158A  252A   	fcall	_Pant_Inicio
  2369  08EA                     l4714:
  2370                           
  2371                           ;MEF.c: 56:             Estado_Actual = ESTADO_MENU;
  2372  08EA  1283               	bcf	3,5	;RP0=0, select bank0
  2373  08EB  1303               	bcf	3,6	;RP1=0, select bank0
  2374  08EC  01E4               	clrf	_Estado_Actual
  2375  08ED  0AE4               	incf	_Estado_Actual,f
  2376                           
  2377                           ;MEF.c: 57:         break;
  2378  08EE  0008               	return
  2379  08EF                     l4716:
  2380                           
  2381                           ;MEF.c: 60:         {;MEF.c: 61:             Select_Modo();
  2382  08EF  160A  118A  264C  120A  158A  	fcall	_Select_Modo
  2383                           
  2384                           ;MEF.c: 63:             if(PORTBbits.RB1 && Modo==1) Estado_Actual = ESTADO_MODO_PULV,An
      +                          tirrebote();
  2385  08F4  1283               	bcf	3,5	;RP0=0, select bank0
  2386  08F5  1303               	bcf	3,6	;RP1=0, select bank0
  2387  08F6  1C86               	btfss	6,1	;volatile
  2388  08F7  2909               	goto	l216
  2389  08F8  036B               	decf	_Modo,w
  2390  08F9  1D03               	btfss	3,2
  2391  08FA  2909               	goto	l216
  2392  08FB  3002               	movlw	2
  2393  08FC  2902               	goto	L1
  2394  08FD                     l4726:
  2395  08FD  3002               	movlw	2
  2396  08FE  066B               	xorwf	_Modo,w
  2397  08FF  1D03               	btfss	3,2
  2398  0900  290B               	goto	l218
  2399  0901  3003               	movlw	3
  2400  0902                     L1:
  2401  0902  00FF               	movwf	127
  2402  0903  087F               	movf	127,w
  2403  0904  00E4               	movwf	_Estado_Actual
  2404  0905  160A  118A  2625   	fcall	_Antirrebote
  2405  0908  0008               	return
  2406  0909                     l216:	
  2407                           ;MEF.c: 64:             else if(PORTBbits.RB1 && Modo==2) Estado_Actual = ESTADO_MODO_FU
      +                          GA,Antirrebote();
  2408                           
  2409  0909  1886               	btfsc	6,1	;volatile
  2410  090A  28FD               	goto	l4726
  2411  090B                     l218:	
  2412                           ;MEF.c: 65:             else if(PORTBbits.RB1 && Modo==3) Estado_Actual = ESTADO_MODO_FL
      +                          UJO,Antirrebote();
  2413                           
  2414  090B  1C86               	btfss	6,1	;volatile
  2415  090C  0008               	return
  2416  090D  3003               	movlw	3
  2417  090E  066B               	xorwf	_Modo,w
  2418  090F  1D03               	btfss	3,2
  2419  0910  0008               	return
  2420  0911  3004               	movlw	4
  2421  0912  2902               	goto	L1
  2422  0913                     l4738:	
  2423                           ;MEF.c: 66:         break;
  2424                           
  2425                           
  2426                           ;MEF.c: 69:         {;MEF.c: 70:             MEF_Subest_Actualizacion();
  2427  0913  120A  118A  220C  120A  158A  	fcall	_MEF_Subest_Actualizacion
  2428                           
  2429                           ;MEF.c: 72:             if(Reset) Estado_Actual = ESTADO_MODO_RESET;
  2430  0918  1283               	bcf	3,5	;RP0=0, select bank0
  2431  0919  1303               	bcf	3,6	;RP1=0, select bank0
  2432  091A  0865               	movf	_Reset,w
  2433  091B  1903               	btfsc	3,2
  2434  091C  0008               	return
  2435  091D  3005               	movlw	5
  2436  091E  00FF               	movwf	127
  2437  091F  087F               	movf	127,w
  2438  0920  00E4               	movwf	_Estado_Actual
  2439  0921  0008               	return
  2440  0922                     l4744:
  2441  0922                     l4750:	
  2442                           ;MEF.c: 79:             if(Reset) Estado_Actual = ESTADO_MODO_RESET;
  2443                           
  2444                           ;MEF.c: 76:         {;MEF.c: 77:             MEF_Subest_Actualizacion();
  2445                           
  2446  0922  2913               	goto	l4738
  2447  0923                     l4756:	
  2448                           ;MEF.c: 86:             if(Reset) Estado_Actual = ESTADO_MODO_RESET;
  2449                           
  2450                           ;MEF.c: 83:         {;MEF.c: 84:             MEF_Subest_Actualizacion();
  2451                           
  2452                           
  2453                           ;MEF.c: 90:         {;MEF.c: 91:             Subestado_Actual = SUBEST_INICIAL;
  2454  0923  01B8               	clrf	_Subestado_Actual^(0+128)
  2455                           
  2456                           ;MEF.c: 92:             Reset = 0;
  2457  0924  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0925  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0926  01E5               	clrf	_Reset
  2460  0927  28EA               	goto	l4714
  2461  0928                     l4762:
  2462  0928  1283               	bcf	3,5	;RP0=0, select bank0
  2463  0929  1303               	bcf	3,6	;RP1=0, select bank0
  2464  092A  0864               	movf	_Estado_Actual,w
  2465  092B  1683               	bsf	3,5	;RP0=1, select bank1
  2466  092C  1303               	bcf	3,6	;RP1=0, select bank1
  2467  092D  00C6               	movwf	??_MEF_Actualizacion^(0+128)
  2468  092E  01C7               	clrf	(??_MEF_Actualizacion^(0+128)+1)
  2469                           
  2470                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2471                           ; Switch size 1, requested type "simple"
  2472                           ; Number of cases is 1, Range of values is 0 to 0
  2473                           ; switch strategies available:
  2474                           ; Name         Instructions Cycles
  2475                           ; simple_byte            4     3 (average)
  2476                           ; direct_byte           11     8 (fixed)
  2477                           ; jumptable            260     6 (fixed)
  2478                           ;	Chosen strategy is simple_byte
  2479  092F  0847               	movf	(??_MEF_Actualizacion+1)^(0+128),w
  2480  0930  3A00               	xorlw	0	; case 0
  2481  0931  1903               	skipnz
  2482  0932  2934               	goto	l5034
  2483  0933  2948               	goto	l228
  2484  0934                     l5034:
  2485                           
  2486                           ; Switch size 1, requested type "simple"
  2487                           ; Number of cases is 6, Range of values is 0 to 5
  2488                           ; switch strategies available:
  2489                           ; Name         Instructions Cycles
  2490                           ; simple_byte           19    10 (average)
  2491                           ; direct_byte           26     8 (fixed)
  2492                           ; jumptable            260     6 (fixed)
  2493                           ;	Chosen strategy is simple_byte
  2494  0934  0846               	movf	??_MEF_Actualizacion^(0+128),w
  2495  0935  3A00               	xorlw	0	; case 0
  2496  0936  1903               	skipnz
  2497  0937  28E7               	goto	l4712
  2498  0938  3A01               	xorlw	1	; case 1
  2499  0939  1903               	skipnz
  2500  093A  28EF               	goto	l4716
  2501  093B  3A03               	xorlw	3	; case 2
  2502  093C  1903               	skipnz
  2503  093D  2913               	goto	l4738
  2504  093E  3A01               	xorlw	1	; case 3
  2505  093F  1903               	skipnz
  2506  0940  2922               	goto	l4744
  2507  0941  3A07               	xorlw	7	; case 4
  2508  0942  1903               	skipnz
  2509  0943  2922               	goto	l4750
  2510  0944  3A01               	xorlw	1	; case 5
  2511  0945  1903               	skipnz
  2512  0946  2923               	goto	l4756
  2513  0947  2948               	goto	l228
  2514  0948                     l228:
  2515  0948  0008               	return
  2516  0949                     __end_of_MEF_Actualizacion:
  2517                           
  2518                           	psect	text5
  2519  164C                     __ptext5:	
  2520 ;; *************** function _Select_Modo *****************
  2521 ;; Defined at:
  2522 ;;		line 14 in file "Menu_Modo.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;		None
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2536 ;;      Params:         0       0       0       0       0
  2537 ;;      Locals:         0       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0
  2539 ;;      Totals:         0       0       0       0       0
  2540 ;;Total ram usage:        0 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    5
  2543 ;; This function calls:
  2544 ;;		_Antirrebote
  2545 ;;		_Pant_Menu
  2546 ;;		_Pant_Selector
  2547 ;; This function is called by:
  2548 ;;		_MEF_Actualizacion
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function _Select_Modo
  2554  164C                     _Select_Modo:
  2555                           
  2556                           ;incstack = 0
  2557                           ; Regs used in _Select_Modo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2558  164C  0064               	clrwdt	;# 
  2559                           
  2560                           ;Menu_Modo.c: 18:     if(Mostrar) Pant_Menu(),Mostrar=0;
  2561  164D  087A               	movf	_Mostrar,w
  2562  164E  1903               	btfsc	3,2
  2563  164F  2E56               	goto	l4546
  2564  1650  120A  158A  2048  160A  118A  	fcall	_Pant_Menu
  2565  1655  01FA               	clrf	_Mostrar
  2566  1656                     l4546:
  2567                           
  2568                           ;Menu_Modo.c: 20:     if(PORTBbits.RB3 || Modo==0)
  2569  1656  1283               	bcf	3,5	;RP0=0, select bank0
  2570  1657  1303               	bcf	3,6	;RP1=0, select bank0
  2571  1658  1986               	btfsc	6,3	;volatile
  2572  1659  2E5D               	goto	l4550
  2573  165A  086B               	movf	_Modo,w
  2574  165B  1D03               	btfss	3,2
  2575  165C  0008               	return
  2576  165D                     l4550:
  2577                           
  2578                           ;Menu_Modo.c: 21:     {;Menu_Modo.c: 22:         Modo+=1;
  2579  165D  3001               	movlw	1
  2580  165E  00FF               	movwf	127
  2581  165F  087F               	movf	127,w
  2582  1660  07EB               	addwf	_Modo,f
  2583                           
  2584                           ;Menu_Modo.c: 23:         if(Modo>=5||Modo<1) Modo=1;
  2585  1661  3005               	movlw	5
  2586  1662  026B               	subwf	_Modo,w
  2587  1663  1803               	skipnc
  2588  1664  2E68               	goto	l302
  2589  1665  086B               	movf	_Modo,w
  2590  1666  1D03               	btfss	3,2
  2591  1667  2E6A               	goto	l4556
  2592  1668                     l302:
  2593  1668  01EB               	clrf	_Modo
  2594  1669  0AEB               	incf	_Modo,f
  2595  166A                     l4556:
  2596                           
  2597                           ;Menu_Modo.c: 24:         Pant_Selector(),Antirrebote();
  2598  166A  120A  158A  248D  160A  118A  	fcall	_Pant_Selector
  2599  166F  160A  118A  2625   	fcall	_Antirrebote
  2600  1672  0008               	return
  2601  1673                     __end_of_Select_Modo:
  2602                           
  2603                           	psect	text6
  2604  0C8D                     __ptext6:	
  2605 ;; *************** function _Pant_Selector *****************
  2606 ;; Defined at:
  2607 ;;		line 44 in file "Display_Lcd.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;		None
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2621 ;;      Params:         0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0
  2624 ;;      Totals:         0       0       0       0       0
  2625 ;;Total ram usage:        0 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    4
  2628 ;; This function calls:
  2629 ;;		_LCD_array
  2630 ;; This function is called by:
  2631 ;;		_Select_Modo
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           
  2636                           ;psect for function _Pant_Selector
  2637  0C8D                     _Pant_Selector:
  2638                           
  2639                           ;Display_Lcd.c: 46:     if(Modo == 1) LCD_array(4,1," "),LCD_array(1,1,">");
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in _Pant_Selector: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2643  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0C8E  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0C8F  036B               	decf	_Modo,w
  2646  0C90  1D03               	btfss	3,2
  2647  0C91  2CB5               	goto	l4484
  2648  0C92  3004               	movlw	4
  2649  0C93  00A0               	movwf	LCD_array@x
  2650  0C94  3000               	movlw	0
  2651  0C95  00A1               	movwf	LCD_array@x+1
  2652  0C96  3001               	movlw	1
  2653  0C97  00A2               	movwf	LCD_array@y
  2654  0C98  3000               	movlw	0
  2655  0C99  00A3               	movwf	LCD_array@y+1
  2656  0C9A  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2657  0C9B  00A4               	movwf	LCD_array@date
  2658  0C9C  3080               	movlw	128
  2659  0C9D  00A5               	movwf	LCD_array@date+1
  2660  0C9E  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  2661  0CA3  3001               	movlw	1
  2662  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0CA6  00A0               	movwf	LCD_array@x
  2665  0CA7  3000               	movlw	0
  2666  0CA8  00A1               	movwf	LCD_array@x+1
  2667  0CA9  3001               	movlw	1
  2668  0CAA  00A2               	movwf	LCD_array@y
  2669  0CAB  3000               	movlw	0
  2670  0CAC  00A3               	movwf	LCD_array@y+1
  2671  0CAD  30AF               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2672  0CAE  00A4               	movwf	LCD_array@date
  2673  0CAF  3080               	movlw	128
  2674  0CB0  00A5               	movwf	LCD_array@date+1
  2675  0CB1  120A  158A  21AD   	fcall	_LCD_array
  2676  0CB4  0008               	return
  2677  0CB5                     l4484:
  2678  0CB5  3002               	movlw	2
  2679  0CB6  066B               	xorwf	_Modo,w
  2680  0CB7  1D03               	btfss	3,2
  2681  0CB8  2CDC               	goto	l4488
  2682  0CB9  3001               	movlw	1
  2683  0CBA  00A0               	movwf	LCD_array@x
  2684  0CBB  3000               	movlw	0
  2685  0CBC  00A1               	movwf	LCD_array@x+1
  2686  0CBD  3001               	movlw	1
  2687  0CBE  00A2               	movwf	LCD_array@y
  2688  0CBF  3000               	movlw	0
  2689  0CC0  00A3               	movwf	LCD_array@y+1
  2690  0CC1  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2691  0CC2  00A4               	movwf	LCD_array@date
  2692  0CC3  3080               	movlw	128
  2693  0CC4  00A5               	movwf	LCD_array@date+1
  2694  0CC5  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  2695  0CCA  3002               	movlw	2
  2696  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  2697  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  2698  0CCD  00A0               	movwf	LCD_array@x
  2699  0CCE  3000               	movlw	0
  2700  0CCF  00A1               	movwf	LCD_array@x+1
  2701  0CD0  3001               	movlw	1
  2702  0CD1  00A2               	movwf	LCD_array@y
  2703  0CD2  3000               	movlw	0
  2704  0CD3  00A3               	movwf	LCD_array@y+1
  2705  0CD4  30AF               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2706  0CD5  00A4               	movwf	LCD_array@date
  2707  0CD6  3080               	movlw	128
  2708  0CD7  00A5               	movwf	LCD_array@date+1
  2709  0CD8  120A  158A  21AD   	fcall	_LCD_array
  2710  0CDB  0008               	return
  2711  0CDC                     l4488:
  2712  0CDC  3003               	movlw	3
  2713  0CDD  066B               	xorwf	_Modo,w
  2714  0CDE  1D03               	btfss	3,2
  2715  0CDF  2D03               	goto	l4492
  2716  0CE0  3002               	movlw	2
  2717  0CE1  00A0               	movwf	LCD_array@x
  2718  0CE2  3000               	movlw	0
  2719  0CE3  00A1               	movwf	LCD_array@x+1
  2720  0CE4  3001               	movlw	1
  2721  0CE5  00A2               	movwf	LCD_array@y
  2722  0CE6  3000               	movlw	0
  2723  0CE7  00A3               	movwf	LCD_array@y+1
  2724  0CE8  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2725  0CE9  00A4               	movwf	LCD_array@date
  2726  0CEA  3080               	movlw	128
  2727  0CEB  00A5               	movwf	LCD_array@date+1
  2728  0CEC  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  2729  0CF1  3003               	movlw	3
  2730  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  2731  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  2732  0CF4  00A0               	movwf	LCD_array@x
  2733  0CF5  3000               	movlw	0
  2734  0CF6  00A1               	movwf	LCD_array@x+1
  2735  0CF7  3001               	movlw	1
  2736  0CF8  00A2               	movwf	LCD_array@y
  2737  0CF9  3000               	movlw	0
  2738  0CFA  00A3               	movwf	LCD_array@y+1
  2739  0CFB  30AF               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2740  0CFC  00A4               	movwf	LCD_array@date
  2741  0CFD  3080               	movlw	128
  2742  0CFE  00A5               	movwf	LCD_array@date+1
  2743  0CFF  120A  158A  21AD   	fcall	_LCD_array
  2744  0D02  0008               	return
  2745  0D03                     l4492:
  2746  0D03  3004               	movlw	4
  2747  0D04  066B               	xorwf	_Modo,w
  2748  0D05  1D03               	btfss	3,2
  2749  0D06  0008               	return
  2750  0D07  3003               	movlw	3
  2751  0D08  00A0               	movwf	LCD_array@x
  2752  0D09  3000               	movlw	0
  2753  0D0A  00A1               	movwf	LCD_array@x+1
  2754  0D0B  3001               	movlw	1
  2755  0D0C  00A2               	movwf	LCD_array@y
  2756  0D0D  3000               	movlw	0
  2757  0D0E  00A3               	movwf	LCD_array@y+1
  2758  0D0F  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2759  0D10  00A4               	movwf	LCD_array@date
  2760  0D11  3080               	movlw	128
  2761  0D12  00A5               	movwf	LCD_array@date+1
  2762  0D13  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  2763  0D18  3004               	movlw	4
  2764  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  2765  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  2766  0D1B  00A0               	movwf	LCD_array@x
  2767  0D1C  3000               	movlw	0
  2768  0D1D  00A1               	movwf	LCD_array@x+1
  2769  0D1E  3001               	movlw	1
  2770  0D1F  00A2               	movwf	LCD_array@y
  2771  0D20  3000               	movlw	0
  2772  0D21  00A3               	movwf	LCD_array@y+1
  2773  0D22  30AF               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2774  0D23  00A4               	movwf	LCD_array@date
  2775  0D24  3080               	movlw	128
  2776  0D25  00A5               	movwf	LCD_array@date+1
  2777  0D26  120A  158A  21AD   	fcall	_LCD_array
  2778  0D29  0008               	return
  2779  0D2A                     __end_of_Pant_Selector:
  2780                           
  2781                           	psect	text7
  2782  0848                     __ptext7:	
  2783 ;; *************** function _Pant_Menu *****************
  2784 ;; Defined at:
  2785 ;;		line 54 in file "Display_Lcd.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2799 ;;      Params:         0       0       0       0       0
  2800 ;;      Locals:         0       0       0       0       0
  2801 ;;      Temps:          0       0       0       0       0
  2802 ;;      Totals:         0       0       0       0       0
  2803 ;;Total ram usage:        0 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    4
  2806 ;; This function calls:
  2807 ;;		_LCD_array
  2808 ;; This function is called by:
  2809 ;;		_Select_Modo
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           
  2814                           ;psect for function _Pant_Menu
  2815  0848                     _Pant_Menu:
  2816                           
  2817                           ;Display_Lcd.c: 56:     LCD_array(1,3,"PULVERIZACION");
  2818                           
  2819                           ;incstack = 0
  2820                           ; Regs used in _Pant_Menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2821  0848  3001               	movlw	1
  2822  0849  1283               	bcf	3,5	;RP0=0, select bank0
  2823  084A  1303               	bcf	3,6	;RP1=0, select bank0
  2824  084B  00A0               	movwf	LCD_array@x
  2825  084C  3000               	movlw	0
  2826  084D  00A1               	movwf	LCD_array@x+1
  2827  084E  3003               	movlw	3
  2828  084F  00A2               	movwf	LCD_array@y
  2829  0850  3000               	movlw	0
  2830  0851  00A3               	movwf	LCD_array@y+1
  2831  0852  306D               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2832  0853  00A4               	movwf	LCD_array@date
  2833  0854  3080               	movlw	128
  2834  0855  00A5               	movwf	LCD_array@date+1
  2835  0856  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  2836                           
  2837                           ;Display_Lcd.c: 57:     LCD_array(2,3,"FUGA");
  2838  085B  3002               	movlw	2
  2839  085C  1283               	bcf	3,5	;RP0=0, select bank0
  2840  085D  1303               	bcf	3,6	;RP1=0, select bank0
  2841  085E  00A0               	movwf	LCD_array@x
  2842  085F  3000               	movlw	0
  2843  0860  00A1               	movwf	LCD_array@x+1
  2844  0861  3003               	movlw	3
  2845  0862  00A2               	movwf	LCD_array@y
  2846  0863  3000               	movlw	0
  2847  0864  00A3               	movwf	LCD_array@y+1
  2848  0865  30A0               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2849  0866  00A4               	movwf	LCD_array@date
  2850  0867  3080               	movlw	128
  2851  0868  00A5               	movwf	LCD_array@date+1
  2852  0869  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  2853                           
  2854                           ;Display_Lcd.c: 58:     LCD_array(3,3,"FLUJO");
  2855  086E  3003               	movlw	3
  2856  086F  1283               	bcf	3,5	;RP0=0, select bank0
  2857  0870  1303               	bcf	3,6	;RP1=0, select bank0
  2858  0871  00A0               	movwf	LCD_array@x
  2859  0872  3000               	movlw	0
  2860  0873  00A1               	movwf	LCD_array@x+1
  2861  0874  3003               	movlw	3
  2862  0875  00A2               	movwf	LCD_array@y
  2863  0876  3000               	movlw	0
  2864  0877  00A3               	movwf	LCD_array@y+1
  2865  0878  3090               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2866  0879  00A4               	movwf	LCD_array@date
  2867  087A  3080               	movlw	128
  2868  087B  00A5               	movwf	LCD_array@date+1
  2869  087C  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  2870                           
  2871                           ;Display_Lcd.c: 59:     LCD_array(4,3,"LIMP. ULTRASONIDO");
  2872  0881  3004               	movlw	4
  2873  0882  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0883  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0884  00A0               	movwf	LCD_array@x
  2876  0885  3000               	movlw	0
  2877  0886  00A1               	movwf	LCD_array@x+1
  2878  0887  3003               	movlw	3
  2879  0888  00A2               	movwf	LCD_array@y
  2880  0889  3000               	movlw	0
  2881  088A  00A3               	movwf	LCD_array@y+1
  2882  088B  304A               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2883  088C  00A4               	movwf	LCD_array@date
  2884  088D  3080               	movlw	128
  2885  088E  00A5               	movwf	LCD_array@date+1
  2886  088F  120A  158A  21AD   	fcall	_LCD_array
  2887  0892  0008               	return
  2888  0893                     __end_of_Pant_Menu:
  2889                           
  2890                           	psect	text8
  2891  0D2A                     __ptext8:	
  2892 ;; *************** function _Pant_Inicio *****************
  2893 ;; Defined at:
  2894 ;;		line 8 in file "Display_Lcd.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  caracter        8   18[BANK0 ] unsigned char [8]
  2899 ;;  caracter1       8   10[BANK0 ] unsigned char [8]
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2909 ;;      Params:         0       0       0       0       0
  2910 ;;      Locals:         0      16       0       0       0
  2911 ;;      Temps:          0       4       0       0       0
  2912 ;;      Totals:         0      20       0       0       0
  2913 ;;Total ram usage:       20 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    4
  2916 ;; This function calls:
  2917 ;;		_LCD_array
  2918 ;;		_LCD_character
  2919 ;;		_LCD_command
  2920 ;; This function is called by:
  2921 ;;		_MEF_Actualizacion
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           
  2926                           ;psect for function _Pant_Inicio
  2927  0D2A                     _Pant_Inicio:
  2928                           
  2929                           ;Display_Lcd.c: 11:     char caracter1[8] =
  2930                           
  2931                           ;incstack = 0
  2932                           ; Regs used in _Pant_Inicio: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2933  0D2A  302A               	movlw	Pant_Inicio@caracter1& (0+255)
  2934  0D2B  0084               	movwf	4
  2935  0D2C  30BD               	movlw	low Pant_Inicio@F1325
  2936  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  2937  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  2938  0D2F  00A6               	movwf	??_Pant_Inicio
  2939  0D30  0804               	movf	4,w
  2940  0D31  00A7               	movwf	??_Pant_Inicio+1
  2941  0D32  3008               	movlw	8
  2942  0D33  00A8               	movwf	??_Pant_Inicio+2
  2943  0D34                     u4910:
  2944  0D34  0826               	movf	??_Pant_Inicio,w
  2945  0D35  0084               	movwf	4
  2946  0D36  1383               	bcf	3,7	;select IRP bank1
  2947  0D37  0800               	movf	0,w
  2948  0D38  00A9               	movwf	??_Pant_Inicio+3
  2949  0D39  0AA6               	incf	??_Pant_Inicio,f
  2950  0D3A  0827               	movf	??_Pant_Inicio+1,w
  2951  0D3B  0084               	movwf	4
  2952  0D3C  0829               	movf	??_Pant_Inicio+3,w
  2953  0D3D  0080               	movwf	0
  2954  0D3E  0AA7               	incf	??_Pant_Inicio+1,f
  2955  0D3F  0BA8               	decfsz	??_Pant_Inicio+2,f
  2956  0D40  2D34               	goto	u4910
  2957                           
  2958                           ;Display_Lcd.c: 22:     LCD_character(0x01,caracter1);
  2959  0D41  302A               	movlw	(low (Pant_Inicio@caracter1| 0))& (0+255)
  2960  0D42  00FF               	movwf	127
  2961  0D43  087F               	movf	127,w
  2962  0D44  00F6               	movwf	LCD_character@caracter
  2963  0D45  3001               	movlw	1
  2964  0D46  160A  118A  269F  120A  158A  	fcall	_LCD_character
  2965                           
  2966                           ;Display_Lcd.c: 25:     char caracter[8] = {0,0,0,0,0,0,0,0};
  2967  0D4B  3032               	movlw	Pant_Inicio@caracter& (0+255)
  2968  0D4C  0084               	movwf	4
  2969  0D4D  3008               	movlw	8
  2970  0D4E  00FF               	movwf	127
  2971  0D4F                     u4920:
  2972  0D4F  1383               	bcf	3,7	;select IRP bank0
  2973  0D50  0180               	clrf	0
  2974  0D51  0A84               	incf	4,f
  2975  0D52  0BFF               	decfsz	127,f
  2976  0D53  2D4F               	goto	u4920
  2977                           
  2978                           ;Display_Lcd.c: 26:     LCD_character(0x00,caracter);
  2979  0D54  3032               	movlw	(low (Pant_Inicio@caracter| 0))& (0+255)
  2980  0D55  00FF               	movwf	127
  2981  0D56  087F               	movf	127,w
  2982  0D57  00F6               	movwf	LCD_character@caracter
  2983  0D58  3000               	movlw	0
  2984  0D59  160A  118A  269F  120A  158A  	fcall	_LCD_character
  2985                           
  2986                           ;Display_Lcd.c: 29:     LCD_command(0x01);
  2987  0D5E  3001               	movlw	1
  2988  0D5F  120A  158A  2746  120A  158A  	fcall	_LCD_command
  2989                           
  2990                           ;Display_Lcd.c: 30:     LCD_array(1,1,"====================");
  2991  0D64  3001               	movlw	1
  2992  0D65  1283               	bcf	3,5	;RP0=0, select bank0
  2993  0D66  1303               	bcf	3,6	;RP1=0, select bank0
  2994  0D67  00A0               	movwf	LCD_array@x
  2995  0D68  3000               	movlw	0
  2996  0D69  00A1               	movwf	LCD_array@x+1
  2997  0D6A  3001               	movlw	1
  2998  0D6B  00A2               	movwf	LCD_array@y
  2999  0D6C  3000               	movlw	0
  3000  0D6D  00A3               	movwf	LCD_array@y+1
  3001  0D6E  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3002  0D6F  00A4               	movwf	LCD_array@date
  3003  0D70  3080               	movlw	128
  3004  0D71  00A5               	movwf	LCD_array@date+1
  3005  0D72  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  3006                           
  3007                           ;Display_Lcd.c: 31:     LCD_array(2,1,"PROBADOR AUTOMOTRIZ ");
  3008  0D77  3002               	movlw	2
  3009  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  3010  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  3011  0D7A  00A0               	movwf	LCD_array@x
  3012  0D7B  3000               	movlw	0
  3013  0D7C  00A1               	movwf	LCD_array@x+1
  3014  0D7D  3001               	movlw	1
  3015  0D7E  00A2               	movwf	LCD_array@y
  3016  0D7F  3000               	movlw	0
  3017  0D80  00A3               	movwf	LCD_array@y+1
  3018  0D81  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3019  0D82  00A4               	movwf	LCD_array@date
  3020  0D83  3080               	movlw	128
  3021  0D84  00A5               	movwf	LCD_array@date+1
  3022  0D85  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  3023                           
  3024                           ;Display_Lcd.c: 32:     LCD_array(3,1,"   DE INYECTORES    ");
  3025  0D8A  3003               	movlw	3
  3026  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  3027  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  3028  0D8D  00A0               	movwf	LCD_array@x
  3029  0D8E  3000               	movlw	0
  3030  0D8F  00A1               	movwf	LCD_array@x+1
  3031  0D90  3001               	movlw	1
  3032  0D91  00A2               	movwf	LCD_array@y
  3033  0D92  3000               	movlw	0
  3034  0D93  00A3               	movwf	LCD_array@y+1
  3035  0D94  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3036  0D95  00A4               	movwf	LCD_array@date
  3037  0D96  3080               	movlw	128
  3038  0D97  00A5               	movwf	LCD_array@date+1
  3039  0D98  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  3040                           
  3041                           ;Display_Lcd.c: 33:     LCD_array(4,1,"====================");
  3042  0D9D  3004               	movlw	4
  3043  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0DA0  00A0               	movwf	LCD_array@x
  3046  0DA1  3000               	movlw	0
  3047  0DA2  00A1               	movwf	LCD_array@x+1
  3048  0DA3  3001               	movlw	1
  3049  0DA4  00A2               	movwf	LCD_array@y
  3050  0DA5  3000               	movlw	0
  3051  0DA6  00A3               	movwf	LCD_array@y+1
  3052  0DA7  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3053  0DA8  00A4               	movwf	LCD_array@date
  3054  0DA9  3080               	movlw	128
  3055  0DAA  00A5               	movwf	LCD_array@date+1
  3056  0DAB  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  3057                           
  3058                           ;Display_Lcd.c: 34:     _delay((unsigned long)((2000)*(20000000/4000.0)));
  3059  0DB0  3033               	movlw	51
  3060  0DB1  1283               	bcf	3,5	;RP0=0, select bank0
  3061  0DB2  1303               	bcf	3,6	;RP1=0, select bank0
  3062  0DB3  00A8               	movwf	??_Pant_Inicio+2
  3063  0DB4  30BB               	movlw	187
  3064  0DB5  00A7               	movwf	??_Pant_Inicio+1
  3065  0DB6  30DF               	movlw	223
  3066  0DB7  00A6               	movwf	??_Pant_Inicio
  3067  0DB8                     u5557:
  3068  0DB8  0BA6               	decfsz	??_Pant_Inicio,f
  3069  0DB9  2DB8               	goto	u5557
  3070  0DBA  0BA7               	decfsz	??_Pant_Inicio+1,f
  3071  0DBB  2DB8               	goto	u5557
  3072  0DBC  0BA8               	decfsz	??_Pant_Inicio+2,f
  3073  0DBD  2DB8               	goto	u5557
  3074                           
  3075                           ;Display_Lcd.c: 37:     LCD_command(0x01);
  3076  0DBE  3001               	movlw	1
  3077  0DBF  120A  158A  2746  120A  158A  	fcall	_LCD_command
  3078                           
  3079                           ;Display_Lcd.c: 39:     LCD_array(1,1,">");
  3080  0DC4  3001               	movlw	1
  3081  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0DC7  00A0               	movwf	LCD_array@x
  3084  0DC8  3000               	movlw	0
  3085  0DC9  00A1               	movwf	LCD_array@x+1
  3086  0DCA  3001               	movlw	1
  3087  0DCB  00A2               	movwf	LCD_array@y
  3088  0DCC  3000               	movlw	0
  3089  0DCD  00A3               	movwf	LCD_array@y+1
  3090  0DCE  30AF               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  3091  0DCF  00A4               	movwf	LCD_array@date
  3092  0DD0  3080               	movlw	128
  3093  0DD1  00A5               	movwf	LCD_array@date+1
  3094  0DD2  120A  158A  21AD   	fcall	_LCD_array
  3095  0DD5  0008               	return
  3096  0DD6                     __end_of_Pant_Inicio:
  3097                           
  3098                           	psect	text9
  3099  169F                     __ptext9:	
  3100 ;; *************** function _LCD_character *****************
  3101 ;; Defined at:
  3102 ;;		line 197 in file "Lcd.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  adress          1    wreg     unsigned char 
  3105 ;;  caracter        1    6[COMMON] PTR unsigned char 
  3106 ;;		 -> Pant_Inicio@caracter(8), Pant_Inicio@caracter1(8), 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  adress          1    0[BANK0 ] unsigned char 
  3109 ;;  i               1    1[BANK0 ] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3119 ;;      Params:         1       0       0       0       0
  3120 ;;      Locals:         0       2       0       0       0
  3121 ;;      Temps:          1       0       0       0       0
  3122 ;;      Totals:         2       2       0       0       0
  3123 ;;Total ram usage:        4 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    3
  3126 ;; This function calls:
  3127 ;;		_LCD_command
  3128 ;;		_LCD_date
  3129 ;; This function is called by:
  3130 ;;		_Pant_Inicio
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           
  3135                           ;psect for function _LCD_character
  3136  169F                     _LCD_character:
  3137                           
  3138                           ;incstack = 0
  3139                           ; Regs used in _LCD_character: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3140                           ;LCD_character@adress stored from wreg
  3141  169F  1283               	bcf	3,5	;RP0=0, select bank0
  3142  16A0  1303               	bcf	3,6	;RP1=0, select bank0
  3143  16A1  00A0               	movwf	LCD_character@adress
  3144                           
  3145                           ;Lcd.c: 197: void LCD_character(unsigned char adress,char caracter[]);Lcd.c: 198: {;Lcd.
      +                          c: 199:     LCD_command(0x40 + (adress * 8));
  3146  16A2  0820               	movf	LCD_character@adress,w
  3147  16A3  00F7               	movwf	??_LCD_character
  3148  16A4  3002               	movlw	2
  3149  16A5                     u4895:
  3150  16A5  1003               	clrc
  3151  16A6  0DF7               	rlf	??_LCD_character,f
  3152  16A7  3EFF               	addlw	-1
  3153  16A8  1D03               	skipz
  3154  16A9  2EA5               	goto	u4895
  3155  16AA  1003               	clrc
  3156  16AB  0D77               	rlf	??_LCD_character,w
  3157  16AC  3E40               	addlw	64
  3158  16AD  120A  158A  2746  160A  118A  	fcall	_LCD_command
  3159                           
  3160                           ;Lcd.c: 200:     for(char i=0;i<8;i++)
  3161  16B2  1283               	bcf	3,5	;RP0=0, select bank0
  3162  16B3  1303               	bcf	3,6	;RP1=0, select bank0
  3163  16B4  01A1               	clrf	LCD_character@i
  3164  16B5                     l4506:
  3165                           
  3166                           ;Lcd.c: 201:     {;Lcd.c: 202:         LCD_date(caracter[i]);
  3167  16B5  0821               	movf	LCD_character@i,w
  3168  16B6  0776               	addwf	LCD_character@caracter,w
  3169  16B7  00F7               	movwf	??_LCD_character
  3170  16B8  0877               	movf	??_LCD_character,w
  3171  16B9  0084               	movwf	4
  3172  16BA  1383               	bcf	3,7	;select IRP bank0
  3173  16BB  0800               	movf	0,w
  3174  16BC  120A  158A  25D6  160A  118A  	fcall	_LCD_date
  3175                           
  3176                           ;Lcd.c: 203:     }
  3177  16C1  3001               	movlw	1
  3178  16C2  00FF               	movwf	127
  3179  16C3  087F               	movf	127,w
  3180  16C4  1283               	bcf	3,5	;RP0=0, select bank0
  3181  16C5  1303               	bcf	3,6	;RP1=0, select bank0
  3182  16C6  07A1               	addwf	LCD_character@i,f
  3183  16C7  3008               	movlw	8
  3184  16C8  0221               	subwf	LCD_character@i,w
  3185  16C9  1803               	btfsc	3,0
  3186  16CA  0008               	return
  3187  16CB  2EB5               	goto	l4506
  3188  16CC                     __end_of_LCD_character:
  3189                           
  3190                           	psect	text10
  3191  020C                     __ptext10:	
  3192 ;; *************** function _MEF_Subest_Actualizacion *****************
  3193 ;; Defined at:
  3194 ;;		line 102 in file "MEF.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  i               1    0[BANK1 ] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3208 ;;      Params:         0       0       0       0       0
  3209 ;;      Locals:         0       0       1       0       0
  3210 ;;      Temps:          0       3       0       0       0
  3211 ;;      Totals:         0       3       1       0       0
  3212 ;;Total ram usage:        4 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    6
  3215 ;; This function calls:
  3216 ;;		_Antirrebote
  3217 ;;		_Detener
  3218 ;;		_LCD_command
  3219 ;;		_Lec_Adc_Modo_Flujo
  3220 ;;		_Lec_Adc_Modo_Fuga
  3221 ;;		_Lec_Adc_Modo_Pulv
  3222 ;;		_Pant_Modos
  3223 ;;		_Pant_Temporizador
  3224 ;;		_Pant_Val_Act
  3225 ;;		_Salida_Modo_Flujo
  3226 ;;		_Salida_Modo_Fuga
  3227 ;;		_Salida_Modo_Pulv
  3228 ;; This function is called by:
  3229 ;;		_MEF_Actualizacion
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           
  3234                           ;psect for function _MEF_Subest_Actualizacion
  3235  020C                     _MEF_Subest_Actualizacion:
  3236                           
  3237                           ;MEF.c: 104:     switch(Subestado_Actual)
  3238                           
  3239                           ;incstack = 0
  3240                           ; Regs used in _MEF_Subest_Actualizacion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  3241  020C  2B15               	goto	l4666
  3242  020D                     l4564:
  3243                           
  3244                           ;MEF.c: 107:         {;MEF.c: 108:             Pant_Modos();
  3245  020D  120A  158A  2401   	fcall	_Pant_Modos
  3246                           
  3247                           ;MEF.c: 110:             Subestado_Actual = SUBEST_DISPLAY;
  3248  0210  1683               	bsf	3,5	;RP0=1, select bank1
  3249  0211  1303               	bcf	3,6	;RP1=0, select bank1
  3250  0212  01B8               	clrf	_Subestado_Actual^(0+128)
  3251  0213  0AB8               	incf	_Subestado_Actual^(0+128),f
  3252                           
  3253                           ;MEF.c: 111:         break;
  3254  0214  0008               	return
  3255  0215                     l4568:
  3256                           
  3257                           ;MEF.c: 114:         {;MEF.c: 115:             Pant_Val_Act();
  3258  0215  120A  118A  262C   	fcall	_Pant_Val_Act
  3259                           
  3260                           ;MEF.c: 117:             Subestado_Actual = SUBEST_ADC;
  3261  0218  3002               	movlw	2
  3262  0219  00FF               	movwf	127
  3263  021A  087F               	movf	127,w
  3264  021B  1683               	bsf	3,5	;RP0=1, select bank1
  3265  021C  1303               	bcf	3,6	;RP1=0, select bank1
  3266  021D  00B8               	movwf	_Subestado_Actual^(0+128)
  3267                           
  3268                           ;MEF.c: 118:         break;
  3269  021E  0008               	return
  3270  021F                     l4572:
  3271                           
  3272                           ;MEF.c: 121:         {;MEF.c: 122:             if(Estado_Actual==ESTADO_MODO_PULV) Lec_A
      +                          dc_Modo_Pulv();
  3273  021F  3002               	movlw	2
  3274  0220  0664               	xorwf	_Estado_Actual,w
  3275  0221  1D03               	btfss	3,2
  3276  0222  2A29               	goto	l4576
  3277  0223  160A  118A  255B  120A  118A  	fcall	_Lec_Adc_Modo_Pulv
  3278  0228  2A3C               	goto	l4584
  3279  0229                     l4576:
  3280  0229  3003               	movlw	3
  3281  022A  0664               	xorwf	_Estado_Actual,w
  3282  022B  1D03               	btfss	3,2
  3283  022C  2A33               	goto	l4580
  3284  022D  160A  118A  2541  120A  118A  	fcall	_Lec_Adc_Modo_Fuga
  3285  0232  2A3C               	goto	l4584
  3286  0233                     l4580:
  3287  0233  3004               	movlw	4
  3288  0234  0664               	xorwf	_Estado_Actual,w
  3289  0235  1D03               	btfss	3,2
  3290  0236  2A3C               	goto	l4584
  3291  0237  160A  118A  2538  120A  118A  	fcall	_Lec_Adc_Modo_Flujo
  3292  023C                     l4584:
  3293                           
  3294                           ;MEF.c: 126:             if(PORTBbits.RB3) mod_tiempo=!mod_tiempo,Antirrebote();
  3295  023C  1283               	bcf	3,5	;RP0=0, select bank0
  3296  023D  1303               	bcf	3,6	;RP1=0, select bank0
  3297  023E  1D86               	btfss	6,3	;volatile
  3298  023F  2A4E               	goto	l4590
  3299  0240  0867               	movf	_mod_tiempo,w
  3300  0241  1D03               	btfss	3,2
  3301  0242  2A45               	goto	u5020
  3302  0243  3001               	movlw	1
  3303  0244  2A46               	goto	u5030
  3304  0245                     u5020:
  3305  0245  3000               	movlw	0
  3306  0246                     u5030:
  3307  0246  00FF               	movwf	127
  3308  0247  087F               	movf	127,w
  3309  0248  00E7               	movwf	_mod_tiempo
  3310  0249  160A  118A  2625  120A  118A  	fcall	_Antirrebote
  3311  024E                     l4590:
  3312                           
  3313                           ;MEF.c: 128:             if(Act_Variables) Subestado_Actual = SUBEST_DISPLAY,Act_Variabl
      +                          es=0;
  3314  024E  1683               	bsf	3,5	;RP0=1, select bank1
  3315  024F  1303               	bcf	3,6	;RP1=0, select bank1
  3316  0250  083A               	movf	_Act_Variables^(0+128),w
  3317  0251  1903               	btfsc	3,2
  3318  0252  2A56               	goto	l4596
  3319  0253  01B8               	clrf	_Subestado_Actual^(0+128)
  3320  0254  0AB8               	incf	_Subestado_Actual^(0+128),f
  3321  0255  01BA               	clrf	_Act_Variables^(0+128)
  3322  0256                     l4596:
  3323                           
  3324                           ;MEF.c: 129:             if(PORTBbits.RB0) Subestado_Actual = SUBEST_SALIDA,Antirrebote(
      +                          ),Output=!Output;
  3325  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0258  1C06               	btfss	6,0	;volatile
  3328  0259  0008               	return
  3329  025A  3003               	movlw	3
  3330  025B  00FF               	movwf	127
  3331  025C  087F               	movf	127,w
  3332  025D  1683               	bsf	3,5	;RP0=1, select bank1
  3333  025E  1303               	bcf	3,6	;RP1=0, select bank1
  3334  025F  00B8               	movwf	_Subestado_Actual^(0+128)
  3335  0260  160A  118A  2625  120A  118A  	fcall	_Antirrebote
  3336  0265  1283               	bcf	3,5	;RP0=0, select bank0
  3337  0266  1303               	bcf	3,6	;RP1=0, select bank0
  3338  0267  0866               	movf	_Output,w
  3339  0268  1D03               	btfss	3,2
  3340  0269  2A6C               	goto	u5060
  3341  026A  3001               	movlw	1
  3342  026B  2A6D               	goto	u5070
  3343  026C                     u5060:
  3344  026C  3000               	movlw	0
  3345  026D                     u5070:
  3346  026D  00FF               	movwf	127
  3347  026E  087F               	movf	127,w
  3348  026F  00E6               	movwf	_Output
  3349  0270  0008               	return
  3350  0271                     l4604:
  3351                           
  3352                           ;MEF.c: 133:         {;MEF.c: 134:             if(Estado_Actual==ESTADO_MODO_PULV) Salid
      +                          a_Modo_Pulv();
  3353  0271  3002               	movlw	2
  3354  0272  0664               	xorwf	_Estado_Actual,w
  3355  0273  1D03               	btfss	3,2
  3356  0274  2A7B               	goto	l4608
  3357  0275  120A  118A  2003  120A  118A  	fcall	_Salida_Modo_Pulv
  3358  027A  2A8E               	goto	l4616
  3359  027B                     l4608:
  3360  027B  3003               	movlw	3
  3361  027C  0664               	xorwf	_Estado_Actual,w
  3362  027D  1D03               	btfss	3,2
  3363  027E  2A85               	goto	l4612
  3364  027F  160A  118A  2516  120A  118A  	fcall	_Salida_Modo_Fuga
  3365  0284  2A8E               	goto	l4616
  3366  0285                     l4612:
  3367  0285  3004               	movlw	4
  3368  0286  0664               	xorwf	_Estado_Actual,w
  3369  0287  1D03               	btfss	3,2
  3370  0288  2A8E               	goto	l4616
  3371  0289  160A  118A  2519  120A  118A  	fcall	_Salida_Modo_Flujo
  3372  028E                     l4616:
  3373                           
  3374                           ;MEF.c: 138:             if(Temporizador) Subestado_Actual = SUBEST_TIEMPO;
  3375  028E  1683               	bsf	3,5	;RP0=1, select bank1
  3376  028F  1303               	bcf	3,6	;RP1=0, select bank1
  3377  0290  0839               	movf	_Temporizador^(0+128),w
  3378  0291  1903               	btfsc	3,2
  3379  0292  2A97               	goto	l4620
  3380  0293  3004               	movlw	4
  3381  0294  00FF               	movwf	127
  3382  0295  087F               	movf	127,w
  3383  0296  00B8               	movwf	_Subestado_Actual^(0+128)
  3384  0297                     l4620:
  3385                           
  3386                           ;MEF.c: 139:             if(PORTBbits.RB2) Subestado_Actual = SUBEST_INICIAL,Detener();
  3387  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3388  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3389  0299  1D06               	btfss	6,2	;volatile
  3390  029A  0008               	return
  3391  029B  1683               	bsf	3,5	;RP0=1, select bank1
  3392  029C  1303               	bcf	3,6	;RP1=0, select bank1
  3393  029D  01B8               	clrf	_Subestado_Actual^(0+128)
  3394  029E  120A  158A  2093   	fcall	_Detener
  3395  02A1  0008               	return
  3396  02A2                     l4626:
  3397                           
  3398                           ;MEF.c: 143:         {;MEF.c: 144:             Pant_Temporizador();
  3399  02A2  160A  118A  27B5  120A  118A  	fcall	_Pant_Temporizador
  3400                           
  3401                           ;MEF.c: 145:             if(!Min && !Seg)
  3402  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  3403  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  3404  02A9  0869               	movf	_Min,w
  3405  02AA  1D03               	btfss	3,2
  3406  02AB  2AE7               	goto	l4648
  3407  02AC  0868               	movf	_Seg,w
  3408  02AD  1D03               	btfss	3,2
  3409  02AE  2AE7               	goto	l4648
  3410                           
  3411                           ;MEF.c: 146:             {;MEF.c: 147:                 Output = !Output;
  3412  02AF  0866               	movf	_Output,w
  3413  02B0  1D03               	btfss	3,2
  3414  02B1  2AB4               	goto	u5150
  3415  02B2  3001               	movlw	1
  3416  02B3  2AB5               	goto	u5160
  3417  02B4                     u5150:
  3418  02B4  3000               	movlw	0
  3419  02B5                     u5160:
  3420  02B5  00FF               	movwf	127
  3421  02B6  087F               	movf	127,w
  3422  02B7  00E6               	movwf	_Output
  3423                           
  3424                           ;MEF.c: 148:                 for(char i=0;i<3;i++)
  3425  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  3426  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  3427  02BA  01C5               	clrf	MEF_Subest_Actualizacion@i^(0+128)
  3428  02BB                     l254:
  3429                           
  3430                           ;MEF.c: 149:                 {;MEF.c: 150:                     PORTAbits.RA5 = 1;
  3431  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  3432  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  3433  02BD  1685               	bsf	5,5	;volatile
  3434                           
  3435                           ;MEF.c: 151:                     _delay((unsigned long)((100)*(20000000/4000.0)));
  3436  02BE  3003               	movlw	3
  3437  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  3438  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  3439  02C1  00E3               	movwf	??_MEF_Subest_Actualizacion+2
  3440  02C2  308A               	movlw	138
  3441  02C3  00E2               	movwf	??_MEF_Subest_Actualizacion+1
  3442  02C4  3055               	movlw	85
  3443  02C5  00E1               	movwf	??_MEF_Subest_Actualizacion
  3444  02C6                     u5567:
  3445  02C6  0BE1               	decfsz	??_MEF_Subest_Actualizacion,f
  3446  02C7  2AC6               	goto	u5567
  3447  02C8  0BE2               	decfsz	??_MEF_Subest_Actualizacion+1,f
  3448  02C9  2AC6               	goto	u5567
  3449  02CA  0BE3               	decfsz	??_MEF_Subest_Actualizacion+2,f
  3450  02CB  2AC6               	goto	u5567
  3451                           
  3452                           ;MEF.c: 152:                     PORTAbits.RA5 = 0;
  3453  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  3454  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  3455  02CE  1285               	bcf	5,5	;volatile
  3456                           
  3457                           ;MEF.c: 153:                     _delay((unsigned long)((100)*(20000000/4000.0)));
  3458  02CF  3003               	movlw	3
  3459  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3460  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3461  02D2  00E3               	movwf	??_MEF_Subest_Actualizacion+2
  3462  02D3  308A               	movlw	138
  3463  02D4  00E2               	movwf	??_MEF_Subest_Actualizacion+1
  3464  02D5  3055               	movlw	85
  3465  02D6  00E1               	movwf	??_MEF_Subest_Actualizacion
  3466  02D7                     u5577:
  3467  02D7  0BE1               	decfsz	??_MEF_Subest_Actualizacion,f
  3468  02D8  2AD7               	goto	u5577
  3469  02D9  0BE2               	decfsz	??_MEF_Subest_Actualizacion+1,f
  3470  02DA  2AD7               	goto	u5577
  3471  02DB  0BE3               	decfsz	??_MEF_Subest_Actualizacion+2,f
  3472  02DC  2AD7               	goto	u5577
  3473                           
  3474                           ;MEF.c: 154:                 }
  3475  02DD  3001               	movlw	1
  3476  02DE  00FF               	movwf	127
  3477  02DF  087F               	movf	127,w
  3478  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  3479  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  3480  02E2  07C5               	addwf	MEF_Subest_Actualizacion@i^(0+128),f
  3481  02E3  3003               	movlw	3
  3482  02E4  0245               	subwf	MEF_Subest_Actualizacion@i^(0+128),w
  3483  02E5  1C03               	skipc
  3484  02E6  2ABB               	goto	l254
  3485  02E7                     l4648:
  3486                           
  3487                           ;MEF.c: 157:             if(Output) Subestado_Actual = SUBEST_SALIDA;
  3488  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  3489  02E8  0866               	movf	_Output,w
  3490  02E9  1903               	btfsc	3,2
  3491  02EA  2AF2               	goto	l4652
  3492  02EB  3003               	movlw	3
  3493  02EC  00FF               	movwf	127
  3494  02ED  087F               	movf	127,w
  3495  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  3496  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  3497  02F0  00B8               	movwf	_Subestado_Actual^(0+128)
  3498  02F1  0008               	return
  3499  02F2                     l4652:
  3500  02F2  3005               	movlw	5
  3501  02F3  00FF               	movwf	127
  3502  02F4  087F               	movf	127,w
  3503  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  3504  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  3505  02F7  00B8               	movwf	_Subestado_Actual^(0+128)
  3506  02F8  0008               	return
  3507  02F9                     l4654:
  3508                           
  3509                           ;MEF.c: 162:         {;MEF.c: 163:             Rpm=0,Pwm=0,Min=0,Seg=0,Temp=0,Modo=0;
  3510  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  3511  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  3512  02FB  01AE               	clrf	_Rpm^(0+128)
  3513  02FC  01AF               	clrf	(_Rpm+1)^(0+128)
  3514  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  3515  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  3516  02FF  01EA               	clrf	_Pwm
  3517  0300  01E9               	clrf	_Min
  3518  0301  01E8               	clrf	_Seg
  3519  0302  1683               	bsf	3,5	;RP0=1, select bank1
  3520  0303  1303               	bcf	3,6	;RP1=0, select bank1
  3521  0304  01BB               	clrf	_Temp^(0+128)
  3522  0305  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0306  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0307  01EB               	clrf	_Modo
  3525                           
  3526                           ;MEF.c: 164:             PORTBbits.RB4=0;
  3527  0308  1206               	bcf	6,4	;volatile
  3528                           
  3529                           ;MEF.c: 165:             LCD_command(0x01);
  3530  0309  3001               	movlw	1
  3531  030A  120A  158A  2746   	fcall	_LCD_command
  3532                           
  3533                           ;MEF.c: 166:             Reset = 1;
  3534  030D  1283               	bcf	3,5	;RP0=0, select bank0
  3535  030E  1303               	bcf	3,6	;RP1=0, select bank0
  3536  030F  01E5               	clrf	_Reset
  3537  0310  0AE5               	incf	_Reset,f
  3538                           
  3539                           ;MEF.c: 168:             Subestado_Actual = SUBEST_INICIAL;
  3540  0311  1683               	bsf	3,5	;RP0=1, select bank1
  3541  0312  1303               	bcf	3,6	;RP1=0, select bank1
  3542  0313  01B8               	clrf	_Subestado_Actual^(0+128)
  3543                           
  3544                           ;MEF.c: 169:         break;
  3545  0314  0008               	return
  3546  0315                     l4666:
  3547  0315  1683               	bsf	3,5	;RP0=1, select bank1
  3548  0316  1303               	bcf	3,6	;RP1=0, select bank1
  3549  0317  0838               	movf	_Subestado_Actual^(0+128),w
  3550  0318  1283               	bcf	3,5	;RP0=0, select bank0
  3551  0319  1303               	bcf	3,6	;RP1=0, select bank0
  3552  031A  00E1               	movwf	??_MEF_Subest_Actualizacion
  3553  031B  01E2               	clrf	??_MEF_Subest_Actualizacion+1
  3554                           
  3555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3556                           ; Switch size 1, requested type "simple"
  3557                           ; Number of cases is 1, Range of values is 0 to 0
  3558                           ; switch strategies available:
  3559                           ; Name         Instructions Cycles
  3560                           ; simple_byte            4     3 (average)
  3561                           ; direct_byte           11     8 (fixed)
  3562                           ; jumptable            260     6 (fixed)
  3563                           ;	Chosen strategy is simple_byte
  3564  031C  0862               	movf	??_MEF_Subest_Actualizacion+1,w
  3565  031D  3A00               	xorlw	0	; case 0
  3566  031E  1903               	skipnz
  3567  031F  2B21               	goto	l5036
  3568  0320  2B35               	goto	l259
  3569  0321                     l5036:
  3570                           
  3571                           ; Switch size 1, requested type "simple"
  3572                           ; Number of cases is 6, Range of values is 0 to 5
  3573                           ; switch strategies available:
  3574                           ; Name         Instructions Cycles
  3575                           ; simple_byte           19    10 (average)
  3576                           ; direct_byte           26     8 (fixed)
  3577                           ; jumptable            260     6 (fixed)
  3578                           ;	Chosen strategy is simple_byte
  3579  0321  0861               	movf	??_MEF_Subest_Actualizacion,w
  3580  0322  3A00               	xorlw	0	; case 0
  3581  0323  1903               	skipnz
  3582  0324  2A0D               	goto	l4564
  3583  0325  3A01               	xorlw	1	; case 1
  3584  0326  1903               	skipnz
  3585  0327  2A15               	goto	l4568
  3586  0328  3A03               	xorlw	3	; case 2
  3587  0329  1903               	skipnz
  3588  032A  2A1F               	goto	l4572
  3589  032B  3A01               	xorlw	1	; case 3
  3590  032C  1903               	skipnz
  3591  032D  2A71               	goto	l4604
  3592  032E  3A07               	xorlw	7	; case 4
  3593  032F  1903               	skipnz
  3594  0330  2AA2               	goto	l4626
  3595  0331  3A01               	xorlw	1	; case 5
  3596  0332  1903               	skipnz
  3597  0333  2AF9               	goto	l4654
  3598  0334  2B35               	goto	l259
  3599  0335                     l259:
  3600  0335  0008               	return
  3601  0336                     __end_of_MEF_Subest_Actualizacion:
  3602                           
  3603                           	psect	text11
  3604  0003                     __ptext11:	
  3605 ;; *************** function _Salida_Modo_Pulv *****************
  3606 ;; Defined at:
  3607 ;;		line 21 in file "Modo_Pulverizacion.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		None
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3621 ;;      Params:         0       0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0
  3623 ;;      Temps:          0       0       0       0       0
  3624 ;;      Totals:         0       0       0       0       0
  3625 ;;Total ram usage:        0 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    2
  3628 ;; This function calls:
  3629 ;;		Nothing
  3630 ;; This function is called by:
  3631 ;;		_MEF_Subest_Actualizacion
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           
  3636                           ;psect for function _Salida_Modo_Pulv
  3637  0003                     _Salida_Modo_Pulv:
  3638                           
  3639                           ;Modo_Pulverizacion.c: 25:     return;
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in _Salida_Modo_Pulv: []
  3643  0003  0008               	return
  3644  0004                     __end_of_Salida_Modo_Pulv:
  3645                           
  3646                           	psect	text12
  3647  1516                     __ptext12:	
  3648 ;; *************** function _Salida_Modo_Fuga *****************
  3649 ;; Defined at:
  3650 ;;		line 15 in file "Modo_Fuga.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		None
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3664 ;;      Params:         0       0       0       0       0
  3665 ;;      Locals:         0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0
  3667 ;;      Totals:         0       0       0       0       0
  3668 ;;Total ram usage:        0 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    2
  3671 ;; This function calls:
  3672 ;;		Nothing
  3673 ;; This function is called by:
  3674 ;;		_MEF_Subest_Actualizacion
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           
  3679                           ;psect for function _Salida_Modo_Fuga
  3680  1516                     _Salida_Modo_Fuga:
  3681                           
  3682                           ;Modo_Fuga.c: 19:     return;
  3683                           
  3684                           ;incstack = 0
  3685                           ; Regs used in _Salida_Modo_Fuga: []
  3686  1516  0008               	return
  3687  1517                     __end_of_Salida_Modo_Fuga:
  3688                           
  3689                           	psect	text13
  3690  1519                     __ptext13:	
  3691 ;; *************** function _Salida_Modo_Flujo *****************
  3692 ;; Defined at:
  3693 ;;		line 15 in file "Modo_Flujo.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;		None
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;		None
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		None
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3707 ;;      Params:         0       0       0       0       0
  3708 ;;      Locals:         0       0       0       0       0
  3709 ;;      Temps:          0       0       0       0       0
  3710 ;;      Totals:         0       0       0       0       0
  3711 ;;Total ram usage:        0 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    2
  3714 ;; This function calls:
  3715 ;;		Nothing
  3716 ;; This function is called by:
  3717 ;;		_MEF_Subest_Actualizacion
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           
  3722                           ;psect for function _Salida_Modo_Flujo
  3723  1519                     _Salida_Modo_Flujo:
  3724                           
  3725                           ;Modo_Flujo.c: 17:     PORTBbits.RB4=1;
  3726                           
  3727                           ;incstack = 0
  3728                           ; Regs used in _Salida_Modo_Flujo: []
  3729  1519  1283               	bcf	3,5	;RP0=0, select bank0
  3730  151A  1303               	bcf	3,6	;RP1=0, select bank0
  3731  151B  1606               	bsf	6,4	;volatile
  3732                           
  3733                           ;Modo_Flujo.c: 21:     return;
  3734  151C  0008               	return
  3735  151D                     __end_of_Salida_Modo_Flujo:
  3736                           
  3737                           	psect	text14
  3738  062C                     __ptext14:	
  3739 ;; *************** function _Pant_Val_Act *****************
  3740 ;; Defined at:
  3741 ;;		line 76 in file "Display_Lcd.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;  buffer         20   26[BANK0 ] unsigned char [20]
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3755 ;;      Params:         0       0       0       0       0
  3756 ;;      Locals:         0      20       0       0       0
  3757 ;;      Temps:          0       2       0       0       0
  3758 ;;      Totals:         0      22       0       0       0
  3759 ;;Total ram usage:       22 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    4
  3762 ;; This function calls:
  3763 ;;		_LCD_array
  3764 ;;		_sprintf
  3765 ;; This function is called by:
  3766 ;;		_MEF_Subest_Actualizacion
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _Pant_Val_Act
  3772  062C                     _Pant_Val_Act:
  3773                           
  3774                           ;Display_Lcd.c: 78:     char buffer[20];;Display_Lcd.c: 80:     sprintf(buffer,"%05u",Rp
      +                          m);
  3775                           
  3776                           ;incstack = 0
  3777                           ; Regs used in _Pant_Val_Act: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3778  062C  30AA               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  3779  062D  00FF               	movwf	127
  3780  062E  087F               	movf	127,w
  3781  062F  1283               	bcf	3,5	;RP0=0, select bank0
  3782  0630  1303               	bcf	3,6	;RP1=0, select bank0
  3783  0631  00A9               	movwf	sprintf@f
  3784  0632  1683               	bsf	3,5	;RP0=1, select bank1
  3785  0633  1303               	bcf	3,6	;RP1=0, select bank1
  3786  0634  082F               	movf	(_Rpm+1)^(0+128),w
  3787  0635  1283               	bcf	3,5	;RP0=0, select bank0
  3788  0636  1303               	bcf	3,6	;RP1=0, select bank0
  3789  0637  00AB               	movwf	?_sprintf+2
  3790  0638  1683               	bsf	3,5	;RP0=1, select bank1
  3791  0639  1303               	bcf	3,6	;RP1=0, select bank1
  3792  063A  082E               	movf	_Rpm^(0+128),w
  3793  063B  1283               	bcf	3,5	;RP0=0, select bank0
  3794  063C  1303               	bcf	3,6	;RP1=0, select bank0
  3795  063D  00AA               	movwf	?_sprintf+1
  3796  063E  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3797  063F  120A  118A  204D  120A  118A  	fcall	_sprintf
  3798                           
  3799                           ;Display_Lcd.c: 81:     LCD_array(1,5,buffer);
  3800  0644  3001               	movlw	1
  3801  0645  1283               	bcf	3,5	;RP0=0, select bank0
  3802  0646  1303               	bcf	3,6	;RP1=0, select bank0
  3803  0647  00A0               	movwf	LCD_array@x
  3804  0648  3000               	movlw	0
  3805  0649  00A1               	movwf	LCD_array@x+1
  3806  064A  3005               	movlw	5
  3807  064B  00A2               	movwf	LCD_array@y
  3808  064C  3000               	movlw	0
  3809  064D  00A3               	movwf	LCD_array@y+1
  3810  064E  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3811  064F  00A4               	movwf	LCD_array@date
  3812  0650  3000               	movlw	0
  3813  0651  00A5               	movwf	LCD_array@date+1
  3814  0652  120A  158A  21AD  120A  118A  	fcall	_LCD_array
  3815                           
  3816                           ;Display_Lcd.c: 82:     sprintf(buffer,"%02d",Pwm);
  3817  0657  30A5               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3818  0658  00FF               	movwf	127
  3819  0659  087F               	movf	127,w
  3820  065A  1283               	bcf	3,5	;RP0=0, select bank0
  3821  065B  1303               	bcf	3,6	;RP1=0, select bank0
  3822  065C  00A9               	movwf	sprintf@f
  3823  065D  086A               	movf	_Pwm,w
  3824  065E  00B8               	movwf	??_Pant_Val_Act
  3825  065F  01B9               	clrf	??_Pant_Val_Act+1
  3826  0660  0838               	movf	??_Pant_Val_Act,w
  3827  0661  00AA               	movwf	?_sprintf+1
  3828  0662  0839               	movf	??_Pant_Val_Act+1,w
  3829  0663  00AB               	movwf	?_sprintf+2
  3830  0664  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3831  0665  120A  118A  204D  120A  118A  	fcall	_sprintf
  3832                           
  3833                           ;Display_Lcd.c: 83:     LCD_array(2,5,buffer);
  3834  066A  3002               	movlw	2
  3835  066B  1283               	bcf	3,5	;RP0=0, select bank0
  3836  066C  1303               	bcf	3,6	;RP1=0, select bank0
  3837  066D  00A0               	movwf	LCD_array@x
  3838  066E  3000               	movlw	0
  3839  066F  00A1               	movwf	LCD_array@x+1
  3840  0670  3005               	movlw	5
  3841  0671  00A2               	movwf	LCD_array@y
  3842  0672  3000               	movlw	0
  3843  0673  00A3               	movwf	LCD_array@y+1
  3844  0674  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3845  0675  00A4               	movwf	LCD_array@date
  3846  0676  3000               	movlw	0
  3847  0677  00A5               	movwf	LCD_array@date+1
  3848  0678  120A  158A  21AD  120A  118A  	fcall	_LCD_array
  3849                           
  3850                           ;Display_Lcd.c: 84:     sprintf(buffer,"%02d",Min);
  3851  067D  30A5               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3852  067E  00FF               	movwf	127
  3853  067F  087F               	movf	127,w
  3854  0680  1283               	bcf	3,5	;RP0=0, select bank0
  3855  0681  1303               	bcf	3,6	;RP1=0, select bank0
  3856  0682  00A9               	movwf	sprintf@f
  3857  0683  0869               	movf	_Min,w
  3858  0684  00B8               	movwf	??_Pant_Val_Act
  3859  0685  01B9               	clrf	??_Pant_Val_Act+1
  3860  0686  0838               	movf	??_Pant_Val_Act,w
  3861  0687  00AA               	movwf	?_sprintf+1
  3862  0688  0839               	movf	??_Pant_Val_Act+1,w
  3863  0689  00AB               	movwf	?_sprintf+2
  3864  068A  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3865  068B  120A  118A  204D  120A  118A  	fcall	_sprintf
  3866                           
  3867                           ;Display_Lcd.c: 85:     LCD_array(3,8,buffer);
  3868  0690  3003               	movlw	3
  3869  0691  1283               	bcf	3,5	;RP0=0, select bank0
  3870  0692  1303               	bcf	3,6	;RP1=0, select bank0
  3871  0693  00A0               	movwf	LCD_array@x
  3872  0694  3000               	movlw	0
  3873  0695  00A1               	movwf	LCD_array@x+1
  3874  0696  3008               	movlw	8
  3875  0697  00A2               	movwf	LCD_array@y
  3876  0698  3000               	movlw	0
  3877  0699  00A3               	movwf	LCD_array@y+1
  3878  069A  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3879  069B  00A4               	movwf	LCD_array@date
  3880  069C  3000               	movlw	0
  3881  069D  00A5               	movwf	LCD_array@date+1
  3882  069E  120A  158A  21AD  120A  118A  	fcall	_LCD_array
  3883                           
  3884                           ;Display_Lcd.c: 86:     sprintf(buffer,"%02d",Seg);
  3885  06A3  30A5               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3886  06A4  00FF               	movwf	127
  3887  06A5  087F               	movf	127,w
  3888  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3889  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3890  06A8  00A9               	movwf	sprintf@f
  3891  06A9  0868               	movf	_Seg,w
  3892  06AA  00B8               	movwf	??_Pant_Val_Act
  3893  06AB  01B9               	clrf	??_Pant_Val_Act+1
  3894  06AC  0838               	movf	??_Pant_Val_Act,w
  3895  06AD  00AA               	movwf	?_sprintf+1
  3896  06AE  0839               	movf	??_Pant_Val_Act+1,w
  3897  06AF  00AB               	movwf	?_sprintf+2
  3898  06B0  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3899  06B1  120A  118A  204D  120A  118A  	fcall	_sprintf
  3900                           
  3901                           ;Display_Lcd.c: 87:     LCD_array(3,11,buffer);
  3902  06B6  3003               	movlw	3
  3903  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  3904  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  3905  06B9  00A0               	movwf	LCD_array@x
  3906  06BA  3000               	movlw	0
  3907  06BB  00A1               	movwf	LCD_array@x+1
  3908  06BC  300B               	movlw	11
  3909  06BD  00A2               	movwf	LCD_array@y
  3910  06BE  3000               	movlw	0
  3911  06BF  00A3               	movwf	LCD_array@y+1
  3912  06C0  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3913  06C1  00A4               	movwf	LCD_array@date
  3914  06C2  3000               	movlw	0
  3915  06C3  00A5               	movwf	LCD_array@date+1
  3916  06C4  120A  158A  21AD  120A  118A  	fcall	_LCD_array
  3917                           
  3918                           ;Display_Lcd.c: 88:     sprintf(buffer,"%02d",Temp);
  3919  06C9  30A5               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3920  06CA  00FF               	movwf	127
  3921  06CB  087F               	movf	127,w
  3922  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  3923  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  3924  06CE  00A9               	movwf	sprintf@f
  3925  06CF  1683               	bsf	3,5	;RP0=1, select bank1
  3926  06D0  1303               	bcf	3,6	;RP1=0, select bank1
  3927  06D1  083B               	movf	_Temp^(0+128),w
  3928  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  3929  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  3930  06D4  00B8               	movwf	??_Pant_Val_Act
  3931  06D5  01B9               	clrf	??_Pant_Val_Act+1
  3932  06D6  0838               	movf	??_Pant_Val_Act,w
  3933  06D7  00AA               	movwf	?_sprintf+1
  3934  06D8  0839               	movf	??_Pant_Val_Act+1,w
  3935  06D9  00AB               	movwf	?_sprintf+2
  3936  06DA  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3937  06DB  120A  118A  204D  120A  118A  	fcall	_sprintf
  3938                           
  3939                           ;Display_Lcd.c: 89:     LCD_array(4,13,buffer);
  3940  06E0  3004               	movlw	4
  3941  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3942  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  3943  06E3  00A0               	movwf	LCD_array@x
  3944  06E4  3000               	movlw	0
  3945  06E5  00A1               	movwf	LCD_array@x+1
  3946  06E6  300D               	movlw	13
  3947  06E7  00A2               	movwf	LCD_array@y
  3948  06E8  3000               	movlw	0
  3949  06E9  00A3               	movwf	LCD_array@y+1
  3950  06EA  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3951  06EB  00A4               	movwf	LCD_array@date
  3952  06EC  3000               	movlw	0
  3953  06ED  00A5               	movwf	LCD_array@date+1
  3954  06EE  120A  158A  21AD   	fcall	_LCD_array
  3955  06F1  0008               	return
  3956  06F2                     __end_of_Pant_Val_Act:
  3957                           
  3958                           	psect	text15
  3959  17B5                     __ptext15:	
  3960 ;; *************** function _Pant_Temporizador *****************
  3961 ;; Defined at:
  3962 ;;		line 94 in file "Display_Lcd.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  buffer         20   26[BANK0 ] unsigned char [20]
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3976 ;;      Params:         0       0       0       0       0
  3977 ;;      Locals:         0      20       0       0       0
  3978 ;;      Temps:          0       2       0       0       0
  3979 ;;      Totals:         0      22       0       0       0
  3980 ;;Total ram usage:       22 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    4
  3983 ;; This function calls:
  3984 ;;		_LCD_array
  3985 ;;		_sprintf
  3986 ;; This function is called by:
  3987 ;;		_MEF_Subest_Actualizacion
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           
  3992                           ;psect for function _Pant_Temporizador
  3993  17B5                     _Pant_Temporizador:
  3994                           
  3995                           ;Display_Lcd.c: 96:     char buffer[20];;Display_Lcd.c: 98:     sprintf(buffer,"%02d",Mi
      +                          n);
  3996                           
  3997                           ;incstack = 0
  3998                           ; Regs used in _Pant_Temporizador: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3999  17B5  30A5               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  4000  17B6  00FF               	movwf	127
  4001  17B7  087F               	movf	127,w
  4002  17B8  1283               	bcf	3,5	;RP0=0, select bank0
  4003  17B9  1303               	bcf	3,6	;RP1=0, select bank0
  4004  17BA  00A9               	movwf	sprintf@f
  4005  17BB  0869               	movf	_Min,w
  4006  17BC  00B8               	movwf	??_Pant_Temporizador
  4007  17BD  01B9               	clrf	??_Pant_Temporizador+1
  4008  17BE  0838               	movf	??_Pant_Temporizador,w
  4009  17BF  00AA               	movwf	?_sprintf+1
  4010  17C0  0839               	movf	??_Pant_Temporizador+1,w
  4011  17C1  00AB               	movwf	?_sprintf+2
  4012  17C2  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  4013  17C3  120A  118A  204D  160A  118A  	fcall	_sprintf
  4014                           
  4015                           ;Display_Lcd.c: 99:     LCD_array(3,8,buffer);
  4016  17C8  3003               	movlw	3
  4017  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  4018  17CA  1303               	bcf	3,6	;RP1=0, select bank0
  4019  17CB  00A0               	movwf	LCD_array@x
  4020  17CC  3000               	movlw	0
  4021  17CD  00A1               	movwf	LCD_array@x+1
  4022  17CE  3008               	movlw	8
  4023  17CF  00A2               	movwf	LCD_array@y
  4024  17D0  3000               	movlw	0
  4025  17D1  00A3               	movwf	LCD_array@y+1
  4026  17D2  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  4027  17D3  00A4               	movwf	LCD_array@date
  4028  17D4  3000               	movlw	0
  4029  17D5  00A5               	movwf	LCD_array@date+1
  4030  17D6  120A  158A  21AD  160A  118A  	fcall	_LCD_array
  4031                           
  4032                           ;Display_Lcd.c: 100:     sprintf(buffer,"%02d",Seg);
  4033  17DB  30A5               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  4034  17DC  00FF               	movwf	127
  4035  17DD  087F               	movf	127,w
  4036  17DE  1283               	bcf	3,5	;RP0=0, select bank0
  4037  17DF  1303               	bcf	3,6	;RP1=0, select bank0
  4038  17E0  00A9               	movwf	sprintf@f
  4039  17E1  0868               	movf	_Seg,w
  4040  17E2  00B8               	movwf	??_Pant_Temporizador
  4041  17E3  01B9               	clrf	??_Pant_Temporizador+1
  4042  17E4  0838               	movf	??_Pant_Temporizador,w
  4043  17E5  00AA               	movwf	?_sprintf+1
  4044  17E6  0839               	movf	??_Pant_Temporizador+1,w
  4045  17E7  00AB               	movwf	?_sprintf+2
  4046  17E8  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  4047  17E9  120A  118A  204D  160A  118A  	fcall	_sprintf
  4048                           
  4049                           ;Display_Lcd.c: 101:     LCD_array(3,11,buffer);
  4050  17EE  3003               	movlw	3
  4051  17EF  1283               	bcf	3,5	;RP0=0, select bank0
  4052  17F0  1303               	bcf	3,6	;RP1=0, select bank0
  4053  17F1  00A0               	movwf	LCD_array@x
  4054  17F2  3000               	movlw	0
  4055  17F3  00A1               	movwf	LCD_array@x+1
  4056  17F4  300B               	movlw	11
  4057  17F5  00A2               	movwf	LCD_array@y
  4058  17F6  3000               	movlw	0
  4059  17F7  00A3               	movwf	LCD_array@y+1
  4060  17F8  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  4061  17F9  00A4               	movwf	LCD_array@date
  4062  17FA  3000               	movlw	0
  4063  17FB  00A5               	movwf	LCD_array@date+1
  4064  17FC  120A  158A  21AD   	fcall	_LCD_array
  4065  17FF  0008               	return
  4066  1800                     __end_of_Pant_Temporizador:
  4067                           
  4068                           	psect	text16
  4069  004D                     __ptext16:	
  4070 ;; *************** function _sprintf *****************
  4071 ;; Defined at:
  4072 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;  sp              1    wreg     PTR unsigned char 
  4075 ;;		 -> Pant_Temporizador@buffer(20), Pant_Val_Act@buffer(20), 
  4076 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  4077 ;;		 -> STR_30(5), STR_29(5), STR_28(5), STR_27(5), 
  4078 ;;		 -> STR_26(5), STR_25(5), STR_24(5), 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  4081 ;;		 -> Pant_Temporizador@buffer(20), Pant_Val_Act@buffer(20), 
  4082 ;;  tmpval          4    0        struct .
  4083 ;;  width           2   20[BANK0 ] int 
  4084 ;;  val             2   17[BANK0 ] unsigned int 
  4085 ;;  cp              2    0        PTR const unsigned char 
  4086 ;;  len             2    0        unsigned int 
  4087 ;;  c               1   22[BANK0 ] unsigned char 
  4088 ;;  flag            1   19[BANK0 ] unsigned char 
  4089 ;;  ap              1   16[BANK0 ] PTR void [1]
  4090 ;;		 -> ?_sprintf(2), 
  4091 ;;  prec            1   15[BANK0 ] char 
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  2    9[BANK0 ] int 
  4094 ;; Registers used:
  4095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4101 ;;      Params:         0       3       0       0       0
  4102 ;;      Locals:         0       9       0       0       0
  4103 ;;      Temps:          0       3       0       0       0
  4104 ;;      Totals:         0      15       0       0       0
  4105 ;;Total ram usage:       15 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    3
  4108 ;; This function calls:
  4109 ;;		___lwdiv
  4110 ;;		___lwmod
  4111 ;;		___wmul
  4112 ;;		_isdigit
  4113 ;; This function is called by:
  4114 ;;		_Pant_Val_Act
  4115 ;;		_Pant_Temporizador
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function _sprintf
  4121  004D                     _sprintf:
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4125                           ;sprintf@sp stored from wreg
  4126  004D  1283               	bcf	3,5	;RP0=0, select bank0
  4127  004E  1303               	bcf	3,6	;RP1=0, select bank0
  4128  004F  00B7               	movwf	sprintf@sp
  4129                           
  4130                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  4131  0050  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4132  0051  00FF               	movwf	127
  4133  0052  087F               	movf	127,w
  4134  0053  00B0               	movwf	sprintf@ap
  4135  0054                     l4390:	
  4136                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4137                           
  4138                           
  4139                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4140  0054  3001               	movlw	1
  4141  0055  07A9               	addwf	sprintf@f,f
  4142  0056  30FF               	movlw	-1
  4143  0057  0729               	addwf	sprintf@f,w
  4144  0058  0084               	movwf	4
  4145  0059  120A  118A  270A  120A  118A  	fcall	stringdir
  4146  005E  00FF               	movwf	127
  4147  005F  087F               	movf	127,w
  4148  0060  00B6               	movwf	sprintf@c
  4149  0061  0836               	movf	sprintf@c,w
  4150  0062  1903               	btfsc	3,2
  4151  0063  2A07               	goto	l4392
  4152                           
  4153                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4154  0064  3025               	movlw	37
  4155  0065  0636               	xorwf	sprintf@c,w
  4156  0066  1903               	btfsc	3,2
  4157  0067  2874               	goto	l4288
  4158                           
  4159                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4160  0068  0836               	movf	sprintf@c,w
  4161  0069  00FF               	movwf	127
  4162  006A  0837               	movf	sprintf@sp,w
  4163  006B  0084               	movwf	4
  4164  006C  087F               	movf	127,w
  4165  006D  1383               	bcf	3,7	;select IRP bank0
  4166  006E  0080               	movwf	0
  4167  006F  3001               	movlw	1
  4168  0070  00FF               	movwf	127
  4169  0071  087F               	movf	127,w
  4170  0072  07B7               	addwf	sprintf@sp,f
  4171                           
  4172                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 559:    continue;
  4173  0073  2854               	goto	l4390
  4174  0074                     l4288:
  4175                           
  4176                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  4177  0074  01B4               	clrf	sprintf@width
  4178  0075  01B5               	clrf	sprintf@width+1
  4179                           
  4180                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4181  0076  01B3               	clrf	sprintf@flag
  4182  0077  287D               	goto	l4294
  4183  0078                     l678:	
  4184                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 596:    case '0':
  4185                           
  4186                           
  4187                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  4188  0078  1533               	bsf	sprintf@flag,2
  4189                           
  4190                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 598:     f++;
  4191  0079  3001               	movlw	1
  4192  007A  00FF               	movwf	127
  4193  007B  087F               	movf	127,w
  4194  007C  07A9               	addwf	sprintf@f,f
  4195  007D                     l4294:	
  4196                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  4197                           
  4198  007D  0829               	movf	sprintf@f,w
  4199  007E  0084               	movwf	4
  4200  007F  120A  118A  270A  120A  118A  	fcall	stringdir
  4201  0084  00AC               	movwf	??_sprintf
  4202  0085  01AD               	clrf	??_sprintf+1
  4203                           
  4204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4205                           ; Switch size 1, requested type "simple"
  4206                           ; Number of cases is 1, Range of values is 0 to 0
  4207                           ; switch strategies available:
  4208                           ; Name         Instructions Cycles
  4209                           ; simple_byte            4     3 (average)
  4210                           ; direct_byte           11     8 (fixed)
  4211                           ; jumptable            260     6 (fixed)
  4212                           ;	Chosen strategy is simple_byte
  4213  0086  082D               	movf	??_sprintf+1,w
  4214  0087  3A00               	xorlw	0	; case 0
  4215  0088  1903               	skipnz
  4216  0089  288B               	goto	l5038
  4217  008A  2890               	goto	l4296
  4218  008B                     l5038:
  4219                           
  4220                           ; Switch size 1, requested type "simple"
  4221                           ; Number of cases is 1, Range of values is 48 to 48
  4222                           ; switch strategies available:
  4223                           ; Name         Instructions Cycles
  4224                           ; simple_byte            4     3 (average)
  4225                           ; direct_byte           14    11 (fixed)
  4226                           ; jumptable            263     9 (fixed)
  4227                           ;	Chosen strategy is simple_byte
  4228  008B  082C               	movf	??_sprintf,w
  4229  008C  3A30               	xorlw	48	; case 48
  4230  008D  1903               	skipnz
  4231  008E  2878               	goto	l678
  4232  008F  2890               	goto	l4296
  4233  0090                     l4296:
  4234                           
  4235                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  4236  0090  0829               	movf	sprintf@f,w
  4237  0091  0084               	movwf	4
  4238  0092  120A  118A  270A  120A  118A  	fcall	stringdir
  4239  0097  120A  118A  26F2  120A  118A  	fcall	_isdigit
  4240  009C  1C03               	btfss	3,0
  4241  009D  28DF               	goto	l4310
  4242                           
  4243                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  4244  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4245  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4246  00A0  01B4               	clrf	sprintf@width
  4247  00A1  01B5               	clrf	sprintf@width+1
  4248  00A2                     l4300:
  4249                           
  4250                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  4251  00A2  300A               	movlw	10
  4252  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  4253  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  4254  00A5  00A3               	movwf	___wmul@multiplier
  4255  00A6  3000               	movlw	0
  4256  00A7  00A4               	movwf	___wmul@multiplier+1
  4257  00A8  0835               	movf	sprintf@width+1,w
  4258  00A9  00A6               	movwf	___wmul@multiplicand+1
  4259  00AA  0834               	movf	sprintf@width,w
  4260  00AB  00A5               	movwf	___wmul@multiplicand
  4261  00AC  160A  118A  25B9  120A  118A  	fcall	___wmul
  4262  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  4263  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  4264  00B3  0824               	movf	?___wmul+1,w
  4265  00B4  00B5               	movwf	sprintf@width+1
  4266  00B5  0823               	movf	?___wmul,w
  4267  00B6  00B4               	movwf	sprintf@width
  4268                           
  4269                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  4270  00B7  0829               	movf	sprintf@f,w
  4271  00B8  0084               	movwf	4
  4272  00B9  120A  118A  270A  120A  118A  	fcall	stringdir
  4273  00BE  3ED0               	addlw	208
  4274  00BF  00AC               	movwf	??_sprintf
  4275  00C0  30FF               	movlw	255
  4276  00C1  1803               	skipnc
  4277  00C2  3000               	movlw	0
  4278  00C3  00AD               	movwf	??_sprintf+1
  4279  00C4  082C               	movf	??_sprintf,w
  4280  00C5  07B4               	addwf	sprintf@width,f
  4281  00C6  1803               	skipnc
  4282  00C7  0AB5               	incf	sprintf@width+1,f
  4283  00C8  082D               	movf	??_sprintf+1,w
  4284  00C9  07B5               	addwf	sprintf@width+1,f
  4285  00CA  3001               	movlw	1
  4286  00CB  00FF               	movwf	127
  4287  00CC  087F               	movf	127,w
  4288  00CD  07A9               	addwf	sprintf@f,f
  4289                           
  4290                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  4291  00CE  0829               	movf	sprintf@f,w
  4292  00CF  0084               	movwf	4
  4293  00D0  120A  118A  270A  120A  118A  	fcall	stringdir
  4294  00D5  120A  118A  26F2  120A  118A  	fcall	_isdigit
  4295  00DA  1C03               	btfss	3,0
  4296  00DB  28DF               	goto	l4310
  4297  00DC  28A2               	goto	l4300
  4298  00DD                     l692:	
  4299                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 843:   case 'u':
  4300                           
  4301                           
  4302                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          x40;
  4303  00DD  1733               	bsf	sprintf@flag,6
  4304                           
  4305                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 845:    break;
  4306  00DE  2901               	goto	l690
  4307  00DF                     l4310:
  4308  00DF  3001               	movlw	1
  4309  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  4310  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  4311  00E2  07A9               	addwf	sprintf@f,f
  4312  00E3  30FF               	movlw	-1
  4313  00E4  0729               	addwf	sprintf@f,w
  4314  00E5  0084               	movwf	4
  4315  00E6  120A  118A  270A  120A  118A  	fcall	stringdir
  4316  00EB  00B6               	movwf	sprintf@c
  4317  00EC  00AC               	movwf	??_sprintf
  4318  00ED  01AD               	clrf	??_sprintf+1
  4319                           
  4320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4321                           ; Switch size 1, requested type "simple"
  4322                           ; Number of cases is 1, Range of values is 0 to 0
  4323                           ; switch strategies available:
  4324                           ; Name         Instructions Cycles
  4325                           ; simple_byte            4     3 (average)
  4326                           ; direct_byte           11     8 (fixed)
  4327                           ; jumptable            260     6 (fixed)
  4328                           ;	Chosen strategy is simple_byte
  4329  00EE  082D               	movf	??_sprintf+1,w
  4330  00EF  3A00               	xorlw	0	; case 0
  4331  00F0  1903               	skipnz
  4332  00F1  28F3               	goto	l5040
  4333  00F2  2854               	goto	l4390
  4334  00F3                     l5040:
  4335                           
  4336                           ; Switch size 1, requested type "simple"
  4337                           ; Number of cases is 4, Range of values is 0 to 117
  4338                           ; switch strategies available:
  4339                           ; Name         Instructions Cycles
  4340                           ; simple_byte           13     7 (average)
  4341                           ; jumptable            260     6 (fixed)
  4342                           ;	Chosen strategy is simple_byte
  4343  00F3  082C               	movf	??_sprintf,w
  4344  00F4  3A00               	xorlw	0	; case 0
  4345  00F5  1903               	skipnz
  4346  00F6  2A07               	goto	l4392
  4347  00F7  3A64               	xorlw	100	; case 100
  4348  00F8  1903               	skipnz
  4349  00F9  2901               	goto	l690
  4350  00FA  3A0D               	xorlw	13	; case 105
  4351  00FB  1903               	skipnz
  4352  00FC  2901               	goto	l690
  4353  00FD  3A1C               	xorlw	28	; case 117
  4354  00FE  1903               	skipnz
  4355  00FF  28DD               	goto	l692
  4356  0100  2854               	goto	l4390
  4357  0101                     l690:
  4358                           
  4359                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1277:   if((flag 
      +                          & 0x40) == 0x00)
  4360  0101  1B33               	btfsc	sprintf@flag,6
  4361  0102  291B               	goto	l4322
  4362                           
  4363                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4364  0103  0830               	movf	sprintf@ap,w
  4365  0104  0084               	movwf	4
  4366  0105  1383               	bcf	3,7	;select IRP bank0
  4367  0106  0800               	movf	0,w
  4368  0107  00B1               	movwf	sprintf@val
  4369  0108  0A84               	incf	4,f
  4370  0109  0800               	movf	0,w
  4371  010A  00B2               	movwf	sprintf@val+1
  4372  010B  3002               	movlw	2
  4373  010C  00FF               	movwf	127
  4374  010D  087F               	movf	127,w
  4375  010E  07B0               	addwf	sprintf@ap,f
  4376                           
  4377                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  4378  010F  1FB2               	btfss	sprintf@val+1,7
  4379  0110  2927               	goto	l4326
  4380                           
  4381                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  4382  0111  3003               	movlw	3
  4383  0112  00FF               	movwf	127
  4384  0113  087F               	movf	127,w
  4385  0114  04B3               	iorwf	sprintf@flag,f
  4386                           
  4387                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  4388  0115  09B1               	comf	sprintf@val,f
  4389  0116  09B2               	comf	sprintf@val+1,f
  4390  0117  0AB1               	incf	sprintf@val,f
  4391  0118  1903               	skipnz
  4392  0119  0AB2               	incf	sprintf@val+1,f
  4393  011A  2927               	goto	l4326
  4394  011B                     l4322:
  4395                           
  4396                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4397  011B  0830               	movf	sprintf@ap,w
  4398  011C  0084               	movwf	4
  4399  011D  1383               	bcf	3,7	;select IRP bank0
  4400  011E  0800               	movf	0,w
  4401  011F  00B1               	movwf	sprintf@val
  4402  0120  0A84               	incf	4,f
  4403  0121  0800               	movf	0,w
  4404  0122  00B2               	movwf	sprintf@val+1
  4405  0123  3002               	movlw	2
  4406  0124  00FF               	movwf	127
  4407  0125  087F               	movf	127,w
  4408  0126  07B0               	addwf	sprintf@ap,f
  4409  0127                     l4326:
  4410                           
  4411                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4412  0127  01B6               	clrf	sprintf@c
  4413  0128  0AB6               	incf	sprintf@c,f
  4414  0129                     l4332:
  4415                           
  4416                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  4417  0129  0836               	movf	sprintf@c,w
  4418  012A  00AC               	movwf	??_sprintf
  4419  012B  072C               	addwf	??_sprintf,w
  4420  012C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4421  012D  0084               	movwf	4
  4422  012E  120A  118A  270A  120A  118A  	fcall	stringdir
  4423  0133  00AD               	movwf	??_sprintf+1
  4424  0134  120A  118A  270A  120A  118A  	fcall	stringdir
  4425  0139  00AE               	movwf	??_sprintf+2
  4426  013A  082E               	movf	??_sprintf+2,w
  4427  013B  0232               	subwf	sprintf@val+1,w
  4428  013C  1D03               	skipz
  4429  013D  2940               	goto	u4685
  4430  013E  082D               	movf	??_sprintf+1,w
  4431  013F  0231               	subwf	sprintf@val,w
  4432  0140                     u4685:
  4433  0140  1C03               	btfss	3,0
  4434  0141  294A               	goto	l4340
  4435  0142  3001               	movlw	1
  4436  0143  00FF               	movwf	127
  4437  0144  087F               	movf	127,w
  4438  0145  07B6               	addwf	sprintf@c,f
  4439  0146  3005               	movlw	5
  4440  0147  0636               	xorwf	sprintf@c,w
  4441  0148  1D03               	btfss	3,2
  4442  0149  2929               	goto	l4332
  4443  014A                     l4340:
  4444                           
  4445                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  4446  014A  0834               	movf	sprintf@width,w
  4447  014B  0435               	iorwf	sprintf@width+1,w
  4448  014C  1903               	btfsc	3,2
  4449  014D  2958               	goto	l699
  4450  014E  0833               	movf	sprintf@flag,w
  4451  014F  3903               	andlw	3
  4452  0150  1903               	btfsc	3,2
  4453  0151  2958               	goto	l699
  4454                           
  4455                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1372:    width--;
  4456  0152  30FF               	movlw	255
  4457  0153  07B4               	addwf	sprintf@width,f
  4458  0154  1803               	skipnc
  4459  0155  0AB5               	incf	sprintf@width+1,f
  4460  0156  30FF               	movlw	255
  4461  0157  07B5               	addwf	sprintf@width+1,f
  4462  0158                     l699:
  4463                           
  4464                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  4465  0158  0835               	movf	sprintf@width+1,w
  4466  0159  3A80               	xorlw	128
  4467  015A  3C80               	sublw	128
  4468  015B  1D03               	skipz
  4469  015C  295F               	goto	u4725
  4470  015D  0834               	movf	sprintf@width,w
  4471  015E  0236               	subwf	sprintf@c,w
  4472  015F                     u4725:
  4473  015F  1803               	skipnc
  4474  0160  296D               	goto	l4348
  4475                           
  4476                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  4477  0161  1283               	bcf	3,5	;RP0=0, select bank0
  4478  0162  1303               	bcf	3,6	;RP1=0, select bank0
  4479  0163  0836               	movf	sprintf@c,w
  4480  0164  00AC               	movwf	??_sprintf
  4481  0165  01AD               	clrf	??_sprintf+1
  4482  0166  082C               	movf	??_sprintf,w
  4483  0167  02B4               	subwf	sprintf@width,f
  4484  0168  082D               	movf	??_sprintf+1,w
  4485  0169  1C03               	skipc
  4486  016A  03B5               	decf	sprintf@width+1,f
  4487  016B  02B5               	subwf	sprintf@width+1,f
  4488  016C  2971               	goto	l4350
  4489  016D                     l4348:
  4490                           
  4491                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  4492  016D  1283               	bcf	3,5	;RP0=0, select bank0
  4493  016E  1303               	bcf	3,6	;RP1=0, select bank0
  4494  016F  01B4               	clrf	sprintf@width
  4495  0170  01B5               	clrf	sprintf@width+1
  4496  0171                     l4350:
  4497                           
  4498                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  4499  0171  1D33               	btfss	sprintf@flag,2
  4500  0172  2998               	goto	l4366
  4501                           
  4502                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  4503  0173  0833               	movf	sprintf@flag,w
  4504  0174  3903               	andlw	3
  4505  0175  1903               	btfsc	3,2
  4506  0176  2982               	goto	l4358
  4507                           
  4508                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  4509  0177  302D               	movlw	45
  4510  0178  00FF               	movwf	127
  4511  0179  0837               	movf	sprintf@sp,w
  4512  017A  0084               	movwf	4
  4513  017B  087F               	movf	127,w
  4514  017C  1383               	bcf	3,7	;select IRP bank0
  4515  017D  0080               	movwf	0
  4516  017E  3001               	movlw	1
  4517  017F  00FF               	movwf	127
  4518  0180  087F               	movf	127,w
  4519  0181  07B7               	addwf	sprintf@sp,f
  4520  0182                     l4358:
  4521                           
  4522                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  4523  0182  0834               	movf	sprintf@width,w
  4524  0183  0435               	iorwf	sprintf@width+1,w
  4525  0184  1903               	btfsc	3,2
  4526  0185  29C0               	goto	l4380
  4527                           
  4528                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  4529  0186  3030               	movlw	48
  4530  0187  00FF               	movwf	127
  4531  0188  0837               	movf	sprintf@sp,w
  4532  0189  0084               	movwf	4
  4533  018A  087F               	movf	127,w
  4534  018B  1383               	bcf	3,7	;select IRP bank0
  4535  018C  0080               	movwf	0
  4536  018D  3001               	movlw	1
  4537  018E  00FF               	movwf	127
  4538  018F  087F               	movf	127,w
  4539  0190  07B7               	addwf	sprintf@sp,f
  4540  0191  30FF               	movlw	255
  4541  0192  07B4               	addwf	sprintf@width,f
  4542  0193  1803               	skipnc
  4543  0194  0AB5               	incf	sprintf@width+1,f
  4544  0195  30FF               	movlw	255
  4545  0196  07B5               	addwf	sprintf@width+1,f
  4546  0197  2982               	goto	l4358
  4547  0198                     l4366:
  4548                           
  4549                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1450:    if(width
  4550  0198  0834               	movf	sprintf@width,w
  4551  0199  0435               	iorwf	sprintf@width+1,w
  4552  019A  1903               	btfsc	3,2
  4553  019B  29B1               	goto	l4374
  4554  019C                     l4368:
  4555                           
  4556                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  4557  019C  3020               	movlw	32
  4558  019D  00FF               	movwf	127
  4559  019E  0837               	movf	sprintf@sp,w
  4560  019F  0084               	movwf	4
  4561  01A0  087F               	movf	127,w
  4562  01A1  1383               	bcf	3,7	;select IRP bank0
  4563  01A2  0080               	movwf	0
  4564  01A3  3001               	movlw	1
  4565  01A4  00FF               	movwf	127
  4566  01A5  087F               	movf	127,w
  4567  01A6  07B7               	addwf	sprintf@sp,f
  4568  01A7  30FF               	movlw	255
  4569  01A8  07B4               	addwf	sprintf@width,f
  4570  01A9  1803               	skipnc
  4571  01AA  0AB5               	incf	sprintf@width+1,f
  4572  01AB  30FF               	movlw	255
  4573  01AC  07B5               	addwf	sprintf@width+1,f
  4574  01AD  0834               	movf	sprintf@width,w
  4575  01AE  0435               	iorwf	sprintf@width+1,w
  4576  01AF  1D03               	btfss	3,2
  4577  01B0  299C               	goto	l4368
  4578  01B1                     l4374:
  4579                           
  4580                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  4581  01B1  0833               	movf	sprintf@flag,w
  4582  01B2  3903               	andlw	3
  4583  01B3  1903               	btfsc	3,2
  4584  01B4  29C0               	goto	l4380
  4585                           
  4586                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4587  01B5  302D               	movlw	45
  4588  01B6  00FF               	movwf	127
  4589  01B7  0837               	movf	sprintf@sp,w
  4590  01B8  0084               	movwf	4
  4591  01B9  087F               	movf	127,w
  4592  01BA  1383               	bcf	3,7	;select IRP bank0
  4593  01BB  0080               	movwf	0
  4594  01BC  3001               	movlw	1
  4595  01BD  00FF               	movwf	127
  4596  01BE  087F               	movf	127,w
  4597  01BF  07B7               	addwf	sprintf@sp,f
  4598  01C0                     l4380:
  4599                           
  4600                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  4601  01C0  0836               	movf	sprintf@c,w
  4602  01C1  00FF               	movwf	127
  4603  01C2  087F               	movf	127,w
  4604  01C3  00AF               	movwf	sprintf@prec
  4605  01C4                     l4388:	
  4606                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4607                           
  4608                           
  4609                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4610  01C4  30FF               	movlw	255
  4611  01C5  00FF               	movwf	127
  4612  01C6  087F               	movf	127,w
  4613  01C7  07AF               	addwf	sprintf@prec,f
  4614  01C8  0A2F               	incf	sprintf@prec,w
  4615  01C9  1903               	btfsc	3,2
  4616  01CA  2854               	goto	l4390
  4617                           
  4618                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4619  01CB  300A               	movlw	10
  4620  01CC  00A3               	movwf	___lwmod@divisor
  4621  01CD  3000               	movlw	0
  4622  01CE  00A4               	movwf	___lwmod@divisor+1
  4623  01CF  082F               	movf	sprintf@prec,w
  4624  01D0  00AC               	movwf	??_sprintf
  4625  01D1  072C               	addwf	??_sprintf,w
  4626  01D2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4627  01D3  0084               	movwf	4
  4628  01D4  120A  118A  270A  120A  118A  	fcall	stringdir
  4629  01D9  00F3               	movwf	___lwdiv@divisor
  4630  01DA  120A  118A  270A  120A  118A  	fcall	stringdir
  4631  01DF  00F4               	movwf	___lwdiv@divisor+1
  4632  01E0  0832               	movf	sprintf@val+1,w
  4633  01E1  00F6               	movwf	___lwdiv@dividend+1
  4634  01E2  0831               	movf	sprintf@val,w
  4635  01E3  00F5               	movwf	___lwdiv@dividend
  4636  01E4  120A  118A  27C2  120A  118A  	fcall	___lwdiv
  4637  01E9  0874               	movf	?___lwdiv+1,w
  4638  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  4639  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  4640  01EC  00A6               	movwf	___lwmod@dividend+1
  4641  01ED  0873               	movf	?___lwdiv,w
  4642  01EE  00A5               	movwf	___lwmod@dividend
  4643  01EF  160A  118A  26FF  120A  118A  	fcall	___lwmod
  4644  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  4645  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  4646  01F6  0823               	movf	?___lwmod,w
  4647  01F7  3E30               	addlw	48
  4648  01F8  00FF               	movwf	127
  4649  01F9  087F               	movf	127,w
  4650  01FA  00B6               	movwf	sprintf@c
  4651                           
  4652                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  4653  01FB  0836               	movf	sprintf@c,w
  4654  01FC  00FF               	movwf	127
  4655  01FD  0837               	movf	sprintf@sp,w
  4656  01FE  0084               	movwf	4
  4657  01FF  087F               	movf	127,w
  4658  0200  1383               	bcf	3,7	;select IRP bank0
  4659  0201  0080               	movwf	0
  4660  0202  3001               	movlw	1
  4661  0203  00FF               	movwf	127
  4662  0204  087F               	movf	127,w
  4663  0205  07B7               	addwf	sprintf@sp,f
  4664  0206  29C4               	goto	l4388
  4665  0207                     l4392:
  4666                           
  4667                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4668  0207  0837               	movf	sprintf@sp,w
  4669  0208  0084               	movwf	4
  4670  0209  1383               	bcf	3,7	;select IRP bank0
  4671  020A  0180               	clrf	0
  4672  020B  0008               	return
  4673  020C                     __end_of_sprintf:
  4674                           
  4675                           	psect	text17
  4676  06F2                     __ptext17:	
  4677 ;; *************** function _isdigit *****************
  4678 ;; Defined at:
  4679 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\isdigit.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;  c               1    wreg     unsigned char 
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;  c               1    4[COMMON] unsigned char 
  4684 ;; Return value:  Size  Location     Type
  4685 ;;		None               void
  4686 ;; Registers used:
  4687 ;;		wreg, status,2, status,0
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4693 ;;      Params:         0       0       0       0       0
  4694 ;;      Locals:         2       0       0       0       0
  4695 ;;      Temps:          0       0       0       0       0
  4696 ;;      Totals:         2       0       0       0       0
  4697 ;;Total ram usage:        2 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    2
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_sprintf
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _isdigit
  4709  06F2                     _isdigit:
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4713                           ;isdigit@c stored from wreg
  4714  06F2  00F4               	movwf	isdigit@c
  4715  06F3  01F3               	clrf	_isdigit$1272
  4716  06F4  303A               	movlw	58
  4717  06F5  0274               	subwf	isdigit@c,w
  4718  06F6  1803               	skipnc
  4719  06F7  2EFE               	goto	l3968
  4720  06F8  3030               	movlw	48
  4721  06F9  0274               	subwf	isdigit@c,w
  4722  06FA  1C03               	skipc
  4723  06FB  2EFE               	goto	l3968
  4724  06FC  01F3               	clrf	_isdigit$1272
  4725  06FD  0AF3               	incf	_isdigit$1272,f
  4726  06FE                     l3968:
  4727  06FE  0C73               	rrf	_isdigit$1272,w
  4728  06FF  0008               	return
  4729  0700                     __end_of_isdigit:
  4730                           
  4731                           	psect	text18
  4732  16FF                     __ptext18:	
  4733 ;; *************** function ___lwmod *****************
  4734 ;; Defined at:
  4735 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwmod.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  divisor         2    3[BANK0 ] unsigned int 
  4738 ;;  dividend        2    5[BANK0 ] unsigned int 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  counter         1    7[COMMON] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  2    3[BANK0 ] unsigned int 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0, btemp+1
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4750 ;;      Params:         0       4       0       0       0
  4751 ;;      Locals:         1       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0
  4753 ;;      Totals:         1       4       0       0       0
  4754 ;;Total ram usage:        5 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    2
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_sprintf
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           
  4765                           ;psect for function ___lwmod
  4766  16FF                     ___lwmod:
  4767                           
  4768                           ;incstack = 0
  4769                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  4770  16FF  1283               	bcf	3,5	;RP0=0, select bank0
  4771  1700  1303               	bcf	3,6	;RP1=0, select bank0
  4772  1701  0823               	movf	___lwmod@divisor,w
  4773  1702  0424               	iorwf	___lwmod@divisor+1,w
  4774  1703  1903               	btfsc	3,2
  4775  1704  2F2E               	goto	l4182
  4776  1705  01F7               	clrf	___lwmod@counter
  4777  1706  0AF7               	incf	___lwmod@counter,f
  4778  1707                     l4172:
  4779  1707  1BA4               	btfsc	___lwmod@divisor+1,7
  4780  1708  2F15               	goto	l4174
  4781  1709  3001               	movlw	1
  4782  170A                     u4475:
  4783  170A  1003               	clrc
  4784  170B  0DA3               	rlf	___lwmod@divisor,f
  4785  170C  0DA4               	rlf	___lwmod@divisor+1,f
  4786  170D  3EFF               	addlw	-1
  4787  170E  1D03               	skipz
  4788  170F  2F0A               	goto	u4475
  4789  1710  3001               	movlw	1
  4790  1711  00FF               	movwf	127
  4791  1712  087F               	movf	127,w
  4792  1713  07F7               	addwf	___lwmod@counter,f
  4793  1714  2F07               	goto	l4172
  4794  1715                     l4174:
  4795  1715  0824               	movf	___lwmod@divisor+1,w
  4796  1716  0226               	subwf	___lwmod@dividend+1,w
  4797  1717  1D03               	skipz
  4798  1718  2F1B               	goto	u4495
  4799  1719  0823               	movf	___lwmod@divisor,w
  4800  171A  0225               	subwf	___lwmod@dividend,w
  4801  171B                     u4495:
  4802  171B  1C03               	skipc
  4803  171C  2F23               	goto	l4178
  4804  171D  0823               	movf	___lwmod@divisor,w
  4805  171E  02A5               	subwf	___lwmod@dividend,f
  4806  171F  0824               	movf	___lwmod@divisor+1,w
  4807  1720  1C03               	skipc
  4808  1721  03A6               	decf	___lwmod@dividend+1,f
  4809  1722  02A6               	subwf	___lwmod@dividend+1,f
  4810  1723                     l4178:
  4811  1723  3001               	movlw	1
  4812  1724                     u4505:
  4813  1724  1003               	clrc
  4814  1725  0CA4               	rrf	___lwmod@divisor+1,f
  4815  1726  0CA3               	rrf	___lwmod@divisor,f
  4816  1727  3EFF               	addlw	-1
  4817  1728  1D03               	skipz
  4818  1729  2F24               	goto	u4505
  4819  172A  3001               	movlw	1
  4820  172B  02F7               	subwf	___lwmod@counter,f
  4821  172C  1D03               	btfss	3,2
  4822  172D  2F15               	goto	l4174
  4823  172E                     l4182:
  4824  172E  0826               	movf	___lwmod@dividend+1,w
  4825  172F  00A4               	movwf	?___lwmod+1
  4826  1730  0825               	movf	___lwmod@dividend,w
  4827  1731  00A3               	movwf	?___lwmod
  4828  1732  0008               	return
  4829  1733                     __end_of___lwmod:
  4830                           
  4831                           	psect	text19
  4832  0C01                     __ptext19:	
  4833 ;; *************** function _Pant_Modos *****************
  4834 ;; Defined at:
  4835 ;;		line 64 in file "Display_Lcd.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;		None
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4849 ;;      Params:         0       0       0       0       0
  4850 ;;      Locals:         0       0       0       0       0
  4851 ;;      Temps:          0       0       0       0       0
  4852 ;;      Totals:         0       0       0       0       0
  4853 ;;Total ram usage:        0 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    4
  4856 ;; This function calls:
  4857 ;;		_LCD_array
  4858 ;;		_LCD_command
  4859 ;;		_LCD_date
  4860 ;;		_LCD_xy
  4861 ;; This function is called by:
  4862 ;;		_MEF_Subest_Actualizacion
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _Pant_Modos
  4868  0C01                     _Pant_Modos:
  4869                           
  4870                           ;Display_Lcd.c: 66:     LCD_command(0x01);
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _Pant_Modos: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4874  0C01  3001               	movlw	1
  4875  0C02  120A  158A  2746  120A  158A  	fcall	_LCD_command
  4876                           
  4877                           ;Display_Lcd.c: 67:     LCD_array(1,1,"RPM:");
  4878  0C07  3001               	movlw	1
  4879  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  4880  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  4881  0C0A  00A0               	movwf	LCD_array@x
  4882  0C0B  3000               	movlw	0
  4883  0C0C  00A1               	movwf	LCD_array@x+1
  4884  0C0D  3001               	movlw	1
  4885  0C0E  00A2               	movwf	LCD_array@y
  4886  0C0F  3000               	movlw	0
  4887  0C10  00A3               	movwf	LCD_array@y+1
  4888  0C11  3096               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  4889  0C12  00A4               	movwf	LCD_array@date
  4890  0C13  3080               	movlw	128
  4891  0C14  00A5               	movwf	LCD_array@date+1
  4892  0C15  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  4893                           
  4894                           ;Display_Lcd.c: 68:     LCD_array(2,1,"PWM:");
  4895  0C1A  3002               	movlw	2
  4896  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  4897  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  4898  0C1D  00A0               	movwf	LCD_array@x
  4899  0C1E  3000               	movlw	0
  4900  0C1F  00A1               	movwf	LCD_array@x+1
  4901  0C20  3001               	movlw	1
  4902  0C21  00A2               	movwf	LCD_array@y
  4903  0C22  3000               	movlw	0
  4904  0C23  00A3               	movwf	LCD_array@y+1
  4905  0C24  309B               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  4906  0C25  00A4               	movwf	LCD_array@date
  4907  0C26  3080               	movlw	128
  4908  0C27  00A5               	movwf	LCD_array@date+1
  4909  0C28  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  4910                           
  4911                           ;Display_Lcd.c: 69:     LCD_array(3,1,"TIEMPO:"),LCD_array(3,10,":");
  4912  0C2D  3003               	movlw	3
  4913  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  4914  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  4915  0C30  00A0               	movwf	LCD_array@x
  4916  0C31  3000               	movlw	0
  4917  0C32  00A1               	movwf	LCD_array@x+1
  4918  0C33  3001               	movlw	1
  4919  0C34  00A2               	movwf	LCD_array@y
  4920  0C35  3000               	movlw	0
  4921  0C36  00A3               	movwf	LCD_array@y+1
  4922  0C37  3088               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  4923  0C38  00A4               	movwf	LCD_array@date
  4924  0C39  3080               	movlw	128
  4925  0C3A  00A5               	movwf	LCD_array@date+1
  4926  0C3B  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  4927  0C40  3003               	movlw	3
  4928  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  4929  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  4930  0C43  00A0               	movwf	LCD_array@x
  4931  0C44  3000               	movlw	0
  4932  0C45  00A1               	movwf	LCD_array@x+1
  4933  0C46  300A               	movlw	10
  4934  0C47  00A2               	movwf	LCD_array@y
  4935  0C48  3000               	movlw	0
  4936  0C49  00A3               	movwf	LCD_array@y+1
  4937  0C4A  3086               	movlw	(low (((STR_22+11)-__stringbase)| (0+32768)))& (0+255)
  4938  0C4B  00A4               	movwf	LCD_array@date
  4939  0C4C  3080               	movlw	128
  4940  0C4D  00A5               	movwf	LCD_array@date+1
  4941  0C4E  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  4942                           
  4943                           ;Display_Lcd.c: 70:     LCD_array(4,1,"TEMPERATURA:"),LCD_xy(4,16),LCD_date(0x01);
  4944  0C53  3004               	movlw	4
  4945  0C54  1283               	bcf	3,5	;RP0=0, select bank0
  4946  0C55  1303               	bcf	3,6	;RP1=0, select bank0
  4947  0C56  00A0               	movwf	LCD_array@x
  4948  0C57  3000               	movlw	0
  4949  0C58  00A1               	movwf	LCD_array@x+1
  4950  0C59  3001               	movlw	1
  4951  0C5A  00A2               	movwf	LCD_array@y
  4952  0C5B  3000               	movlw	0
  4953  0C5C  00A3               	movwf	LCD_array@y+1
  4954  0C5D  307B               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  4955  0C5E  00A4               	movwf	LCD_array@date
  4956  0C5F  3080               	movlw	128
  4957  0C60  00A5               	movwf	LCD_array@date+1
  4958  0C61  120A  158A  21AD  120A  158A  	fcall	_LCD_array
  4959  0C66  3004               	movlw	4
  4960  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  4961  0C68  1303               	bcf	3,6	;RP1=0, select bank0
  4962  0C69  00A0               	movwf	LCD_xy@x
  4963  0C6A  3000               	movlw	0
  4964  0C6B  00A1               	movwf	LCD_xy@x+1
  4965  0C6C  3010               	movlw	16
  4966  0C6D  00A2               	movwf	LCD_xy@y
  4967  0C6E  3000               	movlw	0
  4968  0C6F  00A3               	movwf	LCD_xy@y+1
  4969  0C70  160A  118A  26CC  120A  158A  	fcall	_LCD_xy
  4970  0C75  3001               	movlw	1
  4971  0C76  120A  158A  25D6  120A  158A  	fcall	_LCD_date
  4972                           
  4973                           ;Display_Lcd.c: 71:     LCD_array(4,17,"C");
  4974  0C7B  3004               	movlw	4
  4975  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  4976  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  4977  0C7E  00A0               	movwf	LCD_array@x
  4978  0C7F  3000               	movlw	0
  4979  0C80  00A1               	movwf	LCD_array@x+1
  4980  0C81  3011               	movlw	17
  4981  0C82  00A2               	movwf	LCD_array@y
  4982  0C83  3000               	movlw	0
  4983  0C84  00A3               	movwf	LCD_array@y+1
  4984  0C85  30B1               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  4985  0C86  00A4               	movwf	LCD_array@date
  4986  0C87  3080               	movlw	128
  4987  0C88  00A5               	movwf	LCD_array@date+1
  4988  0C89  120A  158A  21AD   	fcall	_LCD_array
  4989  0C8C  0008               	return
  4990  0C8D                     __end_of_Pant_Modos:
  4991                           
  4992                           	psect	text20
  4993  16CC                     __ptext20:	
  4994 ;; *************** function _LCD_xy *****************
  4995 ;; Defined at:
  4996 ;;		line 163 in file "Lcd.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  x               2    0[BANK0 ] int 
  4999 ;;  y               2    2[BANK0 ] int 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5011 ;;      Params:         0       4       0       0       0
  5012 ;;      Locals:         0       0       0       0       0
  5013 ;;      Temps:          0       0       0       0       0
  5014 ;;      Totals:         0       4       0       0       0
  5015 ;;Total ram usage:        4 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    3
  5018 ;; This function calls:
  5019 ;;		_LCD_command
  5020 ;; This function is called by:
  5021 ;;		_Pant_Modos
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           
  5026                           ;psect for function _LCD_xy
  5027  16CC                     _LCD_xy:
  5028                           
  5029                           ;Lcd.c: 163: void LCD_xy(int x,int y);Lcd.c: 164: {;Lcd.c: 165:     switch(x)
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _LCD_xy: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5033  16CC  2EE9               	goto	l4274
  5034  16CD                     l4264:
  5035  16CD  0822               	movf	LCD_xy@y,w
  5036  16CE  3EFF               	addlw	255
  5037  16CF  3880               	iorlw	128
  5038  16D0  120A  158A  2746   	fcall	_LCD_command
  5039                           
  5040                           ;Lcd.c: 168:         break;
  5041  16D3  0008               	return
  5042  16D4                     l4266:
  5043  16D4  0822               	movf	LCD_xy@y,w
  5044  16D5  3E3F               	addlw	63
  5045  16D6  3880               	iorlw	128
  5046  16D7  120A  158A  2746   	fcall	_LCD_command
  5047                           
  5048                           ;Lcd.c: 170:         break;
  5049  16DA  0008               	return
  5050  16DB                     l4268:
  5051  16DB  0822               	movf	LCD_xy@y,w
  5052  16DC  3E13               	addlw	19
  5053  16DD  3880               	iorlw	128
  5054  16DE  120A  158A  2746   	fcall	_LCD_command
  5055                           
  5056                           ;Lcd.c: 172:         break;
  5057  16E1  0008               	return
  5058  16E2                     l4270:
  5059  16E2  0822               	movf	LCD_xy@y,w
  5060  16E3  3E53               	addlw	83
  5061  16E4  3880               	iorlw	128
  5062  16E5  120A  158A  2746   	fcall	_LCD_command
  5063                           
  5064                           ;Lcd.c: 174:         break;
  5065  16E8  0008               	return
  5066  16E9                     l4274:
  5067                           
  5068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5069                           ; Switch size 1, requested type "simple"
  5070                           ; Number of cases is 1, Range of values is 0 to 0
  5071                           ; switch strategies available:
  5072                           ; Name         Instructions Cycles
  5073                           ; simple_byte            4     3 (average)
  5074                           ; direct_byte           11     8 (fixed)
  5075                           ; jumptable            260     6 (fixed)
  5076                           ;	Chosen strategy is simple_byte
  5077  16E9  1283               	bcf	3,5	;RP0=0, select bank0
  5078  16EA  1303               	bcf	3,6	;RP1=0, select bank0
  5079  16EB  0821               	movf	LCD_xy@x+1,w
  5080  16EC  3A00               	xorlw	0	; case 0
  5081  16ED  1903               	skipnz
  5082  16EE  2EF0               	goto	l5042
  5083  16EF  2EFE               	goto	l456
  5084  16F0                     l5042:
  5085                           
  5086                           ; Switch size 1, requested type "simple"
  5087                           ; Number of cases is 4, Range of values is 1 to 4
  5088                           ; switch strategies available:
  5089                           ; Name         Instructions Cycles
  5090                           ; simple_byte           13     7 (average)
  5091                           ; direct_byte           23    11 (fixed)
  5092                           ; jumptable            263     9 (fixed)
  5093                           ;	Chosen strategy is simple_byte
  5094  16F0  0820               	movf	LCD_xy@x,w
  5095  16F1  3A01               	xorlw	1	; case 1
  5096  16F2  1903               	skipnz
  5097  16F3  2ECD               	goto	l4264
  5098  16F4  3A03               	xorlw	3	; case 2
  5099  16F5  1903               	skipnz
  5100  16F6  2ED4               	goto	l4266
  5101  16F7  3A01               	xorlw	1	; case 3
  5102  16F8  1903               	skipnz
  5103  16F9  2EDB               	goto	l4268
  5104  16FA  3A07               	xorlw	7	; case 4
  5105  16FB  1903               	skipnz
  5106  16FC  2EE2               	goto	l4270
  5107  16FD  2EFE               	goto	l456
  5108  16FE                     l456:
  5109  16FE  0008               	return
  5110  16FF                     __end_of_LCD_xy:
  5111                           
  5112                           	psect	text21
  5113  155B                     __ptext21:	
  5114 ;; *************** function _Lec_Adc_Modo_Pulv *****************
  5115 ;; Defined at:
  5116 ;;		line 4 in file "Modo_Pulverizacion.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;		None
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5130 ;;      Params:         0       0       0       0       0
  5131 ;;      Locals:         0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0
  5133 ;;      Totals:         0       0       0       0       0
  5134 ;;Total ram usage:        0 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    5
  5137 ;; This function calls:
  5138 ;;		_Adc_Min_Read
  5139 ;;		_Adc_Pwm_Read
  5140 ;;		_Adc_Rpm_Read
  5141 ;;		_Adc_Temp_Read
  5142 ;; This function is called by:
  5143 ;;		_MEF_Subest_Actualizacion
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _Lec_Adc_Modo_Pulv
  5149  155B                     _Lec_Adc_Modo_Pulv:
  5150                           
  5151                           ;Modo_Pulverizacion.c: 7:     Adc_Rpm_Read();
  5152                           
  5153                           ;incstack = 0
  5154                           ; Regs used in _Lec_Adc_Modo_Pulv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5155  155B  120A  118A  2336  160A  118A  	fcall	_Adc_Rpm_Read
  5156                           
  5157                           ;Modo_Pulverizacion.c: 10:     Adc_Pwm_Read();
  5158  1560  120A  158A  2379  160A  118A  	fcall	_Adc_Pwm_Read
  5159                           
  5160                           ;Modo_Pulverizacion.c: 13:     Adc_Min_Read();
  5161  1565  120A  118A  245E  160A  118A  	fcall	_Adc_Min_Read
  5162                           
  5163                           ;Modo_Pulverizacion.c: 16:     Adc_Temp_Read();
  5164  156A  120A  158A  2149   	fcall	_Adc_Temp_Read
  5165  156D  0008               	return
  5166  156E                     __end_of_Lec_Adc_Modo_Pulv:
  5167                           
  5168                           	psect	text22
  5169  0336                     __ptext22:	
  5170 ;; *************** function _Adc_Rpm_Read *****************
  5171 ;; Defined at:
  5172 ;;		line 9 in file "Adc_Read.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;		None
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  valor           2   63[BANK0 ] unsigned int 
  5177 ;;  dec_m           2   61[BANK0 ] unsigned int 
  5178 ;;  uni_m           2   59[BANK0 ] unsigned int 
  5179 ;;  cent            2   57[BANK0 ] unsigned int 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      void 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5189 ;;      Params:         0       0       0       0       0
  5190 ;;      Locals:         0      11       0       0       0
  5191 ;;      Temps:          0       4       0       0       0
  5192 ;;      Totals:         0      15       0       0       0
  5193 ;;Total ram usage:       15 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    4
  5196 ;; This function calls:
  5197 ;;		_Adc
  5198 ;;		___awtoft
  5199 ;;		___ftdiv
  5200 ;;		___ftmul
  5201 ;;		___fttol
  5202 ;;		___lwdiv
  5203 ;;		___wmul
  5204 ;; This function is called by:
  5205 ;;		_Lec_Adc_Modo_Pulv
  5206 ;; This function uses a non-reentrant model
  5207 ;;
  5208                           
  5209                           
  5210                           ;psect for function _Adc_Rpm_Read
  5211  0336                     _Adc_Rpm_Read:
  5212                           
  5213                           ;incstack = 0
  5214                           ; Regs used in _Adc_Rpm_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5215  0336  1283               	bcf	3,5	;RP0=0, select bank0
  5216  0337  1303               	bcf	3,6	;RP1=0, select bank0
  5217  0338  01DD               	clrf	Adc_Rpm_Read@dec_m
  5218  0339  01DE               	clrf	Adc_Rpm_Read@dec_m+1
  5219  033A  01DB               	clrf	Adc_Rpm_Read@uni_m
  5220  033B  01DC               	clrf	Adc_Rpm_Read@uni_m+1
  5221                           
  5222                           ;Adc_Read.c: 13:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  5223  033C  3000               	movlw	0
  5224  033D  160A  118A  276C  120A  118A  	fcall	_Adc
  5225  0342  0874               	movf	?_Adc+1,w
  5226  0343  1283               	bcf	3,5	;RP0=0, select bank0
  5227  0344  1303               	bcf	3,6	;RP1=0, select bank0
  5228  0345  00A4               	movwf	___awtoft@c+1
  5229  0346  0873               	movf	?_Adc,w
  5230  0347  00A3               	movwf	___awtoft@c
  5231  0348  160A  118A  2600  120A  118A  	fcall	___awtoft
  5232  034D  1283               	bcf	3,5	;RP0=0, select bank0
  5233  034E  1303               	bcf	3,6	;RP1=0, select bank0
  5234  034F  0823               	movf	?___awtoft,w
  5235  0350  00AA               	movwf	___ftmul@f2
  5236  0351  0824               	movf	?___awtoft+1,w
  5237  0352  00AB               	movwf	___ftmul@f2+1
  5238  0353  0825               	movf	?___awtoft+2,w
  5239  0354  00AC               	movwf	___ftmul@f2+2
  5240  0355  3000               	movlw	0
  5241  0356  00A7               	movwf	___ftmul@f1
  5242  0357  30A0               	movlw	160
  5243  0358  00A8               	movwf	___ftmul@f1+1
  5244  0359  3040               	movlw	64
  5245  035A  00A9               	movwf	___ftmul@f1+2
  5246  035B  120A  118A  2559  120A  118A  	fcall	___ftmul
  5247  0360  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0361  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0362  0827               	movf	?___ftmul,w
  5250  0363  00B9               	movwf	___ftdiv@f1
  5251  0364  0828               	movf	?___ftmul+1,w
  5252  0365  00BA               	movwf	___ftdiv@f1+1
  5253  0366  0829               	movf	?___ftmul+2,w
  5254  0367  00BB               	movwf	___ftdiv@f1+2
  5255  0368  30C0               	movlw	192
  5256  0369  00B6               	movwf	___ftdiv@f2
  5257  036A  307F               	movlw	127
  5258  036B  00B7               	movwf	___ftdiv@f2+1
  5259  036C  3044               	movlw	68
  5260  036D  00B8               	movwf	___ftdiv@f2+2
  5261  036E  120A  158A  268E  120A  118A  	fcall	___ftdiv
  5262  0373  1283               	bcf	3,5	;RP0=0, select bank0
  5263  0374  1303               	bcf	3,6	;RP1=0, select bank0
  5264  0375  0836               	movf	?___ftdiv,w
  5265  0376  00D6               	movwf	_Adc_Rpm_Read$1469
  5266  0377  0837               	movf	?___ftdiv+1,w
  5267  0378  00D7               	movwf	_Adc_Rpm_Read$1469+1
  5268  0379  0838               	movf	?___ftdiv+2,w
  5269  037A  00D8               	movwf	_Adc_Rpm_Read$1469+2
  5270                           
  5271                           ;Adc_Read.c: 13:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  5272  037B  0856               	movf	_Adc_Rpm_Read$1469,w
  5273  037C  00AA               	movwf	___ftmul@f2
  5274  037D  0857               	movf	_Adc_Rpm_Read$1469+1,w
  5275  037E  00AB               	movwf	___ftmul@f2+1
  5276  037F  0858               	movf	_Adc_Rpm_Read$1469+2,w
  5277  0380  00AC               	movwf	___ftmul@f2+2
  5278  0381  3040               	movlw	64
  5279  0382  00A7               	movwf	___ftmul@f1
  5280  0383  301C               	movlw	28
  5281  0384  00A8               	movwf	___ftmul@f1+1
  5282  0385  3046               	movlw	70
  5283  0386  00A9               	movwf	___ftmul@f1+2
  5284  0387  120A  118A  2559  120A  118A  	fcall	___ftmul
  5285  038C  1283               	bcf	3,5	;RP0=0, select bank0
  5286  038D  1303               	bcf	3,6	;RP1=0, select bank0
  5287  038E  0827               	movf	?___ftmul,w
  5288  038F  00B9               	movwf	___ftdiv@f1
  5289  0390  0828               	movf	?___ftmul+1,w
  5290  0391  00BA               	movwf	___ftdiv@f1+1
  5291  0392  0829               	movf	?___ftmul+2,w
  5292  0393  00BB               	movwf	___ftdiv@f1+2
  5293  0394  3000               	movlw	0
  5294  0395  00B6               	movwf	___ftdiv@f2
  5295  0396  30A0               	movlw	160
  5296  0397  00B7               	movwf	___ftdiv@f2+1
  5297  0398  3040               	movlw	64
  5298  0399  00B8               	movwf	___ftdiv@f2+2
  5299  039A  120A  158A  268E  120A  118A  	fcall	___ftdiv
  5300  039F  1283               	bcf	3,5	;RP0=0, select bank0
  5301  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  5302  03A1  0836               	movf	?___ftdiv,w
  5303  03A2  00C5               	movwf	___fttol@f1
  5304  03A3  0837               	movf	?___ftdiv+1,w
  5305  03A4  00C6               	movwf	___fttol@f1+1
  5306  03A5  0838               	movf	?___ftdiv+2,w
  5307  03A6  00C7               	movwf	___fttol@f1+2
  5308  03A7  120A  158A  22FC  120A  118A  	fcall	___fttol
  5309  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  5310  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  5311  03AE  0846               	movf	?___fttol+1,w
  5312  03AF  00E0               	movwf	Adc_Rpm_Read@valor+1
  5313  03B0  0845               	movf	?___fttol,w
  5314  03B1  00DF               	movwf	Adc_Rpm_Read@valor
  5315                           
  5316                           ;Adc_Read.c: 15:     dec_m = (int)(valor/10000)*10000;
  5317  03B2  3010               	movlw	16
  5318  03B3  00F3               	movwf	___lwdiv@divisor
  5319  03B4  3027               	movlw	39
  5320  03B5  00F4               	movwf	___lwdiv@divisor+1
  5321  03B6  0860               	movf	Adc_Rpm_Read@valor+1,w
  5322  03B7  00F6               	movwf	___lwdiv@dividend+1
  5323  03B8  085F               	movf	Adc_Rpm_Read@valor,w
  5324  03B9  00F5               	movwf	___lwdiv@dividend
  5325  03BA  120A  118A  27C2  120A  118A  	fcall	___lwdiv
  5326  03BF  0874               	movf	?___lwdiv+1,w
  5327  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  5328  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  5329  03C2  00A4               	movwf	___wmul@multiplier+1
  5330  03C3  0873               	movf	?___lwdiv,w
  5331  03C4  00A3               	movwf	___wmul@multiplier
  5332  03C5  3010               	movlw	16
  5333  03C6  00A5               	movwf	___wmul@multiplicand
  5334  03C7  3027               	movlw	39
  5335  03C8  00A6               	movwf	___wmul@multiplicand+1
  5336  03C9  160A  118A  25B9  120A  118A  	fcall	___wmul
  5337  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  5338  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  5339  03D0  0824               	movf	?___wmul+1,w
  5340  03D1  00DE               	movwf	Adc_Rpm_Read@dec_m+1
  5341  03D2  0823               	movf	?___wmul,w
  5342  03D3  00DD               	movwf	Adc_Rpm_Read@dec_m
  5343                           
  5344                           ;Adc_Read.c: 16:     uni_m = (int)((valor-dec_m)/1000)*1000;
  5345  03D4  30E8               	movlw	232
  5346  03D5  00F3               	movwf	___lwdiv@divisor
  5347  03D6  3003               	movlw	3
  5348  03D7  00F4               	movwf	___lwdiv@divisor+1
  5349  03D8  085D               	movf	Adc_Rpm_Read@dec_m,w
  5350  03D9  025F               	subwf	Adc_Rpm_Read@valor,w
  5351  03DA  00F5               	movwf	___lwdiv@dividend
  5352  03DB  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5353  03DC  1C03               	skipc
  5354  03DD  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5355  03DE  0260               	subwf	Adc_Rpm_Read@valor+1,w
  5356  03DF  00F6               	movwf	___lwdiv@dividend+1
  5357  03E0  120A  118A  27C2  120A  118A  	fcall	___lwdiv
  5358  03E5  0874               	movf	?___lwdiv+1,w
  5359  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  5360  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  5361  03E8  00A4               	movwf	___wmul@multiplier+1
  5362  03E9  0873               	movf	?___lwdiv,w
  5363  03EA  00A3               	movwf	___wmul@multiplier
  5364  03EB  30E8               	movlw	232
  5365  03EC  00A5               	movwf	___wmul@multiplicand
  5366  03ED  3003               	movlw	3
  5367  03EE  00A6               	movwf	___wmul@multiplicand+1
  5368  03EF  160A  118A  25B9  120A  118A  	fcall	___wmul
  5369  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  5370  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  5371  03F6  0824               	movf	?___wmul+1,w
  5372  03F7  00DC               	movwf	Adc_Rpm_Read@uni_m+1
  5373  03F8  0823               	movf	?___wmul,w
  5374  03F9  00DB               	movwf	Adc_Rpm_Read@uni_m
  5375                           
  5376                           ;Adc_Read.c: 17:     cent = (int)((valor-(uni_m+dec_m))/100)*100;
  5377  03FA  3064               	movlw	100
  5378  03FB  00F3               	movwf	___lwdiv@divisor
  5379  03FC  3000               	movlw	0
  5380  03FD  00F4               	movwf	___lwdiv@divisor+1
  5381  03FE  095B               	comf	Adc_Rpm_Read@uni_m,w
  5382  03FF  00D2               	movwf	??_Adc_Rpm_Read
  5383  0400  095C               	comf	Adc_Rpm_Read@uni_m+1,w
  5384  0401  00D3               	movwf	??_Adc_Rpm_Read+1
  5385  0402  0AD2               	incf	??_Adc_Rpm_Read,f
  5386  0403  1903               	skipnz
  5387  0404  0AD3               	incf	??_Adc_Rpm_Read+1,f
  5388  0405  085D               	movf	Adc_Rpm_Read@dec_m,w
  5389  0406  0252               	subwf	??_Adc_Rpm_Read,w
  5390  0407  00D4               	movwf	??_Adc_Rpm_Read+2
  5391  0408  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5392  0409  1C03               	skipc
  5393  040A  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5394  040B  0253               	subwf	??_Adc_Rpm_Read+1,w
  5395  040C  00D5               	movwf	??_Adc_Rpm_Read+3
  5396  040D  085F               	movf	Adc_Rpm_Read@valor,w
  5397  040E  0754               	addwf	??_Adc_Rpm_Read+2,w
  5398  040F  00F5               	movwf	___lwdiv@dividend
  5399  0410  0860               	movf	Adc_Rpm_Read@valor+1,w
  5400  0411  1803               	skipnc
  5401  0412  0A60               	incf	Adc_Rpm_Read@valor+1,w
  5402  0413  0755               	addwf	??_Adc_Rpm_Read+3,w
  5403  0414  00F6               	movwf	___lwdiv@dividend+1
  5404  0415  120A  118A  27C2  120A  118A  	fcall	___lwdiv
  5405  041A  0874               	movf	?___lwdiv+1,w
  5406  041B  1283               	bcf	3,5	;RP0=0, select bank0
  5407  041C  1303               	bcf	3,6	;RP1=0, select bank0
  5408  041D  00A4               	movwf	___wmul@multiplier+1
  5409  041E  0873               	movf	?___lwdiv,w
  5410  041F  00A3               	movwf	___wmul@multiplier
  5411  0420  3064               	movlw	100
  5412  0421  00A5               	movwf	___wmul@multiplicand
  5413  0422  3000               	movlw	0
  5414  0423  00A6               	movwf	___wmul@multiplicand+1
  5415  0424  160A  118A  25B9  120A  118A  	fcall	___wmul
  5416  0429  1283               	bcf	3,5	;RP0=0, select bank0
  5417  042A  1303               	bcf	3,6	;RP1=0, select bank0
  5418  042B  0824               	movf	?___wmul+1,w
  5419  042C  00DA               	movwf	Adc_Rpm_Read@cent+1
  5420  042D  0823               	movf	?___wmul,w
  5421  042E  00D9               	movwf	Adc_Rpm_Read@cent
  5422                           
  5423                           ;Adc_Read.c: 19:     valor = cent+uni_m+dec_m;
  5424  042F  085B               	movf	Adc_Rpm_Read@uni_m,w
  5425  0430  0759               	addwf	Adc_Rpm_Read@cent,w
  5426  0431  00D2               	movwf	??_Adc_Rpm_Read
  5427  0432  085C               	movf	Adc_Rpm_Read@uni_m+1,w
  5428  0433  1803               	skipnc
  5429  0434  0A5C               	incf	Adc_Rpm_Read@uni_m+1,w
  5430  0435  075A               	addwf	Adc_Rpm_Read@cent+1,w
  5431  0436  00D3               	movwf	??_Adc_Rpm_Read+1
  5432  0437  085D               	movf	Adc_Rpm_Read@dec_m,w
  5433  0438  0752               	addwf	??_Adc_Rpm_Read,w
  5434  0439  00DF               	movwf	Adc_Rpm_Read@valor
  5435  043A  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5436  043B  1803               	skipnc
  5437  043C  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5438  043D  0753               	addwf	??_Adc_Rpm_Read+1,w
  5439  043E  00E0               	movwf	Adc_Rpm_Read@valor+1
  5440                           
  5441                           ;Adc_Read.c: 20:     Rpm = valor;
  5442  043F  0860               	movf	Adc_Rpm_Read@valor+1,w
  5443  0440  1683               	bsf	3,5	;RP0=1, select bank1
  5444  0441  1303               	bcf	3,6	;RP1=0, select bank1
  5445  0442  00AF               	movwf	(_Rpm+1)^(0+128)
  5446  0443  1283               	bcf	3,5	;RP0=0, select bank0
  5447  0444  1303               	bcf	3,6	;RP1=0, select bank0
  5448  0445  085F               	movf	Adc_Rpm_Read@valor,w
  5449  0446  1683               	bsf	3,5	;RP0=1, select bank1
  5450  0447  1303               	bcf	3,6	;RP1=0, select bank1
  5451  0448  00AE               	movwf	_Rpm^(0+128)
  5452                           
  5453                           ;Adc_Read.c: 22:     if(Rpm == 0) Rpm = 60;
  5454  0449  082E               	movf	_Rpm^(0+128),w
  5455  044A  042F               	iorwf	(_Rpm+1)^(0+128),w
  5456  044B  1D03               	btfss	3,2
  5457  044C  2C52               	goto	l4228
  5458  044D  303C               	movlw	60
  5459  044E  00AE               	movwf	_Rpm^(0+128)
  5460  044F  3000               	movlw	0
  5461  0450  00AF               	movwf	(_Rpm^(0+128)+1)
  5462  0451  0008               	return
  5463  0452                     l4228:
  5464  0452  3027               	movlw	39
  5465  0453  022F               	subwf	(_Rpm+1)^(0+128),w
  5466  0454  3011               	movlw	17
  5467  0455  1903               	skipnz
  5468  0456  022E               	subwf	_Rpm^(0+128),w
  5469  0457  1C03               	skipc
  5470  0458  0008               	return
  5471  0459  3010               	movlw	16
  5472  045A  00AE               	movwf	_Rpm^(0+128)
  5473  045B  3027               	movlw	39
  5474  045C  00AF               	movwf	(_Rpm^(0+128)+1)
  5475  045D  0008               	return
  5476  045E                     __end_of_Adc_Rpm_Read:
  5477                           
  5478                           	psect	text23
  5479  15B9                     __ptext23:	
  5480 ;; *************** function ___wmul *****************
  5481 ;; Defined at:
  5482 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\Umul16.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  multiplier      2    3[BANK0 ] unsigned int 
  5485 ;;  multiplicand    2    5[BANK0 ] unsigned int 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  product         2    7[BANK0 ] unsigned int 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  2    3[BANK0 ] unsigned int 
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5497 ;;      Params:         0       4       0       0       0
  5498 ;;      Locals:         0       2       0       0       0
  5499 ;;      Temps:          0       0       0       0       0
  5500 ;;      Totals:         0       6       0       0       0
  5501 ;;Total ram usage:        6 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    2
  5504 ;; This function calls:
  5505 ;;		Nothing
  5506 ;; This function is called by:
  5507 ;;		_Adc_Rpm_Read
  5508 ;;		_sprintf
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function ___wmul
  5514  15B9                     ___wmul:
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5518  15B9  1283               	bcf	3,5	;RP0=0, select bank0
  5519  15BA  1303               	bcf	3,6	;RP1=0, select bank0
  5520  15BB  01A7               	clrf	___wmul@product
  5521  15BC  01A8               	clrf	___wmul@product+1
  5522  15BD                     l3974:
  5523  15BD  1C23               	btfss	___wmul@multiplier,0
  5524  15BE  2DC5               	goto	l720
  5525  15BF  0825               	movf	___wmul@multiplicand,w
  5526  15C0  07A7               	addwf	___wmul@product,f
  5527  15C1  1803               	skipnc
  5528  15C2  0AA8               	incf	___wmul@product+1,f
  5529  15C3  0826               	movf	___wmul@multiplicand+1,w
  5530  15C4  07A8               	addwf	___wmul@product+1,f
  5531  15C5                     l720:
  5532  15C5  3001               	movlw	1
  5533  15C6                     u4035:
  5534  15C6  1003               	clrc
  5535  15C7  0DA5               	rlf	___wmul@multiplicand,f
  5536  15C8  0DA6               	rlf	___wmul@multiplicand+1,f
  5537  15C9  3EFF               	addlw	-1
  5538  15CA  1D03               	skipz
  5539  15CB  2DC6               	goto	u4035
  5540  15CC  3001               	movlw	1
  5541  15CD                     u4045:
  5542  15CD  1003               	clrc
  5543  15CE  0CA4               	rrf	___wmul@multiplier+1,f
  5544  15CF  0CA3               	rrf	___wmul@multiplier,f
  5545  15D0  3EFF               	addlw	-1
  5546  15D1  1D03               	skipz
  5547  15D2  2DCD               	goto	u4045
  5548  15D3  0823               	movf	___wmul@multiplier,w
  5549  15D4  0424               	iorwf	___wmul@multiplier+1,w
  5550  15D5  1D03               	btfss	3,2
  5551  15D6  2DBD               	goto	l3974
  5552  15D7  0828               	movf	___wmul@product+1,w
  5553  15D8  00A4               	movwf	?___wmul+1
  5554  15D9  0827               	movf	___wmul@product,w
  5555  15DA  00A3               	movwf	?___wmul
  5556  15DB  0008               	return
  5557  15DC                     __end_of___wmul:
  5558                           
  5559                           	psect	text24
  5560  07C2                     __ptext24:	
  5561 ;; *************** function ___lwdiv *****************
  5562 ;; Defined at:
  5563 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwdiv.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  divisor         2    3[COMMON] unsigned int 
  5566 ;;  dividend        2    5[COMMON] unsigned int 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;  quotient        2    1[BANK0 ] unsigned int 
  5569 ;;  counter         1    0[BANK0 ] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  2    3[COMMON] unsigned int 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0, btemp+1
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5579 ;;      Params:         4       0       0       0       0
  5580 ;;      Locals:         0       3       0       0       0
  5581 ;;      Temps:          0       0       0       0       0
  5582 ;;      Totals:         4       3       0       0       0
  5583 ;;Total ram usage:        7 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    2
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_Adc_Rpm_Read
  5590 ;;		_sprintf
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function ___lwdiv
  5596  07C2                     ___lwdiv:
  5597                           
  5598                           ;incstack = 0
  5599                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  5600  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  5601  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  5602  07C4  01A1               	clrf	___lwdiv@quotient
  5603  07C5  01A2               	clrf	___lwdiv@quotient+1
  5604  07C6  0873               	movf	___lwdiv@divisor,w
  5605  07C7  0474               	iorwf	___lwdiv@divisor+1,w
  5606  07C8  1903               	btfsc	3,2
  5607  07C9  2FFB               	goto	l4160
  5608  07CA  01A0               	clrf	___lwdiv@counter
  5609  07CB  0AA0               	incf	___lwdiv@counter,f
  5610  07CC                     l4148:
  5611  07CC  1BF4               	btfsc	___lwdiv@divisor+1,7
  5612  07CD  2FDA               	goto	l4150
  5613  07CE  3001               	movlw	1
  5614  07CF                     u4405:
  5615  07CF  1003               	clrc
  5616  07D0  0DF3               	rlf	___lwdiv@divisor,f
  5617  07D1  0DF4               	rlf	___lwdiv@divisor+1,f
  5618  07D2  3EFF               	addlw	-1
  5619  07D3  1D03               	skipz
  5620  07D4  2FCF               	goto	u4405
  5621  07D5  3001               	movlw	1
  5622  07D6  00FF               	movwf	127
  5623  07D7  087F               	movf	127,w
  5624  07D8  07A0               	addwf	___lwdiv@counter,f
  5625  07D9  2FCC               	goto	l4148
  5626  07DA                     l4150:
  5627  07DA  3001               	movlw	1
  5628  07DB                     u4425:
  5629  07DB  1003               	clrc
  5630  07DC  0DA1               	rlf	___lwdiv@quotient,f
  5631  07DD  0DA2               	rlf	___lwdiv@quotient+1,f
  5632  07DE  3EFF               	addlw	-1
  5633  07DF  1D03               	skipz
  5634  07E0  2FDB               	goto	u4425
  5635  07E1  0874               	movf	___lwdiv@divisor+1,w
  5636  07E2  0276               	subwf	___lwdiv@dividend+1,w
  5637  07E3  1D03               	skipz
  5638  07E4  2FE7               	goto	u4435
  5639  07E5  0873               	movf	___lwdiv@divisor,w
  5640  07E6  0275               	subwf	___lwdiv@dividend,w
  5641  07E7                     u4435:
  5642  07E7  1C03               	skipc
  5643  07E8  2FF0               	goto	l4156
  5644  07E9  0873               	movf	___lwdiv@divisor,w
  5645  07EA  02F5               	subwf	___lwdiv@dividend,f
  5646  07EB  0874               	movf	___lwdiv@divisor+1,w
  5647  07EC  1C03               	skipc
  5648  07ED  03F6               	decf	___lwdiv@dividend+1,f
  5649  07EE  02F6               	subwf	___lwdiv@dividend+1,f
  5650  07EF  1421               	bsf	___lwdiv@quotient,0
  5651  07F0                     l4156:
  5652  07F0  3001               	movlw	1
  5653  07F1                     u4445:
  5654  07F1  1003               	clrc
  5655  07F2  0CF4               	rrf	___lwdiv@divisor+1,f
  5656  07F3  0CF3               	rrf	___lwdiv@divisor,f
  5657  07F4  3EFF               	addlw	-1
  5658  07F5  1D03               	skipz
  5659  07F6  2FF1               	goto	u4445
  5660  07F7  3001               	movlw	1
  5661  07F8  02A0               	subwf	___lwdiv@counter,f
  5662  07F9  1D03               	btfss	3,2
  5663  07FA  2FDA               	goto	l4150
  5664  07FB                     l4160:
  5665  07FB  0822               	movf	___lwdiv@quotient+1,w
  5666  07FC  00F4               	movwf	?___lwdiv+1
  5667  07FD  0821               	movf	___lwdiv@quotient,w
  5668  07FE  00F3               	movwf	?___lwdiv
  5669  07FF  0008               	return
  5670  0800                     __end_of___lwdiv:
  5671                           
  5672                           	psect	text25
  5673  0B79                     __ptext25:	
  5674 ;; *************** function _Adc_Pwm_Read *****************
  5675 ;; Defined at:
  5676 ;;		line 28 in file "Adc_Read.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5690 ;;      Params:         0       0       0       0       0
  5691 ;;      Locals:         0       3       0       0       0
  5692 ;;      Temps:          0       0       0       0       0
  5693 ;;      Totals:         0       3       0       0       0
  5694 ;;Total ram usage:        3 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    4
  5697 ;; This function calls:
  5698 ;;		_Adc
  5699 ;;		___awtoft
  5700 ;;		___ftdiv
  5701 ;;		___ftmul
  5702 ;;		___fttol
  5703 ;; This function is called by:
  5704 ;;		_Lec_Adc_Modo_Pulv
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function _Adc_Pwm_Read
  5710  0B79                     _Adc_Pwm_Read:
  5711                           
  5712                           ;Adc_Read.c: 30:     Pwm = (int)((Adc(1)*5.0/1023.0)*100.0/5.0);
  5713                           
  5714                           ;incstack = 0
  5715                           ; Regs used in _Adc_Pwm_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5716  0B79  3001               	movlw	1
  5717  0B7A  160A  118A  276C  120A  158A  	fcall	_Adc
  5718  0B7F  0874               	movf	?_Adc+1,w
  5719  0B80  1283               	bcf	3,5	;RP0=0, select bank0
  5720  0B81  1303               	bcf	3,6	;RP1=0, select bank0
  5721  0B82  00A4               	movwf	___awtoft@c+1
  5722  0B83  0873               	movf	?_Adc,w
  5723  0B84  00A3               	movwf	___awtoft@c
  5724  0B85  160A  118A  2600  120A  158A  	fcall	___awtoft
  5725  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  5727  0B8C  0823               	movf	?___awtoft,w
  5728  0B8D  00AA               	movwf	___ftmul@f2
  5729  0B8E  0824               	movf	?___awtoft+1,w
  5730  0B8F  00AB               	movwf	___ftmul@f2+1
  5731  0B90  0825               	movf	?___awtoft+2,w
  5732  0B91  00AC               	movwf	___ftmul@f2+2
  5733  0B92  3000               	movlw	0
  5734  0B93  00A7               	movwf	___ftmul@f1
  5735  0B94  30A0               	movlw	160
  5736  0B95  00A8               	movwf	___ftmul@f1+1
  5737  0B96  3040               	movlw	64
  5738  0B97  00A9               	movwf	___ftmul@f1+2
  5739  0B98  120A  118A  2559  120A  158A  	fcall	___ftmul
  5740  0B9D  1283               	bcf	3,5	;RP0=0, select bank0
  5741  0B9E  1303               	bcf	3,6	;RP1=0, select bank0
  5742  0B9F  0827               	movf	?___ftmul,w
  5743  0BA0  00B9               	movwf	___ftdiv@f1
  5744  0BA1  0828               	movf	?___ftmul+1,w
  5745  0BA2  00BA               	movwf	___ftdiv@f1+1
  5746  0BA3  0829               	movf	?___ftmul+2,w
  5747  0BA4  00BB               	movwf	___ftdiv@f1+2
  5748  0BA5  30C0               	movlw	192
  5749  0BA6  00B6               	movwf	___ftdiv@f2
  5750  0BA7  307F               	movlw	127
  5751  0BA8  00B7               	movwf	___ftdiv@f2+1
  5752  0BA9  3044               	movlw	68
  5753  0BAA  00B8               	movwf	___ftdiv@f2+2
  5754  0BAB  120A  158A  268E  120A  158A  	fcall	___ftdiv
  5755  0BB0  1283               	bcf	3,5	;RP0=0, select bank0
  5756  0BB1  1303               	bcf	3,6	;RP1=0, select bank0
  5757  0BB2  0836               	movf	?___ftdiv,w
  5758  0BB3  00D2               	movwf	_Adc_Pwm_Read$1470
  5759  0BB4  0837               	movf	?___ftdiv+1,w
  5760  0BB5  00D3               	movwf	_Adc_Pwm_Read$1470+1
  5761  0BB6  0838               	movf	?___ftdiv+2,w
  5762  0BB7  00D4               	movwf	_Adc_Pwm_Read$1470+2
  5763                           
  5764                           ;Adc_Read.c: 30:     Pwm = (int)((Adc(1)*5.0/1023.0)*100.0/5.0);
  5765  0BB8  0852               	movf	_Adc_Pwm_Read$1470,w
  5766  0BB9  00AA               	movwf	___ftmul@f2
  5767  0BBA  0853               	movf	_Adc_Pwm_Read$1470+1,w
  5768  0BBB  00AB               	movwf	___ftmul@f2+1
  5769  0BBC  0854               	movf	_Adc_Pwm_Read$1470+2,w
  5770  0BBD  00AC               	movwf	___ftmul@f2+2
  5771  0BBE  3000               	movlw	0
  5772  0BBF  00A7               	movwf	___ftmul@f1
  5773  0BC0  30C8               	movlw	200
  5774  0BC1  00A8               	movwf	___ftmul@f1+1
  5775  0BC2  3042               	movlw	66
  5776  0BC3  00A9               	movwf	___ftmul@f1+2
  5777  0BC4  120A  118A  2559  120A  158A  	fcall	___ftmul
  5778  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  5779  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  5780  0BCB  0827               	movf	?___ftmul,w
  5781  0BCC  00B9               	movwf	___ftdiv@f1
  5782  0BCD  0828               	movf	?___ftmul+1,w
  5783  0BCE  00BA               	movwf	___ftdiv@f1+1
  5784  0BCF  0829               	movf	?___ftmul+2,w
  5785  0BD0  00BB               	movwf	___ftdiv@f1+2
  5786  0BD1  3000               	movlw	0
  5787  0BD2  00B6               	movwf	___ftdiv@f2
  5788  0BD3  30A0               	movlw	160
  5789  0BD4  00B7               	movwf	___ftdiv@f2+1
  5790  0BD5  3040               	movlw	64
  5791  0BD6  00B8               	movwf	___ftdiv@f2+2
  5792  0BD7  120A  158A  268E  120A  158A  	fcall	___ftdiv
  5793  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  5794  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  5795  0BDE  0836               	movf	?___ftdiv,w
  5796  0BDF  00C5               	movwf	___fttol@f1
  5797  0BE0  0837               	movf	?___ftdiv+1,w
  5798  0BE1  00C6               	movwf	___fttol@f1+1
  5799  0BE2  0838               	movf	?___ftdiv+2,w
  5800  0BE3  00C7               	movwf	___fttol@f1+2
  5801  0BE4  120A  158A  22FC  120A  158A  	fcall	___fttol
  5802  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  5803  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  5804  0BEB  0845               	movf	?___fttol,w
  5805  0BEC  00FF               	movwf	127
  5806  0BED  087F               	movf	127,w
  5807  0BEE  00EA               	movwf	_Pwm
  5808                           
  5809                           ;Adc_Read.c: 31:     if(Pwm > 95) Pwm = 95;
  5810  0BEF  3060               	movlw	96
  5811  0BF0  026A               	subwf	_Pwm,w
  5812  0BF1  1C03               	skipc
  5813  0BF2  2BF8               	goto	l4240
  5814  0BF3  305F               	movlw	95
  5815  0BF4  00FF               	movwf	127
  5816  0BF5  087F               	movf	127,w
  5817  0BF6  00EA               	movwf	_Pwm
  5818  0BF7  0008               	return
  5819  0BF8                     l4240:
  5820  0BF8  3005               	movlw	5
  5821  0BF9  026A               	subwf	_Pwm,w
  5822  0BFA  1803               	skipnc
  5823  0BFB  0008               	return
  5824  0BFC  3005               	movlw	5
  5825  0BFD  00FF               	movwf	127
  5826  0BFE  087F               	movf	127,w
  5827  0BFF  00EA               	movwf	_Pwm
  5828  0C00  0008               	return
  5829  0C01                     __end_of_Adc_Pwm_Read:
  5830                           
  5831                           	psect	text26
  5832  1541                     __ptext26:	
  5833 ;; *************** function _Lec_Adc_Modo_Fuga *****************
  5834 ;; Defined at:
  5835 ;;		line 4 in file "Modo_Fuga.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;		None
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      void 
  5842 ;; Registers used:
  5843 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5849 ;;      Params:         0       0       0       0       0
  5850 ;;      Locals:         0       0       0       0       0
  5851 ;;      Temps:          0       0       0       0       0
  5852 ;;      Totals:         0       0       0       0       0
  5853 ;;Total ram usage:        0 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:    5
  5856 ;; This function calls:
  5857 ;;		_Adc_Min_Read
  5858 ;;		_Adc_Temp_Read
  5859 ;; This function is called by:
  5860 ;;		_MEF_Subest_Actualizacion
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           
  5865                           ;psect for function _Lec_Adc_Modo_Fuga
  5866  1541                     _Lec_Adc_Modo_Fuga:
  5867                           
  5868                           ;Modo_Fuga.c: 7:     Adc_Min_Read();
  5869                           
  5870                           ;incstack = 0
  5871                           ; Regs used in _Lec_Adc_Modo_Fuga: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5872  1541  120A  118A  245E  160A  118A  	fcall	_Adc_Min_Read
  5873                           
  5874                           ;Modo_Fuga.c: 10:     Adc_Temp_Read();
  5875  1546  120A  158A  2149   	fcall	_Adc_Temp_Read
  5876  1549  0008               	return
  5877  154A                     __end_of_Lec_Adc_Modo_Fuga:
  5878                           
  5879                           	psect	text27
  5880  1538                     __ptext27:	
  5881 ;; *************** function _Lec_Adc_Modo_Flujo *****************
  5882 ;; Defined at:
  5883 ;;		line 4 in file "Modo_Flujo.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;		None
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      void 
  5890 ;; Registers used:
  5891 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5897 ;;      Params:         0       0       0       0       0
  5898 ;;      Locals:         0       0       0       0       0
  5899 ;;      Temps:          0       0       0       0       0
  5900 ;;      Totals:         0       0       0       0       0
  5901 ;;Total ram usage:        0 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    5
  5904 ;; This function calls:
  5905 ;;		_Adc_Min_Read
  5906 ;;		_Adc_Temp_Read
  5907 ;; This function is called by:
  5908 ;;		_MEF_Subest_Actualizacion
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           
  5913                           ;psect for function _Lec_Adc_Modo_Flujo
  5914  1538                     _Lec_Adc_Modo_Flujo:
  5915                           
  5916                           ;Modo_Flujo.c: 7:     Adc_Min_Read();
  5917                           
  5918                           ;incstack = 0
  5919                           ; Regs used in _Lec_Adc_Modo_Flujo: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5920  1538  120A  118A  245E  160A  118A  	fcall	_Adc_Min_Read
  5921                           
  5922                           ;Modo_Flujo.c: 10:     Adc_Temp_Read();
  5923  153D  120A  158A  2149   	fcall	_Adc_Temp_Read
  5924  1540  0008               	return
  5925  1541                     __end_of_Lec_Adc_Modo_Flujo:
  5926                           
  5927                           	psect	text28
  5928  0949                     __ptext28:	
  5929 ;; *************** function _Adc_Temp_Read *****************
  5930 ;; Defined at:
  5931 ;;		line 47 in file "Adc_Read.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5945 ;;      Params:         0       0       0       0       0
  5946 ;;      Locals:         0       3       0       0       0
  5947 ;;      Temps:          0       0       0       0       0
  5948 ;;      Totals:         0       3       0       0       0
  5949 ;;Total ram usage:        3 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    4
  5952 ;; This function calls:
  5953 ;;		_Adc
  5954 ;;		___awtoft
  5955 ;;		___ftdiv
  5956 ;;		___ftmul
  5957 ;;		___fttol
  5958 ;; This function is called by:
  5959 ;;		_Lec_Adc_Modo_Pulv
  5960 ;;		_Lec_Adc_Modo_Fuga
  5961 ;;		_Lec_Adc_Modo_Flujo
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           
  5966                           ;psect for function _Adc_Temp_Read
  5967  0949                     _Adc_Temp_Read:
  5968                           
  5969                           ;Adc_Read.c: 49:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _Adc_Temp_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5973  0949  3003               	movlw	3
  5974  094A  160A  118A  276C  120A  158A  	fcall	_Adc
  5975  094F  0874               	movf	?_Adc+1,w
  5976  0950  1283               	bcf	3,5	;RP0=0, select bank0
  5977  0951  1303               	bcf	3,6	;RP1=0, select bank0
  5978  0952  00A4               	movwf	___awtoft@c+1
  5979  0953  0873               	movf	?_Adc,w
  5980  0954  00A3               	movwf	___awtoft@c
  5981  0955  160A  118A  2600  120A  158A  	fcall	___awtoft
  5982  095A  1283               	bcf	3,5	;RP0=0, select bank0
  5983  095B  1303               	bcf	3,6	;RP1=0, select bank0
  5984  095C  0823               	movf	?___awtoft,w
  5985  095D  00AA               	movwf	___ftmul@f2
  5986  095E  0824               	movf	?___awtoft+1,w
  5987  095F  00AB               	movwf	___ftmul@f2+1
  5988  0960  0825               	movf	?___awtoft+2,w
  5989  0961  00AC               	movwf	___ftmul@f2+2
  5990  0962  3000               	movlw	0
  5991  0963  00A7               	movwf	___ftmul@f1
  5992  0964  30A0               	movlw	160
  5993  0965  00A8               	movwf	___ftmul@f1+1
  5994  0966  3040               	movlw	64
  5995  0967  00A9               	movwf	___ftmul@f1+2
  5996  0968  120A  118A  2559  120A  158A  	fcall	___ftmul
  5997  096D  1283               	bcf	3,5	;RP0=0, select bank0
  5998  096E  1303               	bcf	3,6	;RP1=0, select bank0
  5999  096F  0827               	movf	?___ftmul,w
  6000  0970  00B9               	movwf	___ftdiv@f1
  6001  0971  0828               	movf	?___ftmul+1,w
  6002  0972  00BA               	movwf	___ftdiv@f1+1
  6003  0973  0829               	movf	?___ftmul+2,w
  6004  0974  00BB               	movwf	___ftdiv@f1+2
  6005  0975  30C0               	movlw	192
  6006  0976  00B6               	movwf	___ftdiv@f2
  6007  0977  307F               	movlw	127
  6008  0978  00B7               	movwf	___ftdiv@f2+1
  6009  0979  3044               	movlw	68
  6010  097A  00B8               	movwf	___ftdiv@f2+2
  6011  097B  120A  158A  268E  120A  158A  	fcall	___ftdiv
  6012  0980  1283               	bcf	3,5	;RP0=0, select bank0
  6013  0981  1303               	bcf	3,6	;RP1=0, select bank0
  6014  0982  0836               	movf	?___ftdiv,w
  6015  0983  00D2               	movwf	_Adc_Temp_Read$1472
  6016  0984  0837               	movf	?___ftdiv+1,w
  6017  0985  00D3               	movwf	_Adc_Temp_Read$1472+1
  6018  0986  0838               	movf	?___ftdiv+2,w
  6019  0987  00D4               	movwf	_Adc_Temp_Read$1472+2
  6020                           
  6021                           ;Adc_Read.c: 49:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  6022  0988  0852               	movf	_Adc_Temp_Read$1472,w
  6023  0989  00AA               	movwf	___ftmul@f2
  6024  098A  0853               	movf	_Adc_Temp_Read$1472+1,w
  6025  098B  00AB               	movwf	___ftmul@f2+1
  6026  098C  0854               	movf	_Adc_Temp_Read$1472+2,w
  6027  098D  00AC               	movwf	___ftmul@f2+2
  6028  098E  3000               	movlw	0
  6029  098F  00A7               	movwf	___ftmul@f1
  6030  0990  30C8               	movlw	200
  6031  0991  00A8               	movwf	___ftmul@f1+1
  6032  0992  3042               	movlw	66
  6033  0993  00A9               	movwf	___ftmul@f1+2
  6034  0994  120A  118A  2559  120A  158A  	fcall	___ftmul
  6035  0999  1283               	bcf	3,5	;RP0=0, select bank0
  6036  099A  1303               	bcf	3,6	;RP1=0, select bank0
  6037  099B  0827               	movf	?___ftmul,w
  6038  099C  00C5               	movwf	___fttol@f1
  6039  099D  0828               	movf	?___ftmul+1,w
  6040  099E  00C6               	movwf	___fttol@f1+1
  6041  099F  0829               	movf	?___ftmul+2,w
  6042  09A0  00C7               	movwf	___fttol@f1+2
  6043  09A1  120A  158A  22FC   	fcall	___fttol
  6044  09A4  1283               	bcf	3,5	;RP0=0, select bank0
  6045  09A5  1303               	bcf	3,6	;RP1=0, select bank0
  6046  09A6  0845               	movf	?___fttol,w
  6047  09A7  00FF               	movwf	127
  6048  09A8  087F               	movf	127,w
  6049  09A9  1683               	bsf	3,5	;RP0=1, select bank1
  6050  09AA  1303               	bcf	3,6	;RP1=0, select bank1
  6051  09AB  00BB               	movwf	_Temp^(0+128)
  6052  09AC  0008               	return
  6053  09AD                     __end_of_Adc_Temp_Read:
  6054                           
  6055                           	psect	text29
  6056  045E                     __ptext29:	
  6057 ;; *************** function _Adc_Min_Read *****************
  6058 ;; Defined at:
  6059 ;;		line 37 in file "Adc_Read.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;		None
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;		None
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      void 
  6066 ;; Registers used:
  6067 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6073 ;;      Params:         0       0       0       0       0
  6074 ;;      Locals:         0       3       0       0       0
  6075 ;;      Temps:          0       0       0       0       0
  6076 ;;      Totals:         0       3       0       0       0
  6077 ;;Total ram usage:        3 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    4
  6080 ;; This function calls:
  6081 ;;		_Adc
  6082 ;;		___awtoft
  6083 ;;		___ftdiv
  6084 ;;		___ftmul
  6085 ;;		___fttol
  6086 ;; This function is called by:
  6087 ;;		_Lec_Adc_Modo_Pulv
  6088 ;;		_Lec_Adc_Modo_Fuga
  6089 ;;		_Lec_Adc_Modo_Flujo
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function _Adc_Min_Read
  6095  045E                     _Adc_Min_Read:
  6096                           
  6097                           ;Adc_Read.c: 39:     if(mod_tiempo) Min = (int)((Adc(2)*5.0/1023.0)*59.0/5.0);
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in _Adc_Min_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6101  045E  1283               	bcf	3,5	;RP0=0, select bank0
  6102  045F  1303               	bcf	3,6	;RP1=0, select bank0
  6103  0460  0867               	movf	_mod_tiempo,w
  6104  0461  1903               	btfsc	3,2
  6105  0462  2CDA               	goto	l4250
  6106  0463  3002               	movlw	2
  6107  0464  160A  118A  276C  120A  118A  	fcall	_Adc
  6108  0469  0874               	movf	?_Adc+1,w
  6109  046A  1283               	bcf	3,5	;RP0=0, select bank0
  6110  046B  1303               	bcf	3,6	;RP1=0, select bank0
  6111  046C  00A4               	movwf	___awtoft@c+1
  6112  046D  0873               	movf	?_Adc,w
  6113  046E  00A3               	movwf	___awtoft@c
  6114  046F  160A  118A  2600  120A  118A  	fcall	___awtoft
  6115  0474  1283               	bcf	3,5	;RP0=0, select bank0
  6116  0475  1303               	bcf	3,6	;RP1=0, select bank0
  6117  0476  0823               	movf	?___awtoft,w
  6118  0477  00AA               	movwf	___ftmul@f2
  6119  0478  0824               	movf	?___awtoft+1,w
  6120  0479  00AB               	movwf	___ftmul@f2+1
  6121  047A  0825               	movf	?___awtoft+2,w
  6122  047B  00AC               	movwf	___ftmul@f2+2
  6123  047C  3000               	movlw	0
  6124  047D  00A7               	movwf	___ftmul@f1
  6125  047E  30A0               	movlw	160
  6126  047F  00A8               	movwf	___ftmul@f1+1
  6127  0480  3040               	movlw	64
  6128  0481  00A9               	movwf	___ftmul@f1+2
  6129  0482  120A  118A  2559  120A  118A  	fcall	___ftmul
  6130  0487  1283               	bcf	3,5	;RP0=0, select bank0
  6131  0488  1303               	bcf	3,6	;RP1=0, select bank0
  6132  0489  0827               	movf	?___ftmul,w
  6133  048A  00B9               	movwf	___ftdiv@f1
  6134  048B  0828               	movf	?___ftmul+1,w
  6135  048C  00BA               	movwf	___ftdiv@f1+1
  6136  048D  0829               	movf	?___ftmul+2,w
  6137  048E  00BB               	movwf	___ftdiv@f1+2
  6138  048F  30C0               	movlw	192
  6139  0490  00B6               	movwf	___ftdiv@f2
  6140  0491  307F               	movlw	127
  6141  0492  00B7               	movwf	___ftdiv@f2+1
  6142  0493  3044               	movlw	68
  6143  0494  00B8               	movwf	___ftdiv@f2+2
  6144  0495  120A  158A  268E  120A  118A  	fcall	___ftdiv
  6145  049A  1283               	bcf	3,5	;RP0=0, select bank0
  6146  049B  1303               	bcf	3,6	;RP1=0, select bank0
  6147  049C  0836               	movf	?___ftdiv,w
  6148  049D  00D2               	movwf	_Adc_Min_Read$1471
  6149  049E  0837               	movf	?___ftdiv+1,w
  6150  049F  00D3               	movwf	_Adc_Min_Read$1471+1
  6151  04A0  0838               	movf	?___ftdiv+2,w
  6152  04A1  00D4               	movwf	_Adc_Min_Read$1471+2
  6153  04A2  0852               	movf	_Adc_Min_Read$1471,w
  6154  04A3  00AA               	movwf	___ftmul@f2
  6155  04A4  0853               	movf	_Adc_Min_Read$1471+1,w
  6156  04A5  00AB               	movwf	___ftmul@f2+1
  6157  04A6  0854               	movf	_Adc_Min_Read$1471+2,w
  6158  04A7  00AC               	movwf	___ftmul@f2+2
  6159  04A8  3000               	movlw	0
  6160  04A9  00A7               	movwf	___ftmul@f1
  6161  04AA  306C               	movlw	108
  6162  04AB  00A8               	movwf	___ftmul@f1+1
  6163  04AC  3042               	movlw	66
  6164  04AD  00A9               	movwf	___ftmul@f1+2
  6165  04AE  120A  118A  2559  120A  118A  	fcall	___ftmul
  6166  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  6167  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  6168  04B5  0827               	movf	?___ftmul,w
  6169  04B6  00B9               	movwf	___ftdiv@f1
  6170  04B7  0828               	movf	?___ftmul+1,w
  6171  04B8  00BA               	movwf	___ftdiv@f1+1
  6172  04B9  0829               	movf	?___ftmul+2,w
  6173  04BA  00BB               	movwf	___ftdiv@f1+2
  6174  04BB  3000               	movlw	0
  6175  04BC  00B6               	movwf	___ftdiv@f2
  6176  04BD  30A0               	movlw	160
  6177  04BE  00B7               	movwf	___ftdiv@f2+1
  6178  04BF  3040               	movlw	64
  6179  04C0  00B8               	movwf	___ftdiv@f2+2
  6180  04C1  120A  158A  268E  120A  118A  	fcall	___ftdiv
  6181  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  6182  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  6183  04C8  0836               	movf	?___ftdiv,w
  6184  04C9  00C5               	movwf	___fttol@f1
  6185  04CA  0837               	movf	?___ftdiv+1,w
  6186  04CB  00C6               	movwf	___fttol@f1+1
  6187  04CC  0838               	movf	?___ftdiv+2,w
  6188  04CD  00C7               	movwf	___fttol@f1+2
  6189  04CE  120A  158A  22FC  120A  118A  	fcall	___fttol
  6190  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  6191  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  6192  04D5  0845               	movf	?___fttol,w
  6193  04D6  00FF               	movwf	127
  6194  04D7  087F               	movf	127,w
  6195  04D8  00E9               	movwf	_Min
  6196  04D9  2D53               	goto	l4254
  6197  04DA                     l4250:
  6198  04DA  0867               	movf	_mod_tiempo,w
  6199  04DB  1D03               	btfss	3,2
  6200  04DC  2D53               	goto	l4254
  6201  04DD  3002               	movlw	2
  6202  04DE  160A  118A  276C  120A  118A  	fcall	_Adc
  6203  04E3  0874               	movf	?_Adc+1,w
  6204  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  6205  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  6206  04E6  00A4               	movwf	___awtoft@c+1
  6207  04E7  0873               	movf	?_Adc,w
  6208  04E8  00A3               	movwf	___awtoft@c
  6209  04E9  160A  118A  2600  120A  118A  	fcall	___awtoft
  6210  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  6211  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  6212  04F0  0823               	movf	?___awtoft,w
  6213  04F1  00AA               	movwf	___ftmul@f2
  6214  04F2  0824               	movf	?___awtoft+1,w
  6215  04F3  00AB               	movwf	___ftmul@f2+1
  6216  04F4  0825               	movf	?___awtoft+2,w
  6217  04F5  00AC               	movwf	___ftmul@f2+2
  6218  04F6  3000               	movlw	0
  6219  04F7  00A7               	movwf	___ftmul@f1
  6220  04F8  30A0               	movlw	160
  6221  04F9  00A8               	movwf	___ftmul@f1+1
  6222  04FA  3040               	movlw	64
  6223  04FB  00A9               	movwf	___ftmul@f1+2
  6224  04FC  120A  118A  2559  120A  118A  	fcall	___ftmul
  6225  0501  1283               	bcf	3,5	;RP0=0, select bank0
  6226  0502  1303               	bcf	3,6	;RP1=0, select bank0
  6227  0503  0827               	movf	?___ftmul,w
  6228  0504  00B9               	movwf	___ftdiv@f1
  6229  0505  0828               	movf	?___ftmul+1,w
  6230  0506  00BA               	movwf	___ftdiv@f1+1
  6231  0507  0829               	movf	?___ftmul+2,w
  6232  0508  00BB               	movwf	___ftdiv@f1+2
  6233  0509  30C0               	movlw	192
  6234  050A  00B6               	movwf	___ftdiv@f2
  6235  050B  307F               	movlw	127
  6236  050C  00B7               	movwf	___ftdiv@f2+1
  6237  050D  3044               	movlw	68
  6238  050E  00B8               	movwf	___ftdiv@f2+2
  6239  050F  120A  158A  268E  120A  118A  	fcall	___ftdiv
  6240  0514  1283               	bcf	3,5	;RP0=0, select bank0
  6241  0515  1303               	bcf	3,6	;RP1=0, select bank0
  6242  0516  0836               	movf	?___ftdiv,w
  6243  0517  00D2               	movwf	_Adc_Min_Read$1471
  6244  0518  0837               	movf	?___ftdiv+1,w
  6245  0519  00D3               	movwf	_Adc_Min_Read$1471+1
  6246  051A  0838               	movf	?___ftdiv+2,w
  6247  051B  00D4               	movwf	_Adc_Min_Read$1471+2
  6248  051C  0852               	movf	_Adc_Min_Read$1471,w
  6249  051D  00AA               	movwf	___ftmul@f2
  6250  051E  0853               	movf	_Adc_Min_Read$1471+1,w
  6251  051F  00AB               	movwf	___ftmul@f2+1
  6252  0520  0854               	movf	_Adc_Min_Read$1471+2,w
  6253  0521  00AC               	movwf	___ftmul@f2+2
  6254  0522  3000               	movlw	0
  6255  0523  00A7               	movwf	___ftmul@f1
  6256  0524  306C               	movlw	108
  6257  0525  00A8               	movwf	___ftmul@f1+1
  6258  0526  3042               	movlw	66
  6259  0527  00A9               	movwf	___ftmul@f1+2
  6260  0528  120A  118A  2559  120A  118A  	fcall	___ftmul
  6261  052D  1283               	bcf	3,5	;RP0=0, select bank0
  6262  052E  1303               	bcf	3,6	;RP1=0, select bank0
  6263  052F  0827               	movf	?___ftmul,w
  6264  0530  00B9               	movwf	___ftdiv@f1
  6265  0531  0828               	movf	?___ftmul+1,w
  6266  0532  00BA               	movwf	___ftdiv@f1+1
  6267  0533  0829               	movf	?___ftmul+2,w
  6268  0534  00BB               	movwf	___ftdiv@f1+2
  6269  0535  3000               	movlw	0
  6270  0536  00B6               	movwf	___ftdiv@f2
  6271  0537  30A0               	movlw	160
  6272  0538  00B7               	movwf	___ftdiv@f2+1
  6273  0539  3040               	movlw	64
  6274  053A  00B8               	movwf	___ftdiv@f2+2
  6275  053B  120A  158A  268E  120A  118A  	fcall	___ftdiv
  6276  0540  1283               	bcf	3,5	;RP0=0, select bank0
  6277  0541  1303               	bcf	3,6	;RP1=0, select bank0
  6278  0542  0836               	movf	?___ftdiv,w
  6279  0543  00C5               	movwf	___fttol@f1
  6280  0544  0837               	movf	?___ftdiv+1,w
  6281  0545  00C6               	movwf	___fttol@f1+1
  6282  0546  0838               	movf	?___ftdiv+2,w
  6283  0547  00C7               	movwf	___fttol@f1+2
  6284  0548  120A  158A  22FC  120A  118A  	fcall	___fttol
  6285  054D  1283               	bcf	3,5	;RP0=0, select bank0
  6286  054E  1303               	bcf	3,6	;RP1=0, select bank0
  6287  054F  0845               	movf	?___fttol,w
  6288  0550  00FF               	movwf	127
  6289  0551  087F               	movf	127,w
  6290  0552  00E8               	movwf	_Seg
  6291  0553                     l4254:
  6292                           
  6293                           ;Adc_Read.c: 42:     if(Seg == 0) Seg = 1;
  6294  0553  0868               	movf	_Seg,w
  6295  0554  1D03               	btfss	3,2
  6296  0555  0008               	return
  6297  0556  01E8               	clrf	_Seg
  6298  0557  0AE8               	incf	_Seg,f
  6299  0558  0008               	return
  6300  0559                     __end_of_Adc_Min_Read:
  6301                           
  6302                           	psect	text30
  6303  0AFC                     __ptext30:	
  6304 ;; *************** function ___fttol *****************
  6305 ;; Defined at:
  6306 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\fttol.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;  f1              3   37[BANK0 ] float 
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  lval            4   45[BANK0 ] unsigned long 
  6311 ;;  exp1            1   49[BANK0 ] unsigned char 
  6312 ;;  sign1           1   44[BANK0 ] unsigned char 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  4   37[BANK0 ] long 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0, btemp+1
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6322 ;;      Params:         0       4       0       0       0
  6323 ;;      Locals:         0       6       0       0       0
  6324 ;;      Temps:          0       3       0       0       0
  6325 ;;      Totals:         0      13       0       0       0
  6326 ;;Total ram usage:       13 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    2
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_Adc_Rpm_Read
  6333 ;;		_Adc_Pwm_Read
  6334 ;;		_Adc_Min_Read
  6335 ;;		_Adc_Temp_Read
  6336 ;;		_Pwm1_init
  6337 ;;		_Pwm1
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function ___fttol
  6343  0AFC                     ___fttol:
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  6347  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  6348  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  6349  0AFE  0845               	movf	___fttol@f1,w
  6350  0AFF  00C9               	movwf	??___fttol
  6351  0B00  0846               	movf	___fttol@f1+1,w
  6352  0B01  00CA               	movwf	??___fttol+1
  6353  0B02  0847               	movf	___fttol@f1+2,w
  6354  0B03  00CB               	movwf	??___fttol+2
  6355  0B04  1003               	clrc
  6356  0B05  0D4A               	rlf	??___fttol+1,w
  6357  0B06  0D4B               	rlf	??___fttol+2,w
  6358  0B07  00FF               	movwf	127
  6359  0B08  087F               	movf	127,w
  6360  0B09  00D1               	movwf	___fttol@exp1
  6361  0B0A  0851               	movf	___fttol@exp1,w
  6362  0B0B  1D03               	btfss	3,2
  6363  0B0C  2B16               	goto	l4100
  6364  0B0D                     l4096:
  6365  0B0D  3000               	movlw	0
  6366  0B0E  00C8               	movwf	?___fttol+3
  6367  0B0F  3000               	movlw	0
  6368  0B10  00C7               	movwf	?___fttol+2
  6369  0B11  3000               	movlw	0
  6370  0B12  00C6               	movwf	?___fttol+1
  6371  0B13  3000               	movlw	0
  6372  0B14  00C5               	movwf	?___fttol
  6373  0B15  0008               	return
  6374  0B16                     l4100:
  6375  0B16  0845               	movf	___fttol@f1,w
  6376  0B17  00C9               	movwf	??___fttol
  6377  0B18  0846               	movf	___fttol@f1+1,w
  6378  0B19  00CA               	movwf	??___fttol+1
  6379  0B1A  0847               	movf	___fttol@f1+2,w
  6380  0B1B  00CB               	movwf	??___fttol+2
  6381  0B1C  3017               	movlw	23
  6382  0B1D                     u4305:
  6383  0B1D  1003               	clrc
  6384  0B1E  0CCB               	rrf	??___fttol+2,f
  6385  0B1F  0CCA               	rrf	??___fttol+1,f
  6386  0B20  0CC9               	rrf	??___fttol,f
  6387  0B21  3EFF               	addlw	-1
  6388  0B22  1D03               	skipz
  6389  0B23  2B1D               	goto	u4305
  6390  0B24  0849               	movf	??___fttol,w
  6391  0B25  00FF               	movwf	127
  6392  0B26  087F               	movf	127,w
  6393  0B27  00CC               	movwf	___fttol@sign1
  6394  0B28  17C6               	bsf	___fttol@f1+1,7
  6395  0B29  30FF               	movlw	255
  6396  0B2A  05C5               	andwf	___fttol@f1,f
  6397  0B2B  30FF               	movlw	255
  6398  0B2C  05C6               	andwf	___fttol@f1+1,f
  6399  0B2D  3000               	movlw	0
  6400  0B2E  05C7               	andwf	___fttol@f1+2,f
  6401  0B2F  0845               	movf	___fttol@f1,w
  6402  0B30  00CD               	movwf	___fttol@lval
  6403  0B31  0846               	movf	___fttol@f1+1,w
  6404  0B32  00CE               	movwf	___fttol@lval+1
  6405  0B33  0847               	movf	___fttol@f1+2,w
  6406  0B34  00CF               	movwf	___fttol@lval+2
  6407  0B35  01D0               	clrf	___fttol@lval+3
  6408  0B36  308E               	movlw	142
  6409  0B37  02D1               	subwf	___fttol@exp1,f
  6410  0B38  1FD1               	btfss	___fttol@exp1,7
  6411  0B39  2B4F               	goto	l4122
  6412  0B3A  0851               	movf	___fttol@exp1,w
  6413  0B3B  3A80               	xorlw	128
  6414  0B3C  3E8F               	addlw	143
  6415  0B3D  1C03               	btfss	3,0
  6416  0B3E  2B0D               	goto	l4096
  6417  0B3F                     l4118:
  6418  0B3F  3001               	movlw	1
  6419  0B40                     u4335:
  6420  0B40  1003               	clrc
  6421  0B41  0CD0               	rrf	___fttol@lval+3,f
  6422  0B42  0CCF               	rrf	___fttol@lval+2,f
  6423  0B43  0CCE               	rrf	___fttol@lval+1,f
  6424  0B44  0CCD               	rrf	___fttol@lval,f
  6425  0B45  3EFF               	addlw	-1
  6426  0B46  1D03               	skipz
  6427  0B47  2B40               	goto	u4335
  6428  0B48  3001               	movlw	1
  6429  0B49  00FF               	movwf	127
  6430  0B4A  087F               	movf	127,w
  6431  0B4B  07D1               	addwf	___fttol@exp1,f
  6432  0B4C  1903               	btfsc	3,2
  6433  0B4D  2B62               	goto	l4130
  6434  0B4E  2B3F               	goto	l4118
  6435  0B4F                     l4122:
  6436  0B4F  3018               	movlw	24
  6437  0B50  0251               	subwf	___fttol@exp1,w
  6438  0B51  1803               	btfsc	3,0
  6439  0B52  2B0D               	goto	l4096
  6440  0B53                     l1023:
  6441  0B53  0851               	movf	___fttol@exp1,w
  6442  0B54  1903               	btfsc	3,2
  6443  0B55  2B62               	goto	l4130
  6444  0B56  3001               	movlw	1
  6445  0B57  00C9               	movwf	??___fttol
  6446  0B58                     u4365:
  6447  0B58  1003               	clrc
  6448  0B59  0DCD               	rlf	___fttol@lval,f
  6449  0B5A  0DCE               	rlf	___fttol@lval+1,f
  6450  0B5B  0DCF               	rlf	___fttol@lval+2,f
  6451  0B5C  0DD0               	rlf	___fttol@lval+3,f
  6452  0B5D  0BC9               	decfsz	??___fttol,f
  6453  0B5E  2B58               	goto	u4365
  6454  0B5F  3001               	movlw	1
  6455  0B60  02D1               	subwf	___fttol@exp1,f
  6456  0B61  2B53               	goto	l1023
  6457  0B62                     l4130:
  6458  0B62  084C               	movf	___fttol@sign1,w
  6459  0B63  1903               	btfsc	3,2
  6460  0B64  2B70               	goto	l4134
  6461  0B65  09CD               	comf	___fttol@lval,f
  6462  0B66  09CE               	comf	___fttol@lval+1,f
  6463  0B67  09CF               	comf	___fttol@lval+2,f
  6464  0B68  09D0               	comf	___fttol@lval+3,f
  6465  0B69  0ACD               	incf	___fttol@lval,f
  6466  0B6A  1903               	skipnz
  6467  0B6B  0ACE               	incf	___fttol@lval+1,f
  6468  0B6C  1903               	skipnz
  6469  0B6D  0ACF               	incf	___fttol@lval+2,f
  6470  0B6E  1903               	skipnz
  6471  0B6F  0AD0               	incf	___fttol@lval+3,f
  6472  0B70                     l4134:
  6473  0B70  0850               	movf	___fttol@lval+3,w
  6474  0B71  00C8               	movwf	?___fttol+3
  6475  0B72  084F               	movf	___fttol@lval+2,w
  6476  0B73  00C7               	movwf	?___fttol+2
  6477  0B74  084E               	movf	___fttol@lval+1,w
  6478  0B75  00C6               	movwf	?___fttol+1
  6479  0B76  084D               	movf	___fttol@lval,w
  6480  0B77  00C5               	movwf	?___fttol
  6481  0B78  0008               	return
  6482  0B79                     __end_of___fttol:
  6483                           
  6484                           	psect	text31
  6485  0559                     __ptext31:	
  6486 ;; *************** function ___ftmul *****************
  6487 ;; Defined at:
  6488 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftmul.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;  f1              3    7[BANK0 ] float 
  6491 ;;  f2              3   10[BANK0 ] float 
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
  6494 ;;  sign            1   21[BANK0 ] unsigned char 
  6495 ;;  cntr            1   20[BANK0 ] unsigned char 
  6496 ;;  exp             1   16[BANK0 ] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  3    7[BANK0 ] float 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6506 ;;      Params:         0       6       0       0       0
  6507 ;;      Locals:         0       6       0       0       0
  6508 ;;      Temps:          0       3       0       0       0
  6509 ;;      Totals:         0      15       0       0       0
  6510 ;;Total ram usage:       15 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    3
  6513 ;; This function calls:
  6514 ;;		___ftpack
  6515 ;; This function is called by:
  6516 ;;		_Adc_Rpm_Read
  6517 ;;		_Adc_Pwm_Read
  6518 ;;		_Adc_Min_Read
  6519 ;;		_Adc_Temp_Read
  6520 ;;		_Pwm1
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           
  6525                           ;psect for function ___ftmul
  6526  0559                     ___ftmul:
  6527                           
  6528                           ;incstack = 0
  6529                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6530  0559  1283               	bcf	3,5	;RP0=0, select bank0
  6531  055A  1303               	bcf	3,6	;RP1=0, select bank0
  6532  055B  0827               	movf	___ftmul@f1,w
  6533  055C  00AD               	movwf	??___ftmul
  6534  055D  0828               	movf	___ftmul@f1+1,w
  6535  055E  00AE               	movwf	??___ftmul+1
  6536  055F  0829               	movf	___ftmul@f1+2,w
  6537  0560  00AF               	movwf	??___ftmul+2
  6538  0561  1003               	clrc
  6539  0562  0D2E               	rlf	??___ftmul+1,w
  6540  0563  0D2F               	rlf	??___ftmul+2,w
  6541  0564  00FF               	movwf	127
  6542  0565  087F               	movf	127,w
  6543  0566  00B0               	movwf	___ftmul@exp
  6544  0567  0830               	movf	___ftmul@exp,w
  6545  0568  1D03               	btfss	3,2
  6546  0569  2D71               	goto	l4050
  6547  056A  3000               	movlw	0
  6548  056B  00A7               	movwf	?___ftmul
  6549  056C  3000               	movlw	0
  6550  056D  00A8               	movwf	?___ftmul+1
  6551  056E  3000               	movlw	0
  6552  056F  00A9               	movwf	?___ftmul+2
  6553  0570  0008               	return
  6554  0571                     l4050:
  6555  0571  082A               	movf	___ftmul@f2,w
  6556  0572  00AD               	movwf	??___ftmul
  6557  0573  082B               	movf	___ftmul@f2+1,w
  6558  0574  00AE               	movwf	??___ftmul+1
  6559  0575  082C               	movf	___ftmul@f2+2,w
  6560  0576  00AF               	movwf	??___ftmul+2
  6561  0577  1003               	clrc
  6562  0578  0D2E               	rlf	??___ftmul+1,w
  6563  0579  0D2F               	rlf	??___ftmul+2,w
  6564  057A  00FF               	movwf	127
  6565  057B  087F               	movf	127,w
  6566  057C  00B5               	movwf	___ftmul@sign
  6567  057D  0835               	movf	___ftmul@sign,w
  6568  057E  1D03               	btfss	3,2
  6569  057F  2D87               	goto	l4056
  6570  0580  3000               	movlw	0
  6571  0581  00A7               	movwf	?___ftmul
  6572  0582  3000               	movlw	0
  6573  0583  00A8               	movwf	?___ftmul+1
  6574  0584  3000               	movlw	0
  6575  0585  00A9               	movwf	?___ftmul+2
  6576  0586  0008               	return
  6577  0587                     l4056:
  6578  0587  0835               	movf	___ftmul@sign,w
  6579  0588  3E7B               	addlw	123
  6580  0589  00FF               	movwf	127
  6581  058A  087F               	movf	127,w
  6582  058B  07B0               	addwf	___ftmul@exp,f
  6583  058C  0827               	movf	___ftmul@f1,w
  6584  058D  00AD               	movwf	??___ftmul
  6585  058E  0828               	movf	___ftmul@f1+1,w
  6586  058F  00AE               	movwf	??___ftmul+1
  6587  0590  0829               	movf	___ftmul@f1+2,w
  6588  0591  00AF               	movwf	??___ftmul+2
  6589  0592  3010               	movlw	16
  6590  0593                     u4175:
  6591  0593  1003               	clrc
  6592  0594  0CAF               	rrf	??___ftmul+2,f
  6593  0595  0CAE               	rrf	??___ftmul+1,f
  6594  0596  0CAD               	rrf	??___ftmul,f
  6595  0597  3EFF               	addlw	-1
  6596  0598  1D03               	skipz
  6597  0599  2D93               	goto	u4175
  6598  059A  082D               	movf	??___ftmul,w
  6599  059B  00FF               	movwf	127
  6600  059C  087F               	movf	127,w
  6601  059D  00B5               	movwf	___ftmul@sign
  6602  059E  082A               	movf	___ftmul@f2,w
  6603  059F  00AD               	movwf	??___ftmul
  6604  05A0  082B               	movf	___ftmul@f2+1,w
  6605  05A1  00AE               	movwf	??___ftmul+1
  6606  05A2  082C               	movf	___ftmul@f2+2,w
  6607  05A3  00AF               	movwf	??___ftmul+2
  6608  05A4  3010               	movlw	16
  6609  05A5                     u4185:
  6610  05A5  1003               	clrc
  6611  05A6  0CAF               	rrf	??___ftmul+2,f
  6612  05A7  0CAE               	rrf	??___ftmul+1,f
  6613  05A8  0CAD               	rrf	??___ftmul,f
  6614  05A9  3EFF               	addlw	-1
  6615  05AA  1D03               	skipz
  6616  05AB  2DA5               	goto	u4185
  6617  05AC  082D               	movf	??___ftmul,w
  6618  05AD  00FF               	movwf	127
  6619  05AE  087F               	movf	127,w
  6620  05AF  06B5               	xorwf	___ftmul@sign,f
  6621  05B0  3080               	movlw	128
  6622  05B1  00FF               	movwf	127
  6623  05B2  087F               	movf	127,w
  6624  05B3  05B5               	andwf	___ftmul@sign,f
  6625  05B4  17A8               	bsf	___ftmul@f1+1,7
  6626  05B5  17AB               	bsf	___ftmul@f2+1,7
  6627  05B6  30FF               	movlw	255
  6628  05B7  05AA               	andwf	___ftmul@f2,f
  6629  05B8  30FF               	movlw	255
  6630  05B9  05AB               	andwf	___ftmul@f2+1,f
  6631  05BA  3000               	movlw	0
  6632  05BB  05AC               	andwf	___ftmul@f2+2,f
  6633  05BC  3000               	movlw	0
  6634  05BD  00B1               	movwf	___ftmul@f3_as_product
  6635  05BE  3000               	movlw	0
  6636  05BF  00B2               	movwf	___ftmul@f3_as_product+1
  6637  05C0  3000               	movlw	0
  6638  05C1  00B3               	movwf	___ftmul@f3_as_product+2
  6639  05C2  3007               	movlw	7
  6640  05C3  00FF               	movwf	127
  6641  05C4  087F               	movf	127,w
  6642  05C5  00B4               	movwf	___ftmul@cntr
  6643  05C6                     l4068:
  6644  05C6  1C27               	btfss	___ftmul@f1,0
  6645  05C7  2DD6               	goto	l4072
  6646  05C8  082A               	movf	___ftmul@f2,w
  6647  05C9  07B1               	addwf	___ftmul@f3_as_product,f
  6648  05CA  082B               	movf	___ftmul@f2+1,w
  6649  05CB  1103               	clrz
  6650  05CC  1803               	skipnc
  6651  05CD  0A2B               	incf	___ftmul@f2+1,w
  6652  05CE  1D03               	btfss	3,2
  6653  05CF  07B2               	addwf	___ftmul@f3_as_product+1,f
  6654  05D0  082C               	movf	___ftmul@f2+2,w
  6655  05D1  1103               	clrz
  6656  05D2  1803               	skipnc
  6657  05D3  0A2C               	incf	___ftmul@f2+2,w
  6658  05D4  1D03               	btfss	3,2
  6659  05D5  07B3               	addwf	___ftmul@f3_as_product+2,f
  6660  05D6                     l4072:
  6661  05D6  3001               	movlw	1
  6662  05D7                     u4215:
  6663  05D7  1003               	clrc
  6664  05D8  0CA9               	rrf	___ftmul@f1+2,f
  6665  05D9  0CA8               	rrf	___ftmul@f1+1,f
  6666  05DA  0CA7               	rrf	___ftmul@f1,f
  6667  05DB  3EFF               	addlw	-1
  6668  05DC  1D03               	skipz
  6669  05DD  2DD7               	goto	u4215
  6670  05DE  3001               	movlw	1
  6671  05DF                     u4225:
  6672  05DF  1003               	clrc
  6673  05E0  0DAA               	rlf	___ftmul@f2,f
  6674  05E1  0DAB               	rlf	___ftmul@f2+1,f
  6675  05E2  0DAC               	rlf	___ftmul@f2+2,f
  6676  05E3  3EFF               	addlw	-1
  6677  05E4  1D03               	skipz
  6678  05E5  2DDF               	goto	u4225
  6679  05E6  3001               	movlw	1
  6680  05E7  02B4               	subwf	___ftmul@cntr,f
  6681  05E8  1D03               	btfss	3,2
  6682  05E9  2DC6               	goto	l4068
  6683  05EA  3009               	movlw	9
  6684  05EB  00FF               	movwf	127
  6685  05EC  087F               	movf	127,w
  6686  05ED  00B4               	movwf	___ftmul@cntr
  6687  05EE                     l4080:
  6688  05EE  1C27               	btfss	___ftmul@f1,0
  6689  05EF  2DFE               	goto	l4084
  6690  05F0  082A               	movf	___ftmul@f2,w
  6691  05F1  07B1               	addwf	___ftmul@f3_as_product,f
  6692  05F2  082B               	movf	___ftmul@f2+1,w
  6693  05F3  1103               	clrz
  6694  05F4  1803               	skipnc
  6695  05F5  0A2B               	incf	___ftmul@f2+1,w
  6696  05F6  1D03               	btfss	3,2
  6697  05F7  07B2               	addwf	___ftmul@f3_as_product+1,f
  6698  05F8  082C               	movf	___ftmul@f2+2,w
  6699  05F9  1103               	clrz
  6700  05FA  1803               	skipnc
  6701  05FB  0A2C               	incf	___ftmul@f2+2,w
  6702  05FC  1D03               	btfss	3,2
  6703  05FD  07B3               	addwf	___ftmul@f3_as_product+2,f
  6704  05FE                     l4084:
  6705  05FE  3001               	movlw	1
  6706  05FF                     u4265:
  6707  05FF  1003               	clrc
  6708  0600  0CA9               	rrf	___ftmul@f1+2,f
  6709  0601  0CA8               	rrf	___ftmul@f1+1,f
  6710  0602  0CA7               	rrf	___ftmul@f1,f
  6711  0603  3EFF               	addlw	-1
  6712  0604  1D03               	skipz
  6713  0605  2DFF               	goto	u4265
  6714  0606  3001               	movlw	1
  6715  0607                     u4275:
  6716  0607  1003               	clrc
  6717  0608  0CB3               	rrf	___ftmul@f3_as_product+2,f
  6718  0609  0CB2               	rrf	___ftmul@f3_as_product+1,f
  6719  060A  0CB1               	rrf	___ftmul@f3_as_product,f
  6720  060B  3EFF               	addlw	-1
  6721  060C  1D03               	skipz
  6722  060D  2E07               	goto	u4275
  6723  060E  3001               	movlw	1
  6724  060F  02B4               	subwf	___ftmul@cntr,f
  6725  0610  1D03               	btfss	3,2
  6726  0611  2DEE               	goto	l4080
  6727  0612  0831               	movf	___ftmul@f3_as_product,w
  6728  0613  00F3               	movwf	___ftpack@arg
  6729  0614  0832               	movf	___ftmul@f3_as_product+1,w
  6730  0615  00F4               	movwf	___ftpack@arg+1
  6731  0616  0833               	movf	___ftmul@f3_as_product+2,w
  6732  0617  00F5               	movwf	___ftpack@arg+2
  6733  0618  0830               	movf	___ftmul@exp,w
  6734  0619  00FF               	movwf	127
  6735  061A  087F               	movf	127,w
  6736  061B  00F6               	movwf	___ftpack@exp
  6737  061C  0835               	movf	___ftmul@sign,w
  6738  061D  00FF               	movwf	127
  6739  061E  087F               	movf	127,w
  6740  061F  00F7               	movwf	___ftpack@sign
  6741  0620  120A  158A  2214   	fcall	___ftpack
  6742  0623  0873               	movf	?___ftpack,w
  6743  0624  1283               	bcf	3,5	;RP0=0, select bank0
  6744  0625  1303               	bcf	3,6	;RP1=0, select bank0
  6745  0626  00A7               	movwf	?___ftmul
  6746  0627  0874               	movf	?___ftpack+1,w
  6747  0628  00A8               	movwf	?___ftmul+1
  6748  0629  0875               	movf	?___ftpack+2,w
  6749  062A  00A9               	movwf	?___ftmul+2
  6750  062B  0008               	return
  6751  062C                     __end_of___ftmul:
  6752                           
  6753                           	psect	text32
  6754  0E8E                     __ptext32:	
  6755 ;; *************** function ___ftdiv *****************
  6756 ;; Defined at:
  6757 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftdiv.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  f2              3   22[BANK0 ] float 
  6760 ;;  f1              3   25[BANK0 ] float 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;  f3              3   32[BANK0 ] float 
  6763 ;;  sign            1   36[BANK0 ] unsigned char 
  6764 ;;  exp             1   35[BANK0 ] unsigned char 
  6765 ;;  cntr            1   31[BANK0 ] unsigned char 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  3   22[BANK0 ] float 
  6768 ;; Registers used:
  6769 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6775 ;;      Params:         0       6       0       0       0
  6776 ;;      Locals:         0       6       0       0       0
  6777 ;;      Temps:          0       3       0       0       0
  6778 ;;      Totals:         0      15       0       0       0
  6779 ;;Total ram usage:       15 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    3
  6782 ;; This function calls:
  6783 ;;		___ftpack
  6784 ;; This function is called by:
  6785 ;;		_Adc_Rpm_Read
  6786 ;;		_Adc_Pwm_Read
  6787 ;;		_Adc_Min_Read
  6788 ;;		_Adc_Temp_Read
  6789 ;;		_Pwm1_init
  6790 ;;		_Pwm1
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function ___ftdiv
  6796  0E8E                     ___ftdiv:
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6800  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  6801  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  6802  0E90  0839               	movf	___ftdiv@f1,w
  6803  0E91  00BC               	movwf	??___ftdiv
  6804  0E92  083A               	movf	___ftdiv@f1+1,w
  6805  0E93  00BD               	movwf	??___ftdiv+1
  6806  0E94  083B               	movf	___ftdiv@f1+2,w
  6807  0E95  00BE               	movwf	??___ftdiv+2
  6808  0E96  1003               	clrc
  6809  0E97  0D3D               	rlf	??___ftdiv+1,w
  6810  0E98  0D3E               	rlf	??___ftdiv+2,w
  6811  0E99  00FF               	movwf	127
  6812  0E9A  087F               	movf	127,w
  6813  0E9B  00C3               	movwf	___ftdiv@exp
  6814  0E9C  0843               	movf	___ftdiv@exp,w
  6815  0E9D  1D03               	btfss	3,2
  6816  0E9E  2EA6               	goto	l4004
  6817  0E9F  3000               	movlw	0
  6818  0EA0  00B6               	movwf	?___ftdiv
  6819  0EA1  3000               	movlw	0
  6820  0EA2  00B7               	movwf	?___ftdiv+1
  6821  0EA3  3000               	movlw	0
  6822  0EA4  00B8               	movwf	?___ftdiv+2
  6823  0EA5  0008               	return
  6824  0EA6                     l4004:
  6825  0EA6  0836               	movf	___ftdiv@f2,w
  6826  0EA7  00BC               	movwf	??___ftdiv
  6827  0EA8  0837               	movf	___ftdiv@f2+1,w
  6828  0EA9  00BD               	movwf	??___ftdiv+1
  6829  0EAA  0838               	movf	___ftdiv@f2+2,w
  6830  0EAB  00BE               	movwf	??___ftdiv+2
  6831  0EAC  1003               	clrc
  6832  0EAD  0D3D               	rlf	??___ftdiv+1,w
  6833  0EAE  0D3E               	rlf	??___ftdiv+2,w
  6834  0EAF  00FF               	movwf	127
  6835  0EB0  087F               	movf	127,w
  6836  0EB1  00C4               	movwf	___ftdiv@sign
  6837  0EB2  0844               	movf	___ftdiv@sign,w
  6838  0EB3  1D03               	btfss	3,2
  6839  0EB4  2EBC               	goto	l4010
  6840  0EB5  3000               	movlw	0
  6841  0EB6  00B6               	movwf	?___ftdiv
  6842  0EB7  3000               	movlw	0
  6843  0EB8  00B7               	movwf	?___ftdiv+1
  6844  0EB9  3000               	movlw	0
  6845  0EBA  00B8               	movwf	?___ftdiv+2
  6846  0EBB  0008               	return
  6847  0EBC                     l4010:
  6848  0EBC  3000               	movlw	0
  6849  0EBD  00C0               	movwf	___ftdiv@f3
  6850  0EBE  3000               	movlw	0
  6851  0EBF  00C1               	movwf	___ftdiv@f3+1
  6852  0EC0  3000               	movlw	0
  6853  0EC1  00C2               	movwf	___ftdiv@f3+2
  6854  0EC2  3089               	movlw	137
  6855  0EC3  0744               	addwf	___ftdiv@sign,w
  6856  0EC4  00BC               	movwf	??___ftdiv
  6857  0EC5  083C               	movf	??___ftdiv,w
  6858  0EC6  02C3               	subwf	___ftdiv@exp,f
  6859  0EC7  0839               	movf	___ftdiv@f1,w
  6860  0EC8  00BC               	movwf	??___ftdiv
  6861  0EC9  083A               	movf	___ftdiv@f1+1,w
  6862  0ECA  00BD               	movwf	??___ftdiv+1
  6863  0ECB  083B               	movf	___ftdiv@f1+2,w
  6864  0ECC  00BE               	movwf	??___ftdiv+2
  6865  0ECD  3010               	movlw	16
  6866  0ECE                     u4095:
  6867  0ECE  1003               	clrc
  6868  0ECF  0CBE               	rrf	??___ftdiv+2,f
  6869  0ED0  0CBD               	rrf	??___ftdiv+1,f
  6870  0ED1  0CBC               	rrf	??___ftdiv,f
  6871  0ED2  3EFF               	addlw	-1
  6872  0ED3  1D03               	skipz
  6873  0ED4  2ECE               	goto	u4095
  6874  0ED5  083C               	movf	??___ftdiv,w
  6875  0ED6  00FF               	movwf	127
  6876  0ED7  087F               	movf	127,w
  6877  0ED8  00C4               	movwf	___ftdiv@sign
  6878  0ED9  0836               	movf	___ftdiv@f2,w
  6879  0EDA  00BC               	movwf	??___ftdiv
  6880  0EDB  0837               	movf	___ftdiv@f2+1,w
  6881  0EDC  00BD               	movwf	??___ftdiv+1
  6882  0EDD  0838               	movf	___ftdiv@f2+2,w
  6883  0EDE  00BE               	movwf	??___ftdiv+2
  6884  0EDF  3010               	movlw	16
  6885  0EE0                     u4105:
  6886  0EE0  1003               	clrc
  6887  0EE1  0CBE               	rrf	??___ftdiv+2,f
  6888  0EE2  0CBD               	rrf	??___ftdiv+1,f
  6889  0EE3  0CBC               	rrf	??___ftdiv,f
  6890  0EE4  3EFF               	addlw	-1
  6891  0EE5  1D03               	skipz
  6892  0EE6  2EE0               	goto	u4105
  6893  0EE7  083C               	movf	??___ftdiv,w
  6894  0EE8  00FF               	movwf	127
  6895  0EE9  087F               	movf	127,w
  6896  0EEA  06C4               	xorwf	___ftdiv@sign,f
  6897  0EEB  3080               	movlw	128
  6898  0EEC  00FF               	movwf	127
  6899  0EED  087F               	movf	127,w
  6900  0EEE  05C4               	andwf	___ftdiv@sign,f
  6901  0EEF  17BA               	bsf	___ftdiv@f1+1,7
  6902  0EF0  30FF               	movlw	255
  6903  0EF1  05B9               	andwf	___ftdiv@f1,f
  6904  0EF2  30FF               	movlw	255
  6905  0EF3  05BA               	andwf	___ftdiv@f1+1,f
  6906  0EF4  3000               	movlw	0
  6907  0EF5  05BB               	andwf	___ftdiv@f1+2,f
  6908  0EF6  17B7               	bsf	___ftdiv@f2+1,7
  6909  0EF7  30FF               	movlw	255
  6910  0EF8  05B6               	andwf	___ftdiv@f2,f
  6911  0EF9  30FF               	movlw	255
  6912  0EFA  05B7               	andwf	___ftdiv@f2+1,f
  6913  0EFB  3000               	movlw	0
  6914  0EFC  05B8               	andwf	___ftdiv@f2+2,f
  6915  0EFD  3018               	movlw	24
  6916  0EFE  00FF               	movwf	127
  6917  0EFF  087F               	movf	127,w
  6918  0F00  00BF               	movwf	___ftdiv@cntr
  6919  0F01                     l4028:
  6920  0F01  3001               	movlw	1
  6921  0F02                     u4115:
  6922  0F02  1003               	clrc
  6923  0F03  0DC0               	rlf	___ftdiv@f3,f
  6924  0F04  0DC1               	rlf	___ftdiv@f3+1,f
  6925  0F05  0DC2               	rlf	___ftdiv@f3+2,f
  6926  0F06  3EFF               	addlw	-1
  6927  0F07  1D03               	skipz
  6928  0F08  2F02               	goto	u4115
  6929  0F09  0838               	movf	___ftdiv@f2+2,w
  6930  0F0A  023B               	subwf	___ftdiv@f1+2,w
  6931  0F0B  1D03               	skipz
  6932  0F0C  2F13               	goto	u4125
  6933  0F0D  0837               	movf	___ftdiv@f2+1,w
  6934  0F0E  023A               	subwf	___ftdiv@f1+1,w
  6935  0F0F  1D03               	skipz
  6936  0F10  2F13               	goto	u4125
  6937  0F11  0836               	movf	___ftdiv@f2,w
  6938  0F12  0239               	subwf	___ftdiv@f1,w
  6939  0F13                     u4125:
  6940  0F13  1C03               	skipc
  6941  0F14  2F20               	goto	l4036
  6942  0F15  0836               	movf	___ftdiv@f2,w
  6943  0F16  02B9               	subwf	___ftdiv@f1,f
  6944  0F17  0837               	movf	___ftdiv@f2+1,w
  6945  0F18  1C03               	skipc
  6946  0F19  0F37               	incfsz	___ftdiv@f2+1,w
  6947  0F1A  02BA               	subwf	___ftdiv@f1+1,f
  6948  0F1B  0838               	movf	___ftdiv@f2+2,w
  6949  0F1C  1C03               	skipc
  6950  0F1D  0A38               	incf	___ftdiv@f2+2,w
  6951  0F1E  02BB               	subwf	___ftdiv@f1+2,f
  6952  0F1F  1440               	bsf	___ftdiv@f3,0
  6953  0F20                     l4036:
  6954  0F20  3001               	movlw	1
  6955  0F21                     u4135:
  6956  0F21  1003               	clrc
  6957  0F22  0DB9               	rlf	___ftdiv@f1,f
  6958  0F23  0DBA               	rlf	___ftdiv@f1+1,f
  6959  0F24  0DBB               	rlf	___ftdiv@f1+2,f
  6960  0F25  3EFF               	addlw	-1
  6961  0F26  1D03               	skipz
  6962  0F27  2F21               	goto	u4135
  6963  0F28  3001               	movlw	1
  6964  0F29  02BF               	subwf	___ftdiv@cntr,f
  6965  0F2A  1D03               	btfss	3,2
  6966  0F2B  2F01               	goto	l4028
  6967  0F2C  0840               	movf	___ftdiv@f3,w
  6968  0F2D  00F3               	movwf	___ftpack@arg
  6969  0F2E  0841               	movf	___ftdiv@f3+1,w
  6970  0F2F  00F4               	movwf	___ftpack@arg+1
  6971  0F30  0842               	movf	___ftdiv@f3+2,w
  6972  0F31  00F5               	movwf	___ftpack@arg+2
  6973  0F32  0843               	movf	___ftdiv@exp,w
  6974  0F33  00FF               	movwf	127
  6975  0F34  087F               	movf	127,w
  6976  0F35  00F6               	movwf	___ftpack@exp
  6977  0F36  0844               	movf	___ftdiv@sign,w
  6978  0F37  00FF               	movwf	127
  6979  0F38  087F               	movf	127,w
  6980  0F39  00F7               	movwf	___ftpack@sign
  6981  0F3A  120A  158A  2214   	fcall	___ftpack
  6982  0F3D  0873               	movf	?___ftpack,w
  6983  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  6984  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  6985  0F40  00B6               	movwf	?___ftdiv
  6986  0F41  0874               	movf	?___ftpack+1,w
  6987  0F42  00B7               	movwf	?___ftdiv+1
  6988  0F43  0875               	movf	?___ftpack+2,w
  6989  0F44  00B8               	movwf	?___ftdiv+2
  6990  0F45  0008               	return
  6991  0F46                     __end_of___ftdiv:
  6992                           
  6993                           	psect	text33
  6994  1600                     __ptext33:	
  6995 ;; *************** function ___awtoft *****************
  6996 ;; Defined at:
  6997 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\awtoft.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;  c               2    3[BANK0 ] int 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;  sign            1    6[BANK0 ] unsigned char 
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  3    3[BANK0 ] float 
  7004 ;; Registers used:
  7005 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7011 ;;      Params:         0       3       0       0       0
  7012 ;;      Locals:         0       1       0       0       0
  7013 ;;      Temps:          0       0       0       0       0
  7014 ;;      Totals:         0       4       0       0       0
  7015 ;;Total ram usage:        4 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    3
  7018 ;; This function calls:
  7019 ;;		___ftpack
  7020 ;; This function is called by:
  7021 ;;		_Adc_Rpm_Read
  7022 ;;		_Adc_Pwm_Read
  7023 ;;		_Adc_Min_Read
  7024 ;;		_Adc_Temp_Read
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           
  7029                           ;psect for function ___awtoft
  7030  1600                     ___awtoft:
  7031                           
  7032                           ;incstack = 0
  7033                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7034  1600  1283               	bcf	3,5	;RP0=0, select bank0
  7035  1601  1303               	bcf	3,6	;RP1=0, select bank0
  7036  1602  01A6               	clrf	___awtoft@sign
  7037  1603  1FA4               	btfss	___awtoft@c+1,7
  7038  1604  2E0C               	goto	l3994
  7039  1605  09A3               	comf	___awtoft@c,f
  7040  1606  09A4               	comf	___awtoft@c+1,f
  7041  1607  0AA3               	incf	___awtoft@c,f
  7042  1608  1903               	skipnz
  7043  1609  0AA4               	incf	___awtoft@c+1,f
  7044  160A  01A6               	clrf	___awtoft@sign
  7045  160B  0AA6               	incf	___awtoft@sign,f
  7046  160C                     l3994:
  7047  160C  0823               	movf	___awtoft@c,w
  7048  160D  00F3               	movwf	___ftpack@arg
  7049  160E  0824               	movf	___awtoft@c+1,w
  7050  160F  00F4               	movwf	___ftpack@arg+1
  7051  1610  01F5               	clrf	___ftpack@arg+2
  7052  1611  308E               	movlw	142
  7053  1612  00FF               	movwf	127
  7054  1613  087F               	movf	127,w
  7055  1614  00F6               	movwf	___ftpack@exp
  7056  1615  0826               	movf	___awtoft@sign,w
  7057  1616  00FF               	movwf	127
  7058  1617  087F               	movf	127,w
  7059  1618  00F7               	movwf	___ftpack@sign
  7060  1619  120A  158A  2214   	fcall	___ftpack
  7061  161C  0873               	movf	?___ftpack,w
  7062  161D  1283               	bcf	3,5	;RP0=0, select bank0
  7063  161E  1303               	bcf	3,6	;RP1=0, select bank0
  7064  161F  00A3               	movwf	?___awtoft
  7065  1620  0874               	movf	?___ftpack+1,w
  7066  1621  00A4               	movwf	?___awtoft+1
  7067  1622  0875               	movf	?___ftpack+2,w
  7068  1623  00A5               	movwf	?___awtoft+2
  7069  1624  0008               	return
  7070  1625                     __end_of___awtoft:
  7071                           
  7072                           	psect	text34
  7073  0A14                     __ptext34:	
  7074 ;; *************** function ___ftpack *****************
  7075 ;; Defined at:
  7076 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\float.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  arg             3    3[COMMON] unsigned um
  7079 ;;  exp             1    6[COMMON] unsigned char 
  7080 ;;  sign            1    7[COMMON] unsigned char 
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;		None
  7083 ;; Return value:  Size  Location     Type
  7084 ;;                  3    3[COMMON] float 
  7085 ;; Registers used:
  7086 ;;		wreg, status,2, status,0, btemp+1
  7087 ;; Tracked objects:
  7088 ;;		On entry : 0/0
  7089 ;;		On exit  : 0/0
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7092 ;;      Params:         5       0       0       0       0
  7093 ;;      Locals:         0       0       0       0       0
  7094 ;;      Temps:          0       3       0       0       0
  7095 ;;      Totals:         5       3       0       0       0
  7096 ;;Total ram usage:        8 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; Hardware stack levels required when called:    2
  7099 ;; This function calls:
  7100 ;;		Nothing
  7101 ;; This function is called by:
  7102 ;;		___awtoft
  7103 ;;		___ftdiv
  7104 ;;		___ftmul
  7105 ;;		___lwtoft
  7106 ;;		___ftadd
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           
  7111                           ;psect for function ___ftpack
  7112  0A14                     ___ftpack:
  7113                           
  7114                           ;incstack = 0
  7115                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  7116  0A14  0876               	movf	___ftpack@exp,w
  7117  0A15  1903               	btfsc	3,2
  7118  0A16  2A1C               	goto	l3876
  7119  0A17  0875               	movf	___ftpack@arg+2,w
  7120  0A18  0474               	iorwf	___ftpack@arg+1,w
  7121  0A19  0473               	iorwf	___ftpack@arg,w
  7122  0A1A  1D03               	skipz
  7123  0A1B  2A2F               	goto	l3884
  7124  0A1C                     l3876:
  7125  0A1C  3000               	movlw	0
  7126  0A1D  00F3               	movwf	?___ftpack
  7127  0A1E  3000               	movlw	0
  7128  0A1F  00F4               	movwf	?___ftpack+1
  7129  0A20  3000               	movlw	0
  7130  0A21  00F5               	movwf	?___ftpack+2
  7131  0A22  0008               	return
  7132  0A23                     l3880:
  7133  0A23  3001               	movlw	1
  7134  0A24  00FF               	movwf	127
  7135  0A25  087F               	movf	127,w
  7136  0A26  07F6               	addwf	___ftpack@exp,f
  7137  0A27  3001               	movlw	1
  7138  0A28                     u3875:
  7139  0A28  1003               	clrc
  7140  0A29  0CF5               	rrf	___ftpack@arg+2,f
  7141  0A2A  0CF4               	rrf	___ftpack@arg+1,f
  7142  0A2B  0CF3               	rrf	___ftpack@arg,f
  7143  0A2C  3EFF               	addlw	-1
  7144  0A2D  1D03               	skipz
  7145  0A2E  2A28               	goto	u3875
  7146  0A2F                     l3884:
  7147  0A2F  30FE               	movlw	254
  7148  0A30  0575               	andwf	___ftpack@arg+2,w
  7149  0A31  1903               	btfsc	3,2
  7150  0A32  2A4A               	goto	l3892
  7151  0A33  2A23               	goto	l3880
  7152  0A34                     l3886:
  7153  0A34  3001               	movlw	1
  7154  0A35  00FF               	movwf	127
  7155  0A36  087F               	movf	127,w
  7156  0A37  07F6               	addwf	___ftpack@exp,f
  7157  0A38  3001               	movlw	1
  7158  0A39  07F3               	addwf	___ftpack@arg,f
  7159  0A3A  3000               	movlw	0
  7160  0A3B  1803               	skipnc
  7161  0A3C  3001               	movlw	1
  7162  0A3D  07F4               	addwf	___ftpack@arg+1,f
  7163  0A3E  3000               	movlw	0
  7164  0A3F  1803               	skipnc
  7165  0A40  3001               	movlw	1
  7166  0A41  07F5               	addwf	___ftpack@arg+2,f
  7167  0A42  3001               	movlw	1
  7168  0A43                     u3895:
  7169  0A43  1003               	clrc
  7170  0A44  0CF5               	rrf	___ftpack@arg+2,f
  7171  0A45  0CF4               	rrf	___ftpack@arg+1,f
  7172  0A46  0CF3               	rrf	___ftpack@arg,f
  7173  0A47  3EFF               	addlw	-1
  7174  0A48  1D03               	skipz
  7175  0A49  2A43               	goto	u3895
  7176  0A4A                     l3892:
  7177  0A4A  30FF               	movlw	255
  7178  0A4B  0575               	andwf	___ftpack@arg+2,w
  7179  0A4C  1903               	btfsc	3,2
  7180  0A4D  2A5D               	goto	l3896
  7181  0A4E  2A34               	goto	l3886
  7182  0A4F                     l3898:
  7183  0A4F  3002               	movlw	2
  7184  0A50  0276               	subwf	___ftpack@exp,w
  7185  0A51  1C03               	btfss	3,0
  7186  0A52  2A5F               	goto	l939
  7187  0A53  3001               	movlw	1
  7188  0A54  02F6               	subwf	___ftpack@exp,f
  7189  0A55  3001               	movlw	1
  7190  0A56                     u3915:
  7191  0A56  1003               	clrc
  7192  0A57  0DF3               	rlf	___ftpack@arg,f
  7193  0A58  0DF4               	rlf	___ftpack@arg+1,f
  7194  0A59  0DF5               	rlf	___ftpack@arg+2,f
  7195  0A5A  3EFF               	addlw	-1
  7196  0A5B  1D03               	skipz
  7197  0A5C  2A56               	goto	u3915
  7198  0A5D                     l3896:
  7199  0A5D  1FF4               	btfss	___ftpack@arg+1,7
  7200  0A5E  2A4F               	goto	l3898
  7201  0A5F                     l939:
  7202  0A5F  1876               	btfsc	___ftpack@exp,0
  7203  0A60  2A67               	goto	l940
  7204  0A61  30FF               	movlw	255
  7205  0A62  05F3               	andwf	___ftpack@arg,f
  7206  0A63  307F               	movlw	127
  7207  0A64  05F4               	andwf	___ftpack@arg+1,f
  7208  0A65  30FF               	movlw	255
  7209  0A66  05F5               	andwf	___ftpack@arg+2,f
  7210  0A67                     l940:
  7211  0A67  1003               	clrc
  7212  0A68  0CF6               	rrf	___ftpack@exp,f
  7213  0A69  0876               	movf	___ftpack@exp,w
  7214  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  7215  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
  7216  0A6C  00A0               	movwf	??___ftpack
  7217  0A6D  01A1               	clrf	??___ftpack+1
  7218  0A6E  01A2               	clrf	??___ftpack+2
  7219  0A6F  3010               	movlw	16
  7220  0A70                     u3955:
  7221  0A70  1003               	clrc
  7222  0A71  0DA0               	rlf	??___ftpack,f
  7223  0A72  0DA1               	rlf	??___ftpack+1,f
  7224  0A73  0DA2               	rlf	??___ftpack+2,f
  7225  0A74  3EFF               	addlw	-1
  7226  0A75  1D03               	skipz
  7227  0A76  2A70               	goto	u3955
  7228  0A77  0820               	movf	??___ftpack,w
  7229  0A78  04F3               	iorwf	___ftpack@arg,f
  7230  0A79  0821               	movf	??___ftpack+1,w
  7231  0A7A  04F4               	iorwf	___ftpack@arg+1,f
  7232  0A7B  0822               	movf	??___ftpack+2,w
  7233  0A7C  04F5               	iorwf	___ftpack@arg+2,f
  7234  0A7D  0877               	movf	___ftpack@sign,w
  7235  0A7E  1903               	btfsc	3,2
  7236  0A7F  0008               	return
  7237  0A80  17F5               	bsf	___ftpack@arg+2,7
  7238  0A81  0008               	return
  7239  0A82                     __end_of___ftpack:
  7240                           
  7241                           	psect	text35
  7242  176C                     __ptext35:	
  7243 ;; *************** function _Adc *****************
  7244 ;; Defined at:
  7245 ;;		line 25 in file "ADC.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  channel         1    wreg     unsigned char 
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;  channel         1    0[BANK0 ] unsigned char 
  7250 ;;  convertion      2    1[BANK0 ] int 
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  2    3[COMMON] int 
  7253 ;; Registers used:
  7254 ;;		wreg, status,2, status,0, btemp+1
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7260 ;;      Params:         2       0       0       0       0
  7261 ;;      Locals:         0       3       0       0       0
  7262 ;;      Temps:          2       0       0       0       0
  7263 ;;      Totals:         4       3       0       0       0
  7264 ;;Total ram usage:        7 bytes
  7265 ;; Hardware stack levels used:    1
  7266 ;; Hardware stack levels required when called:    2
  7267 ;; This function calls:
  7268 ;;		Nothing
  7269 ;; This function is called by:
  7270 ;;		_Adc_Rpm_Read
  7271 ;;		_Adc_Pwm_Read
  7272 ;;		_Adc_Min_Read
  7273 ;;		_Adc_Temp_Read
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           
  7278                           ;psect for function _Adc
  7279  176C                     _Adc:
  7280                           
  7281                           ;incstack = 0
  7282                           ; Regs used in _Adc: [wreg+status,2+status,0+btemp+1]
  7283                           ;Adc@channel stored from wreg
  7284  176C  1283               	bcf	3,5	;RP0=0, select bank0
  7285  176D  1303               	bcf	3,6	;RP1=0, select bank0
  7286  176E  00A0               	movwf	Adc@channel
  7287                           
  7288                           ;ADC.c: 32:     ADCON0 &= 0xC3;
  7289  176F  30C3               	movlw	195
  7290  1770  00FF               	movwf	127
  7291  1771  087F               	movf	127,w
  7292  1772  059F               	andwf	31,f	;volatile
  7293                           
  7294                           ;ADC.c: 33:     ADCON0 |= channel<<2;
  7295  1773  0820               	movf	Adc@channel,w	;volatile
  7296  1774  00F5               	movwf	??_Adc
  7297  1775  3001               	movlw	1
  7298  1776                     u3985:
  7299  1776  1003               	clrc
  7300  1777  0DF5               	rlf	??_Adc,f
  7301  1778  3EFF               	addlw	-1
  7302  1779  1D03               	skipz
  7303  177A  2F76               	goto	u3985
  7304  177B  1003               	clrc
  7305  177C  0D75               	rlf	??_Adc,w
  7306  177D  00FF               	movwf	127
  7307  177E  087F               	movf	127,w
  7308  177F  049F               	iorwf	31,f	;volatile
  7309                           
  7310                           ;ADC.c: 36:     ADCON0bits.ADON = 1;
  7311  1780  141F               	bsf	31,0	;volatile
  7312                           
  7313                           ;ADC.c: 37:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  7314  1781  3074               	movlw	116
  7315  1782  00F5               	movwf	??_Adc
  7316  1783                     u5587:
  7317  1783  0BF5               	decfsz	??_Adc,f
  7318  1784  2F83               	goto	u5587
  7319  1785  0000               	nop
  7320                           
  7321                           ;ADC.c: 41:     ADCON0bits.GO_nDONE = 1;
  7322  1786  1283               	bcf	3,5	;RP0=0, select bank0
  7323  1787  1303               	bcf	3,6	;RP1=0, select bank0
  7324  1788  149F               	bsf	31,1	;volatile
  7325  1789                     l541:	
  7326                           ;ADC.c: 42:     while(ADCON0bits.GO_nDONE == 1);
  7327                           
  7328  1789  189F               	btfsc	31,1	;volatile
  7329  178A  2F89               	goto	l541
  7330                           
  7331                           ;ADC.c: 43:     convertion = ADRESH, convertion = convertion<<8;
  7332  178B  081E               	movf	30,w	;volatile
  7333  178C  00F5               	movwf	??_Adc
  7334  178D  01F6               	clrf	??_Adc+1
  7335  178E  0875               	movf	??_Adc,w
  7336  178F  00A1               	movwf	Adc@convertion
  7337  1790  0876               	movf	??_Adc+1,w
  7338  1791  00A2               	movwf	Adc@convertion+1
  7339  1792  0822               	movf	Adc@convertion+1,w
  7340  1793  00F6               	movwf	??_Adc+1
  7341  1794  0821               	movf	Adc@convertion,w
  7342  1795  00F5               	movwf	??_Adc
  7343  1796  0875               	movf	??_Adc,w
  7344  1797  00F6               	movwf	??_Adc+1
  7345  1798  01F5               	clrf	??_Adc
  7346  1799  0875               	movf	??_Adc,w
  7347  179A  00A1               	movwf	Adc@convertion
  7348  179B  0876               	movf	??_Adc+1,w
  7349  179C  00A2               	movwf	Adc@convertion+1
  7350                           
  7351                           ;ADC.c: 44:     convertion |= ADRESL;
  7352  179D  1683               	bsf	3,5	;RP0=1, select bank1
  7353  179E  1303               	bcf	3,6	;RP1=0, select bank1
  7354  179F  081E               	movf	30,w	;volatile
  7355  17A0  00F5               	movwf	??_Adc
  7356  17A1  01F6               	clrf	??_Adc+1
  7357  17A2  0875               	movf	??_Adc,w
  7358  17A3  1283               	bcf	3,5	;RP0=0, select bank0
  7359  17A4  1303               	bcf	3,6	;RP1=0, select bank0
  7360  17A5  04A1               	iorwf	Adc@convertion,f
  7361  17A6  0876               	movf	??_Adc+1,w
  7362  17A7  04A2               	iorwf	Adc@convertion+1,f
  7363                           
  7364                           ;ADC.c: 48:     ADCON0bits.ADON = 0;
  7365  17A8  101F               	bcf	31,0	;volatile
  7366                           
  7367                           ;ADC.c: 49:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  7368  17A9  3074               	movlw	116
  7369  17AA  00F5               	movwf	??_Adc
  7370  17AB                     u5597:
  7371  17AB  0BF5               	decfsz	??_Adc,f
  7372  17AC  2FAB               	goto	u5597
  7373  17AD  0000               	nop
  7374                           
  7375                           ;ADC.c: 51:     return convertion;
  7376  17AE  1283               	bcf	3,5	;RP0=0, select bank0
  7377  17AF  1303               	bcf	3,6	;RP1=0, select bank0
  7378  17B0  0822               	movf	Adc@convertion+1,w
  7379  17B1  00F4               	movwf	?_Adc+1
  7380  17B2  0821               	movf	Adc@convertion,w
  7381  17B3  00F3               	movwf	?_Adc
  7382  17B4  0008               	return
  7383  17B5                     __end_of_Adc:
  7384                           
  7385                           	psect	text36
  7386  0893                     __ptext36:	
  7387 ;; *************** function _Detener *****************
  7388 ;; Defined at:
  7389 ;;		line 30 in file "Menu_Modo.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;		None
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  i               1    9[BANK0 ] unsigned char 
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      void 
  7396 ;; Registers used:
  7397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7403 ;;      Params:         0       0       0       0       0
  7404 ;;      Locals:         0       1       0       0       0
  7405 ;;      Temps:          0       3       0       0       0
  7406 ;;      Totals:         0       4       0       0       0
  7407 ;;Total ram usage:        4 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    5
  7410 ;; This function calls:
  7411 ;;		_Antirrebote
  7412 ;;		_Pant_Detener
  7413 ;; This function is called by:
  7414 ;;		_MEF_Subest_Actualizacion
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _Detener
  7420  0893                     _Detener:
  7421                           
  7422                           ;Menu_Modo.c: 32:     Antirrebote();
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _Detener: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7426  0893  160A  118A  2625  120A  158A  	fcall	_Antirrebote
  7427                           
  7428                           ;Menu_Modo.c: 33:     Output = !Output;
  7429  0898  1283               	bcf	3,5	;RP0=0, select bank0
  7430  0899  1303               	bcf	3,6	;RP1=0, select bank0
  7431  089A  0866               	movf	_Output,w
  7432  089B  1D03               	btfss	3,2
  7433  089C  289F               	goto	u4820
  7434  089D  3001               	movlw	1
  7435  089E  28A0               	goto	u4830
  7436  089F                     u4820:
  7437  089F  3000               	movlw	0
  7438  08A0                     u4830:
  7439  08A0  00FF               	movwf	127
  7440  08A1  087F               	movf	127,w
  7441  08A2  00E6               	movwf	_Output
  7442                           
  7443                           ;Menu_Modo.c: 34:     PORTBbits.RB4=0;
  7444  08A3  1206               	bcf	6,4	;volatile
  7445                           
  7446                           ;Menu_Modo.c: 36:     Pant_Detener();
  7447  08A4  160A  118A  256E  120A  158A  	fcall	_Pant_Detener
  7448                           
  7449                           ;Menu_Modo.c: 38:     for(char i=0;i<3;i++)
  7450  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  7451  08AA  1303               	bcf	3,6	;RP1=0, select bank0
  7452  08AB  01A9               	clrf	Detener@i
  7453  08AC                     l306:
  7454                           
  7455                           ;Menu_Modo.c: 39:     {;Menu_Modo.c: 40:         PORTAbits.RA5 = 1;
  7456  08AC  1685               	bsf	5,5	;volatile
  7457                           
  7458                           ;Menu_Modo.c: 41:         _delay((unsigned long)((100)*(20000000/4000.0)));
  7459  08AD  3003               	movlw	3
  7460  08AE  1283               	bcf	3,5	;RP0=0, select bank0
  7461  08AF  1303               	bcf	3,6	;RP1=0, select bank0
  7462  08B0  00A8               	movwf	??_Detener+2
  7463  08B1  308A               	movlw	138
  7464  08B2  00A7               	movwf	??_Detener+1
  7465  08B3  3055               	movlw	85
  7466  08B4  00A6               	movwf	??_Detener
  7467  08B5                     u5607:
  7468  08B5  0BA6               	decfsz	??_Detener,f
  7469  08B6  28B5               	goto	u5607
  7470  08B7  0BA7               	decfsz	??_Detener+1,f
  7471  08B8  28B5               	goto	u5607
  7472  08B9  0BA8               	decfsz	??_Detener+2,f
  7473  08BA  28B5               	goto	u5607
  7474                           
  7475                           ;Menu_Modo.c: 42:         PORTAbits.RA5 = 0;
  7476  08BB  1283               	bcf	3,5	;RP0=0, select bank0
  7477  08BC  1303               	bcf	3,6	;RP1=0, select bank0
  7478  08BD  1285               	bcf	5,5	;volatile
  7479                           
  7480                           ;Menu_Modo.c: 43:         _delay((unsigned long)((100)*(20000000/4000.0)));
  7481  08BE  3003               	movlw	3
  7482  08BF  1283               	bcf	3,5	;RP0=0, select bank0
  7483  08C0  1303               	bcf	3,6	;RP1=0, select bank0
  7484  08C1  00A8               	movwf	??_Detener+2
  7485  08C2  308A               	movlw	138
  7486  08C3  00A7               	movwf	??_Detener+1
  7487  08C4  3055               	movlw	85
  7488  08C5  00A6               	movwf	??_Detener
  7489  08C6                     u5617:
  7490  08C6  0BA6               	decfsz	??_Detener,f
  7491  08C7  28C6               	goto	u5617
  7492  08C8  0BA7               	decfsz	??_Detener+1,f
  7493  08C9  28C6               	goto	u5617
  7494  08CA  0BA8               	decfsz	??_Detener+2,f
  7495  08CB  28C6               	goto	u5617
  7496                           
  7497                           ;Menu_Modo.c: 44:     }
  7498  08CC  3001               	movlw	1
  7499  08CD  00FF               	movwf	127
  7500  08CE  087F               	movf	127,w
  7501  08CF  1283               	bcf	3,5	;RP0=0, select bank0
  7502  08D0  1303               	bcf	3,6	;RP1=0, select bank0
  7503  08D1  07A9               	addwf	Detener@i,f
  7504  08D2  3003               	movlw	3
  7505  08D3  0229               	subwf	Detener@i,w
  7506  08D4  1C03               	skipc
  7507  08D5  28AC               	goto	l306
  7508                           
  7509                           ;Menu_Modo.c: 46:     _delay((unsigned long)((1200)*(20000000/4000.0)));
  7510  08D6  301F               	movlw	31
  7511  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  7512  08D8  1303               	bcf	3,6	;RP1=0, select bank0
  7513  08D9  00A8               	movwf	??_Detener+2
  7514  08DA  3071               	movlw	113
  7515  08DB  00A7               	movwf	??_Detener+1
  7516  08DC  301D               	movlw	29
  7517  08DD  00A6               	movwf	??_Detener
  7518  08DE                     u5627:
  7519  08DE  0BA6               	decfsz	??_Detener,f
  7520  08DF  28DE               	goto	u5627
  7521  08E0  0BA7               	decfsz	??_Detener+1,f
  7522  08E1  28DE               	goto	u5627
  7523  08E2  0BA8               	decfsz	??_Detener+2,f
  7524  08E3  28DE               	goto	u5627
  7525  08E4  28E5               	nop2
  7526  08E5  0008               	return
  7527  08E6                     __end_of_Detener:
  7528                           
  7529                           	psect	text37
  7530  156E                     __ptext37:	
  7531 ;; *************** function _Pant_Detener *****************
  7532 ;; Defined at:
  7533 ;;		line 106 in file "Display_Lcd.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7547 ;;      Params:         0       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0
  7550 ;;      Totals:         0       0       0       0       0
  7551 ;;Total ram usage:        0 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    4
  7554 ;; This function calls:
  7555 ;;		_LCD_array
  7556 ;;		_LCD_command
  7557 ;; This function is called by:
  7558 ;;		_Detener
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           
  7563                           ;psect for function _Pant_Detener
  7564  156E                     _Pant_Detener:
  7565                           
  7566                           ;Display_Lcd.c: 108:     LCD_command(0x01);
  7567                           
  7568                           ;incstack = 0
  7569                           ; Regs used in _Pant_Detener: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7570  156E  3001               	movlw	1
  7571  156F  120A  158A  2746  160A  118A  	fcall	_LCD_command
  7572                           
  7573                           ;Display_Lcd.c: 109:     LCD_array(2,3,"Proceso Detenido");
  7574  1574  3002               	movlw	2
  7575  1575  1283               	bcf	3,5	;RP0=0, select bank0
  7576  1576  1303               	bcf	3,6	;RP1=0, select bank0
  7577  1577  00A0               	movwf	LCD_array@x
  7578  1578  3000               	movlw	0
  7579  1579  00A1               	movwf	LCD_array@x+1
  7580  157A  3003               	movlw	3
  7581  157B  00A2               	movwf	LCD_array@y
  7582  157C  3000               	movlw	0
  7583  157D  00A3               	movwf	LCD_array@y+1
  7584  157E  305C               	movlw	(low ((STR_31-__stringbase)| (0+32768)))& (0+255)
  7585  157F  00A4               	movwf	LCD_array@date
  7586  1580  3080               	movlw	128
  7587  1581  00A5               	movwf	LCD_array@date+1
  7588  1582  120A  158A  21AD   	fcall	_LCD_array
  7589  1585  0008               	return
  7590  1586                     __end_of_Pant_Detener:
  7591                           
  7592                           	psect	text38
  7593  09AD                     __ptext38:	
  7594 ;; *************** function _LCD_array *****************
  7595 ;; Defined at:
  7596 ;;		line 137 in file "Lcd.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  x               2    0[BANK0 ] int 
  7599 ;;  y               2    2[BANK0 ] int 
  7600 ;;  date            2    4[BANK0 ] PTR unsigned char 
  7601 ;;		 -> STR_31(17), Pant_Temporizador@buffer(20), Pant_Val_Act@buffer(20), STR_23(2), 
  7602 ;;		 -> STR_22(13), STR_21(2), STR_20(8), STR_19(5), 
  7603 ;;		 -> STR_18(5), STR_17(18), STR_16(6), STR_15(5), 
  7604 ;;		 -> STR_14(14), STR_13(2), STR_12(2), STR_11(2), 
  7605 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
  7606 ;;		 -> STR_6(2), STR_5(2), STR_4(21), STR_3(21), 
  7607 ;;		 -> STR_2(21), STR_1(21), 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7619 ;;      Params:         0       6       0       0       0
  7620 ;;      Locals:         0       0       0       0       0
  7621 ;;      Temps:          2       0       0       0       0
  7622 ;;      Totals:         2       6       0       0       0
  7623 ;;Total ram usage:        8 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    3
  7626 ;; This function calls:
  7627 ;;		_LCD_command
  7628 ;;		_LCD_date
  7629 ;; This function is called by:
  7630 ;;		_Pant_Inicio
  7631 ;;		_Pant_Selector
  7632 ;;		_Pant_Menu
  7633 ;;		_Pant_Modos
  7634 ;;		_Pant_Val_Act
  7635 ;;		_Pant_Temporizador
  7636 ;;		_Pant_Detener
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function _LCD_array
  7642  09AD                     _LCD_array:
  7643                           
  7644                           ;Lcd.c: 137: void LCD_array(int x,int y,char *date);Lcd.c: 138: {;Lcd.c: 140:     switch
      +                          (x)
  7645                           
  7646                           ;incstack = 0
  7647                           ; Regs used in _LCD_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7648  09AD  29D2               	goto	l3920
  7649  09AE                     l3910:
  7650  09AE  0822               	movf	LCD_array@y,w
  7651  09AF  3EFF               	addlw	255
  7652  09B0  3880               	iorlw	128
  7653  09B1  120A  158A  2746  120A  158A  	fcall	_LCD_command
  7654                           
  7655                           ;Lcd.c: 143:         break;
  7656  09B6  2A05               	goto	l3928
  7657  09B7                     l3912:
  7658  09B7  0822               	movf	LCD_array@y,w
  7659  09B8  3E3F               	addlw	63
  7660  09B9  3880               	iorlw	128
  7661  09BA  120A  158A  2746  120A  158A  	fcall	_LCD_command
  7662                           
  7663                           ;Lcd.c: 145:         break;
  7664  09BF  2A05               	goto	l3928
  7665  09C0                     l3914:
  7666  09C0  0822               	movf	LCD_array@y,w
  7667  09C1  3E13               	addlw	19
  7668  09C2  3880               	iorlw	128
  7669  09C3  120A  158A  2746  120A  158A  	fcall	_LCD_command
  7670                           
  7671                           ;Lcd.c: 147:         break;
  7672  09C8  2A05               	goto	l3928
  7673  09C9                     l3916:
  7674  09C9  0822               	movf	LCD_array@y,w
  7675  09CA  3E53               	addlw	83
  7676  09CB  3880               	iorlw	128
  7677  09CC  120A  158A  2746  120A  158A  	fcall	_LCD_command
  7678                           
  7679                           ;Lcd.c: 149:         break;
  7680  09D1  2A05               	goto	l3928
  7681  09D2                     l3920:
  7682                           
  7683                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7684                           ; Switch size 1, requested type "simple"
  7685                           ; Number of cases is 1, Range of values is 0 to 0
  7686                           ; switch strategies available:
  7687                           ; Name         Instructions Cycles
  7688                           ; simple_byte            4     3 (average)
  7689                           ; direct_byte           11     8 (fixed)
  7690                           ; jumptable            260     6 (fixed)
  7691                           ;	Chosen strategy is simple_byte
  7692  09D2  1283               	bcf	3,5	;RP0=0, select bank0
  7693  09D3  1303               	bcf	3,6	;RP1=0, select bank0
  7694  09D4  0821               	movf	LCD_array@x+1,w
  7695  09D5  3A00               	xorlw	0	; case 0
  7696  09D6  1903               	skipnz
  7697  09D7  29D9               	goto	l5044
  7698  09D8  2A05               	goto	l3928
  7699  09D9                     l5044:
  7700                           
  7701                           ; Switch size 1, requested type "simple"
  7702                           ; Number of cases is 4, Range of values is 1 to 4
  7703                           ; switch strategies available:
  7704                           ; Name         Instructions Cycles
  7705                           ; simple_byte           13     7 (average)
  7706                           ; direct_byte           23    11 (fixed)
  7707                           ; jumptable            263     9 (fixed)
  7708                           ;	Chosen strategy is simple_byte
  7709  09D9  0820               	movf	LCD_array@x,w
  7710  09DA  3A01               	xorlw	1	; case 1
  7711  09DB  1903               	skipnz
  7712  09DC  29AE               	goto	l3910
  7713  09DD  3A03               	xorlw	3	; case 2
  7714  09DE  1903               	skipnz
  7715  09DF  29B7               	goto	l3912
  7716  09E0  3A01               	xorlw	1	; case 3
  7717  09E1  1903               	skipnz
  7718  09E2  29C0               	goto	l3914
  7719  09E3  3A07               	xorlw	7	; case 4
  7720  09E4  1903               	skipnz
  7721  09E5  29C9               	goto	l3916
  7722  09E6  2A05               	goto	l3928
  7723  09E7                     l3922:
  7724                           
  7725                           ;Lcd.c: 154:     {;Lcd.c: 155:         LCD_date(*date);
  7726  09E7  0825               	movf	LCD_array@date+1,w
  7727  09E8  00FF               	movwf	127
  7728  09E9  0824               	movf	LCD_array@date,w
  7729  09EA  0084               	movwf	4
  7730  09EB  120A  118A  2700  120A  158A  	fcall	stringtab
  7731  09F0  120A  158A  25D6  120A  158A  	fcall	_LCD_date
  7732                           
  7733                           ;Lcd.c: 156:         _delay((unsigned long)((1)*(20000000/4000.0)));
  7734  09F5  3007               	movlw	7
  7735  09F6  00F7               	movwf	??_LCD_array+1
  7736  09F7  307D               	movlw	125
  7737  09F8  00F6               	movwf	??_LCD_array
  7738  09F9                     u5637:
  7739  09F9  0BF6               	decfsz	??_LCD_array,f
  7740  09FA  29F9               	goto	u5637
  7741  09FB  0BF7               	decfsz	??_LCD_array+1,f
  7742  09FC  29F9               	goto	u5637
  7743                           
  7744                           ;Lcd.c: 157:         date++;
  7745  09FD  3001               	movlw	1
  7746  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  7747  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  7748  0A00  07A4               	addwf	LCD_array@date,f
  7749  0A01  1803               	skipnc
  7750  0A02  0AA5               	incf	LCD_array@date+1,f
  7751  0A03  3000               	movlw	0
  7752  0A04  07A5               	addwf	LCD_array@date+1,f
  7753  0A05                     l3928:
  7754                           
  7755                           ;Lcd.c: 153:     while(*date)
  7756  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  7757  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  7758  0A07  0825               	movf	LCD_array@date+1,w
  7759  0A08  00FF               	movwf	127
  7760  0A09  0824               	movf	LCD_array@date,w
  7761  0A0A  0084               	movwf	4
  7762  0A0B  120A  118A  2700  120A  158A  	fcall	stringtab
  7763  0A10  3A00               	xorlw	0
  7764  0A11  1903               	btfsc	3,2
  7765  0A12  0008               	return
  7766  0A13  29E7               	goto	l3922
  7767  0A14                     __end_of_LCD_array:
  7768                           
  7769                           	psect	text39
  7770  0DD6                     __ptext39:	
  7771 ;; *************** function _LCD_date *****************
  7772 ;; Defined at:
  7773 ;;		line 88 in file "Lcd.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  date            1    wreg     unsigned char 
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;  date            1    5[COMMON] unsigned char 
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      void 
  7780 ;; Registers used:
  7781 ;;		wreg, status,2, status,0
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7787 ;;      Params:         0       0       0       0       0
  7788 ;;      Locals:         1       0       0       0       0
  7789 ;;      Temps:          2       0       0       0       0
  7790 ;;      Totals:         3       0       0       0       0
  7791 ;;Total ram usage:        3 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:    2
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_Pant_Modos
  7798 ;;		_LCD_array
  7799 ;;		_LCD_character
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           
  7804                           ;psect for function _LCD_date
  7805  0DD6                     _LCD_date:
  7806                           
  7807                           ;incstack = 0
  7808                           ; Regs used in _LCD_date: [wreg+status,2+status,0]
  7809                           ;LCD_date@date stored from wreg
  7810  0DD6  00F5               	movwf	LCD_date@date
  7811                           
  7812                           ;Lcd.c: 88: void LCD_date(char date);Lcd.c: 89: {;Lcd.c: 91:     PORTCbits.RC4=0,PORTCbi
      +                          ts.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  7813  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  7814  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  7815  0DD9  1207               	bcf	7,4	;volatile
  7816  0DDA  1287               	bcf	7,5	;volatile
  7817  0DDB  1307               	bcf	7,6	;volatile
  7818  0DDC  1387               	bcf	7,7	;volatile
  7819                           
  7820                           ;Lcd.c: 94:     PORTCbits.RC4 = ((date >> 4) & 0x01);
  7821  0DDD  0875               	movf	LCD_date@date,w
  7822  0DDE  00F3               	movwf	??_LCD_date
  7823  0DDF  3004               	movlw	4
  7824  0DE0                     u3795:
  7825  0DE0  1003               	clrc
  7826  0DE1  0CF3               	rrf	??_LCD_date,f
  7827  0DE2  3EFF               	addlw	-1
  7828  0DE3  1D03               	skipz
  7829  0DE4  2DE0               	goto	u3795
  7830  0DE5  0873               	movf	??_LCD_date,w
  7831  0DE6  3901               	andlw	1
  7832  0DE7  00F4               	movwf	??_LCD_date+1
  7833  0DE8  0EF4               	swapf	??_LCD_date+1,f
  7834  0DE9  0807               	movf	7,w	;volatile
  7835  0DEA  0674               	xorwf	??_LCD_date+1,w
  7836  0DEB  39EF               	andlw	-17
  7837  0DEC  0674               	xorwf	??_LCD_date+1,w
  7838  0DED  0087               	movwf	7	;volatile
  7839                           
  7840                           ;Lcd.c: 95:     PORTCbits.RC5 = ((date >> 5) & 0x01);
  7841  0DEE  0875               	movf	LCD_date@date,w
  7842  0DEF  00F3               	movwf	??_LCD_date
  7843  0DF0  3005               	movlw	5
  7844  0DF1                     u3805:
  7845  0DF1  1003               	clrc
  7846  0DF2  0CF3               	rrf	??_LCD_date,f
  7847  0DF3  3EFF               	addlw	-1
  7848  0DF4  1D03               	skipz
  7849  0DF5  2DF1               	goto	u3805
  7850  0DF6  0873               	movf	??_LCD_date,w
  7851  0DF7  3901               	andlw	1
  7852  0DF8  00F4               	movwf	??_LCD_date+1
  7853  0DF9  0EF4               	swapf	??_LCD_date+1,f
  7854  0DFA  0DF4               	rlf	??_LCD_date+1,f
  7855  0DFB  0807               	movf	7,w	;volatile
  7856  0DFC  0674               	xorwf	??_LCD_date+1,w
  7857  0DFD  39DF               	andlw	-33
  7858  0DFE  0674               	xorwf	??_LCD_date+1,w
  7859  0DFF  0087               	movwf	7	;volatile
  7860                           
  7861                           ;Lcd.c: 96:     PORTCbits.RC6 = ((date >> 6) & 0x01);
  7862  0E00  0875               	movf	LCD_date@date,w
  7863  0E01  00F3               	movwf	??_LCD_date
  7864  0E02  3006               	movlw	6
  7865  0E03                     u3815:
  7866  0E03  1003               	clrc
  7867  0E04  0CF3               	rrf	??_LCD_date,f
  7868  0E05  3EFF               	addlw	-1
  7869  0E06  1D03               	skipz
  7870  0E07  2E03               	goto	u3815
  7871  0E08  0873               	movf	??_LCD_date,w
  7872  0E09  3901               	andlw	1
  7873  0E0A  00F4               	movwf	??_LCD_date+1
  7874  0E0B  0EF4               	swapf	??_LCD_date+1,f
  7875  0E0C  0DF4               	rlf	??_LCD_date+1,f
  7876  0E0D  0DF4               	rlf	??_LCD_date+1,f
  7877  0E0E  0807               	movf	7,w	;volatile
  7878  0E0F  0674               	xorwf	??_LCD_date+1,w
  7879  0E10  39BF               	andlw	-65
  7880  0E11  0674               	xorwf	??_LCD_date+1,w
  7881  0E12  0087               	movwf	7	;volatile
  7882                           
  7883                           ;Lcd.c: 97:     PORTCbits.RC7 = ((date >> 7) & 0x01);
  7884  0E13  0875               	movf	LCD_date@date,w
  7885  0E14  00F3               	movwf	??_LCD_date
  7886  0E15  3007               	movlw	7
  7887  0E16                     u3825:
  7888  0E16  1003               	clrc
  7889  0E17  0CF3               	rrf	??_LCD_date,f
  7890  0E18  3EFF               	addlw	-1
  7891  0E19  1D03               	skipz
  7892  0E1A  2E16               	goto	u3825
  7893  0E1B  0873               	movf	??_LCD_date,w
  7894  0E1C  3901               	andlw	1
  7895  0E1D  00F4               	movwf	??_LCD_date+1
  7896  0E1E  0CF4               	rrf	??_LCD_date+1,f
  7897  0E1F  0CF4               	rrf	??_LCD_date+1,f
  7898  0E20  0807               	movf	7,w	;volatile
  7899  0E21  0674               	xorwf	??_LCD_date+1,w
  7900  0E22  397F               	andlw	-129
  7901  0E23  0674               	xorwf	??_LCD_date+1,w
  7902  0E24  0087               	movwf	7	;volatile
  7903                           
  7904                           ;Lcd.c: 100:     PORTCbits.RC1 = 1;
  7905  0E25  1487               	bsf	7,1	;volatile
  7906                           
  7907                           ;Lcd.c: 101:     PORTCbits.RC3 = 0;
  7908  0E26  1187               	bcf	7,3	;volatile
  7909                           
  7910                           ;Lcd.c: 104:     PORTCbits.RC3 = 1;
  7911  0E27  1587               	bsf	7,3	;volatile
  7912                           
  7913                           ;Lcd.c: 105:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  7914  0E28  3018               	movlw	24
  7915  0E29  00F3               	movwf	??_LCD_date
  7916  0E2A                     u5647:
  7917  0E2A  0BF3               	decfsz	??_LCD_date,f
  7918  0E2B  2E2A               	goto	u5647
  7919  0E2C  2E2D               	nop2
  7920                           
  7921                           ;Lcd.c: 106:     PORTCbits.RC3 = 0;
  7922  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  7923  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  7924  0E2F  1187               	bcf	7,3	;volatile
  7925                           
  7926                           ;Lcd.c: 107:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  7927  0E30  3018               	movlw	24
  7928  0E31  00F3               	movwf	??_LCD_date
  7929  0E32                     u5657:
  7930  0E32  0BF3               	decfsz	??_LCD_date,f
  7931  0E33  2E32               	goto	u5657
  7932  0E34  2E35               	nop2
  7933                           
  7934                           ;Lcd.c: 111:     PORTCbits.RC4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  7935  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  7936  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  7937  0E37  1207               	bcf	7,4	;volatile
  7938  0E38  1287               	bcf	7,5	;volatile
  7939  0E39  1307               	bcf	7,6	;volatile
  7940  0E3A  1387               	bcf	7,7	;volatile
  7941                           
  7942                           ;Lcd.c: 114:     PORTCbits.RC4 = (date & 0x01);
  7943  0E3B  0875               	movf	LCD_date@date,w
  7944  0E3C  3901               	andlw	1
  7945  0E3D  00F3               	movwf	??_LCD_date
  7946  0E3E  0EF3               	swapf	??_LCD_date,f
  7947  0E3F  0807               	movf	7,w	;volatile
  7948  0E40  0673               	xorwf	??_LCD_date,w
  7949  0E41  39EF               	andlw	-17
  7950  0E42  0673               	xorwf	??_LCD_date,w
  7951  0E43  0087               	movwf	7	;volatile
  7952                           
  7953                           ;Lcd.c: 115:     PORTCbits.RC5 = ((date >> 1) & 0x01);
  7954  0E44  0875               	movf	LCD_date@date,w
  7955  0E45  00F3               	movwf	??_LCD_date
  7956  0E46  1003               	clrc
  7957  0E47  0C73               	rrf	??_LCD_date,w
  7958  0E48  3901               	andlw	1
  7959  0E49  00F4               	movwf	??_LCD_date+1
  7960  0E4A  0EF4               	swapf	??_LCD_date+1,f
  7961  0E4B  0DF4               	rlf	??_LCD_date+1,f
  7962  0E4C  0807               	movf	7,w	;volatile
  7963  0E4D  0674               	xorwf	??_LCD_date+1,w
  7964  0E4E  39DF               	andlw	-33
  7965  0E4F  0674               	xorwf	??_LCD_date+1,w
  7966  0E50  0087               	movwf	7	;volatile
  7967                           
  7968                           ;Lcd.c: 116:     PORTCbits.RC6 = ((date >> 2) & 0x01);
  7969  0E51  0875               	movf	LCD_date@date,w
  7970  0E52  00F3               	movwf	??_LCD_date
  7971  0E53  3002               	movlw	2
  7972  0E54                     u3835:
  7973  0E54  1003               	clrc
  7974  0E55  0CF3               	rrf	??_LCD_date,f
  7975  0E56  3EFF               	addlw	-1
  7976  0E57  1D03               	skipz
  7977  0E58  2E54               	goto	u3835
  7978  0E59  0873               	movf	??_LCD_date,w
  7979  0E5A  3901               	andlw	1
  7980  0E5B  00F4               	movwf	??_LCD_date+1
  7981  0E5C  0EF4               	swapf	??_LCD_date+1,f
  7982  0E5D  0DF4               	rlf	??_LCD_date+1,f
  7983  0E5E  0DF4               	rlf	??_LCD_date+1,f
  7984  0E5F  0807               	movf	7,w	;volatile
  7985  0E60  0674               	xorwf	??_LCD_date+1,w
  7986  0E61  39BF               	andlw	-65
  7987  0E62  0674               	xorwf	??_LCD_date+1,w
  7988  0E63  0087               	movwf	7	;volatile
  7989                           
  7990                           ;Lcd.c: 117:     PORTCbits.RC7 = ((date >> 3) & 0x01);
  7991  0E64  0875               	movf	LCD_date@date,w
  7992  0E65  00F3               	movwf	??_LCD_date
  7993  0E66  3003               	movlw	3
  7994  0E67                     u3845:
  7995  0E67  1003               	clrc
  7996  0E68  0CF3               	rrf	??_LCD_date,f
  7997  0E69  3EFF               	addlw	-1
  7998  0E6A  1D03               	skipz
  7999  0E6B  2E67               	goto	u3845
  8000  0E6C  0873               	movf	??_LCD_date,w
  8001  0E6D  3901               	andlw	1
  8002  0E6E  00F4               	movwf	??_LCD_date+1
  8003  0E6F  0CF4               	rrf	??_LCD_date+1,f
  8004  0E70  0CF4               	rrf	??_LCD_date+1,f
  8005  0E71  0807               	movf	7,w	;volatile
  8006  0E72  0674               	xorwf	??_LCD_date+1,w
  8007  0E73  397F               	andlw	-129
  8008  0E74  0674               	xorwf	??_LCD_date+1,w
  8009  0E75  0087               	movwf	7	;volatile
  8010                           
  8011                           ;Lcd.c: 120:     PORTCbits.RC1 = 1;
  8012  0E76  1487               	bsf	7,1	;volatile
  8013                           
  8014                           ;Lcd.c: 121:     PORTCbits.RC3 = 0;
  8015  0E77  1187               	bcf	7,3	;volatile
  8016                           
  8017                           ;Lcd.c: 124:     PORTCbits.RC3 = 1;
  8018  0E78  1587               	bsf	7,3	;volatile
  8019                           
  8020                           ;Lcd.c: 125:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  8021  0E79  3053               	movlw	83
  8022  0E7A  00F3               	movwf	??_LCD_date
  8023  0E7B                     u5667:
  8024  0E7B  0BF3               	decfsz	??_LCD_date,f
  8025  0E7C  2E7B               	goto	u5667
  8026                           
  8027                           ;Lcd.c: 126:     PORTCbits.RC3 = 0;
  8028  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  8029  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  8030  0E7F  1187               	bcf	7,3	;volatile
  8031                           
  8032                           ;Lcd.c: 127:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  8033  0E80  3053               	movlw	83
  8034  0E81  00F3               	movwf	??_LCD_date
  8035  0E82                     u5677:
  8036  0E82  0BF3               	decfsz	??_LCD_date,f
  8037  0E83  2E82               	goto	u5677
  8038                           
  8039                           ;Lcd.c: 130:     _delay((unsigned long)((3)*(20000000/4000.0)));
  8040  0E84  3014               	movlw	20
  8041  0E85  00F4               	movwf	??_LCD_date+1
  8042  0E86  3079               	movlw	121
  8043  0E87  00F3               	movwf	??_LCD_date
  8044  0E88                     u5687:
  8045  0E88  0BF3               	decfsz	??_LCD_date,f
  8046  0E89  2E88               	goto	u5687
  8047  0E8A  0BF4               	decfsz	??_LCD_date+1,f
  8048  0E8B  2E88               	goto	u5687
  8049  0E8C  2E8D               	nop2
  8050  0E8D  0008               	return
  8051  0E8E                     __end_of_LCD_date:
  8052                           
  8053                           	psect	text40
  8054  1625                     __ptext40:	
  8055 ;; *************** function _Antirrebote *****************
  8056 ;; Defined at:
  8057 ;;		line 78 in file "Main.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;		None
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;		None
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  1    wreg      void 
  8064 ;; Registers used:
  8065 ;;		wreg
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8071 ;;      Params:         0       0       0       0       0
  8072 ;;      Locals:         0       0       0       0       0
  8073 ;;      Temps:          3       0       0       0       0
  8074 ;;      Totals:         3       0       0       0       0
  8075 ;;Total ram usage:        3 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    2
  8078 ;; This function calls:
  8079 ;;		Nothing
  8080 ;; This function is called by:
  8081 ;;		_MEF_Actualizacion
  8082 ;;		_MEF_Subest_Actualizacion
  8083 ;;		_Select_Modo
  8084 ;;		_Detener
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           
  8089                           ;psect for function _Antirrebote
  8090  1625                     _Antirrebote:
  8091                           
  8092                           ;Main.c: 80:     PORTAbits.RA5 = 1;
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in _Antirrebote: [wreg]
  8096  1625  1283               	bcf	3,5	;RP0=0, select bank0
  8097  1626  1303               	bcf	3,6	;RP1=0, select bank0
  8098  1627  1685               	bsf	5,5	;volatile
  8099                           
  8100                           ;Main.c: 81:     _delay((unsigned long)((50)*(20000000/4000.0)));
  8101  1628  3002               	movlw	2
  8102  1629  00F5               	movwf	??_Antirrebote+2
  8103  162A  3045               	movlw	69
  8104  162B  00F4               	movwf	??_Antirrebote+1
  8105  162C  30A9               	movlw	169
  8106  162D  00F3               	movwf	??_Antirrebote
  8107  162E                     u5697:
  8108  162E  0BF3               	decfsz	??_Antirrebote,f
  8109  162F  2E2E               	goto	u5697
  8110  1630  0BF4               	decfsz	??_Antirrebote+1,f
  8111  1631  2E2E               	goto	u5697
  8112  1632  0BF5               	decfsz	??_Antirrebote+2,f
  8113  1633  2E2E               	goto	u5697
  8114  1634  2E35               	nop2
  8115                           
  8116                           ;Main.c: 82:     PORTAbits.RA5 = 0;
  8117  1635  1283               	bcf	3,5	;RP0=0, select bank0
  8118  1636  1303               	bcf	3,6	;RP1=0, select bank0
  8119  1637  1285               	bcf	5,5	;volatile
  8120  1638                     l4194:	
  8121                           ;Main.c: 83:     while(PORTBbits.RB0 || PORTBbits.RB1 || PORTBbits.RB2 || PORTBbits.RB3)
      +                           _delay((unsigned long)((10)*(20000000/4000.0)));
  8122                           
  8123  1638  1283               	bcf	3,5	;RP0=0, select bank0
  8124  1639  1303               	bcf	3,6	;RP1=0, select bank0
  8125  163A  1C06               	btfss	6,0	;volatile
  8126  163B  2E46               	goto	l4196
  8127  163C                     l4192:
  8128  163C  3041               	movlw	65
  8129  163D  00F4               	movwf	??_Antirrebote+1
  8130  163E  30EE               	movlw	238
  8131  163F  00F3               	movwf	??_Antirrebote
  8132  1640                     u5707:
  8133  1640  0BF3               	decfsz	??_Antirrebote,f
  8134  1641  2E40               	goto	u5707
  8135  1642  0BF4               	decfsz	??_Antirrebote+1,f
  8136  1643  2E40               	goto	u5707
  8137  1644  0000               	nop
  8138  1645  2E38               	goto	l4194
  8139  1646                     l4196:
  8140  1646  1C86               	btfss	6,1	;volatile
  8141  1647  1906               	btfsc	6,2	;volatile
  8142  1648  2E3C               	goto	l4192
  8143  1649  1D86               	btfss	6,3	;volatile
  8144  164A  0008               	return
  8145  164B  2E3C               	goto	l4192
  8146  164C                     __end_of_Antirrebote:
  8147                           
  8148                           	psect	text41
  8149  0A82                     __ptext41:	
  8150 ;; *************** function _LCD_init *****************
  8151 ;; Defined at:
  8152 ;;		line 4 in file "Lcd.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;		None
  8155 ;; Auto vars:     Size  Location     Type
  8156 ;;  i               1    0[BANK0 ] unsigned char 
  8157 ;; Return value:  Size  Location     Type
  8158 ;;                  1    wreg      void 
  8159 ;; Registers used:
  8160 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8161 ;; Tracked objects:
  8162 ;;		On entry : 0/0
  8163 ;;		On exit  : 0/0
  8164 ;;		Unchanged: 0/0
  8165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8166 ;;      Params:         0       0       0       0       0
  8167 ;;      Locals:         0       1       0       0       0
  8168 ;;      Temps:          2       0       0       0       0
  8169 ;;      Totals:         2       1       0       0       0
  8170 ;;Total ram usage:        3 bytes
  8171 ;; Hardware stack levels used:    1
  8172 ;; Hardware stack levels required when called:    3
  8173 ;; This function calls:
  8174 ;;		_LCD_command
  8175 ;; This function is called by:
  8176 ;;		_main
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           
  8181                           ;psect for function _LCD_init
  8182  0A82                     _LCD_init:
  8183                           
  8184                           ;Lcd.c: 7:     TRISCbits.TRISC4=0,TRISCbits.TRISC5=0,TRISCbits.TRISC6=0,TRISCbits.TRISC7
      +                          =0;
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8188  0A82  1683               	bsf	3,5	;RP0=1, select bank1
  8189  0A83  1303               	bcf	3,6	;RP1=0, select bank1
  8190  0A84  1207               	bcf	7,4	;volatile
  8191  0A85  1287               	bcf	7,5	;volatile
  8192  0A86  1307               	bcf	7,6	;volatile
  8193  0A87  1387               	bcf	7,7	;volatile
  8194                           
  8195                           ;Lcd.c: 8:     TRISCbits.TRISC1=0,TRISCbits.TRISC3=0;
  8196  0A88  1087               	bcf	7,1	;volatile
  8197  0A89  1187               	bcf	7,3	;volatile
  8198                           
  8199                           ;Lcd.c: 9:     TRISCbits.TRISC2=0,PORTCbits.RC2=0;
  8200  0A8A  1107               	bcf	7,2	;volatile
  8201  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  8202  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  8203  0A8D  1107               	bcf	7,2	;volatile
  8204                           
  8205                           ;Lcd.c: 12:     _delay((unsigned long)((30)*(20000000/4000.0)));
  8206  0A8E  30C3               	movlw	195
  8207  0A8F  00F7               	movwf	??_LCD_init+1
  8208  0A90  30CD               	movlw	205
  8209  0A91  00F6               	movwf	??_LCD_init
  8210  0A92                     u5717:
  8211  0A92  0BF6               	decfsz	??_LCD_init,f
  8212  0A93  2A92               	goto	u5717
  8213  0A94  0BF7               	decfsz	??_LCD_init+1,f
  8214  0A95  2A92               	goto	u5717
  8215                           
  8216                           ;Lcd.c: 14:     for(char i=0;i<3;i++)
  8217  0A96  1283               	bcf	3,5	;RP0=0, select bank0
  8218  0A97  1303               	bcf	3,6	;RP1=0, select bank0
  8219  0A98  01A0               	clrf	LCD_init@i
  8220  0A99                     l4682:
  8221                           
  8222                           ;Lcd.c: 15:     {;Lcd.c: 16:         LCD_command(0x03);
  8223  0A99  3003               	movlw	3
  8224  0A9A  120A  158A  2746  120A  158A  	fcall	_LCD_command
  8225                           
  8226                           ;Lcd.c: 17:         _delay((unsigned long)((7)*(20000000/4000.0)));
  8227  0A9F  302E               	movlw	46
  8228  0AA0  00F7               	movwf	??_LCD_init+1
  8229  0AA1  3073               	movlw	115
  8230  0AA2  00F6               	movwf	??_LCD_init
  8231  0AA3                     u5727:
  8232  0AA3  0BF6               	decfsz	??_LCD_init,f
  8233  0AA4  2AA3               	goto	u5727
  8234  0AA5  0BF7               	decfsz	??_LCD_init+1,f
  8235  0AA6  2AA3               	goto	u5727
  8236                           
  8237                           ;Lcd.c: 18:     }
  8238  0AA7  3001               	movlw	1
  8239  0AA8  00FF               	movwf	127
  8240  0AA9  087F               	movf	127,w
  8241  0AAA  1283               	bcf	3,5	;RP0=0, select bank0
  8242  0AAB  1303               	bcf	3,6	;RP1=0, select bank0
  8243  0AAC  07A0               	addwf	LCD_init@i,f
  8244  0AAD  3003               	movlw	3
  8245  0AAE  0220               	subwf	LCD_init@i,w
  8246  0AAF  1C03               	skipc
  8247  0AB0  2A99               	goto	l4682
  8248                           
  8249                           ;Lcd.c: 21:  LCD_command(0x33);
  8250  0AB1  3033               	movlw	51
  8251  0AB2  120A  158A  2746  120A  158A  	fcall	_LCD_command
  8252                           
  8253                           ;Lcd.c: 22:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  8254  0AB7  30A6               	movlw	166
  8255  0AB8  00F6               	movwf	??_LCD_init
  8256  0AB9                     u5737:
  8257  0AB9  0BF6               	decfsz	??_LCD_init,f
  8258  0ABA  2AB9               	goto	u5737
  8259  0ABB  0000               	nop
  8260                           
  8261                           ;Lcd.c: 23:     LCD_command(0x32);
  8262  0ABC  3032               	movlw	50
  8263  0ABD  120A  158A  2746  120A  158A  	fcall	_LCD_command
  8264                           
  8265                           ;Lcd.c: 24:     _delay((unsigned long)((5)*(20000000/4000.0)));
  8266  0AC2  3021               	movlw	33
  8267  0AC3  00F7               	movwf	??_LCD_init+1
  8268  0AC4  3076               	movlw	118
  8269  0AC5  00F6               	movwf	??_LCD_init
  8270  0AC6                     u5747:
  8271  0AC6  0BF6               	decfsz	??_LCD_init,f
  8272  0AC7  2AC6               	goto	u5747
  8273  0AC8  0BF7               	decfsz	??_LCD_init+1,f
  8274  0AC9  2AC6               	goto	u5747
  8275  0ACA  0000               	nop
  8276                           
  8277                           ;Lcd.c: 25:  LCD_command(0x28);
  8278  0ACB  3028               	movlw	40
  8279  0ACC  120A  158A  2746  120A  158A  	fcall	_LCD_command
  8280                           
  8281                           ;Lcd.c: 26:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  8282  0AD1  30A6               	movlw	166
  8283  0AD2  00F6               	movwf	??_LCD_init
  8284  0AD3                     u5757:
  8285  0AD3  0BF6               	decfsz	??_LCD_init,f
  8286  0AD4  2AD3               	goto	u5757
  8287  0AD5  0000               	nop
  8288                           
  8289                           ;Lcd.c: 27:  LCD_command(0x0C);
  8290  0AD6  300C               	movlw	12
  8291  0AD7  120A  158A  2746  120A  158A  	fcall	_LCD_command
  8292                           
  8293                           ;Lcd.c: 28:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  8294  0ADC  30A6               	movlw	166
  8295  0ADD  00F6               	movwf	??_LCD_init
  8296  0ADE                     u5767:
  8297  0ADE  0BF6               	decfsz	??_LCD_init,f
  8298  0ADF  2ADE               	goto	u5767
  8299  0AE0  0000               	nop
  8300                           
  8301                           ;Lcd.c: 29:  LCD_command(0x06);
  8302  0AE1  3006               	movlw	6
  8303  0AE2  120A  158A  2746  120A  158A  	fcall	_LCD_command
  8304                           
  8305                           ;Lcd.c: 30:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  8306  0AE7  30A6               	movlw	166
  8307  0AE8  00F6               	movwf	??_LCD_init
  8308  0AE9                     u5777:
  8309  0AE9  0BF6               	decfsz	??_LCD_init,f
  8310  0AEA  2AE9               	goto	u5777
  8311  0AEB  0000               	nop
  8312                           
  8313                           ;Lcd.c: 31:     LCD_command(0x01);
  8314  0AEC  3001               	movlw	1
  8315  0AED  120A  158A  2746  120A  158A  	fcall	_LCD_command
  8316                           
  8317                           ;Lcd.c: 32:     _delay((unsigned long)((10)*(20000000/4000.0)));
  8318  0AF2  3041               	movlw	65
  8319  0AF3  00F7               	movwf	??_LCD_init+1
  8320  0AF4  30EE               	movlw	238
  8321  0AF5  00F6               	movwf	??_LCD_init
  8322  0AF6                     u5787:
  8323  0AF6  0BF6               	decfsz	??_LCD_init,f
  8324  0AF7  2AF6               	goto	u5787
  8325  0AF8  0BF7               	decfsz	??_LCD_init+1,f
  8326  0AF9  2AF6               	goto	u5787
  8327  0AFA  0000               	nop
  8328  0AFB  0008               	return
  8329  0AFC                     __end_of_LCD_init:
  8330                           
  8331                           	psect	text42
  8332  0F46                     __ptext42:	
  8333 ;; *************** function _LCD_command *****************
  8334 ;; Defined at:
  8335 ;;		line 39 in file "Lcd.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  cmd             1    wreg     unsigned char 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  cmd             1    5[COMMON] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8349 ;;      Params:         0       0       0       0       0
  8350 ;;      Locals:         1       0       0       0       0
  8351 ;;      Temps:          2       0       0       0       0
  8352 ;;      Totals:         3       0       0       0       0
  8353 ;;Total ram usage:        3 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    2
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_MEF_Subest_Actualizacion
  8360 ;;		_Pant_Inicio
  8361 ;;		_Pant_Modos
  8362 ;;		_Pant_Detener
  8363 ;;		_LCD_init
  8364 ;;		_LCD_array
  8365 ;;		_LCD_xy
  8366 ;;		_LCD_character
  8367 ;;		_LCD_shift
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           
  8372                           ;psect for function _LCD_command
  8373  0F46                     _LCD_command:
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _LCD_command: [wreg+status,2+status,0]
  8377                           ;LCD_command@cmd stored from wreg
  8378  0F46  00F5               	movwf	LCD_command@cmd
  8379                           
  8380                           ;Lcd.c: 39: void LCD_command(unsigned char cmd);Lcd.c: 40: {;Lcd.c: 42:     PORTCbits.RC
      +                          4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  8381  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  8382  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  8383  0F49  1207               	bcf	7,4	;volatile
  8384  0F4A  1287               	bcf	7,5	;volatile
  8385  0F4B  1307               	bcf	7,6	;volatile
  8386  0F4C  1387               	bcf	7,7	;volatile
  8387                           
  8388                           ;Lcd.c: 45:     PORTCbits.RC4 = ((cmd >> 4) & 0x01);
  8389  0F4D  0875               	movf	LCD_command@cmd,w
  8390  0F4E  00F3               	movwf	??_LCD_command
  8391  0F4F  3004               	movlw	4
  8392  0F50                     u3735:
  8393  0F50  1003               	clrc
  8394  0F51  0CF3               	rrf	??_LCD_command,f
  8395  0F52  3EFF               	addlw	-1
  8396  0F53  1D03               	skipz
  8397  0F54  2F50               	goto	u3735
  8398  0F55  0873               	movf	??_LCD_command,w
  8399  0F56  3901               	andlw	1
  8400  0F57  00F4               	movwf	??_LCD_command+1
  8401  0F58  0EF4               	swapf	??_LCD_command+1,f
  8402  0F59  0807               	movf	7,w	;volatile
  8403  0F5A  0674               	xorwf	??_LCD_command+1,w
  8404  0F5B  39EF               	andlw	-17
  8405  0F5C  0674               	xorwf	??_LCD_command+1,w
  8406  0F5D  0087               	movwf	7	;volatile
  8407                           
  8408                           ;Lcd.c: 46:     PORTCbits.RC5 = ((cmd >> 5) & 0x01);
  8409  0F5E  0875               	movf	LCD_command@cmd,w
  8410  0F5F  00F3               	movwf	??_LCD_command
  8411  0F60  3005               	movlw	5
  8412  0F61                     u3745:
  8413  0F61  1003               	clrc
  8414  0F62  0CF3               	rrf	??_LCD_command,f
  8415  0F63  3EFF               	addlw	-1
  8416  0F64  1D03               	skipz
  8417  0F65  2F61               	goto	u3745
  8418  0F66  0873               	movf	??_LCD_command,w
  8419  0F67  3901               	andlw	1
  8420  0F68  00F4               	movwf	??_LCD_command+1
  8421  0F69  0EF4               	swapf	??_LCD_command+1,f
  8422  0F6A  0DF4               	rlf	??_LCD_command+1,f
  8423  0F6B  0807               	movf	7,w	;volatile
  8424  0F6C  0674               	xorwf	??_LCD_command+1,w
  8425  0F6D  39DF               	andlw	-33
  8426  0F6E  0674               	xorwf	??_LCD_command+1,w
  8427  0F6F  0087               	movwf	7	;volatile
  8428                           
  8429                           ;Lcd.c: 47:     PORTCbits.RC6 = ((cmd >> 6) & 0x01);
  8430  0F70  0875               	movf	LCD_command@cmd,w
  8431  0F71  00F3               	movwf	??_LCD_command
  8432  0F72  3006               	movlw	6
  8433  0F73                     u3755:
  8434  0F73  1003               	clrc
  8435  0F74  0CF3               	rrf	??_LCD_command,f
  8436  0F75  3EFF               	addlw	-1
  8437  0F76  1D03               	skipz
  8438  0F77  2F73               	goto	u3755
  8439  0F78  0873               	movf	??_LCD_command,w
  8440  0F79  3901               	andlw	1
  8441  0F7A  00F4               	movwf	??_LCD_command+1
  8442  0F7B  0EF4               	swapf	??_LCD_command+1,f
  8443  0F7C  0DF4               	rlf	??_LCD_command+1,f
  8444  0F7D  0DF4               	rlf	??_LCD_command+1,f
  8445  0F7E  0807               	movf	7,w	;volatile
  8446  0F7F  0674               	xorwf	??_LCD_command+1,w
  8447  0F80  39BF               	andlw	-65
  8448  0F81  0674               	xorwf	??_LCD_command+1,w
  8449  0F82  0087               	movwf	7	;volatile
  8450                           
  8451                           ;Lcd.c: 48:     PORTCbits.RC7 = ((cmd >> 7) & 0x01);
  8452  0F83  0875               	movf	LCD_command@cmd,w
  8453  0F84  00F3               	movwf	??_LCD_command
  8454  0F85  3007               	movlw	7
  8455  0F86                     u3765:
  8456  0F86  1003               	clrc
  8457  0F87  0CF3               	rrf	??_LCD_command,f
  8458  0F88  3EFF               	addlw	-1
  8459  0F89  1D03               	skipz
  8460  0F8A  2F86               	goto	u3765
  8461  0F8B  0873               	movf	??_LCD_command,w
  8462  0F8C  3901               	andlw	1
  8463  0F8D  00F4               	movwf	??_LCD_command+1
  8464  0F8E  0CF4               	rrf	??_LCD_command+1,f
  8465  0F8F  0CF4               	rrf	??_LCD_command+1,f
  8466  0F90  0807               	movf	7,w	;volatile
  8467  0F91  0674               	xorwf	??_LCD_command+1,w
  8468  0F92  397F               	andlw	-129
  8469  0F93  0674               	xorwf	??_LCD_command+1,w
  8470  0F94  0087               	movwf	7	;volatile
  8471                           
  8472                           ;Lcd.c: 51:     PORTCbits.RC1 = 0;
  8473  0F95  1087               	bcf	7,1	;volatile
  8474                           
  8475                           ;Lcd.c: 52:     PORTCbits.RC3 = 0;
  8476  0F96  1187               	bcf	7,3	;volatile
  8477                           
  8478                           ;Lcd.c: 55:     PORTCbits.RC3 = 1;
  8479  0F97  1587               	bsf	7,3	;volatile
  8480                           
  8481                           ;Lcd.c: 56:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8482  0F98  3018               	movlw	24
  8483  0F99  00F3               	movwf	??_LCD_command
  8484  0F9A                     u5797:
  8485  0F9A  0BF3               	decfsz	??_LCD_command,f
  8486  0F9B  2F9A               	goto	u5797
  8487  0F9C  2F9D               	nop2
  8488                           
  8489                           ;Lcd.c: 57:     PORTCbits.RC3 = 0;
  8490  0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  8491  0F9E  1303               	bcf	3,6	;RP1=0, select bank0
  8492  0F9F  1187               	bcf	7,3	;volatile
  8493                           
  8494                           ;Lcd.c: 58:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8495  0FA0  3018               	movlw	24
  8496  0FA1  00F3               	movwf	??_LCD_command
  8497  0FA2                     u5807:
  8498  0FA2  0BF3               	decfsz	??_LCD_command,f
  8499  0FA3  2FA2               	goto	u5807
  8500  0FA4  2FA5               	nop2
  8501                           
  8502                           ;Lcd.c: 62:     PORTCbits.RC4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  8503  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  8504  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  8505  0FA7  1207               	bcf	7,4	;volatile
  8506  0FA8  1287               	bcf	7,5	;volatile
  8507  0FA9  1307               	bcf	7,6	;volatile
  8508  0FAA  1387               	bcf	7,7	;volatile
  8509                           
  8510                           ;Lcd.c: 65:     PORTCbits.RC4 = (cmd & 0x01);
  8511  0FAB  0875               	movf	LCD_command@cmd,w
  8512  0FAC  3901               	andlw	1
  8513  0FAD  00F3               	movwf	??_LCD_command
  8514  0FAE  0EF3               	swapf	??_LCD_command,f
  8515  0FAF  0807               	movf	7,w	;volatile
  8516  0FB0  0673               	xorwf	??_LCD_command,w
  8517  0FB1  39EF               	andlw	-17
  8518  0FB2  0673               	xorwf	??_LCD_command,w
  8519  0FB3  0087               	movwf	7	;volatile
  8520                           
  8521                           ;Lcd.c: 66:     PORTCbits.RC5 = ((cmd >> 1) & 0x01);
  8522  0FB4  0875               	movf	LCD_command@cmd,w
  8523  0FB5  00F3               	movwf	??_LCD_command
  8524  0FB6  1003               	clrc
  8525  0FB7  0C73               	rrf	??_LCD_command,w
  8526  0FB8  3901               	andlw	1
  8527  0FB9  00F4               	movwf	??_LCD_command+1
  8528  0FBA  0EF4               	swapf	??_LCD_command+1,f
  8529  0FBB  0DF4               	rlf	??_LCD_command+1,f
  8530  0FBC  0807               	movf	7,w	;volatile
  8531  0FBD  0674               	xorwf	??_LCD_command+1,w
  8532  0FBE  39DF               	andlw	-33
  8533  0FBF  0674               	xorwf	??_LCD_command+1,w
  8534  0FC0  0087               	movwf	7	;volatile
  8535                           
  8536                           ;Lcd.c: 67:     PORTCbits.RC6 = ((cmd >> 2) & 0x01);
  8537  0FC1  0875               	movf	LCD_command@cmd,w
  8538  0FC2  00F3               	movwf	??_LCD_command
  8539  0FC3  3002               	movlw	2
  8540  0FC4                     u3775:
  8541  0FC4  1003               	clrc
  8542  0FC5  0CF3               	rrf	??_LCD_command,f
  8543  0FC6  3EFF               	addlw	-1
  8544  0FC7  1D03               	skipz
  8545  0FC8  2FC4               	goto	u3775
  8546  0FC9  0873               	movf	??_LCD_command,w
  8547  0FCA  3901               	andlw	1
  8548  0FCB  00F4               	movwf	??_LCD_command+1
  8549  0FCC  0EF4               	swapf	??_LCD_command+1,f
  8550  0FCD  0DF4               	rlf	??_LCD_command+1,f
  8551  0FCE  0DF4               	rlf	??_LCD_command+1,f
  8552  0FCF  0807               	movf	7,w	;volatile
  8553  0FD0  0674               	xorwf	??_LCD_command+1,w
  8554  0FD1  39BF               	andlw	-65
  8555  0FD2  0674               	xorwf	??_LCD_command+1,w
  8556  0FD3  0087               	movwf	7	;volatile
  8557                           
  8558                           ;Lcd.c: 68:     PORTCbits.RC7 = ((cmd >> 3) & 0x01);
  8559  0FD4  0875               	movf	LCD_command@cmd,w
  8560  0FD5  00F3               	movwf	??_LCD_command
  8561  0FD6  3003               	movlw	3
  8562  0FD7                     u3785:
  8563  0FD7  1003               	clrc
  8564  0FD8  0CF3               	rrf	??_LCD_command,f
  8565  0FD9  3EFF               	addlw	-1
  8566  0FDA  1D03               	skipz
  8567  0FDB  2FD7               	goto	u3785
  8568  0FDC  0873               	movf	??_LCD_command,w
  8569  0FDD  3901               	andlw	1
  8570  0FDE  00F4               	movwf	??_LCD_command+1
  8571  0FDF  0CF4               	rrf	??_LCD_command+1,f
  8572  0FE0  0CF4               	rrf	??_LCD_command+1,f
  8573  0FE1  0807               	movf	7,w	;volatile
  8574  0FE2  0674               	xorwf	??_LCD_command+1,w
  8575  0FE3  397F               	andlw	-129
  8576  0FE4  0674               	xorwf	??_LCD_command+1,w
  8577  0FE5  0087               	movwf	7	;volatile
  8578                           
  8579                           ;Lcd.c: 71:     PORTCbits.RC1 = 0;
  8580  0FE6  1087               	bcf	7,1	;volatile
  8581                           
  8582                           ;Lcd.c: 72:     PORTCbits.RC3 = 0;
  8583  0FE7  1187               	bcf	7,3	;volatile
  8584                           
  8585                           ;Lcd.c: 75:     PORTCbits.RC3 = 1;
  8586  0FE8  1587               	bsf	7,3	;volatile
  8587                           
  8588                           ;Lcd.c: 76:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8589  0FE9  3018               	movlw	24
  8590  0FEA  00F3               	movwf	??_LCD_command
  8591  0FEB                     u5817:
  8592  0FEB  0BF3               	decfsz	??_LCD_command,f
  8593  0FEC  2FEB               	goto	u5817
  8594  0FED  2FEE               	nop2
  8595                           
  8596                           ;Lcd.c: 77:     PORTCbits.RC3 = 0;
  8597  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  8598  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  8599  0FF0  1187               	bcf	7,3	;volatile
  8600                           
  8601                           ;Lcd.c: 78:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8602  0FF1  3018               	movlw	24
  8603  0FF2  00F3               	movwf	??_LCD_command
  8604  0FF3                     u5827:
  8605  0FF3  0BF3               	decfsz	??_LCD_command,f
  8606  0FF4  2FF3               	goto	u5827
  8607  0FF5  2FF6               	nop2
  8608                           
  8609                           ;Lcd.c: 81:     _delay((unsigned long)((3)*(20000000/4000.0)));
  8610  0FF6  3014               	movlw	20
  8611  0FF7  00F4               	movwf	??_LCD_command+1
  8612  0FF8  3079               	movlw	121
  8613  0FF9  00F3               	movwf	??_LCD_command
  8614  0FFA                     u5837:
  8615  0FFA  0BF3               	decfsz	??_LCD_command,f
  8616  0FFB  2FFA               	goto	u5837
  8617  0FFC  0BF4               	decfsz	??_LCD_command+1,f
  8618  0FFD  2FFA               	goto	u5837
  8619  0FFE  2FFF               	nop2
  8620  0FFF  0008               	return
  8621  1000                     __end_of_LCD_command:
  8622                           
  8623                           	psect	text43
  8624  15DC                     __ptext43:	
  8625 ;; *************** function _Adc_init *****************
  8626 ;; Defined at:
  8627 ;;		line 5 in file "ADC.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;		None
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;		None
  8632 ;; Return value:  Size  Location     Type
  8633 ;;                  1    wreg      void 
  8634 ;; Registers used:
  8635 ;;		wreg, status,2, status,0
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8641 ;;      Params:         0       0       0       0       0
  8642 ;;      Locals:         0       0       0       0       0
  8643 ;;      Temps:          0       0       0       0       0
  8644 ;;      Totals:         0       0       0       0       0
  8645 ;;Total ram usage:        0 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:    2
  8648 ;; This function calls:
  8649 ;;		Nothing
  8650 ;; This function is called by:
  8651 ;;		_main
  8652 ;; This function uses a non-reentrant model
  8653 ;;
  8654                           
  8655                           
  8656                           ;psect for function _Adc_init
  8657  15DC                     _Adc_init:
  8658                           
  8659                           ;ADC.c: 8:     TRISAbits.TRISA0 = 1,ANSELbits.ANS0 = 1;
  8660                           
  8661                           ;incstack = 0
  8662                           ; Regs used in _Adc_init: [wreg+status,2+status,0]
  8663  15DC  1683               	bsf	3,5	;RP0=1, select bank1
  8664  15DD  1303               	bcf	3,6	;RP1=0, select bank1
  8665  15DE  1405               	bsf	5,0	;volatile
  8666  15DF  1683               	bsf	3,5	;RP0=1, select bank3
  8667  15E0  1703               	bsf	3,6	;RP1=1, select bank3
  8668  15E1  1408               	bsf	8,0	;volatile
  8669                           
  8670                           ;ADC.c: 9:     TRISAbits.TRISA1 = 1;ANSELbits.ANS1 = 1;
  8671  15E2  1683               	bsf	3,5	;RP0=1, select bank1
  8672  15E3  1303               	bcf	3,6	;RP1=0, select bank1
  8673  15E4  1485               	bsf	5,1	;volatile
  8674  15E5  1683               	bsf	3,5	;RP0=1, select bank3
  8675  15E6  1703               	bsf	3,6	;RP1=1, select bank3
  8676  15E7  1488               	bsf	8,1	;volatile
  8677                           
  8678                           ;ADC.c: 10:     TRISAbits.TRISA2 = 1,ANSELbits.ANS2 = 1;
  8679  15E8  1683               	bsf	3,5	;RP0=1, select bank1
  8680  15E9  1303               	bcf	3,6	;RP1=0, select bank1
  8681  15EA  1505               	bsf	5,2	;volatile
  8682  15EB  1683               	bsf	3,5	;RP0=1, select bank3
  8683  15EC  1703               	bsf	3,6	;RP1=1, select bank3
  8684  15ED  1508               	bsf	8,2	;volatile
  8685                           
  8686                           ;ADC.c: 11:     TRISAbits.TRISA3 = 1,ANSELbits.ANS3 = 1;
  8687  15EE  1683               	bsf	3,5	;RP0=1, select bank1
  8688  15EF  1303               	bcf	3,6	;RP1=0, select bank1
  8689  15F0  1585               	bsf	5,3	;volatile
  8690  15F1  1683               	bsf	3,5	;RP0=1, select bank3
  8691  15F2  1703               	bsf	3,6	;RP1=1, select bank3
  8692  15F3  1588               	bsf	8,3	;volatile
  8693                           
  8694                           ;ADC.c: 14:     ADCON0bits.ADCS = 0b10;
  8695  15F4  1283               	bcf	3,5	;RP0=0, select bank0
  8696  15F5  1303               	bcf	3,6	;RP1=0, select bank0
  8697  15F6  081F               	movf	31,w	;volatile
  8698  15F7  393F               	andlw	-193
  8699  15F8  3880               	iorlw	128
  8700  15F9  009F               	movwf	31	;volatile
  8701                           
  8702                           ;ADC.c: 17:     ADCON1bits.ADFM = 1;
  8703  15FA  1683               	bsf	3,5	;RP0=1, select bank1
  8704  15FB  1303               	bcf	3,6	;RP1=0, select bank1
  8705  15FC  179F               	bsf	31,7	;volatile
  8706                           
  8707                           ;ADC.c: 19:     ADCON1bits.VCFG0 = 0;
  8708  15FD  121F               	bcf	31,4	;volatile
  8709                           
  8710                           ;ADC.c: 20:     ADCON1bits.VCFG1 = 0;
  8711  15FE  129F               	bcf	31,5	;volatile
  8712  15FF  0008               	return
  8713  1600                     __end_of_Adc_init:
  8714                           
  8715                           	psect	text44
  8716  0800                     __ptext44:	
  8717 ;; *************** function _ISR *****************
  8718 ;; Defined at:
  8719 ;;		line 88 in file "Main.c"
  8720 ;; Parameters:    Size  Location     Type
  8721 ;;		None
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;		None
  8724 ;; Return value:  Size  Location     Type
  8725 ;;                  1    wreg      void 
  8726 ;; Registers used:
  8727 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8728 ;; Tracked objects:
  8729 ;;		On entry : 0/0
  8730 ;;		On exit  : 0/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8733 ;;      Params:         0       0       0       0       0
  8734 ;;      Locals:         0       0       0       0       0
  8735 ;;      Temps:          3       0       0       0       0
  8736 ;;      Totals:         3       0       0       0       0
  8737 ;;Total ram usage:        3 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    1
  8740 ;; This function calls:
  8741 ;;		_Task_Ready
  8742 ;; This function is called by:
  8743 ;;		Interrupt level 1
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           
  8748                           ;psect for function _ISR
  8749  0800                     _ISR:
  8750                           
  8751                           ;Main.c: 91:     if(TMR1IF == 1)
  8752  0800  1C0C               	btfss	12,0	;volatile
  8753  0801  282C               	goto	i1l3600
  8754                           
  8755                           ;Main.c: 92:     {;Main.c: 93:         if(Delay100ms!=0 && !Mostrar) Delay100ms--;
  8756  0802  0878               	movf	_Delay100ms,w	;volatile
  8757  0803  0479               	iorwf	_Delay100ms+1,w	;volatile
  8758  0804  1903               	btfsc	3,2
  8759  0805  280F               	goto	i1l3584
  8760  0806  087A               	movf	_Mostrar,w
  8761  0807  1D03               	btfss	3,2
  8762  0808  280F               	goto	i1l3584
  8763  0809  3001               	movlw	1
  8764  080A  02F8               	subwf	_Delay100ms,f	;volatile
  8765  080B  3000               	movlw	0
  8766  080C  1C03               	skipc
  8767  080D  03F9               	decf	_Delay100ms+1,f	;volatile
  8768  080E  02F9               	subwf	_Delay100ms+1,f	;volatile
  8769  080F                     i1l3584:
  8770                           
  8771                           ;Main.c: 94:         if(Delay200ms!=0) Delay200ms--;
  8772  080F  086E               	movf	_Delay200ms,w	;volatile
  8773  0810  046F               	iorwf	_Delay200ms+1,w	;volatile
  8774  0811  1903               	btfsc	3,2
  8775  0812  2819               	goto	i1l3588
  8776  0813  3001               	movlw	1
  8777  0814  02EE               	subwf	_Delay200ms,f	;volatile
  8778  0815  3000               	movlw	0
  8779  0816  1C03               	skipc
  8780  0817  03EF               	decf	_Delay200ms+1,f	;volatile
  8781  0818  02EF               	subwf	_Delay200ms+1,f	;volatile
  8782  0819                     i1l3588:
  8783                           
  8784                           ;Main.c: 95:         if(Delay1s!=0 && Output) Delay1s--;
  8785  0819  086C               	movf	_Delay1s,w	;volatile
  8786  081A  046D               	iorwf	_Delay1s+1,w	;volatile
  8787  081B  1903               	btfsc	3,2
  8788  081C  2826               	goto	i1l3594
  8789  081D  0866               	movf	_Output,w
  8790  081E  1903               	btfsc	3,2
  8791  081F  2826               	goto	i1l3594
  8792  0820  3001               	movlw	1
  8793  0821  02EC               	subwf	_Delay1s,f	;volatile
  8794  0822  3000               	movlw	0
  8795  0823  1C03               	skipc
  8796  0824  03ED               	decf	_Delay1s+1,f	;volatile
  8797  0825  02ED               	subwf	_Delay1s+1,f	;volatile
  8798  0826                     i1l3594:
  8799                           
  8800                           ;Main.c: 97:         TMR1 = 65285;
  8801  0826  30FF               	movlw	255
  8802  0827  008F               	movwf	15	;volatile
  8803  0828  3005               	movlw	5
  8804  0829  008E               	movwf	14	;volatile
  8805                           
  8806                           ;Main.c: 98:         TMR1ON = 1;
  8807  082A  1410               	bsf	16,0	;volatile
  8808                           
  8809                           ;Main.c: 99:         TMR1IF = 0;
  8810  082B  100C               	bcf	12,0	;volatile
  8811  082C                     i1l3600:
  8812                           
  8813                           ;Main.c: 102:     if(!Delay100ms || !Delay200ms || !Delay1s) Task_Ready();
  8814  082C  0878               	movf	_Delay100ms,w	;volatile
  8815  082D  0479               	iorwf	_Delay100ms+1,w	;volatile
  8816  082E  1903               	btfsc	3,2
  8817  082F  2838               	goto	i1l3606
  8818  0830  086E               	movf	_Delay200ms,w	;volatile
  8819  0831  046F               	iorwf	_Delay200ms+1,w	;volatile
  8820  0832  1903               	btfsc	3,2
  8821  0833  2838               	goto	i1l3606
  8822  0834  086C               	movf	_Delay1s,w	;volatile
  8823  0835  046D               	iorwf	_Delay1s+1,w	;volatile
  8824  0836  1D03               	btfss	3,2
  8825  0837  283D               	goto	i1l121
  8826  0838                     i1l3606:
  8827  0838  160A  118A  2733  120A  158A  	fcall	_Task_Ready
  8828  083D                     i1l121:
  8829  083D  0872               	movf	??_ISR+2,w
  8830  083E  1283               	bcf	3,5	;RP0=0, select bank0
  8831  083F  1303               	bcf	3,6	;RP1=0, select bank0
  8832  0840  00FF               	movwf	127
  8833  0841  0871               	movf	??_ISR+1,w
  8834  0842  008A               	movwf	10
  8835  0843  0E70               	swapf	??_ISR^(0+4294967168),w
  8836  0844  0083               	movwf	3
  8837  0845  0EFE               	swapf	126,f
  8838  0846  0E7E               	swapf	126,w
  8839  0847  0009               	retfie
  8840  0848                     __end_of_ISR:
  8841                           
  8842                           	psect	intentry
  8843  0004                     __pintentry:	
  8844                           ;incstack = 0
  8845                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8846                           
  8847  0004                     interrupt_function:
  8848  007E                     saved_w	set	btemp
  8849  0004  00FE               	movwf	btemp
  8850  0005  0E03               	swapf	3,w
  8851  0006  00F0               	movwf	??_ISR
  8852  0007  080A               	movf	10,w
  8853  0008  00F1               	movwf	??_ISR+1
  8854  0009  1283               	bcf	3,5	;RP0=0, select bank0
  8855  000A  1303               	bcf	3,6	;RP1=0, select bank0
  8856  000B  087F               	movf	btemp+1,w
  8857  000C  00F2               	movwf	??_ISR+2
  8858  000D  120A  158A  2800   	ljmp	_ISR
  8859                           
  8860                           	psect	text45
  8861  1733                     __ptext45:	
  8862 ;; *************** function _Task_Ready *****************
  8863 ;; Defined at:
  8864 ;;		line 107 in file "Main.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;		None
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;		None
  8869 ;; Return value:  Size  Location     Type
  8870 ;;                  1    wreg      void 
  8871 ;; Registers used:
  8872 ;;		wreg, status,2, status,0, btemp+1
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8878 ;;      Params:         0       0       0       0       0
  8879 ;;      Locals:         0       0       0       0       0
  8880 ;;      Temps:          0       0       0       0       0
  8881 ;;      Totals:         0       0       0       0       0
  8882 ;;Total ram usage:        0 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; This function calls:
  8885 ;;		Nothing
  8886 ;; This function is called by:
  8887 ;;		_ISR
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           
  8892                           ;psect for function _Task_Ready
  8893  1733                     _Task_Ready:
  8894                           
  8895                           ;Main.c: 109:     if(!Delay100ms)
  8896                           
  8897                           ;incstack = 0
  8898                           ; Regs used in _Task_Ready: [wreg+status,2+status,0+btemp+1]
  8899  1733  0878               	movf	_Delay100ms,w	;volatile
  8900  1734  0479               	iorwf	_Delay100ms+1,w	;volatile
  8901  1735  1D03               	btfss	3,2
  8902  1736  2F3D               	goto	i1l3456
  8903                           
  8904                           ;Main.c: 110:     {;Main.c: 111:         Mostrar = 1;
  8905  1737  01FA               	clrf	_Mostrar
  8906  1738  0AFA               	incf	_Mostrar,f
  8907                           
  8908                           ;Main.c: 112:         Delay100ms = 1000;
  8909  1739  30E8               	movlw	232
  8910  173A  00F8               	movwf	_Delay100ms	;volatile
  8911  173B  3003               	movlw	3
  8912  173C  00F9               	movwf	_Delay100ms+1	;volatile
  8913  173D                     i1l3456:
  8914                           
  8915                           ;Main.c: 114:     if(!Delay200ms)
  8916  173D  1283               	bcf	3,5	;RP0=0, select bank0
  8917  173E  1303               	bcf	3,6	;RP1=0, select bank0
  8918  173F  086E               	movf	_Delay200ms,w	;volatile
  8919  1740  046F               	iorwf	_Delay200ms+1,w	;volatile
  8920  1741  1D03               	btfss	3,2
  8921  1742  2F4E               	goto	i1l3462
  8922  1743  0064               	clrwdt	;# 
  8923                           
  8924                           ;Main.c: 117:         Act_Variables = 1;
  8925  1744  1683               	bsf	3,5	;RP0=1, select bank1
  8926  1745  1303               	bcf	3,6	;RP1=0, select bank1
  8927  1746  01BA               	clrf	_Act_Variables^(0+128)
  8928  1747  0ABA               	incf	_Act_Variables^(0+128),f
  8929                           
  8930                           ;Main.c: 118:         Delay200ms = 2000;
  8931  1748  30D0               	movlw	208
  8932  1749  1283               	bcf	3,5	;RP0=0, select bank0
  8933  174A  1303               	bcf	3,6	;RP1=0, select bank0
  8934  174B  00EE               	movwf	_Delay200ms	;volatile
  8935  174C  3007               	movlw	7
  8936  174D  00EF               	movwf	_Delay200ms+1	;volatile
  8937  174E                     i1l3462:
  8938                           
  8939                           ;Main.c: 120:     if(!Delay1s)
  8940  174E  086C               	movf	_Delay1s,w	;volatile
  8941  174F  046D               	iorwf	_Delay1s+1,w	;volatile
  8942  1750  1D03               	btfss	3,2
  8943  1751  0008               	return
  8944                           
  8945                           ;Main.c: 121:     {;Main.c: 122:         if(Seg == 0)
  8946  1752  0868               	movf	_Seg,w
  8947  1753  1D03               	btfss	3,2
  8948  1754  2F5F               	goto	i1l3472
  8949                           
  8950                           ;Main.c: 123:         {;Main.c: 124:             if(Min != 0) Min--,Seg=59;
  8951  1755  0869               	movf	_Min,w
  8952  1756  1903               	btfsc	3,2
  8953  1757  2F61               	goto	i1l3474
  8954  1758  3001               	movlw	1
  8955  1759  02E9               	subwf	_Min,f
  8956  175A  303B               	movlw	59
  8957  175B  00FF               	movwf	127
  8958  175C  087F               	movf	127,w
  8959  175D  00E8               	movwf	_Seg
  8960  175E  2F61               	goto	i1l3474
  8961  175F                     i1l3472:
  8962  175F  3001               	movlw	1
  8963  1760  02E8               	subwf	_Seg,f
  8964  1761                     i1l3474:
  8965                           
  8966                           ;Main.c: 127:         Temporizador = 1;
  8967  1761  1683               	bsf	3,5	;RP0=1, select bank1
  8968  1762  1303               	bcf	3,6	;RP1=0, select bank1
  8969  1763  01B9               	clrf	_Temporizador^(0+128)
  8970  1764  0AB9               	incf	_Temporizador^(0+128),f
  8971                           
  8972                           ;Main.c: 128:         Delay1s = 10000;
  8973  1765  3010               	movlw	16
  8974  1766  1283               	bcf	3,5	;RP0=0, select bank0
  8975  1767  1303               	bcf	3,6	;RP1=0, select bank0
  8976  1768  00EC               	movwf	_Delay1s	;volatile
  8977  1769  3027               	movlw	39
  8978  176A  00ED               	movwf	_Delay1s+1	;volatile
  8979  176B  0008               	return
  8980  176C                     __end_of_Task_Ready:
  8981  007E                     btemp	set	126	;btemp
  8982  007E                     wtemp0	set	126
  8983                           
  8984                           	psect	config
  8985                           
  8986                           ;Config register CONFIG1 @ 0x2007
  8987                           ;	Oscillator Selection bits
  8988                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  8989                           ;	Watchdog Timer Enable bit
  8990                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  8991                           ;	Power-up Timer Enable bit
  8992                           ;	PWRTE = ON, PWRT enabled
  8993                           ;	RE3/MCLR pin function select bit
  8994                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  8995                           ;	Code Protection bit
  8996                           ;	CP = OFF, Program memory code protection is disabled
  8997                           ;	Data Code Protection bit
  8998                           ;	CPD = OFF, Data memory code protection is disabled
  8999                           ;	Brown Out Reset Selection bits
  9000                           ;	BOREN = OFF, BOR disabled
  9001                           ;	Internal External Switchover bit
  9002                           ;	IESO = ON, Internal/External Switchover mode is enabled
  9003                           ;	Fail-Safe Clock Monitor Enabled bit
  9004                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  9005                           ;	Low Voltage Programming Enable bit
  9006                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  9007                           ;	In-Circuit Debugger Mode bit
  9008                           ;	DEBUG = 0x1, unprogrammed default
  9009  2007                     	org	8199
  9010  2007  2CE2               	dw	11490
  9011                           
  9012                           ;Config register CONFIG2 @ 0x2008
  9013                           ;	Brown-out Reset Selection bit
  9014                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  9015                           ;	Flash Program Memory Self Write Enable bits
  9016                           ;	WRT = OFF, Write protection off
  9017  2008                     	org	8200
  9018  2008  3FFF               	dw	16383

Data Sizes:
    Strings     168
    Constant    10
    Data        14
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     68      80
    BANK1            80      3      40
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_30(CODE[5]), STR_29(CODE[5]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[5]), STR_24(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> Pant_Temporizador@buffer(BANK0[20]), Pant_Val_Act@buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_character@caracter	PTR unsigned char  size(1) Largest target is 8
		 -> Pant_Inicio@caracter(BANK0[8]), Pant_Inicio@caracter1(BANK0[8]), 

    LCD_array@date	PTR unsigned char  size(2) Largest target is 21
		 -> STR_31(CODE[17]), Pant_Temporizador@buffer(BANK0[20]), Pant_Val_Act@buffer(BANK0[20]), STR_23(CODE[2]), 
		 -> STR_22(CODE[13]), STR_21(CODE[2]), STR_20(CODE[8]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[18]), STR_16(CODE[6]), STR_15(CODE[5]), 
		 -> STR_14(CODE[14]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[21]), STR_3(CODE[21]), 
		 -> STR_2(CODE[21]), STR_1(CODE[21]), 


Critical Paths under _main in COMMON

    _main->_LCD_init
    _Pant_Selector->_LCD_array
    _Pant_Menu->_LCD_array
    _Pant_Inicio->_LCD_array
    _Pant_Inicio->_LCD_character
    _LCD_character->_LCD_command
    _LCD_character->_LCD_date
    _Pant_Val_Act->_LCD_array
    _Pant_Temporizador->_LCD_array
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Pant_Modos->_LCD_array
    _LCD_xy->_LCD_command
    ___wmul->___lwdiv
    ___ftmul->___ftpack
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _Pant_Detener->_LCD_array
    _LCD_array->_LCD_command
    _LCD_array->_LCD_date
    _LCD_init->_LCD_command

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _MEF_Actualizacion->_MEF_Subest_Actualizacion
    _Pant_Selector->_LCD_array
    _Pant_Menu->_LCD_array
    _Pant_Inicio->_LCD_array
    _Pant_Val_Act->_sprintf
    _Pant_Temporizador->_sprintf
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _Pant_Modos->_LCD_array
    _Lec_Adc_Modo_Pulv->_Adc_Rpm_Read
    _Adc_Rpm_Read->___fttol
    ___wmul->___lwdiv
    _Adc_Pwm_Read->___fttol
    _Lec_Adc_Modo_Fuga->_Adc_Min_Read
    _Lec_Adc_Modo_Fuga->_Adc_Temp_Read
    _Lec_Adc_Modo_Flujo->_Adc_Min_Read
    _Lec_Adc_Modo_Flujo->_Adc_Temp_Read
    _Adc_Temp_Read->___fttol
    _Adc_Min_Read->___fttol
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___awtoft->_Adc
    ___awtoft->___ftpack
    _Pant_Detener->_LCD_array

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_MEF_Actualizacion
    _MEF_Actualizacion->_MEF_Subest_Actualizacion

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  185214
                           _Adc_init
                           _LCD_init
                  _MEF_Actualizacion
                           _MEF_Init
                         _Pines_Init
                           _Pwm_init
 ---------------------------------------------------------------------------------
 (1) _Pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Pines_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MEF_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MEF_Actualizacion                                    2     2      0  184898
                                              1 BANK1      2     2      0
                        _Antirrebote
           _MEF_Subest_Actualizacion
                        _Pant_Inicio
                        _Select_Modo
 ---------------------------------------------------------------------------------
 (2) _Select_Modo                                          0     0      0   15754
                        _Antirrebote
                          _Pant_Menu
                      _Pant_Selector
 ---------------------------------------------------------------------------------
 (3) _Pant_Selector                                        0     0      0    7877
                          _LCD_array
 ---------------------------------------------------------------------------------
 (3) _Pant_Menu                                            0     0      0    7877
                          _LCD_array
 ---------------------------------------------------------------------------------
 (2) _Pant_Inicio                                         20    20      0    9010
                                              6 BANK0     20    20      0
                          _LCD_array
                      _LCD_character
                        _LCD_command
 ---------------------------------------------------------------------------------
 (3) _LCD_character                                        4     3      1     811
                                              6 COMMON     2     1      1
                                              0 BANK0      2     2      0
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (2) _MEF_Subest_Actualizacion                             4     4      0  160134
                                             65 BANK0      3     3      0
                                              0 BANK1      1     1      0
                        _Antirrebote
                            _Detener
                        _LCD_command
                 _Lec_Adc_Modo_Flujo
                  _Lec_Adc_Modo_Fuga
                  _Lec_Adc_Modo_Pulv
                         _Pant_Modos
                  _Pant_Temporizador
                       _Pant_Val_Act
                  _Salida_Modo_Flujo
                   _Salida_Modo_Fuga
                   _Salida_Modo_Pulv
 ---------------------------------------------------------------------------------
 (3) _Salida_Modo_Pulv                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Salida_Modo_Fuga                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Salida_Modo_Flujo                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Pant_Val_Act                                        22    22      0   12494
                                             24 BANK0     22    22      0
                          _LCD_array
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _Pant_Temporizador                                   22    22      0   12308
                                             24 BANK0     22    22      0
                          _LCD_array
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             23    20      3    4259
                                              9 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     386
                                              7 COMMON     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Pant_Modos                                           0     0      0    8930
                          _LCD_array
                        _LCD_command
                           _LCD_date
                             _LCD_xy
 ---------------------------------------------------------------------------------
 (4) _LCD_xy                                               4     0      4     557
                                              0 BANK0      4     0      4
                        _LCD_command
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Pulv                                    0     0      0   59901
                       _Adc_Min_Read
                       _Adc_Pwm_Read
                       _Adc_Rpm_Read
                      _Adc_Temp_Read
 ---------------------------------------------------------------------------------
 (4) _Adc_Rpm_Read                                        15    15      0   16424
                                             50 BANK0     15    15      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     752
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     857
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _Adc_Pwm_Read                                         3     3      0   14481
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Fuga                                    0     0      0   28996
                       _Adc_Min_Read
                      _Adc_Temp_Read
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Flujo                                   0     0      0   28996
                       _Adc_Min_Read
                      _Adc_Temp_Read
 ---------------------------------------------------------------------------------
 (4) _Adc_Temp_Read                                        3     3      0   14481
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) _Adc_Min_Read                                         3     3      0   14515
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             13     9      4     910
                                             37 BANK0     13     9      4
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4952
                                              7 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    5192
                                             22 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3288
                                              3 BANK0      4     1      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2770
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _Adc                                                  7     5      2     105
                                              3 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _Detener                                              4     4      0    8193
                                              6 BANK0      4     4      0
                        _Antirrebote
                       _Pant_Detener
 ---------------------------------------------------------------------------------
 (4) _Pant_Detener                                         0     0      0    8125
                          _LCD_array
                        _LCD_command
 ---------------------------------------------------------------------------------
 (4) _LCD_array                                            8     2      6    7877
                                              6 COMMON     2     2      0
                                              0 BANK0      6     0      6
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (5) _LCD_date                                             3     3      0     248
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Antirrebote                                          3     3      0       0
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0     316
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (5) _LCD_command                                          3     3      0     248
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
                         _Task_Ready
 ---------------------------------------------------------------------------------
 (8) _Task_Ready                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adc_init
   _LCD_init
     _LCD_command
   _MEF_Actualizacion
     _Antirrebote
     _MEF_Subest_Actualizacion
       _Antirrebote
       _Detener
         _Antirrebote
         _Pant_Detener
           _LCD_array
             _LCD_command
             _LCD_date
           _LCD_command
       _LCD_command
       _Lec_Adc_Modo_Flujo
         _Adc_Min_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Temp_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
       _Lec_Adc_Modo_Fuga
         _Adc_Min_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Temp_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
       _Lec_Adc_Modo_Pulv
         _Adc_Min_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Pwm_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Rpm_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
           ___lwdiv
           ___wmul
             ___lwdiv (ARG)
         _Adc_Temp_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
       _Pant_Modos
         _LCD_array
           _LCD_command
           _LCD_date
         _LCD_command
         _LCD_date
         _LCD_xy
           _LCD_command
       _Pant_Temporizador
         _LCD_array
           _LCD_command
           _LCD_date
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
       _Pant_Val_Act
         _LCD_array
           _LCD_command
           _LCD_date
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
       _Salida_Modo_Flujo
       _Salida_Modo_Fuga
       _Salida_Modo_Pulv
     _Pant_Inicio
       _LCD_array
         _LCD_command
         _LCD_date
       _LCD_character
         _LCD_command
         _LCD_date
       _LCD_command
     _Select_Modo
       _Antirrebote
       _Pant_Menu
         _LCD_array
           _LCD_command
           _LCD_date
       _Pant_Selector
         _LCD_array
           _LCD_command
           _LCD_date
   _MEF_Init
   _Pines_Init
   _Pwm_init

 _ISR (ROOT)
   _Task_Ready

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      3      28       7       50.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     44      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      83      12        0.0%
ABS                  0      0      83       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Dec 18 18:41:55 2020

               ??_Salida_Modo_Fuga 0073                 ??_Salida_Modo_Pulv 0073  
                                pc 0002                ??_Salida_Modo_Flujo 0073  
                               fsr 0004                ___wmul@multiplicand 0025  
                 Adc_Rpm_Read@cent 0059                                l302 1668  
                              l216 0909                                l306 08AC  
                              l218 090B                                l228 0948  
                              l254 02BB                                l259 0335  
                              l541 1789                                l720 15C5  
                              l456 16FE                                l690 0101  
                              l940 0A67                                l692 00DD  
                              l678 0078                                l939 0A5F  
                              l699 0158                                _GIE 005F  
                              _RB4 0034                                _ISR 0800  
                              _Adc 176C                                _Min 0069  
                              _Seg 0068                                _Rpm 00AE  
                              _Pwm 006A                                fsr0 0004  
                              indf 0000                  _MEF_Actualizacion 08E6  
                       _Delay100ms 0078                  Adc_Rpm_Read@dec_m 005D  
                       _Delay200ms 006E                               ?_ISR 0070  
                             ?_Adc 0073                 ?_MEF_Actualizacion 0070  
                     ___ftdiv@cntr 003F                  Adc_Rpm_Read@valor 005F  
        __end_of_Salida_Modo_Flujo 151D                       ___ftdiv@sign 0044  
                Adc_Rpm_Read@uni_m 005B                               l1023 0B53  
                             l4010 0EBC                               l4004 0EA6  
                             l4100 0B16                               l4050 0571  
                             l4130 0B62                               l4122 0B4F  
                             l4036 0F20                               l4028 0F01  
                             l4300 00A2                               l4134 0B70  
                             l4118 0B3F                               l4150 07DA  
                             l4310 00DF                               l4080 05EE  
                             l4072 05D6                               l4056 0587  
                             l4240 0BF8                               l4160 07FB  
                             l5040 00F3                               l4250 04DA  
                             l5042 16F0                               l4322 011B  
                             l5034 0934                               l5044 09D9  
                             l4084 05FE                               l4068 05C6  
                             l4156 07F0                               l4148 07CC  
                             l4228 0452                               l4172 1707  
                             l4340 014A                               l4332 0129  
                             l5036 0321                               l4254 0553  
                             l4270 16E2                               l4174 1715  
                             l4182 172E                               l4350 0171  
                             l4326 0127                               l5038 008B  
                             l4192 163C                               l4096 0B0D  
                             l4264 16CD                               l4194 1638  
                             l4266 16D4                               l4274 16E9  
                             l4178 1723                               l4506 16B5  
                             l4196 1646                               l4268 16DB  
                             l4380 01C0                               l4348 016D  
                             l4620 0297                               l4612 0285  
                             l4604 0271                               l3910 09AE  
                             l4374 01B1                               l4358 0182  
                             l4366 0198                               l4294 007D  
                             l4390 0054                               l4550 165D  
                             l3912 09B7                               l3920 09D2  
                             l4368 019C                               l4392 0207  
                             l4296 0090                               l4288 0074  
                             l4616 028E                               l4608 027B  
                             l4712 08E7                               l3922 09E7  
                             l3914 09C0                               l4626 02A2  
                             l4546 1656                               l4714 08EA  
                             l3916 09C9                               l4388 01C4  
                             l4652 02F2                               l4580 0233  
                             l4572 021F                               l4564 020D  
                             l4492 0D03                               l4484 0CB5  
                             l4556 166A                               l4716 08EF  
                             l4654 02F9                               l4590 024E  
                             l4750 0922                               l4726 08FD  
                             l3928 0A05                               l3880 0A23  
                             l4648 02E7                               l4584 023C  
                             l4576 0229                               l4568 0215  
                             l4488 0CDC                               l4744 0922  
                             l4682 0A99                               l4666 0315  
                             l4738 0913                               l4762 0928  
                             l3892 0A4A                               l3884 0A2F  
                             l3876 0A1C                               l4596 0256  
                             l4756 0923                               l3886 0A34  
                             l3974 15BD                               l3896 0A5D  
                             l3968 06FE                               l4864 1699  
                             l3898 0A4F                               l3994 160C  
                             STR_1 0744                               STR_2 072F  
                             STR_3 071A                               STR_4 0744  
                             STR_5 07BE                               STR_6 072D  
                             STR_7 07BE                               STR_8 072D  
                             STR_9 07BE                       ?_LCD_command 0070  
                             u4105 0EE0                               u4115 0F02  
                             u4035 15C6                               u5020 0245  
                             u4125 0F13                               u4045 15CD  
                             u5030 0246                               u4135 0F21  
                             u4215 05D7                               u4225 05DF  
                             u4305 0B1D                               u5060 026C  
                             u4405 07CF                               u5150 02B4  
                             u5070 026D                               u4095 0ECE  
                             u4175 0593                               u4335 0B40  
                             u5160 02B5                               u4265 05FF  
                             u4185 05A5                               u4425 07DB  
                             u4505 1724                               u4275 0607  
                             u4435 07E7                               _PEIE 005E  
                             u3805 0DF1                               u4365 0B58  
                             u4445 07F1                               u3735 0F50  
                             u3815 0E03                               u3745 0F61  
                             u3825 0E16                               u3755 0F73  
                             u3835 0E54                               u3915 0A56  
                             u4475 170A                               u4820 089F  
                             u3765 0F86                               u3845 0E67  
                             u4725 015F                               u4830 08A0  
                             u4910 0D34                               u3775 0FC4  
                             u5607 08B5                               u4495 171B  
                             u4920 0D4F                               u3785 0FD7  
                             u5617 08C6                               u5707 1640  
                             u3795 0DE0                               u5627 08DE  
                             u3955 0A70                               u3875 0A28  
                             u5717 0A92                               u5637 09F9  
                             u4685 0140                               u5557 0DB8  
                             u5807 0FA2                               u5727 0AA3  
                             u5647 0E2A                               u3895 0A43  
                             u5567 02C6                               u5817 0FEB  
                             u5737 0AB9                               u5657 0E32  
                             u3985 1776                               u5577 02D7  
                             u5827 0FF3                               u5747 0AC6  
                             u5667 0E7B                               u5587 1783  
                             u5837 0FFA                               u5757 0AD3  
                             u5677 0E82                               u5597 17AB  
                             u5767 0ADE                               u5687 0E88  
                             u4895 16A5                               u5777 0AE9  
                             u5697 162E                               u5787 0AF6  
                             u5797 0F9A                               _TMR1 000E  
                             _Modo 006B                               _Temp 00BB  
                             _main 1673                       ___ftpack@arg 0073  
                     ___ftpack@exp 0076                               btemp 007E  
              ??_MEF_Actualizacion 00C6                               start 0010  
               __size_of_LCD_array 0067                      _Estado_Actual 0064  
                  __end_of_Detener 08E6                       ___ftmul@cntr 0034  
                     ___ftmul@sign 0035                              ??_ISR 0070  
                            ??_Adc 0075                       ___fttol@exp1 0051  
                     ___fttol@lval 004D                __end_of_Antirrebote 164C  
                 __end_of_LCD_date 0E8E                   __end_of_LCD_init 0AFC  
                 __end_of_MEF_Init 1528                              ?_main 0070  
                            STR_10 072D                              STR_11 07BE  
                            STR_12 072D                              STR_20 0797  
                            STR_21 0795                              STR_13 07BE  
                            STR_30 07B4                              STR_22 078A  
                            STR_14 077C                              STR_23 07C0  
                            STR_15 07AF                              STR_31 076B  
                            STR_24 07B9                              STR_16 079F  
                            STR_25 07B4                              STR_17 0759  
                            STR_26 07B4                              STR_18 07A5  
                            STR_27 07B4                              STR_19 07AA  
                            STR_28 07B4                              STR_29 07B4  
                  __end_of___ftdiv 0F46                    __end_of___ftmul 062C  
                  __end_of___fttol 0B79                      _LCD_character 169F  
                  __end_of___lwdiv 0800                              i1l121 083D  
                  __end_of___lwmod 1733          __end_of_MEF_Actualizacion 0949  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _TRISB 0086  
                            _TRISC 0087                      ??_Pant_Inicio 0026  
                            _PwmS1 00B4                              _Reset 0065  
                    ___awtoft@sign 0026                    __end_of_dpowers 071A  
           __size_of_Pant_Selector 009D                    __end_of_isdigit 0700  
                    ___ftpack@sign 0077                   __end_of_Adc_init 1600  
                            pclath 000A                    ??_Adc_Temp_Read 0078  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 020C                      ?_Pant_Detener 0070  
                    ?_Pant_Val_Act 0070                    __initialization 0013  
                     __end_of_main 169F                         _Pant_Modos 0C01  
                   ?_LCD_character 0076                             ??_main 0078  
                    ___fttol@sign1 004C                      ??_Select_Modo 0078  
                __end_of_LCD_array 0A14                   __end_of_Pwm_init 15B9  
                           _ADCON0 001F                             _ADRESH 001E  
                           _ADRESL 009E         __size_of_Salida_Modo_Flujo 0004  
                 __end_of___awtoft 1625                   __end_of___ftpack 0A82  
                       _Pines_Init 1586                             i1l3600 082C  
                           i1l3462 174E                             i1l3606 0838  
                           i1l3472 175F                             i1l3456 173D  
                           i1l3474 1761                             i1l3584 080F  
                           i1l3594 0826                             i1l3588 0819  
              __end_of_Pant_Inicio 0DD6                             _LCD_xy 16CC  
                    _Act_Variables 00BA                     ??_Pant_Detener 0078  
                        ??_Detener 0026                             _TMR1IE 0460  
                           _TMR1IF 0060                         _Task_Ready 1733  
                           _TMR1ON 0080                             _TRISB4 0434  
                 Pant_Inicio@F1325 00BD                   Pant_Inicio@F1327 00A0  
               __size_of_Pant_Menu 004B                     ??_Pant_Val_Act 0038  
                      _Antirrebote 1625         ??_MEF_Subest_Actualizacion 0061  
                           _Output 0066                   _Subestado_Actual 00B8  
                    _Pant_Selector 0C8D                             ___wmul 15B9  
                        ??___ftdiv 003C                 _Lec_Adc_Modo_Flujo 1538  
                        ??___ftmul 002D                          ??___fttol 0049  
                        ??___lwdiv 0077                          ??___lwmod 0077  
                     LCD_date@date 0075              ___ftmul@f3_as_product 0031  
              ?_Lec_Adc_Modo_Flujo 0070         __size_of_MEF_Actualizacion 0063  
                     __pdataCOMMON 0078                          ??_isdigit 0073  
                           saved_w 007E                          ??_sprintf 002C  
              __end_of_Select_Modo 1673            __end_of__initialization 0049  
             __size_of_LCD_command 00BA                          ?_LCD_date 0070  
             ??_Lec_Adc_Modo_Flujo 0078                          ?_LCD_init 0070  
                        ?_MEF_Init 0070                         ___ftdiv@f1 0039  
                       ___ftdiv@f2 0036                         ___ftdiv@f3 0040  
                       ___awtoft@c 0023                         ___ftmul@f1 0027  
                       ___ftmul@f2 002A                         ___fttol@f1 0045  
                   ?_Pant_Selector 0070                     __pcstackCOMMON 0070  
                     __pidataBANK0 151D                       __pidataBANK1 1530  
                  ??_LCD_character 0077                  _Adc_Min_Read$1471 0052  
                        LCD_init@i 0020                        ?_Pant_Modos 0070  
                        ?_Adc_init 0070          __size_of_Salida_Modo_Fuga 0001  
        __size_of_Salida_Modo_Pulv 0001                  __end_of_Pant_Menu 0893  
                      _Pant_Inicio 0D2A                       sprintf@width 0034  
                      ?_Pines_Init 0070                         __pbssBANK0 0064  
                       __pbssBANK1 00A0                            ?_LCD_xy 0020  
                      ?_Task_Ready 0070                         ??_LCD_date 0073  
                          LCD_xy@x 0020                            LCD_xy@y 0022  
                       ??_LCD_init 0076                         ??_MEF_Init 0073  
                       __pmaintext 1673                            ?___wmul 0023  
                        ?_Pwm_init 0070                         __pintentry 0004  
                        ?___awtoft 0023                          ?___ftpack 0073  
                       ??_Adc_init 0073               __end_of_Pant_Detener 1586  
                      _Select_Modo 164C               __end_of_Pant_Val_Act 06F2  
                       __stringtab 0700                            _Delay1s 006C  
                  __size_of_LCD_xy 0033                            _Detener 0893  
              __size_of_Pant_Modos 008C                    ??_Pant_Selector 0078  
                          _Mostrar 007A                  _Pant_Temporizador 17B5  
                          ___ftdiv 0E8E                         ??_Pwm_init 0073  
                  __size_of___wmul 0023                            ___ftmul 0559  
                          ___fttol 0AFC                            ___lwdiv 07C2  
                          ___lwmod 16FF                 ?_Pant_Temporizador 0070  
                       ??___awtoft 0078                         ??___ftpack 0020  
                        _ANSELbits 0188                __size_of_Pines_Init 0019  
                          __ptext1 159F                            __ptext2 1586  
                          __ptext3 1521                            __ptext4 08E6  
                          __ptext5 164C                            __ptext6 0C8D  
                          __ptext7 0848                            __ptext8 0D2A  
                          __ptext9 169F                __size_of_Task_Ready 0039  
             Pant_Inicio@caracter1 002A                       __size_of_ISR 0048  
                     __size_of_Adc 0049                          _T1CONbits 0010  
                          _dpowers 0710                            _isdigit 06F2  
                       _mod_tiempo 0067                ??_Pant_Temporizador 0038  
          Pant_Temporizador@buffer 003A                            _sprintf 004D  
                          clrloop0 1529               end_of_initialization 0049  
                        _LCD_array 09AD              __end_of_Adc_Temp_Read 09AD  
               Pant_Val_Act@buffer 003A                       ?_Antirrebote 0070  
        __end_of_Pant_Temporizador 1800                      ?_Adc_Min_Read 0070  
                        _PORTAbits 0005                          _PORTBbits 0006  
                        _PORTCbits 0007                   _Salida_Modo_Fuga 1516  
                 _Salida_Modo_Pulv 0003                      LCD_array@date 0024  
                    ?_Adc_Rpm_Read 0070                          _TRISAbits 0085  
                        _TRISBbits 0086                          _TRISCbits 0087  
                    ?_Adc_Pwm_Read 0070                          _Act_PwmS1 00BC  
                       ?_LCD_array 0020                        ___ftdiv@exp 0043  
                   __end_of_LCD_xy 16FF                  __size_of_LCD_date 00B8  
                __size_of_LCD_init 007A                  __size_of_MEF_Init 0007  
                      ___ftmul@exp 0030              __size_of_Pant_Detener 0018  
                   ??_Adc_Min_Read 0078                     __end_of___wmul 15DC  
                    __pidataCOMMON 1517                       ??_Pant_Modos 0078  
            __size_of_Pant_Val_Act 00C6                 _Adc_Temp_Read$1472 0052  
                   ??_Adc_Rpm_Read 0052                  __size_of_Adc_init 0024  
                       LCD_array@x 0020                         LCD_array@y 0022  
                   ??_Adc_Pwm_Read 0078                start_initialization 0013  
                     ?_Pant_Inicio 0070  __size_of_MEF_Subest_Actualizacion 012A  
                      __end_of_ISR 0848                        __end_of_Adc 17B5  
        ?_MEF_Subest_Actualizacion 0070                          _Pant_Menu 0848  
                    ??_LCD_command 0073                          _Per_PwmS1 00AB  
                     ??_Pines_Init 0073                           ??_LCD_xy 0076  
                     ??_Task_Ready 0070                       _Pant_Detener 156E  
      __size_of_Lec_Adc_Modo_Flujo 0009                 __end_of_Pant_Modos 0C8D  
       __size_of_Pant_Temporizador 004B                       _Pant_Val_Act 062C  
                _Lec_Adc_Modo_Fuga 1541                  _Lec_Adc_Modo_Pulv 155B  
                         ??___wmul 0077                         init_fetch0 154A  
                      __pdataBANK0 006C                        __pdataBANK1 00BD  
               ?_Lec_Adc_Modo_Fuga 0070                 ?_Lec_Adc_Modo_Pulv 0070  
                __size_of_Pwm_init 001A              __end_of_LCD_character 16CC  
               __end_of_Pines_Init 159F                  __size_of___awtoft 0025  
                __size_of___ftpack 006E                 __end_of_Task_Ready 176C  
              ??_Lec_Adc_Modo_Fuga 0078                       ?_Select_Modo 0070  
                      __pbssCOMMON 007A                ??_Lec_Adc_Modo_Pulv 0078  
                        ___latbits 0002                      __pcstackBANK0 0020  
                    __pcstackBANK1 00C5                       _isdigit$1272 0073  
                       ?_Pant_Menu 0070                        ??_LCD_array 0076  
                         ?_Detener 0070                        sprintf@flag 0033  
                      sprintf@prec 002F          MEF_Subest_Actualizacion@i 00C5  
              __end_of_LCD_command 1000          __end_of_Lec_Adc_Modo_Fuga 154A  
        __end_of_Lec_Adc_Modo_Pulv 156E                   ___lwdiv@dividend 0075  
             __size_of_Antirrebote 0027                           ?___ftdiv 0036  
                         ?___ftmul 0027                           ?___fttol 0045  
                         ?___lwdiv 0073                           ?___lwmod 0023  
                        __pstrings 0700                          _freqPwmS1 00B6  
                         ?_isdigit 0070                   ___lwdiv@quotient 0021  
                         ?_sprintf 0029               __end_of_Adc_Min_Read 0559  
              Pant_Inicio@caracter 0032                         Adc@channel 0020  
                interrupt_function 0004                LCD_character@adress 0020  
                   ___wmul@product 0027                           _LCD_date 0DD6  
                         _LCD_init 0A82                           _MEF_Init 1521  
                        clear_ram0 1528           __end_of_Salida_Modo_Fuga 1517  
         __end_of_Salida_Modo_Pulv 0004               __end_of_Adc_Rpm_Read 045E  
             __end_of_Adc_Pwm_Read 0C01                           Detener@i 0029  
            __end_of_Pant_Selector 0D2A                           _PER_T_S1 00B0  
                         _Adc_init 15DC                         _ADCON0bits 001F  
                      __stringbase 070F                         _ADCON1bits 009F  
                ___wmul@multiplier 0023                           _P_W_T_S1 00B2  
             __size_of_Pant_Inicio 00AC                        ??_Pant_Menu 0078  
                      _LCD_command 0F46                      Adc@convertion 0021  
                 __size_of_Detener 0053         __size_of_Lec_Adc_Modo_Fuga 0009  
                         _Pw_PwmS1 00A8         __size_of_Lec_Adc_Modo_Pulv 0013  
 __end_of_MEF_Subest_Actualizacion 0336                           _Pwm_init 159F  
                 __size_of___ftdiv 00B8                   __size_of___ftmul 00D3  
                 __size_of___fttol 007D                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                           ___awtoft 1600  
                         ___ftpack 0A14                 __end_of__stringtab 0710  
                       _ANSELHbits 0189             __size_of_Adc_Temp_Read 0064  
                       sprintf@val 0031                   __size_of_isdigit 000E  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0020  
                         __ptext10 020C                           __ptext11 0003  
                         __ptext20 16CC                           __ptext12 1516  
                         __ptext21 155B                           __ptext13 1519  
                         __ptext30 0AFC                           __ptext22 0336  
                         __ptext14 062C                           __ptext31 0559  
                         __ptext23 15B9                           __ptext15 17B5  
                         __ptext40 1625                           __ptext32 0E8E  
                         __ptext24 07C2                           __ptext16 004D  
                         __ptext41 0A82                           __ptext33 1600  
                         __ptext25 0B79                           __ptext17 06F2  
                         __ptext42 0F46                           __ptext34 0A14  
                         __ptext26 1541                           __ptext18 16FF  
                         __ptext43 15DC                           __ptext35 176C  
                         __ptext27 1538                           __ptext19 0C01  
                         __ptext44 0800                           __ptext36 0893  
                         __ptext28 0949                           __ptext45 1733  
                         __ptext37 156E                           __ptext29 045E  
                         __ptext38 09AD                           __ptext39 0DD6  
             __size_of_Select_Modo 0027                  _Adc_Rpm_Read$1469 0056  
                 __size_of_sprintf 01BF                       _Temporizador 00B9  
                    __size_of_main 002C              LCD_character@caracter 0076  
                   LCD_character@i 0021              __size_of_Adc_Min_Read 00FB  
                         init_ram0 154E                           isdigit@c 0074  
                         intlevel1 0000                          sprintf@ap 0030  
                        sprintf@sp 0037         __end_of_Lec_Adc_Modo_Flujo 1541  
            __size_of_Adc_Rpm_Read 0128              __size_of_Adc_Pwm_Read 0088  
                 ___lwmod@dividend 0025                      _Adc_Temp_Read 0949  
                        stringcode 070A                  _Adc_Pwm_Read$1470 0052  
                     _Adc_Min_Read 045E           _MEF_Subest_Actualizacion 020C  
                         sprintf@c 0036                           sprintf@f 0029  
                  ___lwmod@divisor 0023                    ___lwmod@counter 0077  
                     _Adc_Rpm_Read 0336                           stringdir 070A  
                         stringtab 0700                       _Adc_Pwm_Read 0B79  
                       _WDTCONbits 0105                  _Salida_Modo_Flujo 1519  
                   ?_Adc_Temp_Read 0070             __size_of_LCD_character 002D  
               ?_Salida_Modo_Flujo 0070                      ??_Antirrebote 0073  
                   LCD_command@cmd 0075                  ?_Salida_Modo_Fuga 0070  
                ?_Salida_Modo_Pulv 0070  

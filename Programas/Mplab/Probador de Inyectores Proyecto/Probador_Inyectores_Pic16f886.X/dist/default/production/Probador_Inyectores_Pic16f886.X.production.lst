

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Dec 18 16:06:46 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F886
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=3
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    66                           	dabs	1,0x7E,2
    67  0000                     
    68                           ; Version 2.20
    69                           ; Generated 09/04/2020 GMT
    70                           ; 
    71                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC16F886 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  000E                     	;# 
   117  000F                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  0087                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  008F                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0093                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0095                     	;# 
   153  0096                     	;# 
   154  0097                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009A                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  0105                     	;# 
   164  0107                     	;# 
   165  0108                     	;# 
   166  0109                     	;# 
   167  010C                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  0185                     	;# 
   173  0187                     	;# 
   174  0188                     	;# 
   175  0189                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178  0000                     	;# 
   179  0001                     	;# 
   180  0002                     	;# 
   181  0003                     	;# 
   182  0004                     	;# 
   183  0005                     	;# 
   184  0006                     	;# 
   185  0007                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  008F                     	;# 
   221  0090                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0093                     	;# 
   225  0093                     	;# 
   226  0093                     	;# 
   227  0094                     	;# 
   228  0095                     	;# 
   229  0096                     	;# 
   230  0097                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009C                     	;# 
   236  009D                     	;# 
   237  009E                     	;# 
   238  009F                     	;# 
   239  0105                     	;# 
   240  0107                     	;# 
   241  0108                     	;# 
   242  0109                     	;# 
   243  010C                     	;# 
   244  010C                     	;# 
   245  010D                     	;# 
   246  010E                     	;# 
   247  010F                     	;# 
   248  0185                     	;# 
   249  0187                     	;# 
   250  0188                     	;# 
   251  0189                     	;# 
   252  018C                     	;# 
   253  018D                     	;# 
   254  0000                     	;# 
   255  0001                     	;# 
   256  0002                     	;# 
   257  0003                     	;# 
   258  0004                     	;# 
   259  0005                     	;# 
   260  0006                     	;# 
   261  0007                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000D                     	;# 
   267  000E                     	;# 
   268  000E                     	;# 
   269  000F                     	;# 
   270  0010                     	;# 
   271  0011                     	;# 
   272  0012                     	;# 
   273  0013                     	;# 
   274  0014                     	;# 
   275  0015                     	;# 
   276  0015                     	;# 
   277  0016                     	;# 
   278  0017                     	;# 
   279  0018                     	;# 
   280  0019                     	;# 
   281  001A                     	;# 
   282  001B                     	;# 
   283  001B                     	;# 
   284  001C                     	;# 
   285  001D                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  0081                     	;# 
   289  0085                     	;# 
   290  0086                     	;# 
   291  0087                     	;# 
   292  0089                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  008F                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0093                     	;# 
   301  0093                     	;# 
   302  0093                     	;# 
   303  0094                     	;# 
   304  0095                     	;# 
   305  0096                     	;# 
   306  0097                     	;# 
   307  0098                     	;# 
   308  0099                     	;# 
   309  009A                     	;# 
   310  009B                     	;# 
   311  009C                     	;# 
   312  009D                     	;# 
   313  009E                     	;# 
   314  009F                     	;# 
   315  0105                     	;# 
   316  0107                     	;# 
   317  0108                     	;# 
   318  0109                     	;# 
   319  010C                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  010F                     	;# 
   324  0185                     	;# 
   325  0187                     	;# 
   326  0188                     	;# 
   327  0189                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  0000                     	;# 
   331  0001                     	;# 
   332  0002                     	;# 
   333  0003                     	;# 
   334  0004                     	;# 
   335  0005                     	;# 
   336  0006                     	;# 
   337  0007                     	;# 
   338  0009                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000D                     	;# 
   343  000E                     	;# 
   344  000E                     	;# 
   345  000F                     	;# 
   346  0010                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0013                     	;# 
   350  0014                     	;# 
   351  0015                     	;# 
   352  0015                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001B                     	;# 
   360  001C                     	;# 
   361  001D                     	;# 
   362  001E                     	;# 
   363  001F                     	;# 
   364  0081                     	;# 
   365  0085                     	;# 
   366  0086                     	;# 
   367  0087                     	;# 
   368  0089                     	;# 
   369  008C                     	;# 
   370  008D                     	;# 
   371  008E                     	;# 
   372  008F                     	;# 
   373  0090                     	;# 
   374  0091                     	;# 
   375  0092                     	;# 
   376  0093                     	;# 
   377  0093                     	;# 
   378  0093                     	;# 
   379  0094                     	;# 
   380  0095                     	;# 
   381  0096                     	;# 
   382  0097                     	;# 
   383  0098                     	;# 
   384  0099                     	;# 
   385  009A                     	;# 
   386  009B                     	;# 
   387  009C                     	;# 
   388  009D                     	;# 
   389  009E                     	;# 
   390  009F                     	;# 
   391  0105                     	;# 
   392  0107                     	;# 
   393  0108                     	;# 
   394  0109                     	;# 
   395  010C                     	;# 
   396  010C                     	;# 
   397  010D                     	;# 
   398  010E                     	;# 
   399  010F                     	;# 
   400  0185                     	;# 
   401  0187                     	;# 
   402  0188                     	;# 
   403  0189                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406  0000                     	;# 
   407  0001                     	;# 
   408  0002                     	;# 
   409  0003                     	;# 
   410  0004                     	;# 
   411  0005                     	;# 
   412  0006                     	;# 
   413  0007                     	;# 
   414  0009                     	;# 
   415  000A                     	;# 
   416  000B                     	;# 
   417  000C                     	;# 
   418  000D                     	;# 
   419  000E                     	;# 
   420  000E                     	;# 
   421  000F                     	;# 
   422  0010                     	;# 
   423  0011                     	;# 
   424  0012                     	;# 
   425  0013                     	;# 
   426  0014                     	;# 
   427  0015                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0017                     	;# 
   431  0018                     	;# 
   432  0019                     	;# 
   433  001A                     	;# 
   434  001B                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  001D                     	;# 
   438  001E                     	;# 
   439  001F                     	;# 
   440  0081                     	;# 
   441  0085                     	;# 
   442  0086                     	;# 
   443  0087                     	;# 
   444  0089                     	;# 
   445  008C                     	;# 
   446  008D                     	;# 
   447  008E                     	;# 
   448  008F                     	;# 
   449  0090                     	;# 
   450  0091                     	;# 
   451  0092                     	;# 
   452  0093                     	;# 
   453  0093                     	;# 
   454  0093                     	;# 
   455  0094                     	;# 
   456  0095                     	;# 
   457  0096                     	;# 
   458  0097                     	;# 
   459  0098                     	;# 
   460  0099                     	;# 
   461  009A                     	;# 
   462  009B                     	;# 
   463  009C                     	;# 
   464  009D                     	;# 
   465  009E                     	;# 
   466  009F                     	;# 
   467  0105                     	;# 
   468  0107                     	;# 
   469  0108                     	;# 
   470  0109                     	;# 
   471  010C                     	;# 
   472  010C                     	;# 
   473  010D                     	;# 
   474  010E                     	;# 
   475  010F                     	;# 
   476  0185                     	;# 
   477  0187                     	;# 
   478  0188                     	;# 
   479  0189                     	;# 
   480  018C                     	;# 
   481  018D                     	;# 
   482  0000                     	;# 
   483  0001                     	;# 
   484  0002                     	;# 
   485  0003                     	;# 
   486  0004                     	;# 
   487  0005                     	;# 
   488  0006                     	;# 
   489  0007                     	;# 
   490  0009                     	;# 
   491  000A                     	;# 
   492  000B                     	;# 
   493  000C                     	;# 
   494  000D                     	;# 
   495  000E                     	;# 
   496  000E                     	;# 
   497  000F                     	;# 
   498  0010                     	;# 
   499  0011                     	;# 
   500  0012                     	;# 
   501  0013                     	;# 
   502  0014                     	;# 
   503  0015                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  001D                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  0081                     	;# 
   517  0085                     	;# 
   518  0086                     	;# 
   519  0087                     	;# 
   520  0089                     	;# 
   521  008C                     	;# 
   522  008D                     	;# 
   523  008E                     	;# 
   524  008F                     	;# 
   525  0090                     	;# 
   526  0091                     	;# 
   527  0092                     	;# 
   528  0093                     	;# 
   529  0093                     	;# 
   530  0093                     	;# 
   531  0094                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0098                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  009F                     	;# 
   543  0105                     	;# 
   544  0107                     	;# 
   545  0108                     	;# 
   546  0109                     	;# 
   547  010C                     	;# 
   548  010C                     	;# 
   549  010D                     	;# 
   550  010E                     	;# 
   551  010F                     	;# 
   552  0185                     	;# 
   553  0187                     	;# 
   554  0188                     	;# 
   555  0189                     	;# 
   556  018C                     	;# 
   557  018D                     	;# 
   558  0000                     	;# 
   559  0001                     	;# 
   560  0002                     	;# 
   561  0003                     	;# 
   562  0004                     	;# 
   563  0005                     	;# 
   564  0006                     	;# 
   565  0007                     	;# 
   566  0009                     	;# 
   567  000A                     	;# 
   568  000B                     	;# 
   569  000C                     	;# 
   570  000D                     	;# 
   571  000E                     	;# 
   572  000E                     	;# 
   573  000F                     	;# 
   574  0010                     	;# 
   575  0011                     	;# 
   576  0012                     	;# 
   577  0013                     	;# 
   578  0014                     	;# 
   579  0015                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0017                     	;# 
   583  0018                     	;# 
   584  0019                     	;# 
   585  001A                     	;# 
   586  001B                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  001D                     	;# 
   590  001E                     	;# 
   591  001F                     	;# 
   592  0081                     	;# 
   593  0085                     	;# 
   594  0086                     	;# 
   595  0087                     	;# 
   596  0089                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  008E                     	;# 
   600  008F                     	;# 
   601  0090                     	;# 
   602  0091                     	;# 
   603  0092                     	;# 
   604  0093                     	;# 
   605  0093                     	;# 
   606  0093                     	;# 
   607  0094                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009C                     	;# 
   616  009D                     	;# 
   617  009E                     	;# 
   618  009F                     	;# 
   619  0105                     	;# 
   620  0107                     	;# 
   621  0108                     	;# 
   622  0109                     	;# 
   623  010C                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  0185                     	;# 
   629  0187                     	;# 
   630  0188                     	;# 
   631  0189                     	;# 
   632  018C                     	;# 
   633  018D                     	;# 
   634  0000                     	;# 
   635  0001                     	;# 
   636  0002                     	;# 
   637  0003                     	;# 
   638  0004                     	;# 
   639  0005                     	;# 
   640  0006                     	;# 
   641  0007                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000D                     	;# 
   647  000E                     	;# 
   648  000E                     	;# 
   649  000F                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0013                     	;# 
   654  0014                     	;# 
   655  0015                     	;# 
   656  0015                     	;# 
   657  0016                     	;# 
   658  0017                     	;# 
   659  0018                     	;# 
   660  0019                     	;# 
   661  001A                     	;# 
   662  001B                     	;# 
   663  001B                     	;# 
   664  001C                     	;# 
   665  001D                     	;# 
   666  001E                     	;# 
   667  001F                     	;# 
   668  0081                     	;# 
   669  0085                     	;# 
   670  0086                     	;# 
   671  0087                     	;# 
   672  0089                     	;# 
   673  008C                     	;# 
   674  008D                     	;# 
   675  008E                     	;# 
   676  008F                     	;# 
   677  0090                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0093                     	;# 
   681  0093                     	;# 
   682  0093                     	;# 
   683  0094                     	;# 
   684  0095                     	;# 
   685  0096                     	;# 
   686  0097                     	;# 
   687  0098                     	;# 
   688  0099                     	;# 
   689  009A                     	;# 
   690  009B                     	;# 
   691  009C                     	;# 
   692  009D                     	;# 
   693  009E                     	;# 
   694  009F                     	;# 
   695  0105                     	;# 
   696  0107                     	;# 
   697  0108                     	;# 
   698  0109                     	;# 
   699  010C                     	;# 
   700  010C                     	;# 
   701  010D                     	;# 
   702  010E                     	;# 
   703  010F                     	;# 
   704  0185                     	;# 
   705  0187                     	;# 
   706  0188                     	;# 
   707  0189                     	;# 
   708  018C                     	;# 
   709  018D                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  000E                     	;# 
   725  000F                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0013                     	;# 
   730  0014                     	;# 
   731  0015                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0017                     	;# 
   735  0018                     	;# 
   736  0019                     	;# 
   737  001A                     	;# 
   738  001B                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  001D                     	;# 
   742  001E                     	;# 
   743  001F                     	;# 
   744  0081                     	;# 
   745  0085                     	;# 
   746  0086                     	;# 
   747  0087                     	;# 
   748  0089                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  008F                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0093                     	;# 
   757  0093                     	;# 
   758  0093                     	;# 
   759  0094                     	;# 
   760  0095                     	;# 
   761  0096                     	;# 
   762  0097                     	;# 
   763  0098                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009E                     	;# 
   770  009F                     	;# 
   771  0105                     	;# 
   772  0107                     	;# 
   773  0108                     	;# 
   774  0109                     	;# 
   775  010C                     	;# 
   776  010C                     	;# 
   777  010D                     	;# 
   778  010E                     	;# 
   779  010F                     	;# 
   780  0185                     	;# 
   781  0187                     	;# 
   782  0188                     	;# 
   783  0189                     	;# 
   784  018C                     	;# 
   785  018D                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  000E                     	;# 
   801  000F                     	;# 
   802  0010                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0015                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001B                     	;# 
   816  001C                     	;# 
   817  001D                     	;# 
   818  001E                     	;# 
   819  001F                     	;# 
   820  0081                     	;# 
   821  0085                     	;# 
   822  0086                     	;# 
   823  0087                     	;# 
   824  0089                     	;# 
   825  008C                     	;# 
   826  008D                     	;# 
   827  008E                     	;# 
   828  008F                     	;# 
   829  0090                     	;# 
   830  0091                     	;# 
   831  0092                     	;# 
   832  0093                     	;# 
   833  0093                     	;# 
   834  0093                     	;# 
   835  0094                     	;# 
   836  0095                     	;# 
   837  0096                     	;# 
   838  0097                     	;# 
   839  0098                     	;# 
   840  0099                     	;# 
   841  009A                     	;# 
   842  009B                     	;# 
   843  009C                     	;# 
   844  009D                     	;# 
   845  009E                     	;# 
   846  009F                     	;# 
   847  0105                     	;# 
   848  0107                     	;# 
   849  0108                     	;# 
   850  0109                     	;# 
   851  010C                     	;# 
   852  010C                     	;# 
   853  010D                     	;# 
   854  010E                     	;# 
   855  010F                     	;# 
   856  0185                     	;# 
   857  0187                     	;# 
   858  0188                     	;# 
   859  0189                     	;# 
   860  018C                     	;# 
   861  018D                     	;# 
   862  0000                     	;# 
   863  0001                     	;# 
   864  0002                     	;# 
   865  0003                     	;# 
   866  0004                     	;# 
   867  0005                     	;# 
   868  0006                     	;# 
   869  0007                     	;# 
   870  0009                     	;# 
   871  000A                     	;# 
   872  000B                     	;# 
   873  000C                     	;# 
   874  000D                     	;# 
   875  000E                     	;# 
   876  000E                     	;# 
   877  000F                     	;# 
   878  0010                     	;# 
   879  0011                     	;# 
   880  0012                     	;# 
   881  0013                     	;# 
   882  0014                     	;# 
   883  0015                     	;# 
   884  0015                     	;# 
   885  0016                     	;# 
   886  0017                     	;# 
   887  0018                     	;# 
   888  0019                     	;# 
   889  001A                     	;# 
   890  001B                     	;# 
   891  001B                     	;# 
   892  001C                     	;# 
   893  001D                     	;# 
   894  001E                     	;# 
   895  001F                     	;# 
   896  0081                     	;# 
   897  0085                     	;# 
   898  0086                     	;# 
   899  0087                     	;# 
   900  0089                     	;# 
   901  008C                     	;# 
   902  008D                     	;# 
   903  008E                     	;# 
   904  008F                     	;# 
   905  0090                     	;# 
   906  0091                     	;# 
   907  0092                     	;# 
   908  0093                     	;# 
   909  0093                     	;# 
   910  0093                     	;# 
   911  0094                     	;# 
   912  0095                     	;# 
   913  0096                     	;# 
   914  0097                     	;# 
   915  0098                     	;# 
   916  0099                     	;# 
   917  009A                     	;# 
   918  009B                     	;# 
   919  009C                     	;# 
   920  009D                     	;# 
   921  009E                     	;# 
   922  009F                     	;# 
   923  0105                     	;# 
   924  0107                     	;# 
   925  0108                     	;# 
   926  0109                     	;# 
   927  010C                     	;# 
   928  010C                     	;# 
   929  010D                     	;# 
   930  010E                     	;# 
   931  010F                     	;# 
   932  0185                     	;# 
   933  0187                     	;# 
   934  0188                     	;# 
   935  0189                     	;# 
   936  018C                     	;# 
   937  018D                     	;# 
   938  0000                     	;# 
   939  0001                     	;# 
   940  0002                     	;# 
   941  0003                     	;# 
   942  0004                     	;# 
   943  0005                     	;# 
   944  0006                     	;# 
   945  0007                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  000E                     	;# 
   953  000F                     	;# 
   954  0010                     	;# 
   955  0011                     	;# 
   956  0012                     	;# 
   957  0013                     	;# 
   958  0014                     	;# 
   959  0015                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  001D                     	;# 
   970  001E                     	;# 
   971  001F                     	;# 
   972  0081                     	;# 
   973  0085                     	;# 
   974  0086                     	;# 
   975  0087                     	;# 
   976  0089                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  008F                     	;# 
   981  0090                     	;# 
   982  0091                     	;# 
   983  0092                     	;# 
   984  0093                     	;# 
   985  0093                     	;# 
   986  0093                     	;# 
   987  0094                     	;# 
   988  0095                     	;# 
   989  0096                     	;# 
   990  0097                     	;# 
   991  0098                     	;# 
   992  0099                     	;# 
   993  009A                     	;# 
   994  009B                     	;# 
   995  009C                     	;# 
   996  009D                     	;# 
   997  009E                     	;# 
   998  009F                     	;# 
   999  0105                     	;# 
  1000  0107                     	;# 
  1001  0108                     	;# 
  1002  0109                     	;# 
  1003  010C                     	;# 
  1004  010C                     	;# 
  1005  010D                     	;# 
  1006  010E                     	;# 
  1007  010F                     	;# 
  1008  0185                     	;# 
  1009  0187                     	;# 
  1010  0188                     	;# 
  1011  0189                     	;# 
  1012  018C                     	;# 
  1013  018D                     	;# 
  1014                           
  1015                           	psect	idataCOMMON
  1016  1623                     __pidataCOMMON:
  1017                           
  1018                           ;initializer for _Delay100ms
  1019  1623  34E8               	retlw	232
  1020  1624  3403               	retlw	3
  1021                           
  1022                           	psect	idataBANK0
  1023  1629                     __pidataBANK0:	
  1024                           ;initializer for _Delay1s
  1025                           
  1026  1629  3410               	retlw	16
  1027  162A  3427               	retlw	39
  1028                           
  1029                           ;initializer for _Delay200ms
  1030  162B  34D0               	retlw	208
  1031  162C  3407               	retlw	7
  1032                           
  1033                           	psect	idataBANK1
  1034  163C                     __pidataBANK1:
  1035                           
  1036                           ;initializer for Pant_Inicio@F1323
  1037  163C  3406               	retlw	6
  1038  163D  3409               	retlw	9
  1039  163E  3409               	retlw	9
  1040  163F  3406               	retlw	6
  1041  1640  3400               	retlw	0
  1042  1641  3400               	retlw	0
  1043  1642  3400               	retlw	0
  1044  1643  3400               	retlw	0
  1045                           
  1046                           	psect	strings
  1047  0800                     __pstrings:
  1048  0800                     stringtab:
  1049  0800                     __stringtab:
  1050                           
  1051                           ;	String table - string pointers are 1 byte each
  1052  0800  1BFF               	btfsc	btemp+1,7
  1053  0801  280A               	ljmp	stringcode
  1054  0802  1383               	bcf	3,7
  1055  0803  187F               	btfsc	btemp+1,0
  1056  0804  1783               	bsf	3,7
  1057  0805  0800               	movf	0,w
  1058  0806  0A84               	incf	4,f
  1059  0807  1903               	skipnz
  1060  0808  0AFF               	incf	btemp+1,f
  1061  0809  0008               	return
  1062  080A                     stringcode:
  1063  080A                     stringdir:
  1064  080A  3008               	movlw	high stringdir
  1065  080B  008A               	movwf	10
  1066  080C  0804               	movf	4,w
  1067  080D  0A84               	incf	4,f
  1068  080E  0782               	addwf	2,f
  1069  080F                     __stringbase:
  1070  080F  3400               	retlw	0
  1071  0810                     __end_of__stringtab:
  1072  0810                     _dpowers:
  1073  0810  3401               	retlw	1
  1074  0811  3400               	retlw	0
  1075  0812  340A               	retlw	10
  1076  0813  3400               	retlw	0
  1077  0814  3464               	retlw	100
  1078  0815  3400               	retlw	0
  1079  0816  34E8               	retlw	232
  1080  0817  3403               	retlw	3
  1081  0818  3410               	retlw	16
  1082  0819  3427               	retlw	39
  1083  081A                     __end_of_dpowers:
  1084  000E                     _TMR1	set	14
  1085  001E                     _ADRESH	set	30
  1086  001F                     _ADCON0	set	31
  1087  001F                     _ADCON0bits	set	31
  1088  0010                     _T1CONbits	set	16
  1089  0007                     _PORTCbits	set	7
  1090  0006                     _PORTBbits	set	6
  1091  0005                     _PORTAbits	set	5
  1092  0007                     _PORTC	set	7
  1093  0006                     _PORTB	set	6
  1094  0005                     _PORTA	set	5
  1095  0034                     _RB4	set	52
  1096  005F                     _GIE	set	95
  1097  005E                     _PEIE	set	94
  1098  0080                     _TMR1ON	set	128
  1099  0060                     _TMR1IF	set	96
  1100  009E                     _ADRESL	set	158
  1101  009F                     _ADCON1bits	set	159
  1102  0087                     _TRISCbits	set	135
  1103  0086                     _TRISBbits	set	134
  1104  0087                     _TRISC	set	135
  1105  0086                     _TRISB	set	134
  1106  0085                     _TRISAbits	set	133
  1107  0434                     _TRISB4	set	1076
  1108  0460                     _TMR1IE	set	1120
  1109  0105                     _WDTCONbits	set	261
  1110  0188                     _ANSELbits	set	392
  1111  0189                     _ANSELHbits	set	393
  1112  081A                     STR_3:
  1113  081A  3420               	retlw	32	;' '
  1114  081B  3420               	retlw	32	;' '
  1115  081C  3420               	retlw	32	;' '
  1116  081D  3444               	retlw	68	;'D'
  1117  081E  3445               	retlw	69	;'E'
  1118  081F  3420               	retlw	32	;' '
  1119  0820  3449               	retlw	73	;'I'
  1120  0821  344E               	retlw	78	;'N'
  1121  0822  3459               	retlw	89	;'Y'
  1122  0823  3445               	retlw	69	;'E'
  1123  0824  3443               	retlw	67	;'C'
  1124  0825  3454               	retlw	84	;'T'
  1125  0826  344F               	retlw	79	;'O'
  1126  0827  3452               	retlw	82	;'R'
  1127  0828  3445               	retlw	69	;'E'
  1128  0829  3453               	retlw	83	;'S'
  1129  082A  3420               	retlw	32	;' '
  1130  082B  3420               	retlw	32	;' '
  1131  082C  3420               	retlw	32	;' '
  1132  082D  3420               	retlw	32	;' '
  1133  082E  3400               	retlw	0
  1134  082F                     STR_2:
  1135  082F  3450               	retlw	80	;'P'
  1136  0830  3452               	retlw	82	;'R'
  1137  0831  344F               	retlw	79	;'O'
  1138  0832  3442               	retlw	66	;'B'
  1139  0833  3441               	retlw	65	;'A'
  1140  0834  3444               	retlw	68	;'D'
  1141  0835  344F               	retlw	79	;'O'
  1142  0836  3452               	retlw	82	;'R'
  1143  0837  3420               	retlw	32	;' '
  1144  0838  3441               	retlw	65	;'A'
  1145  0839  3455               	retlw	85	;'U'
  1146  083A  3454               	retlw	84	;'T'
  1147  083B  344F               	retlw	79	;'O'
  1148  083C  344D               	retlw	77	;'M'
  1149  083D  344F               	retlw	79	;'O'
  1150  083E  3454               	retlw	84	;'T'
  1151  083F  3452               	retlw	82	;'R'
  1152  0840  3449               	retlw	73	;'I'
  1153  0841  345A               	retlw	90	;'Z'
  1154  0842  3420               	retlw	32	;' '
  1155  0843  3400               	retlw	0
  1156  0844                     STR_1:
  1157  0844  343D               	retlw	61	;'='
  1158  0845  343D               	retlw	61	;'='
  1159  0846  343D               	retlw	61	;'='
  1160  0847  343D               	retlw	61	;'='
  1161  0848  343D               	retlw	61	;'='
  1162  0849  343D               	retlw	61	;'='
  1163  084A  343D               	retlw	61	;'='
  1164  084B  343D               	retlw	61	;'='
  1165  084C  343D               	retlw	61	;'='
  1166  084D  343D               	retlw	61	;'='
  1167  084E  343D               	retlw	61	;'='
  1168  084F  343D               	retlw	61	;'='
  1169  0850  343D               	retlw	61	;'='
  1170  0851  343D               	retlw	61	;'='
  1171  0852  343D               	retlw	61	;'='
  1172  0853  343D               	retlw	61	;'='
  1173  0854  343D               	retlw	61	;'='
  1174  0855  343D               	retlw	61	;'='
  1175  0856  343D               	retlw	61	;'='
  1176  0857  343D               	retlw	61	;'='
  1177  0858  3400               	retlw	0
  1178  0859                     STR_17:
  1179  0859  344C               	retlw	76	;'L'
  1180  085A  3449               	retlw	73	;'I'
  1181  085B  344D               	retlw	77	;'M'
  1182  085C  3450               	retlw	80	;'P'
  1183  085D  342E               	retlw	46	;'.'
  1184  085E  3420               	retlw	32	;' '
  1185  085F  3455               	retlw	85	;'U'
  1186  0860  344C               	retlw	76	;'L'
  1187  0861  3454               	retlw	84	;'T'
  1188  0862  3452               	retlw	82	;'R'
  1189  0863  3441               	retlw	65	;'A'
  1190  0864  3453               	retlw	83	;'S'
  1191  0865  344F               	retlw	79	;'O'
  1192  0866  344E               	retlw	78	;'N'
  1193  0867  3449               	retlw	73	;'I'
  1194  0868  3444               	retlw	68	;'D'
  1195  0869  344F               	retlw	79	;'O'
  1196  086A  3400               	retlw	0
  1197  086B                     STR_14:
  1198  086B  3450               	retlw	80	;'P'
  1199  086C  3455               	retlw	85	;'U'
  1200  086D  344C               	retlw	76	;'L'
  1201  086E  3456               	retlw	86	;'V'
  1202  086F  3445               	retlw	69	;'E'
  1203  0870  3452               	retlw	82	;'R'
  1204  0871  3449               	retlw	73	;'I'
  1205  0872  345A               	retlw	90	;'Z'
  1206  0873  3441               	retlw	65	;'A'
  1207  0874  3443               	retlw	67	;'C'
  1208  0875  3449               	retlw	73	;'I'
  1209  0876  344F               	retlw	79	;'O'
  1210  0877  344E               	retlw	78	;'N'
  1211  0878  3400               	retlw	0
  1212  0879                     STR_22:
  1213  0879  3454               	retlw	84	;'T'
  1214  087A  3445               	retlw	69	;'E'
  1215  087B  344D               	retlw	77	;'M'
  1216  087C  3450               	retlw	80	;'P'
  1217  087D  3445               	retlw	69	;'E'
  1218  087E  3452               	retlw	82	;'R'
  1219  087F  3441               	retlw	65	;'A'
  1220  0880  3454               	retlw	84	;'T'
  1221  0881  3455               	retlw	85	;'U'
  1222  0882  3452               	retlw	82	;'R'
  1223  0883  3441               	retlw	65	;'A'
  1224  0884  343A               	retlw	58	;':'
  1225  0885  3400               	retlw	0
  1226  0886                     STR_20:
  1227  0886  3454               	retlw	84	;'T'
  1228  0887  3449               	retlw	73	;'I'
  1229  0888  3445               	retlw	69	;'E'
  1230  0889  344D               	retlw	77	;'M'
  1231  088A  3450               	retlw	80	;'P'
  1232  088B  344F               	retlw	79	;'O'
  1233  088C  343A               	retlw	58	;':'
  1234  088D  3400               	retlw	0
  1235  088E                     STR_16:
  1236  088E  3446               	retlw	70	;'F'
  1237  088F  344C               	retlw	76	;'L'
  1238  0890  3455               	retlw	85	;'U'
  1239  0891  344A               	retlw	74	;'J'
  1240  0892  344F               	retlw	79	;'O'
  1241  0893  3400               	retlw	0
  1242  0894                     STR_18:
  1243  0894  3452               	retlw	82	;'R'
  1244  0895  3450               	retlw	80	;'P'
  1245  0896  344D               	retlw	77	;'M'
  1246  0897  343A               	retlw	58	;':'
  1247  0898  3400               	retlw	0
  1248  0899                     STR_19:
  1249  0899  3450               	retlw	80	;'P'
  1250  089A  3457               	retlw	87	;'W'
  1251  089B  344D               	retlw	77	;'M'
  1252  089C  343A               	retlw	58	;':'
  1253  089D  3400               	retlw	0
  1254  089E                     STR_15:
  1255  089E  3446               	retlw	70	;'F'
  1256  089F  3455               	retlw	85	;'U'
  1257  08A0  3447               	retlw	71	;'G'
  1258  08A1  3441               	retlw	65	;'A'
  1259  08A2  3400               	retlw	0
  1260  08A3                     STR_25:
  1261  08A3  3425               	retlw	37	;'%'
  1262  08A4  3430               	retlw	48	;'0'
  1263  08A5  3432               	retlw	50	;'2'
  1264  08A6  3464               	retlw	100	;'d'
  1265  08A7  3400               	retlw	0
  1266  08A8                     STR_24:
  1267  08A8  3425               	retlw	37	;'%'
  1268  08A9  3430               	retlw	48	;'0'
  1269  08AA  3435               	retlw	53	;'5'
  1270  08AB  3475               	retlw	117	;'u'
  1271  08AC  3400               	retlw	0
  1272  08AD                     STR_5:
  1273  08AD  343E               	retlw	62	;'>'
  1274  08AE  3400               	retlw	0
  1275  08AF                     STR_23:
  1276  08AF  3443               	retlw	67	;'C'
  1277  08B0  3400               	retlw	0
  1278  082D                     
  1279                           	psect	cinit
  1280  0013                     start_initialization:	
  1281                           ; #config settings
  1282                           
  1283  0013                     __initialization:
  1284                           
  1285                           ; Initialize objects allocated to BANK1
  1286  0013  1383               	bcf	3,7	;select IRP bank0
  1287  0014  30C5               	movlw	low (__pdataBANK1+8)
  1288  0015  00FD               	movwf	btemp+-1
  1289  0016  3016               	movlw	high __pidataBANK1
  1290  0017  00FE               	movwf	btemp
  1291  0018  303C               	movlw	low __pidataBANK1
  1292  0019  00FF               	movwf	btemp+1
  1293  001A  30BD               	movlw	low __pdataBANK1
  1294  001B  0084               	movwf	4
  1295  001C  160A  118A  265A  120A  118A  	fcall	init_ram0
  1296                           
  1297                           ; Initialize objects allocated to BANK0
  1298  0021  3070               	movlw	low (__pdataBANK0+4)
  1299  0022  00FD               	movwf	btemp+-1
  1300  0023  3016               	movlw	high __pidataBANK0
  1301  0024  00FE               	movwf	btemp
  1302  0025  3029               	movlw	low __pidataBANK0
  1303  0026  00FF               	movwf	btemp+1
  1304  0027  306C               	movlw	low __pdataBANK0
  1305  0028  0084               	movwf	4
  1306  0029  160A  118A  265A  120A  118A  	fcall	init_ram0
  1307                           
  1308                           ; Initialize objects allocated to COMMON
  1309  002E  160A  118A  2623  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1310  0033  00F8               	movwf	__pdataCOMMON& (0+127)
  1311  0034  160A  118A  2624  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1312  0039  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
  1313                           
  1314                           ; Clear objects allocated to BANK1
  1315  003A  30A0               	movlw	low __pbssBANK1
  1316  003B  0084               	movwf	4
  1317  003C  30BD               	movlw	low (__pbssBANK1+29)
  1318  003D  160A  118A  2634  120A  118A  	fcall	clear_ram0
  1319                           
  1320                           ; Clear objects allocated to BANK0
  1321  0042  3064               	movlw	low __pbssBANK0
  1322  0043  0084               	movwf	4
  1323  0044  306C               	movlw	low (__pbssBANK0+8)
  1324  0045  160A  118A  2634   	fcall	clear_ram0
  1325                           
  1326                           ; Clear objects allocated to COMMON
  1327  0048  01FA               	clrf	__pbssCOMMON& (0+127)
  1328  0049                     end_of_initialization:	
  1329                           ;End of C runtime variable initialization code
  1330                           
  1331  0049                     __end_of__initialization:
  1332  0049  0183               	clrf	3
  1333  004A  160A  118A  2F40   	ljmp	_main	;jump to C main() function
  1334                           
  1335                           	psect	bssCOMMON
  1336  007A                     __pbssCOMMON:
  1337  007A                     _Temp:
  1338  007A                     	ds	1
  1339                           
  1340                           	psect	dataCOMMON
  1341  0078                     __pdataCOMMON:
  1342  0078                     _Delay100ms:
  1343  0078                     	ds	2
  1344                           
  1345                           	psect	bssBANK0
  1346  0064                     __pbssBANK0:
  1347  0064                     _Estado_Actual:
  1348  0064                     	ds	1
  1349  0065                     _Reset:
  1350  0065                     	ds	1
  1351  0066                     _Output:
  1352  0066                     	ds	1
  1353  0067                     _Mostrar:
  1354  0067                     	ds	1
  1355  0068                     _Seg:
  1356  0068                     	ds	1
  1357  0069                     _Min:
  1358  0069                     	ds	1
  1359  006A                     _Pwm:
  1360  006A                     	ds	1
  1361  006B                     _Modo:
  1362  006B                     	ds	1
  1363                           
  1364                           	psect	dataBANK0
  1365  006C                     __pdataBANK0:
  1366  006C                     _Delay1s:
  1367  006C                     	ds	2
  1368  006E                     _Delay200ms:
  1369  006E                     	ds	2
  1370                           
  1371                           	psect	bssBANK1
  1372  00A0                     __pbssBANK1:
  1373  00A0                     Pant_Inicio@F1325:
  1374  00A0                     	ds	8
  1375  00A8                     _Pw_PwmS1:
  1376  00A8                     	ds	3
  1377  00AB                     _Per_PwmS1:
  1378  00AB                     	ds	3
  1379  00AE                     _Rpm:
  1380  00AE                     	ds	2
  1381  00B0                     _PER_T_S1:
  1382  00B0                     	ds	2
  1383  00B2                     _P_W_T_S1:
  1384  00B2                     	ds	2
  1385  00B4                     _PwmS1:
  1386  00B4                     	ds	2
  1387  00B6                     _freqPwmS1:
  1388  00B6                     	ds	2
  1389  00B8                     _Subestado_Actual:
  1390  00B8                     	ds	1
  1391  00B9                     _Temporizador:
  1392  00B9                     	ds	1
  1393  00BA                     _mod_tiempo:
  1394  00BA                     	ds	1
  1395  00BB                     _Act_Variables:
  1396  00BB                     	ds	1
  1397  00BC                     _Act_PwmS1:
  1398  00BC                     	ds	1
  1399                           
  1400                           	psect	dataBANK1
  1401  00BD                     __pdataBANK1:
  1402  00BD                     Pant_Inicio@F1323:
  1403  00BD                     	ds	8
  1404                           
  1405                           	psect	inittext
  1406  1656                     init_fetch0:	
  1407                           ;	Called with low address in FSR and high address in W
  1408                           
  1409  1656  087E               	movf	126,w
  1410  1657  008A               	movwf	10
  1411  1658  087F               	movf	127,w
  1412  1659  0082               	movwf	2
  1413  165A                     init_ram0:	
  1414                           ;Called with:
  1415                           ;	high address of idata address in btemp 
  1416                           ;	low address of idata address in btemp+1 
  1417                           ;	low address of data in FSR
  1418                           ;	high address + 1 of data in btemp-1
  1419                           
  1420  165A  2656  160A  118A   	fcall	init_fetch0
  1421  165D  0080               	movwf	0
  1422  165E  0A84               	incf	4,f
  1423  165F  0804               	movf	4,w
  1424  1660  067D               	xorwf	125,w
  1425  1661  1903               	btfsc	3,2
  1426  1662  3400               	retlw	0
  1427  1663  0AFF               	incf	127,f
  1428  1664  1903               	btfsc	3,2
  1429  1665  0AFE               	incf	126,f
  1430  1666  2E5A               	goto	init_ram0
  1431                           
  1432                           	psect	clrtext
  1433  1634                     clear_ram0:	
  1434                           ;	Called with FSR containing the base address, and
  1435                           ;	W with the last address+1
  1436                           
  1437  1634  0064               	clrwdt	;clear the watchdog before getting into this loop
  1438  1635                     clrloop0:
  1439  1635  0180               	clrf	0	;clear RAM location pointed to by FSR
  1440  1636  0A84               	incf	4,f	;increment pointer
  1441  1637  0604               	xorwf	4,w	;XOR with final address
  1442  1638  1903               	btfsc	3,2	;have we reached the end yet?
  1443  1639  3400               	retlw	0	;all done for this memory range, return
  1444  163A  0604               	xorwf	4,w	;XOR again to restore value
  1445  163B  2E35               	goto	clrloop0	;do the next byte
  1446                           
  1447                           	psect	cstackBANK1
  1448  00C5                     __pcstackBANK1:
  1449  00C5                     MEF_Subest_Actualizacion@i:
  1450                           
  1451                           ; 1 bytes @ 0x0
  1452  00C5                     	ds	1
  1453  00C6                     ??_MEF_Actualizacion:
  1454                           
  1455                           ; 1 bytes @ 0x1
  1456  00C6                     	ds	2
  1457                           
  1458                           	psect	cstackCOMMON
  1459  0070                     __pcstackCOMMON:
  1460  0070                     ?_isdigit:
  1461  0070                     ?_Pines_Init:	
  1462                           ; 1 bit 
  1463                           
  1464  0070                     ?_MEF_Init:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_LCD_init:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ?_Pwm_init:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ?_Adc_init:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_MEF_Actualizacion:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ?_Task_Ready:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ??_Task_Ready:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     ?_Pant_Inicio:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488  0070                     ?_Select_Modo:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491  0070                     ?_MEF_Subest_Actualizacion:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494  0070                     ?_LCD_command:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497  0070                     ?_Pant_Modos:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500  0070                     ?_Pant_Val_Act:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503  0070                     ?_Lec_Adc_Modo_Pulv:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506  0070                     ?_Lec_Adc_Modo_Fuga:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509  0070                     ?_Lec_Adc_Modo_Flujo:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512  0070                     ?_Salida_Modo_Pulv:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515  0070                     ?_Salida_Modo_Fuga:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518  0070                     ?_Salida_Modo_Flujo:	
  1519                           ; 1 bytes @ 0x0
  1520                           
  1521  0070                     ?_Pant_Temporizador:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524  0070                     ?_Pant_Menu:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0070                     ?_Pant_Selector:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0070                     ?_Adc_Rpm_Read:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0070                     ?_Adc_Pwm_Read:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0070                     ?_Adc_Min_Read:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0070                     ?_Adc_Temp_Read:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542  0070                     ?_LCD_date:	
  1543                           ; 1 bytes @ 0x0
  1544                           
  1545  0070                     ?_main:	
  1546                           ; 1 bytes @ 0x0
  1547                           
  1548  0070                     ?_Antirrebote:	
  1549                           ; 1 bytes @ 0x0
  1550                           
  1551  0070                     ?_ISR:	
  1552                           ; 1 bytes @ 0x0
  1553                           
  1554  0070                     ??_ISR:	
  1555                           ; 1 bytes @ 0x0
  1556                           
  1557                           
  1558                           ; 1 bytes @ 0x0
  1559  0070                     	ds	3
  1560  0073                     ??_Pines_Init:
  1561  0073                     ??_MEF_Init:	
  1562                           ; 1 bytes @ 0x3
  1563                           
  1564  0073                     ??_Pwm_init:	
  1565                           ; 1 bytes @ 0x3
  1566                           
  1567  0073                     ??_Adc_init:	
  1568                           ; 1 bytes @ 0x3
  1569                           
  1570  0073                     ??_LCD_command:	
  1571                           ; 1 bytes @ 0x3
  1572                           
  1573  0073                     ??_Salida_Modo_Pulv:	
  1574                           ; 1 bytes @ 0x3
  1575                           
  1576  0073                     ??_Salida_Modo_Fuga:	
  1577                           ; 1 bytes @ 0x3
  1578                           
  1579  0073                     ??_Salida_Modo_Flujo:	
  1580                           ; 1 bytes @ 0x3
  1581                           
  1582  0073                     ??_LCD_date:	
  1583                           ; 1 bytes @ 0x3
  1584                           
  1585  0073                     ??_isdigit:	
  1586                           ; 1 bytes @ 0x3
  1587                           
  1588  0073                     ??_Antirrebote:	
  1589                           ; 1 bytes @ 0x3
  1590                           
  1591  0073                     ?_Adc:	
  1592                           ; 1 bytes @ 0x3
  1593                           
  1594  0073                     ?___lwdiv:	
  1595                           ; 2 bytes @ 0x3
  1596                           
  1597  0073                     ?___ftpack:	
  1598                           ; 2 bytes @ 0x3
  1599                           
  1600  0073                     _isdigit$1239:	
  1601                           ; 3 bytes @ 0x3
  1602                           
  1603  0073                     ___lwdiv@divisor:	
  1604                           ; 1 bytes @ 0x3
  1605                           
  1606  0073                     ___ftpack@arg:	
  1607                           ; 2 bytes @ 0x3
  1608                           
  1609                           
  1610                           ; 3 bytes @ 0x3
  1611  0073                     	ds	1
  1612  0074                     isdigit@c:
  1613                           
  1614                           ; 1 bytes @ 0x4
  1615  0074                     	ds	1
  1616  0075                     ??_Adc:
  1617  0075                     LCD_command@cmd:	
  1618                           ; 1 bytes @ 0x5
  1619                           
  1620  0075                     LCD_date@date:	
  1621                           ; 1 bytes @ 0x5
  1622                           
  1623  0075                     ___lwdiv@dividend:	
  1624                           ; 1 bytes @ 0x5
  1625                           
  1626                           
  1627                           ; 2 bytes @ 0x5
  1628  0075                     	ds	1
  1629  0076                     ??_LCD_init:
  1630  0076                     ?_LCD_character:	
  1631                           ; 1 bytes @ 0x6
  1632                           
  1633  0076                     ??_LCD_array:	
  1634                           ; 1 bytes @ 0x6
  1635                           
  1636  0076                     ??_LCD_xy:	
  1637                           ; 1 bytes @ 0x6
  1638                           
  1639  0076                     LCD_character@caracter:	
  1640                           ; 1 bytes @ 0x6
  1641                           
  1642  0076                     ___ftpack@exp:	
  1643                           ; 1 bytes @ 0x6
  1644                           
  1645                           
  1646                           ; 1 bytes @ 0x6
  1647  0076                     	ds	1
  1648  0077                     ??_LCD_character:
  1649  0077                     ??___wmul:	
  1650                           ; 1 bytes @ 0x7
  1651                           
  1652  0077                     ??___lwdiv:	
  1653                           ; 1 bytes @ 0x7
  1654                           
  1655  0077                     ??___lwmod:	
  1656                           ; 1 bytes @ 0x7
  1657                           
  1658  0077                     ___ftpack@sign:	
  1659                           ; 1 bytes @ 0x7
  1660                           
  1661  0077                     ___lwmod@counter:	
  1662                           ; 1 bytes @ 0x7
  1663                           
  1664                           
  1665                           ; 1 bytes @ 0x7
  1666  0077                     	ds	1
  1667  0078                     ??_Select_Modo:
  1668  0078                     ??_Pant_Modos:	
  1669                           ; 1 bytes @ 0x8
  1670                           
  1671  0078                     ??_Lec_Adc_Modo_Pulv:	
  1672                           ; 1 bytes @ 0x8
  1673                           
  1674  0078                     ??_Lec_Adc_Modo_Fuga:	
  1675                           ; 1 bytes @ 0x8
  1676                           
  1677  0078                     ??_Lec_Adc_Modo_Flujo:	
  1678                           ; 1 bytes @ 0x8
  1679                           
  1680  0078                     ??_Pant_Menu:	
  1681                           ; 1 bytes @ 0x8
  1682                           
  1683  0078                     ??_Pant_Selector:	
  1684                           ; 1 bytes @ 0x8
  1685                           
  1686  0078                     ??_Adc_Pwm_Read:	
  1687                           ; 1 bytes @ 0x8
  1688                           
  1689  0078                     ??_Adc_Min_Read:	
  1690                           ; 1 bytes @ 0x8
  1691                           
  1692  0078                     ??_Adc_Temp_Read:	
  1693                           ; 1 bytes @ 0x8
  1694                           
  1695  0078                     ??_main:	
  1696                           ; 1 bytes @ 0x8
  1697                           
  1698  0078                     ??___awtoft:	
  1699                           ; 1 bytes @ 0x8
  1700                           
  1701                           
  1702                           	psect	cstackBANK0
  1703  0020                     __pcstackBANK0:	
  1704                           ; 1 bytes @ 0x8
  1705                           
  1706  0020                     ?_LCD_array:
  1707  0020                     ?_LCD_xy:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710  0020                     ??___ftpack:	
  1711                           ; 1 bytes @ 0x0
  1712                           
  1713  0020                     LCD_init@i:	
  1714                           ; 1 bytes @ 0x0
  1715                           
  1716  0020                     LCD_character@adress:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0020                     Adc@channel:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0020                     ___lwdiv@counter:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0020                     LCD_array@x:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0020                     LCD_xy@x:	
  1729                           ; 2 bytes @ 0x0
  1730                           
  1731                           
  1732                           ; 2 bytes @ 0x0
  1733  0020                     	ds	1
  1734  0021                     LCD_character@i:
  1735  0021                     Adc@convertion:	
  1736                           ; 1 bytes @ 0x1
  1737                           
  1738  0021                     ___lwdiv@quotient:	
  1739                           ; 2 bytes @ 0x1
  1740                           
  1741                           
  1742                           ; 2 bytes @ 0x1
  1743  0021                     	ds	1
  1744  0022                     LCD_array@y:
  1745  0022                     LCD_xy@y:	
  1746                           ; 2 bytes @ 0x2
  1747                           
  1748                           
  1749                           ; 2 bytes @ 0x2
  1750  0022                     	ds	1
  1751  0023                     ?___wmul:
  1752  0023                     ?___lwmod:	
  1753                           ; 2 bytes @ 0x3
  1754                           
  1755  0023                     ?___awtoft:	
  1756                           ; 2 bytes @ 0x3
  1757                           
  1758  0023                     ___wmul@multiplier:	
  1759                           ; 3 bytes @ 0x3
  1760                           
  1761  0023                     ___awtoft@c:	
  1762                           ; 2 bytes @ 0x3
  1763                           
  1764  0023                     ___lwmod@divisor:	
  1765                           ; 2 bytes @ 0x3
  1766                           
  1767                           
  1768                           ; 2 bytes @ 0x3
  1769  0023                     	ds	1
  1770  0024                     LCD_array@date:
  1771                           
  1772                           ; 2 bytes @ 0x4
  1773  0024                     	ds	1
  1774  0025                     ___wmul@multiplicand:
  1775  0025                     ___lwmod@dividend:	
  1776                           ; 2 bytes @ 0x5
  1777                           
  1778                           
  1779                           ; 2 bytes @ 0x5
  1780  0025                     	ds	1
  1781  0026                     ??_Pant_Inicio:
  1782  0026                     ___awtoft@sign:	
  1783                           ; 1 bytes @ 0x6
  1784                           
  1785                           
  1786                           ; 1 bytes @ 0x6
  1787  0026                     	ds	1
  1788  0027                     ?___ftmul:
  1789  0027                     ___wmul@product:	
  1790                           ; 3 bytes @ 0x7
  1791                           
  1792  0027                     ___ftmul@f1:	
  1793                           ; 2 bytes @ 0x7
  1794                           
  1795                           
  1796                           ; 3 bytes @ 0x7
  1797  0027                     	ds	2
  1798  0029                     ?_sprintf:
  1799  0029                     sprintf@f:	
  1800                           ; 2 bytes @ 0x9
  1801                           
  1802                           
  1803                           ; 1 bytes @ 0x9
  1804  0029                     	ds	1
  1805  002A                     ___ftmul@f2:
  1806  002A                     Pant_Inicio@caracter1:	
  1807                           ; 3 bytes @ 0xA
  1808                           
  1809                           
  1810                           ; 8 bytes @ 0xA
  1811  002A                     	ds	2
  1812  002C                     ??_sprintf:
  1813                           
  1814                           ; 1 bytes @ 0xC
  1815  002C                     	ds	1
  1816  002D                     ??___ftmul:
  1817                           
  1818                           ; 1 bytes @ 0xD
  1819  002D                     	ds	2
  1820  002F                     sprintf@prec:
  1821                           
  1822                           ; 1 bytes @ 0xF
  1823  002F                     	ds	1
  1824  0030                     sprintf@ap:
  1825  0030                     ___ftmul@exp:	
  1826                           ; 1 bytes @ 0x10
  1827                           
  1828                           
  1829                           ; 1 bytes @ 0x10
  1830  0030                     	ds	1
  1831  0031                     sprintf@val:
  1832  0031                     ___ftmul@f3_as_product:	
  1833                           ; 2 bytes @ 0x11
  1834                           
  1835                           
  1836                           ; 3 bytes @ 0x11
  1837  0031                     	ds	1
  1838  0032                     Pant_Inicio@caracter:
  1839                           
  1840                           ; 8 bytes @ 0x12
  1841  0032                     	ds	1
  1842  0033                     sprintf@flag:
  1843                           
  1844                           ; 1 bytes @ 0x13
  1845  0033                     	ds	1
  1846  0034                     ___ftmul@cntr:
  1847  0034                     sprintf@width:	
  1848                           ; 1 bytes @ 0x14
  1849                           
  1850                           
  1851                           ; 2 bytes @ 0x14
  1852  0034                     	ds	1
  1853  0035                     ___ftmul@sign:
  1854                           
  1855                           ; 1 bytes @ 0x15
  1856  0035                     	ds	1
  1857  0036                     ?___ftdiv:
  1858  0036                     sprintf@c:	
  1859                           ; 3 bytes @ 0x16
  1860                           
  1861  0036                     ___ftdiv@f2:	
  1862                           ; 1 bytes @ 0x16
  1863                           
  1864                           
  1865                           ; 3 bytes @ 0x16
  1866  0036                     	ds	1
  1867  0037                     sprintf@sp:
  1868                           
  1869                           ; 1 bytes @ 0x17
  1870  0037                     	ds	1
  1871  0038                     ??_Pant_Val_Act:
  1872  0038                     ??_Pant_Temporizador:	
  1873                           ; 1 bytes @ 0x18
  1874                           
  1875                           
  1876                           ; 1 bytes @ 0x18
  1877  0038                     	ds	1
  1878  0039                     ___ftdiv@f1:
  1879                           
  1880                           ; 3 bytes @ 0x19
  1881  0039                     	ds	1
  1882  003A                     Pant_Val_Act@buffer:
  1883  003A                     Pant_Temporizador@buffer:	
  1884                           ; 20 bytes @ 0x1A
  1885                           
  1886                           
  1887                           ; 20 bytes @ 0x1A
  1888  003A                     	ds	2
  1889  003C                     ??___ftdiv:
  1890                           
  1891                           ; 1 bytes @ 0x1C
  1892  003C                     	ds	3
  1893  003F                     ___ftdiv@cntr:
  1894                           
  1895                           ; 1 bytes @ 0x1F
  1896  003F                     	ds	1
  1897  0040                     ___ftdiv@f3:
  1898                           
  1899                           ; 3 bytes @ 0x20
  1900  0040                     	ds	3
  1901  0043                     ___ftdiv@exp:
  1902                           
  1903                           ; 1 bytes @ 0x23
  1904  0043                     	ds	1
  1905  0044                     ___ftdiv@sign:
  1906                           
  1907                           ; 1 bytes @ 0x24
  1908  0044                     	ds	1
  1909  0045                     ?___fttol:
  1910  0045                     ___fttol@f1:	
  1911                           ; 4 bytes @ 0x25
  1912                           
  1913                           
  1914                           ; 3 bytes @ 0x25
  1915  0045                     	ds	4
  1916  0049                     ??___fttol:
  1917                           
  1918                           ; 1 bytes @ 0x29
  1919  0049                     	ds	3
  1920  004C                     ___fttol@sign1:
  1921                           
  1922                           ; 1 bytes @ 0x2C
  1923  004C                     	ds	1
  1924  004D                     ___fttol@lval:
  1925                           
  1926                           ; 4 bytes @ 0x2D
  1927  004D                     	ds	4
  1928  0051                     ___fttol@exp1:
  1929                           
  1930                           ; 1 bytes @ 0x31
  1931  0051                     	ds	1
  1932  0052                     ??_Adc_Rpm_Read:
  1933  0052                     _Adc_Pwm_Read$1437:	
  1934                           ; 1 bytes @ 0x32
  1935                           
  1936  0052                     _Adc_Min_Read$1438:	
  1937                           ; 3 bytes @ 0x32
  1938                           
  1939  0052                     _Adc_Temp_Read$1439:	
  1940                           ; 3 bytes @ 0x32
  1941                           
  1942                           
  1943                           ; 3 bytes @ 0x32
  1944  0052                     	ds	4
  1945  0056                     _Adc_Rpm_Read$1436:
  1946                           
  1947                           ; 3 bytes @ 0x36
  1948  0056                     	ds	3
  1949  0059                     Adc_Rpm_Read@cent:
  1950                           
  1951                           ; 2 bytes @ 0x39
  1952  0059                     	ds	2
  1953  005B                     Adc_Rpm_Read@uni_m:
  1954                           
  1955                           ; 2 bytes @ 0x3B
  1956  005B                     	ds	2
  1957  005D                     Adc_Rpm_Read@dec_m:
  1958                           
  1959                           ; 2 bytes @ 0x3D
  1960  005D                     	ds	2
  1961  005F                     Adc_Rpm_Read@valor:
  1962                           
  1963                           ; 2 bytes @ 0x3F
  1964  005F                     	ds	2
  1965  0061                     ??_MEF_Subest_Actualizacion:
  1966                           
  1967                           ; 1 bytes @ 0x41
  1968  0061                     	ds	3
  1969                           
  1970                           	psect	maintext
  1971  1740                     __pmaintext:	
  1972 ;;
  1973 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1974 ;;
  1975 ;; *************** function _main *****************
  1976 ;; Defined at:
  1977 ;;		line 35 in file "Main.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : B00/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1991 ;;      Params:         0       0       0       0       0
  1992 ;;      Locals:         0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0
  1994 ;;      Totals:         0       0       0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels required when called:    8
  1997 ;; This function calls:
  1998 ;;		_Adc_init
  1999 ;;		_LCD_init
  2000 ;;		_MEF_Actualizacion
  2001 ;;		_MEF_Init
  2002 ;;		_Pines_Init
  2003 ;;		_Pwm_init
  2004 ;; This function is called by:
  2005 ;;		Startup code after reset
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           
  2010                           ;psect for function _main
  2011  1740                     _main:
  2012                           
  2013                           ;Main.c: 38:     Pines_Init();
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2017  1740  160A  118A  267A  160A  118A  	fcall	_Pines_Init
  2018                           
  2019                           ;Main.c: 39:     MEF_Init();
  2020  1745  160A  118A  262D  160A  118A  	fcall	_MEF_Init
  2021                           
  2022                           ;Main.c: 40:     LCD_init();
  2023  174A  120A  158A  23B1  160A  118A  	fcall	_LCD_init
  2024                           
  2025                           ;Main.c: 41:     Pwm_init();
  2026  174F  160A  118A  2693  160A  118A  	fcall	_Pwm_init
  2027                           
  2028                           ;Main.c: 42:     Adc_init();
  2029  1754  160A  118A  26D0  160A  118A  	fcall	_Adc_init
  2030                           
  2031                           ;Main.c: 44:     TMR1IE=1,TMR1IF=1;
  2032  1759  1683               	bsf	3,5	;RP0=1, select bank1
  2033  175A  1303               	bcf	3,6	;RP1=0, select bank1
  2034  175B  140C               	bsf	12,0	;volatile
  2035  175C  1283               	bcf	3,5	;RP0=0, select bank0
  2036  175D  1303               	bcf	3,6	;RP1=0, select bank0
  2037  175E  140C               	bsf	12,0	;volatile
  2038                           
  2039                           ;Main.c: 46:     WDTCONbits.SWDTEN = 1;
  2040  175F  1283               	bcf	3,5	;RP0=0, select bank2
  2041  1760  1703               	bsf	3,6	;RP1=1, select bank2
  2042  1761  1405               	bsf	5,0	;volatile
  2043                           
  2044                           ;Main.c: 47:     WDTCONbits.WDTPS = 0b1010;
  2045  1762  0805               	movf	5,w	;volatile
  2046  1763  39E1               	andlw	-31
  2047  1764  3814               	iorlw	20
  2048  1765  0085               	movwf	5	;volatile
  2049  1766                     l4697:
  2050                           
  2051                           ;Main.c: 50:     {;Main.c: 51:         MEF_Actualizacion();
  2052  1766  120A  158A  2524  160A  118A  	fcall	_MEF_Actualizacion
  2053  176B  2F66               	goto	l4697
  2054  176C                     __end_of_main:
  2055                           
  2056                           	psect	text1
  2057  1693                     __ptext1:	
  2058 ;; *************** function _Pwm_init *****************
  2059 ;; Defined at:
  2060 ;;		line 5 in file "Pwm_Soft.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;		None
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;		None
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      void 
  2067 ;; Registers used:
  2068 ;;		wreg, status,2, status,0
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2074 ;;      Params:         0       0       0       0       0
  2075 ;;      Locals:         0       0       0       0       0
  2076 ;;      Temps:          0       0       0       0       0
  2077 ;;      Totals:         0       0       0       0       0
  2078 ;;Total ram usage:        0 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; Hardware stack levels required when called:    2
  2081 ;; This function calls:
  2082 ;;		Nothing
  2083 ;; This function is called by:
  2084 ;;		_main
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           
  2089                           ;psect for function _Pwm_init
  2090  1693                     _Pwm_init:
  2091                           
  2092                           ;Pwm_Soft.c: 7:     ANSELHbits.ANS11 = 0;
  2093                           
  2094                           ;incstack = 0
  2095                           ; Regs used in _Pwm_init: [wreg+status,2+status,0]
  2096  1693  1683               	bsf	3,5	;RP0=1, select bank3
  2097  1694  1703               	bsf	3,6	;RP1=1, select bank3
  2098  1695  1189               	bcf	9,3	;volatile
  2099                           
  2100                           ;Pwm_Soft.c: 10:     T1CONbits.TMR1GE = 0;
  2101  1696  1283               	bcf	3,5	;RP0=0, select bank0
  2102  1697  1303               	bcf	3,6	;RP1=0, select bank0
  2103  1698  1310               	bcf	16,6	;volatile
  2104                           
  2105                           ;Pwm_Soft.c: 11:     T1CONbits.T1SYNC = 1;
  2106  1699  1510               	bsf	16,2	;volatile
  2107                           
  2108                           ;Pwm_Soft.c: 12:     T1CONbits.TMR1CS = 0;
  2109  169A  1090               	bcf	16,1	;volatile
  2110                           
  2111                           ;Pwm_Soft.c: 13:     T1CONbits.T1CKPS = 0b01;
  2112  169B  0810               	movf	16,w	;volatile
  2113  169C  39CF               	andlw	-49
  2114  169D  3810               	iorlw	16
  2115  169E  0090               	movwf	16	;volatile
  2116                           
  2117                           ;Pwm_Soft.c: 14:     T1CONbits.TMR1ON = 1;
  2118  169F  1410               	bsf	16,0	;volatile
  2119                           
  2120                           ;Pwm_Soft.c: 16:     TMR1 = 65285;
  2121  16A0  30FF               	movlw	255
  2122  16A1  008F               	movwf	15	;volatile
  2123  16A2  3005               	movlw	5
  2124  16A3  008E               	movwf	14	;volatile
  2125                           
  2126                           ;Pwm_Soft.c: 19:     PEIE = 1;
  2127  16A4  170B               	bsf	11,6	;volatile
  2128                           
  2129                           ;Pwm_Soft.c: 20:     GIE = 1;
  2130  16A5  178B               	bsf	11,7	;volatile
  2131                           
  2132                           ;Pwm_Soft.c: 21:     TMR1IE = 0;
  2133  16A6  1683               	bsf	3,5	;RP0=1, select bank1
  2134  16A7  1303               	bcf	3,6	;RP1=0, select bank1
  2135  16A8  100C               	bcf	12,0	;volatile
  2136                           
  2137                           ;Pwm_Soft.c: 22:     TMR1IF = 1;
  2138  16A9  1283               	bcf	3,5	;RP0=0, select bank0
  2139  16AA  1303               	bcf	3,6	;RP1=0, select bank0
  2140  16AB  140C               	bsf	12,0	;volatile
  2141  16AC  0008               	return
  2142  16AD                     __end_of_Pwm_init:
  2143                           
  2144                           	psect	text2
  2145  167A                     __ptext2:	
  2146 ;; *************** function _Pines_Init *****************
  2147 ;; Defined at:
  2148 ;;		line 57 in file "Main.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2162 ;;      Params:         0       0       0       0       0
  2163 ;;      Locals:         0       0       0       0       0
  2164 ;;      Temps:          0       0       0       0       0
  2165 ;;      Totals:         0       0       0       0       0
  2166 ;;Total ram usage:        0 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    2
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _Pines_Init
  2178  167A                     _Pines_Init:
  2179                           
  2180                           ;Main.c: 60:     TRISAbits.TRISA5 = 0;
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _Pines_Init: [wreg+status,2]
  2184  167A  1683               	bsf	3,5	;RP0=1, select bank1
  2185  167B  1303               	bcf	3,6	;RP1=0, select bank1
  2186  167C  1285               	bcf	5,5	;volatile
  2187                           
  2188                           ;Main.c: 61:     PORTA = 0;
  2189  167D  1283               	bcf	3,5	;RP0=0, select bank0
  2190  167E  1303               	bcf	3,6	;RP1=0, select bank0
  2191  167F  0185               	clrf	5	;volatile
  2192                           
  2193                           ;Main.c: 62:     PORTB = 0;
  2194  1680  0186               	clrf	6	;volatile
  2195                           
  2196                           ;Main.c: 63:     PORTC = 0;
  2197  1681  0187               	clrf	7	;volatile
  2198                           
  2199                           ;Main.c: 64:     TRISB = 0xFF;
  2200  1682  30FF               	movlw	255
  2201  1683  1683               	bsf	3,5	;RP0=1, select bank1
  2202  1684  1303               	bcf	3,6	;RP1=0, select bank1
  2203  1685  0086               	movwf	6	;volatile
  2204                           
  2205                           ;Main.c: 65:     TRISC = 0x00;
  2206  1686  0187               	clrf	7	;volatile
  2207                           
  2208                           ;Main.c: 66:     ANSELHbits.ANS12 = 0;
  2209  1687  1683               	bsf	3,5	;RP0=1, select bank3
  2210  1688  1703               	bsf	3,6	;RP1=1, select bank3
  2211  1689  1209               	bcf	9,4	;volatile
  2212                           
  2213                           ;Main.c: 67:     ANSELHbits.ANS11 = 0;
  2214  168A  1189               	bcf	9,3	;volatile
  2215                           
  2216                           ;Main.c: 68:     ANSELHbits.ANS10 = 0;
  2217  168B  1109               	bcf	9,2	;volatile
  2218                           
  2219                           ;Main.c: 69:     ANSELHbits.ANS8 = 0;
  2220  168C  1009               	bcf	9,0	;volatile
  2221                           
  2222                           ;Main.c: 70:     ANSELHbits.ANS9 = 0;
  2223  168D  1089               	bcf	9,1	;volatile
  2224                           
  2225                           ;Main.c: 71:     ANSELbits.ANS4 = 0;
  2226  168E  1208               	bcf	8,4	;volatile
  2227                           
  2228                           ;Main.c: 73:     TRISBbits.TRISB4 = 0;
  2229  168F  1683               	bsf	3,5	;RP0=1, select bank1
  2230  1690  1303               	bcf	3,6	;RP1=0, select bank1
  2231  1691  1206               	bcf	6,4	;volatile
  2232  1692  0008               	return
  2233  1693                     __end_of_Pines_Init:
  2234                           
  2235                           	psect	text3
  2236  162D                     __ptext3:	
  2237 ;; *************** function _MEF_Init *****************
  2238 ;; Defined at:
  2239 ;;		line 36 in file "MEF.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		status,2
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2253 ;;      Params:         0       0       0       0       0
  2254 ;;      Locals:         0       0       0       0       0
  2255 ;;      Temps:          0       0       0       0       0
  2256 ;;      Totals:         0       0       0       0       0
  2257 ;;Total ram usage:        0 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    2
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _MEF_Init
  2269  162D                     _MEF_Init:
  2270                           
  2271                           ;MEF.c: 38:     Estado_Actual = ESTADO_INICIO;
  2272                           
  2273                           ;incstack = 0
  2274                           ; Regs used in _MEF_Init: [status,2]
  2275  162D  1283               	bcf	3,5	;RP0=0, select bank0
  2276  162E  1303               	bcf	3,6	;RP1=0, select bank0
  2277  162F  01E4               	clrf	_Estado_Actual
  2278                           
  2279                           ;MEF.c: 39:     Subestado_Actual = SUBEST_INICIAL;
  2280  1630  1683               	bsf	3,5	;RP0=1, select bank1
  2281  1631  1303               	bcf	3,6	;RP1=0, select bank1
  2282  1632  01B8               	clrf	_Subestado_Actual^(0+128)
  2283  1633  0008               	return
  2284  1634                     __end_of_MEF_Init:
  2285                           
  2286                           	psect	text4
  2287  0D24                     __ptext4:	
  2288 ;; *************** function _MEF_Actualizacion *****************
  2289 ;; Defined at:
  2290 ;;		line 44 in file "MEF.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2304 ;;      Params:         0       0       0       0       0
  2305 ;;      Locals:         0       0       0       0       0
  2306 ;;      Temps:          0       0       2       0       0
  2307 ;;      Totals:         0       0       2       0       0
  2308 ;;Total ram usage:        2 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    7
  2311 ;; This function calls:
  2312 ;;		_Antirrebote
  2313 ;;		_LCD_command
  2314 ;;		_MEF_Subest_Actualizacion
  2315 ;;		_Pant_Inicio
  2316 ;;		_Select_Modo
  2317 ;; This function is called by:
  2318 ;;		_main
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           
  2323                           ;psect for function _MEF_Actualizacion
  2324  0D24                     _MEF_Actualizacion:
  2325                           
  2326                           ;MEF.c: 46:     switch(Estado_Actual)
  2327                           
  2328                           ;incstack = 0
  2329                           ; Regs used in _MEF_Actualizacion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2330  0D24  2D85               	goto	l4595
  2331  0D25                     l4541:
  2332                           
  2333                           ;MEF.c: 49:         {;MEF.c: 50:             Pant_Inicio();
  2334  0D25  120A  158A  2754   	fcall	_Pant_Inicio
  2335                           
  2336                           ;MEF.c: 51:             Output = 0;
  2337  0D28  1283               	bcf	3,5	;RP0=0, select bank0
  2338  0D29  1303               	bcf	3,6	;RP1=0, select bank0
  2339  0D2A  01E6               	clrf	_Output
  2340                           
  2341                           ;MEF.c: 53:             Estado_Actual = ESTADO_MENU;
  2342  0D2B  01E4               	clrf	_Estado_Actual
  2343  0D2C  0AE4               	incf	_Estado_Actual,f
  2344                           
  2345                           ;MEF.c: 54:         break;
  2346  0D2D  0008               	return
  2347  0D2E                     l4547:
  2348                           
  2349                           ;MEF.c: 57:         {;MEF.c: 58:             Select_Modo();
  2350  0D2E  120A  158A  20B1  120A  158A  	fcall	_Select_Modo
  2351                           
  2352                           ;MEF.c: 60:             if(PORTBbits.RB1 && Modo==1) Estado_Actual = ESTADO_MODO_PULV,An
      +                          tirrebote();
  2353  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  2354  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  2355  0D35  1C86               	btfss	6,1	;volatile
  2356  0D36  2D48               	goto	l206
  2357  0D37  036B               	decf	_Modo,w
  2358  0D38  1D03               	btfss	3,2
  2359  0D39  2D48               	goto	l206
  2360  0D3A  3002               	movlw	2
  2361  0D3B  2D41               	goto	L1
  2362  0D3C                     l4557:
  2363  0D3C  3002               	movlw	2
  2364  0D3D  066B               	xorwf	_Modo,w
  2365  0D3E  1D03               	btfss	3,2
  2366  0D3F  2D4A               	goto	l208
  2367  0D40  3003               	movlw	3
  2368  0D41                     L1:
  2369  0D41  00FF               	movwf	127
  2370  0D42  087F               	movf	127,w
  2371  0D43  00E4               	movwf	_Estado_Actual
  2372  0D44  160A  118A  2719   	fcall	_Antirrebote
  2373  0D47  0008               	return
  2374  0D48                     l206:	
  2375                           ;MEF.c: 61:             else if(PORTBbits.RB1 && Modo==2) Estado_Actual = ESTADO_MODO_FU
      +                          GA,Antirrebote();
  2376                           
  2377  0D48  1886               	btfsc	6,1	;volatile
  2378  0D49  2D3C               	goto	l4557
  2379  0D4A                     l208:	
  2380                           ;MEF.c: 62:             else if(PORTBbits.RB1 && Modo==3) Estado_Actual = ESTADO_MODO_FL
      +                          UJO,Antirrebote();
  2381                           
  2382  0D4A  1C86               	btfss	6,1	;volatile
  2383  0D4B  0008               	return
  2384  0D4C  3003               	movlw	3
  2385  0D4D  066B               	xorwf	_Modo,w
  2386  0D4E  1D03               	btfss	3,2
  2387  0D4F  0008               	return
  2388  0D50  3004               	movlw	4
  2389  0D51  2D41               	goto	L1
  2390  0D52                     l4569:	
  2391                           ;MEF.c: 63:         break;
  2392                           
  2393                           
  2394                           ;MEF.c: 66:         {;MEF.c: 67:             MEF_Subest_Actualizacion();
  2395  0D52  120A  118A  2334  120A  158A  	fcall	_MEF_Subest_Actualizacion
  2396                           
  2397                           ;MEF.c: 69:             if(Reset) Estado_Actual = ESTADO_MENU,LCD_command(0x01);
  2398  0D57  1283               	bcf	3,5	;RP0=0, select bank0
  2399  0D58  1303               	bcf	3,6	;RP1=0, select bank0
  2400  0D59  0865               	movf	_Reset,w
  2401  0D5A  1903               	btfsc	3,2
  2402  0D5B  0008               	return
  2403  0D5C  01E4               	clrf	_Estado_Actual
  2404  0D5D  0AE4               	incf	_Estado_Actual,f
  2405  0D5E  3001               	movlw	1
  2406  0D5F  120A  118A  25C8   	fcall	_LCD_command
  2407  0D62  0008               	return
  2408  0D63                     l4577:
  2409                           
  2410                           ;MEF.c: 73:         {;MEF.c: 74:             MEF_Subest_Actualizacion();
  2411  0D63  120A  118A  2334  120A  158A  	fcall	_MEF_Subest_Actualizacion
  2412                           
  2413                           ;MEF.c: 76:             if(Reset) Estado_Actual = ESTADO_MENU,LCD_command(0x01);
  2414  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  2416  0D6A  0865               	movf	_Reset,w
  2417  0D6B  1903               	btfsc	3,2
  2418  0D6C  0008               	return
  2419  0D6D  01E4               	clrf	_Estado_Actual
  2420  0D6E  0AE4               	incf	_Estado_Actual,f
  2421  0D6F  3001               	movlw	1
  2422  0D70  120A  118A  25C8   	fcall	_LCD_command
  2423  0D73  0008               	return
  2424  0D74                     l4585:
  2425                           
  2426                           ;MEF.c: 80:         {;MEF.c: 81:             MEF_Subest_Actualizacion();
  2427  0D74  120A  118A  2334  120A  158A  	fcall	_MEF_Subest_Actualizacion
  2428                           
  2429                           ;MEF.c: 83:             if(Reset) Estado_Actual = ESTADO_MENU,LCD_command(0x01);
  2430  0D79  1283               	bcf	3,5	;RP0=0, select bank0
  2431  0D7A  1303               	bcf	3,6	;RP1=0, select bank0
  2432  0D7B  0865               	movf	_Reset,w
  2433  0D7C  1903               	btfsc	3,2
  2434  0D7D  0008               	return
  2435  0D7E  01E4               	clrf	_Estado_Actual
  2436  0D7F  0AE4               	incf	_Estado_Actual,f
  2437  0D80  3001               	movlw	1
  2438  0D81  120A  118A  25C8   	fcall	_LCD_command
  2439  0D84  0008               	return
  2440  0D85                     l4595:
  2441  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0D87  0864               	movf	_Estado_Actual,w
  2444  0D88  1683               	bsf	3,5	;RP0=1, select bank1
  2445  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  2446  0D8A  00C6               	movwf	??_MEF_Actualizacion^(0+128)
  2447  0D8B  01C7               	clrf	(??_MEF_Actualizacion^(0+128)+1)
  2448                           
  2449                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2450                           ; Switch size 1, requested type "simple"
  2451                           ; Number of cases is 1, Range of values is 0 to 0
  2452                           ; switch strategies available:
  2453                           ; Name         Instructions Cycles
  2454                           ; simple_byte            4     3 (average)
  2455                           ; direct_byte           11     8 (fixed)
  2456                           ; jumptable            260     6 (fixed)
  2457                           ;	Chosen strategy is simple_byte
  2458  0D8C  0847               	movf	(??_MEF_Actualizacion+1)^(0+128),w
  2459  0D8D  3A00               	xorlw	0	; case 0
  2460  0D8E  1903               	skipnz
  2461  0D8F  2D91               	goto	l4867
  2462  0D90  2DA2               	goto	l217
  2463  0D91                     l4867:
  2464                           
  2465                           ; Switch size 1, requested type "simple"
  2466                           ; Number of cases is 5, Range of values is 0 to 4
  2467                           ; switch strategies available:
  2468                           ; Name         Instructions Cycles
  2469                           ; simple_byte           16     9 (average)
  2470                           ; direct_byte           23     8 (fixed)
  2471                           ; jumptable            260     6 (fixed)
  2472                           ;	Chosen strategy is simple_byte
  2473  0D91  0846               	movf	??_MEF_Actualizacion^(0+128),w
  2474  0D92  3A00               	xorlw	0	; case 0
  2475  0D93  1903               	skipnz
  2476  0D94  2D25               	goto	l4541
  2477  0D95  3A01               	xorlw	1	; case 1
  2478  0D96  1903               	skipnz
  2479  0D97  2D2E               	goto	l4547
  2480  0D98  3A03               	xorlw	3	; case 2
  2481  0D99  1903               	skipnz
  2482  0D9A  2D52               	goto	l4569
  2483  0D9B  3A01               	xorlw	1	; case 3
  2484  0D9C  1903               	skipnz
  2485  0D9D  2D63               	goto	l4577
  2486  0D9E  3A07               	xorlw	7	; case 4
  2487  0D9F  1903               	skipnz
  2488  0DA0  2D74               	goto	l4585
  2489  0DA1  2DA2               	goto	l217
  2490  0DA2                     l217:
  2491  0DA2  0008               	return
  2492  0DA3                     __end_of_MEF_Actualizacion:
  2493                           
  2494                           	psect	text5
  2495  08B1                     __ptext5:	
  2496 ;; *************** function _Select_Modo *****************
  2497 ;; Defined at:
  2498 ;;		line 12 in file "Menu_Modo.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;		None
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      void 
  2505 ;; Registers used:
  2506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2512 ;;      Params:         0       0       0       0       0
  2513 ;;      Locals:         0       0       0       0       0
  2514 ;;      Temps:          0       0       0       0       0
  2515 ;;      Totals:         0       0       0       0       0
  2516 ;;Total ram usage:        0 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    5
  2519 ;; This function calls:
  2520 ;;		_Antirrebote
  2521 ;;		_Pant_Menu
  2522 ;;		_Pant_Selector
  2523 ;; This function is called by:
  2524 ;;		_MEF_Actualizacion
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           
  2529                           ;psect for function _Select_Modo
  2530  08B1                     _Select_Modo:
  2531                           
  2532                           ;incstack = 0
  2533                           ; Regs used in _Select_Modo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2534  08B1  0064               	clrwdt	;# 
  2535                           
  2536                           ;Menu_Modo.c: 16:     if(Mostrar) Pant_Menu(),Mostrar=0;
  2537  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  2538  08B3  1303               	bcf	3,6	;RP1=0, select bank0
  2539  08B4  0867               	movf	_Mostrar,w
  2540  08B5  1903               	btfsc	3,2
  2541  08B6  28BF               	goto	l4389
  2542  08B7  120A  158A  222F  120A  158A  	fcall	_Pant_Menu
  2543  08BC  1283               	bcf	3,5	;RP0=0, select bank0
  2544  08BD  1303               	bcf	3,6	;RP1=0, select bank0
  2545  08BE  01E7               	clrf	_Mostrar
  2546  08BF                     l4389:
  2547                           
  2548                           ;Menu_Modo.c: 18:     if(PORTBbits.RB3 || Modo==0)
  2549  08BF  1986               	btfsc	6,3	;volatile
  2550  08C0  28C4               	goto	l4393
  2551  08C1  086B               	movf	_Modo,w
  2552  08C2  1D03               	btfss	3,2
  2553  08C3  0008               	return
  2554  08C4                     l4393:
  2555                           
  2556                           ;Menu_Modo.c: 19:     {;Menu_Modo.c: 20:         Modo+=1;
  2557  08C4  3001               	movlw	1
  2558  08C5  00FF               	movwf	127
  2559  08C6  087F               	movf	127,w
  2560  08C7  07EB               	addwf	_Modo,f
  2561                           
  2562                           ;Menu_Modo.c: 21:         if(Modo>=5||Modo<1) Modo=1;
  2563  08C8  3005               	movlw	5
  2564  08C9  026B               	subwf	_Modo,w
  2565  08CA  1803               	skipnc
  2566  08CB  28CF               	goto	l281
  2567  08CC  086B               	movf	_Modo,w
  2568  08CD  1D03               	btfss	3,2
  2569  08CE  28D1               	goto	l4399
  2570  08CF                     l281:
  2571  08CF  01EB               	clrf	_Modo
  2572  08D0  0AEB               	incf	_Modo,f
  2573  08D1                     l4399:
  2574                           
  2575                           ;Menu_Modo.c: 22:         Pant_Selector(),Antirrebote();
  2576  08D1  120A  158A  26B7  120A  158A  	fcall	_Pant_Selector
  2577  08D6  160A  118A  2719   	fcall	_Antirrebote
  2578  08D9  0008               	return
  2579  08DA                     __end_of_Select_Modo:
  2580                           
  2581                           	psect	text6
  2582  0EB7                     __ptext6:	
  2583 ;; *************** function _Pant_Selector *****************
  2584 ;; Defined at:
  2585 ;;		line 44 in file "Display_Lcd.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2599 ;;      Params:         0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    4
  2606 ;; This function calls:
  2607 ;;		_LCD_array
  2608 ;; This function is called by:
  2609 ;;		_Select_Modo
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           
  2614                           ;psect for function _Pant_Selector
  2615  0EB7                     _Pant_Selector:
  2616                           
  2617                           ;Display_Lcd.c: 46:     if(Modo == 1) LCD_array(4,1," "),LCD_array(1,1,">");
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _Pant_Selector: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2621  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  2623  0EB9  036B               	decf	_Modo,w
  2624  0EBA  1D03               	btfss	3,2
  2625  0EBB  2EDF               	goto	l4327
  2626  0EBC  3004               	movlw	4
  2627  0EBD  00A0               	movwf	LCD_array@x
  2628  0EBE  3000               	movlw	0
  2629  0EBF  00A1               	movwf	LCD_array@x+1
  2630  0EC0  3001               	movlw	1
  2631  0EC1  00A2               	movwf	LCD_array@y
  2632  0EC2  3000               	movlw	0
  2633  0EC3  00A3               	movwf	LCD_array@y+1
  2634  0EC4  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2635  0EC5  00A4               	movwf	LCD_array@date
  2636  0EC6  3080               	movlw	128
  2637  0EC7  00A5               	movwf	LCD_array@date+1
  2638  0EC8  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2639  0ECD  3001               	movlw	1
  2640  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  2641  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  2642  0ED0  00A0               	movwf	LCD_array@x
  2643  0ED1  3000               	movlw	0
  2644  0ED2  00A1               	movwf	LCD_array@x+1
  2645  0ED3  3001               	movlw	1
  2646  0ED4  00A2               	movwf	LCD_array@y
  2647  0ED5  3000               	movlw	0
  2648  0ED6  00A3               	movwf	LCD_array@y+1
  2649  0ED7  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2650  0ED8  00A4               	movwf	LCD_array@date
  2651  0ED9  3080               	movlw	128
  2652  0EDA  00A5               	movwf	LCD_array@date+1
  2653  0EDB  120A  158A  22DC   	fcall	_LCD_array
  2654  0EDE  0008               	return
  2655  0EDF                     l4327:
  2656  0EDF  3002               	movlw	2
  2657  0EE0  066B               	xorwf	_Modo,w
  2658  0EE1  1D03               	btfss	3,2
  2659  0EE2  2F06               	goto	l4331
  2660  0EE3  3001               	movlw	1
  2661  0EE4  00A0               	movwf	LCD_array@x
  2662  0EE5  3000               	movlw	0
  2663  0EE6  00A1               	movwf	LCD_array@x+1
  2664  0EE7  3001               	movlw	1
  2665  0EE8  00A2               	movwf	LCD_array@y
  2666  0EE9  3000               	movlw	0
  2667  0EEA  00A3               	movwf	LCD_array@y+1
  2668  0EEB  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2669  0EEC  00A4               	movwf	LCD_array@date
  2670  0EED  3080               	movlw	128
  2671  0EEE  00A5               	movwf	LCD_array@date+1
  2672  0EEF  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2673  0EF4  3002               	movlw	2
  2674  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0EF7  00A0               	movwf	LCD_array@x
  2677  0EF8  3000               	movlw	0
  2678  0EF9  00A1               	movwf	LCD_array@x+1
  2679  0EFA  3001               	movlw	1
  2680  0EFB  00A2               	movwf	LCD_array@y
  2681  0EFC  3000               	movlw	0
  2682  0EFD  00A3               	movwf	LCD_array@y+1
  2683  0EFE  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2684  0EFF  00A4               	movwf	LCD_array@date
  2685  0F00  3080               	movlw	128
  2686  0F01  00A5               	movwf	LCD_array@date+1
  2687  0F02  120A  158A  22DC   	fcall	_LCD_array
  2688  0F05  0008               	return
  2689  0F06                     l4331:
  2690  0F06  3003               	movlw	3
  2691  0F07  066B               	xorwf	_Modo,w
  2692  0F08  1D03               	btfss	3,2
  2693  0F09  2F2D               	goto	l4335
  2694  0F0A  3002               	movlw	2
  2695  0F0B  00A0               	movwf	LCD_array@x
  2696  0F0C  3000               	movlw	0
  2697  0F0D  00A1               	movwf	LCD_array@x+1
  2698  0F0E  3001               	movlw	1
  2699  0F0F  00A2               	movwf	LCD_array@y
  2700  0F10  3000               	movlw	0
  2701  0F11  00A3               	movwf	LCD_array@y+1
  2702  0F12  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2703  0F13  00A4               	movwf	LCD_array@date
  2704  0F14  3080               	movlw	128
  2705  0F15  00A5               	movwf	LCD_array@date+1
  2706  0F16  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2707  0F1B  3003               	movlw	3
  2708  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0F1E  00A0               	movwf	LCD_array@x
  2711  0F1F  3000               	movlw	0
  2712  0F20  00A1               	movwf	LCD_array@x+1
  2713  0F21  3001               	movlw	1
  2714  0F22  00A2               	movwf	LCD_array@y
  2715  0F23  3000               	movlw	0
  2716  0F24  00A3               	movwf	LCD_array@y+1
  2717  0F25  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2718  0F26  00A4               	movwf	LCD_array@date
  2719  0F27  3080               	movlw	128
  2720  0F28  00A5               	movwf	LCD_array@date+1
  2721  0F29  120A  158A  22DC   	fcall	_LCD_array
  2722  0F2C  0008               	return
  2723  0F2D                     l4335:
  2724  0F2D  3004               	movlw	4
  2725  0F2E  066B               	xorwf	_Modo,w
  2726  0F2F  1D03               	btfss	3,2
  2727  0F30  0008               	return
  2728  0F31  3003               	movlw	3
  2729  0F32  00A0               	movwf	LCD_array@x
  2730  0F33  3000               	movlw	0
  2731  0F34  00A1               	movwf	LCD_array@x+1
  2732  0F35  3001               	movlw	1
  2733  0F36  00A2               	movwf	LCD_array@y
  2734  0F37  3000               	movlw	0
  2735  0F38  00A3               	movwf	LCD_array@y+1
  2736  0F39  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2737  0F3A  00A4               	movwf	LCD_array@date
  2738  0F3B  3080               	movlw	128
  2739  0F3C  00A5               	movwf	LCD_array@date+1
  2740  0F3D  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2741  0F42  3004               	movlw	4
  2742  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  2743  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  2744  0F45  00A0               	movwf	LCD_array@x
  2745  0F46  3000               	movlw	0
  2746  0F47  00A1               	movwf	LCD_array@x+1
  2747  0F48  3001               	movlw	1
  2748  0F49  00A2               	movwf	LCD_array@y
  2749  0F4A  3000               	movlw	0
  2750  0F4B  00A3               	movwf	LCD_array@y+1
  2751  0F4C  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2752  0F4D  00A4               	movwf	LCD_array@date
  2753  0F4E  3080               	movlw	128
  2754  0F4F  00A5               	movwf	LCD_array@date+1
  2755  0F50  120A  158A  22DC   	fcall	_LCD_array
  2756  0F53  0008               	return
  2757  0F54                     __end_of_Pant_Selector:
  2758                           
  2759                           	psect	text7
  2760  0A2F                     __ptext7:	
  2761 ;; *************** function _Pant_Menu *****************
  2762 ;; Defined at:
  2763 ;;		line 54 in file "Display_Lcd.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2777 ;;      Params:         0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0
  2779 ;;      Temps:          0       0       0       0       0
  2780 ;;      Totals:         0       0       0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    4
  2784 ;; This function calls:
  2785 ;;		_LCD_array
  2786 ;; This function is called by:
  2787 ;;		_Select_Modo
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _Pant_Menu
  2793  0A2F                     _Pant_Menu:
  2794                           
  2795                           ;Display_Lcd.c: 56:     LCD_array(1,3,"PULVERIZACION");
  2796                           
  2797                           ;incstack = 0
  2798                           ; Regs used in _Pant_Menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2799  0A2F  3001               	movlw	1
  2800  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  2802  0A32  00A0               	movwf	LCD_array@x
  2803  0A33  3000               	movlw	0
  2804  0A34  00A1               	movwf	LCD_array@x+1
  2805  0A35  3003               	movlw	3
  2806  0A36  00A2               	movwf	LCD_array@y
  2807  0A37  3000               	movlw	0
  2808  0A38  00A3               	movwf	LCD_array@y+1
  2809  0A39  305C               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2810  0A3A  00A4               	movwf	LCD_array@date
  2811  0A3B  3080               	movlw	128
  2812  0A3C  00A5               	movwf	LCD_array@date+1
  2813  0A3D  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2814                           
  2815                           ;Display_Lcd.c: 57:     LCD_array(2,3,"FUGA");
  2816  0A42  3002               	movlw	2
  2817  0A43  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0A44  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0A45  00A0               	movwf	LCD_array@x
  2820  0A46  3000               	movlw	0
  2821  0A47  00A1               	movwf	LCD_array@x+1
  2822  0A48  3003               	movlw	3
  2823  0A49  00A2               	movwf	LCD_array@y
  2824  0A4A  3000               	movlw	0
  2825  0A4B  00A3               	movwf	LCD_array@y+1
  2826  0A4C  308F               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2827  0A4D  00A4               	movwf	LCD_array@date
  2828  0A4E  3080               	movlw	128
  2829  0A4F  00A5               	movwf	LCD_array@date+1
  2830  0A50  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2831                           
  2832                           ;Display_Lcd.c: 58:     LCD_array(3,3,"FLUJO");
  2833  0A55  3003               	movlw	3
  2834  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  2835  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  2836  0A58  00A0               	movwf	LCD_array@x
  2837  0A59  3000               	movlw	0
  2838  0A5A  00A1               	movwf	LCD_array@x+1
  2839  0A5B  3003               	movlw	3
  2840  0A5C  00A2               	movwf	LCD_array@y
  2841  0A5D  3000               	movlw	0
  2842  0A5E  00A3               	movwf	LCD_array@y+1
  2843  0A5F  307F               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2844  0A60  00A4               	movwf	LCD_array@date
  2845  0A61  3080               	movlw	128
  2846  0A62  00A5               	movwf	LCD_array@date+1
  2847  0A63  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2848                           
  2849                           ;Display_Lcd.c: 59:     LCD_array(4,3,"LIMP. ULTRASONIDO");
  2850  0A68  3004               	movlw	4
  2851  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  2852  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  2853  0A6B  00A0               	movwf	LCD_array@x
  2854  0A6C  3000               	movlw	0
  2855  0A6D  00A1               	movwf	LCD_array@x+1
  2856  0A6E  3003               	movlw	3
  2857  0A6F  00A2               	movwf	LCD_array@y
  2858  0A70  3000               	movlw	0
  2859  0A71  00A3               	movwf	LCD_array@y+1
  2860  0A72  304A               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2861  0A73  00A4               	movwf	LCD_array@date
  2862  0A74  3080               	movlw	128
  2863  0A75  00A5               	movwf	LCD_array@date+1
  2864  0A76  120A  158A  22DC   	fcall	_LCD_array
  2865  0A79  0008               	return
  2866  0A7A                     __end_of_Pant_Menu:
  2867                           
  2868                           	psect	text8
  2869  0F54                     __ptext8:	
  2870 ;; *************** function _Pant_Inicio *****************
  2871 ;; Defined at:
  2872 ;;		line 8 in file "Display_Lcd.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;		None
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  caracter        8   18[BANK0 ] unsigned char [8]
  2877 ;;  caracter1       8   10[BANK0 ] unsigned char [8]
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      void 
  2880 ;; Registers used:
  2881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2887 ;;      Params:         0       0       0       0       0
  2888 ;;      Locals:         0      16       0       0       0
  2889 ;;      Temps:          0       4       0       0       0
  2890 ;;      Totals:         0      20       0       0       0
  2891 ;;Total ram usage:       20 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    4
  2894 ;; This function calls:
  2895 ;;		_LCD_array
  2896 ;;		_LCD_character
  2897 ;;		_LCD_command
  2898 ;; This function is called by:
  2899 ;;		_MEF_Actualizacion
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _Pant_Inicio
  2905  0F54                     _Pant_Inicio:
  2906                           
  2907                           ;Display_Lcd.c: 11:     char caracter1[8] =
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _Pant_Inicio: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2911  0F54  302A               	movlw	Pant_Inicio@caracter1& (0+255)
  2912  0F55  0084               	movwf	4
  2913  0F56  30BD               	movlw	low Pant_Inicio@F1323
  2914  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  2915  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  2916  0F59  00A6               	movwf	??_Pant_Inicio
  2917  0F5A  0804               	movf	4,w
  2918  0F5B  00A7               	movwf	??_Pant_Inicio+1
  2919  0F5C  3008               	movlw	8
  2920  0F5D  00A8               	movwf	??_Pant_Inicio+2
  2921  0F5E                     u4700:
  2922  0F5E  0826               	movf	??_Pant_Inicio,w
  2923  0F5F  0084               	movwf	4
  2924  0F60  1383               	bcf	3,7	;select IRP bank1
  2925  0F61  0800               	movf	0,w
  2926  0F62  00A9               	movwf	??_Pant_Inicio+3
  2927  0F63  0AA6               	incf	??_Pant_Inicio,f
  2928  0F64  0827               	movf	??_Pant_Inicio+1,w
  2929  0F65  0084               	movwf	4
  2930  0F66  0829               	movf	??_Pant_Inicio+3,w
  2931  0F67  0080               	movwf	0
  2932  0F68  0AA7               	incf	??_Pant_Inicio+1,f
  2933  0F69  0BA8               	decfsz	??_Pant_Inicio+2,f
  2934  0F6A  2F5E               	goto	u4700
  2935                           
  2936                           ;Display_Lcd.c: 22:     LCD_character(0x01,caracter1);
  2937  0F6B  302A               	movlw	(low (Pant_Inicio@caracter1| 0))& (0+255)
  2938  0F6C  00FF               	movwf	127
  2939  0F6D  087F               	movf	127,w
  2940  0F6E  00F6               	movwf	LCD_character@caracter
  2941  0F6F  3001               	movlw	1
  2942  0F70  160A  118A  276C  120A  158A  	fcall	_LCD_character
  2943                           
  2944                           ;Display_Lcd.c: 25:     char caracter[8] = {0,0,0,0,0,0,0,0};
  2945  0F75  3032               	movlw	Pant_Inicio@caracter& (0+255)
  2946  0F76  0084               	movwf	4
  2947  0F77  3008               	movlw	8
  2948  0F78  00FF               	movwf	127
  2949  0F79                     u4710:
  2950  0F79  1383               	bcf	3,7	;select IRP bank0
  2951  0F7A  0180               	clrf	0
  2952  0F7B  0A84               	incf	4,f
  2953  0F7C  0BFF               	decfsz	127,f
  2954  0F7D  2F79               	goto	u4710
  2955                           
  2956                           ;Display_Lcd.c: 26:     LCD_character(0x00,caracter);
  2957  0F7E  3032               	movlw	(low (Pant_Inicio@caracter| 0))& (0+255)
  2958  0F7F  00FF               	movwf	127
  2959  0F80  087F               	movf	127,w
  2960  0F81  00F6               	movwf	LCD_character@caracter
  2961  0F82  3000               	movlw	0
  2962  0F83  160A  118A  276C  120A  158A  	fcall	_LCD_character
  2963                           
  2964                           ;Display_Lcd.c: 29:     LCD_command(0x01);
  2965  0F88  3001               	movlw	1
  2966  0F89  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  2967                           
  2968                           ;Display_Lcd.c: 30:     LCD_array(1,1,"====================");
  2969  0F8E  3001               	movlw	1
  2970  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  2971  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  2972  0F91  00A0               	movwf	LCD_array@x
  2973  0F92  3000               	movlw	0
  2974  0F93  00A1               	movwf	LCD_array@x+1
  2975  0F94  3001               	movlw	1
  2976  0F95  00A2               	movwf	LCD_array@y
  2977  0F96  3000               	movlw	0
  2978  0F97  00A3               	movwf	LCD_array@y+1
  2979  0F98  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2980  0F99  00A4               	movwf	LCD_array@date
  2981  0F9A  3080               	movlw	128
  2982  0F9B  00A5               	movwf	LCD_array@date+1
  2983  0F9C  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  2984                           
  2985                           ;Display_Lcd.c: 31:     LCD_array(2,1,"PROBADOR AUTOMOTRIZ ");
  2986  0FA1  3002               	movlw	2
  2987  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2988  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2989  0FA4  00A0               	movwf	LCD_array@x
  2990  0FA5  3000               	movlw	0
  2991  0FA6  00A1               	movwf	LCD_array@x+1
  2992  0FA7  3001               	movlw	1
  2993  0FA8  00A2               	movwf	LCD_array@y
  2994  0FA9  3000               	movlw	0
  2995  0FAA  00A3               	movwf	LCD_array@y+1
  2996  0FAB  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2997  0FAC  00A4               	movwf	LCD_array@date
  2998  0FAD  3080               	movlw	128
  2999  0FAE  00A5               	movwf	LCD_array@date+1
  3000  0FAF  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  3001                           
  3002                           ;Display_Lcd.c: 32:     LCD_array(3,1,"   DE INYECTORES    ");
  3003  0FB4  3003               	movlw	3
  3004  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  3005  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  3006  0FB7  00A0               	movwf	LCD_array@x
  3007  0FB8  3000               	movlw	0
  3008  0FB9  00A1               	movwf	LCD_array@x+1
  3009  0FBA  3001               	movlw	1
  3010  0FBB  00A2               	movwf	LCD_array@y
  3011  0FBC  3000               	movlw	0
  3012  0FBD  00A3               	movwf	LCD_array@y+1
  3013  0FBE  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3014  0FBF  00A4               	movwf	LCD_array@date
  3015  0FC0  3080               	movlw	128
  3016  0FC1  00A5               	movwf	LCD_array@date+1
  3017  0FC2  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  3018                           
  3019                           ;Display_Lcd.c: 33:     LCD_array(4,1,"====================");
  3020  0FC7  3004               	movlw	4
  3021  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  3022  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  3023  0FCA  00A0               	movwf	LCD_array@x
  3024  0FCB  3000               	movlw	0
  3025  0FCC  00A1               	movwf	LCD_array@x+1
  3026  0FCD  3001               	movlw	1
  3027  0FCE  00A2               	movwf	LCD_array@y
  3028  0FCF  3000               	movlw	0
  3029  0FD0  00A3               	movwf	LCD_array@y+1
  3030  0FD1  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3031  0FD2  00A4               	movwf	LCD_array@date
  3032  0FD3  3080               	movlw	128
  3033  0FD4  00A5               	movwf	LCD_array@date+1
  3034  0FD5  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  3035                           
  3036                           ;Display_Lcd.c: 34:     _delay((unsigned long)((2000)*(20000000/4000.0)));
  3037  0FDA  3033               	movlw	51
  3038  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  3039  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  3040  0FDD  00A8               	movwf	??_Pant_Inicio+2
  3041  0FDE  30BB               	movlw	187
  3042  0FDF  00A7               	movwf	??_Pant_Inicio+1
  3043  0FE0  30DF               	movlw	223
  3044  0FE1  00A6               	movwf	??_Pant_Inicio
  3045  0FE2                     u5317:
  3046  0FE2  0BA6               	decfsz	??_Pant_Inicio,f
  3047  0FE3  2FE2               	goto	u5317
  3048  0FE4  0BA7               	decfsz	??_Pant_Inicio+1,f
  3049  0FE5  2FE2               	goto	u5317
  3050  0FE6  0BA8               	decfsz	??_Pant_Inicio+2,f
  3051  0FE7  2FE2               	goto	u5317
  3052                           
  3053                           ;Display_Lcd.c: 37:     LCD_command(0x01);
  3054  0FE8  3001               	movlw	1
  3055  0FE9  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  3056                           
  3057                           ;Display_Lcd.c: 39:     LCD_array(1,1,">");
  3058  0FEE  3001               	movlw	1
  3059  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  3060  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  3061  0FF1  00A0               	movwf	LCD_array@x
  3062  0FF2  3000               	movlw	0
  3063  0FF3  00A1               	movwf	LCD_array@x+1
  3064  0FF4  3001               	movlw	1
  3065  0FF5  00A2               	movwf	LCD_array@y
  3066  0FF6  3000               	movlw	0
  3067  0FF7  00A3               	movwf	LCD_array@y+1
  3068  0FF8  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  3069  0FF9  00A4               	movwf	LCD_array@date
  3070  0FFA  3080               	movlw	128
  3071  0FFB  00A5               	movwf	LCD_array@date+1
  3072  0FFC  120A  158A  22DC   	fcall	_LCD_array
  3073  0FFF  0008               	return
  3074  1000                     __end_of_Pant_Inicio:
  3075                           
  3076                           	psect	text9
  3077  176C                     __ptext9:	
  3078 ;; *************** function _LCD_character *****************
  3079 ;; Defined at:
  3080 ;;		line 197 in file "Lcd.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  adress          1    wreg     unsigned char 
  3083 ;;  caracter        1    6[COMMON] PTR unsigned char 
  3084 ;;		 -> Pant_Inicio@caracter(8), Pant_Inicio@caracter1(8), 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  adress          1    0[BANK0 ] unsigned char 
  3087 ;;  i               1    1[BANK0 ] unsigned char 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         1       0       0       0       0
  3098 ;;      Locals:         0       2       0       0       0
  3099 ;;      Temps:          1       0       0       0       0
  3100 ;;      Totals:         2       2       0       0       0
  3101 ;;Total ram usage:        4 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    3
  3104 ;; This function calls:
  3105 ;;		_LCD_command
  3106 ;;		_LCD_date
  3107 ;; This function is called by:
  3108 ;;		_Pant_Inicio
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           
  3113                           ;psect for function _LCD_character
  3114  176C                     _LCD_character:
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in _LCD_character: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3118                           ;LCD_character@adress stored from wreg
  3119  176C  1283               	bcf	3,5	;RP0=0, select bank0
  3120  176D  1303               	bcf	3,6	;RP1=0, select bank0
  3121  176E  00A0               	movwf	LCD_character@adress
  3122                           
  3123                           ;Lcd.c: 197: void LCD_character(unsigned char adress,char caracter[]);Lcd.c: 198: {;Lcd.
      +                          c: 199:     LCD_command(0x40 + (adress * 8));
  3124  176F  0820               	movf	LCD_character@adress,w
  3125  1770  00F7               	movwf	??_LCD_character
  3126  1771  3002               	movlw	2
  3127  1772                     u4685:
  3128  1772  1003               	clrc
  3129  1773  0DF7               	rlf	??_LCD_character,f
  3130  1774  3EFF               	addlw	-1
  3131  1775  1D03               	skipz
  3132  1776  2F72               	goto	u4685
  3133  1777  1003               	clrc
  3134  1778  0D77               	rlf	??_LCD_character,w
  3135  1779  3E40               	addlw	64
  3136  177A  120A  118A  25C8  160A  118A  	fcall	_LCD_command
  3137                           
  3138                           ;Lcd.c: 200:     for(char i=0;i<8;i++)
  3139  177F  1283               	bcf	3,5	;RP0=0, select bank0
  3140  1780  1303               	bcf	3,6	;RP1=0, select bank0
  3141  1781  01A1               	clrf	LCD_character@i
  3142  1782                     l4349:
  3143                           
  3144                           ;Lcd.c: 201:     {;Lcd.c: 202:         LCD_date(caracter[i]);
  3145  1782  0821               	movf	LCD_character@i,w
  3146  1783  0776               	addwf	LCD_character@caracter,w
  3147  1784  00F7               	movwf	??_LCD_character
  3148  1785  0877               	movf	??_LCD_character,w
  3149  1786  0084               	movwf	4
  3150  1787  1383               	bcf	3,7	;select IRP bank0
  3151  1788  0800               	movf	0,w
  3152  1789  120A  118A  2682  160A  118A  	fcall	_LCD_date
  3153                           
  3154                           ;Lcd.c: 203:     }
  3155  178E  3001               	movlw	1
  3156  178F  00FF               	movwf	127
  3157  1790  087F               	movf	127,w
  3158  1791  1283               	bcf	3,5	;RP0=0, select bank0
  3159  1792  1303               	bcf	3,6	;RP1=0, select bank0
  3160  1793  07A1               	addwf	LCD_character@i,f
  3161  1794  3008               	movlw	8
  3162  1795  0221               	subwf	LCD_character@i,w
  3163  1796  1803               	btfsc	3,0
  3164  1797  0008               	return
  3165  1798  2F82               	goto	l4349
  3166  1799                     __end_of_LCD_character:
  3167                           
  3168                           	psect	text10
  3169  0334                     __ptext10:	
  3170 ;; *************** function _MEF_Subest_Actualizacion *****************
  3171 ;; Defined at:
  3172 ;;		line 91 in file "MEF.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  i               1    0[BANK1 ] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3186 ;;      Params:         0       0       0       0       0
  3187 ;;      Locals:         0       0       1       0       0
  3188 ;;      Temps:          0       3       0       0       0
  3189 ;;      Totals:         0       3       1       0       0
  3190 ;;Total ram usage:        4 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    6
  3193 ;; This function calls:
  3194 ;;		_Antirrebote
  3195 ;;		_Lec_Adc_Modo_Flujo
  3196 ;;		_Lec_Adc_Modo_Fuga
  3197 ;;		_Lec_Adc_Modo_Pulv
  3198 ;;		_Pant_Modos
  3199 ;;		_Pant_Temporizador
  3200 ;;		_Pant_Val_Act
  3201 ;;		_Salida_Modo_Flujo
  3202 ;;		_Salida_Modo_Fuga
  3203 ;;		_Salida_Modo_Pulv
  3204 ;; This function is called by:
  3205 ;;		_MEF_Actualizacion
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           
  3210                           ;psect for function _MEF_Subest_Actualizacion
  3211  0334                     _MEF_Subest_Actualizacion:
  3212                           
  3213                           ;MEF.c: 93:     switch(Subestado_Actual)
  3214                           
  3215                           ;incstack = 0
  3216                           ; Regs used in _MEF_Subest_Actualizacion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  3217  0334  2C15               	goto	l4495
  3218  0335                     l4407:
  3219                           
  3220                           ;MEF.c: 96:         {;MEF.c: 97:             Pant_Modos();
  3221  0335  120A  158A  262B   	fcall	_Pant_Modos
  3222                           
  3223                           ;MEF.c: 99:             Subestado_Actual = SUBEST_DISPLAY;
  3224  0338  1683               	bsf	3,5	;RP0=1, select bank1
  3225  0339  1303               	bcf	3,6	;RP1=0, select bank1
  3226  033A  01B8               	clrf	_Subestado_Actual^(0+128)
  3227  033B  0AB8               	incf	_Subestado_Actual^(0+128),f
  3228                           
  3229                           ;MEF.c: 100:         break;
  3230  033C  0008               	return
  3231  033D                     l4411:
  3232                           
  3233                           ;MEF.c: 103:         {;MEF.c: 104:             Pant_Val_Act();
  3234  033D  120A  118A  2506   	fcall	_Pant_Val_Act
  3235                           
  3236                           ;MEF.c: 106:             Subestado_Actual = SUBEST_ADC;
  3237  0340  3002               	movlw	2
  3238  0341  00FF               	movwf	127
  3239  0342  087F               	movf	127,w
  3240  0343  1683               	bsf	3,5	;RP0=1, select bank1
  3241  0344  1303               	bcf	3,6	;RP1=0, select bank1
  3242  0345  00B8               	movwf	_Subestado_Actual^(0+128)
  3243                           
  3244                           ;MEF.c: 107:         break;
  3245  0346  0008               	return
  3246  0347                     l4415:
  3247                           
  3248                           ;MEF.c: 110:         {;MEF.c: 111:             if(Estado_Actual==ESTADO_MODO_PULV) Lec_A
      +                          dc_Modo_Pulv();
  3249  0347  3002               	movlw	2
  3250  0348  0664               	xorwf	_Estado_Actual,w
  3251  0349  1D03               	btfss	3,2
  3252  034A  2B51               	goto	l4419
  3253  034B  160A  118A  2667  120A  118A  	fcall	_Lec_Adc_Modo_Pulv
  3254  0350  2B64               	goto	l4427
  3255  0351                     l4419:
  3256  0351  3003               	movlw	3
  3257  0352  0664               	xorwf	_Estado_Actual,w
  3258  0353  1D03               	btfss	3,2
  3259  0354  2B5B               	goto	l4423
  3260  0355  160A  118A  264D  120A  118A  	fcall	_Lec_Adc_Modo_Fuga
  3261  035A  2B64               	goto	l4427
  3262  035B                     l4423:
  3263  035B  3004               	movlw	4
  3264  035C  0664               	xorwf	_Estado_Actual,w
  3265  035D  1D03               	btfss	3,2
  3266  035E  2B64               	goto	l4427
  3267  035F  160A  118A  2644  120A  118A  	fcall	_Lec_Adc_Modo_Flujo
  3268  0364                     l4427:
  3269                           
  3270                           ;MEF.c: 115:             if(Act_Variables) Subestado_Actual = SUBEST_DISPLAY,Act_Variabl
      +                          es=0;
  3271  0364  1683               	bsf	3,5	;RP0=1, select bank1
  3272  0365  1303               	bcf	3,6	;RP1=0, select bank1
  3273  0366  083B               	movf	_Act_Variables^(0+128),w
  3274  0367  1903               	btfsc	3,2
  3275  0368  2B6C               	goto	l4433
  3276  0369  01B8               	clrf	_Subestado_Actual^(0+128)
  3277  036A  0AB8               	incf	_Subestado_Actual^(0+128),f
  3278  036B  01BB               	clrf	_Act_Variables^(0+128)
  3279  036C                     l4433:
  3280                           
  3281                           ;MEF.c: 116:             if(PORTBbits.RB0) Subestado_Actual = SUBEST_SALIDA,Antirrebote(
      +                          ),Output=!Output;
  3282  036C  1283               	bcf	3,5	;RP0=0, select bank0
  3283  036D  1303               	bcf	3,6	;RP1=0, select bank0
  3284  036E  1C06               	btfss	6,0	;volatile
  3285  036F  0008               	return
  3286  0370  3003               	movlw	3
  3287  0371  00FF               	movwf	127
  3288  0372  087F               	movf	127,w
  3289  0373  1683               	bsf	3,5	;RP0=1, select bank1
  3290  0374  1303               	bcf	3,6	;RP1=0, select bank1
  3291  0375  00B8               	movwf	_Subestado_Actual^(0+128)
  3292  0376  160A  118A  2719  120A  118A  	fcall	_Antirrebote
  3293  037B  1283               	bcf	3,5	;RP0=0, select bank0
  3294  037C  1303               	bcf	3,6	;RP1=0, select bank0
  3295  037D  0866               	movf	_Output,w
  3296  037E  1D03               	btfss	3,2
  3297  037F  2B82               	goto	u4820
  3298  0380  3001               	movlw	1
  3299  0381  2B83               	goto	u4830
  3300  0382                     u4820:
  3301  0382  3000               	movlw	0
  3302  0383                     u4830:
  3303  0383  00FF               	movwf	127
  3304  0384  087F               	movf	127,w
  3305  0385  00E6               	movwf	_Output
  3306  0386  0008               	return
  3307  0387                     l4441:
  3308                           
  3309                           ;MEF.c: 120:         {;MEF.c: 121:             if(Estado_Actual==ESTADO_MODO_PULV) Salid
      +                          a_Modo_Pulv();
  3310  0387  3002               	movlw	2
  3311  0388  0664               	xorwf	_Estado_Actual,w
  3312  0389  1D03               	btfss	3,2
  3313  038A  2B91               	goto	l4445
  3314  038B  120A  118A  2003  120A  118A  	fcall	_Salida_Modo_Pulv
  3315  0390  2BA4               	goto	l4453
  3316  0391                     l4445:
  3317  0391  3003               	movlw	3
  3318  0392  0664               	xorwf	_Estado_Actual,w
  3319  0393  1D03               	btfss	3,2
  3320  0394  2B9B               	goto	l4449
  3321  0395  160A  118A  2622  120A  118A  	fcall	_Salida_Modo_Fuga
  3322  039A  2BA4               	goto	l4453
  3323  039B                     l4449:
  3324  039B  3004               	movlw	4
  3325  039C  0664               	xorwf	_Estado_Actual,w
  3326  039D  1D03               	btfss	3,2
  3327  039E  2BA4               	goto	l4453
  3328  039F  160A  118A  2625  120A  118A  	fcall	_Salida_Modo_Flujo
  3329  03A4                     l4453:
  3330                           
  3331                           ;MEF.c: 125:             if(PORTBbits.RB2) Subestado_Actual = SUBEST_ADC,Antirrebote();
  3332  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  3333  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  3334  03A6  1D06               	btfss	6,2	;volatile
  3335  03A7  2BB3               	goto	l4459
  3336  03A8  3002               	movlw	2
  3337  03A9  00FF               	movwf	127
  3338  03AA  087F               	movf	127,w
  3339  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  3340  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  3341  03AD  00B8               	movwf	_Subestado_Actual^(0+128)
  3342  03AE  160A  118A  2719  120A  118A  	fcall	_Antirrebote
  3343  03B3                     l4459:
  3344                           
  3345                           ;MEF.c: 126:             if(Temporizador) Subestado_Actual = SUBEST_TIEMPO;
  3346  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  3347  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  3348  03B5  0839               	movf	_Temporizador^(0+128),w
  3349  03B6  1903               	btfsc	3,2
  3350  03B7  0008               	return
  3351  03B8  3004               	movlw	4
  3352  03B9  00FF               	movwf	127
  3353  03BA  087F               	movf	127,w
  3354  03BB  00B8               	movwf	_Subestado_Actual^(0+128)
  3355  03BC  0008               	return
  3356  03BD                     l4463:
  3357                           
  3358                           ;MEF.c: 130:         {;MEF.c: 131:             Pant_Temporizador();
  3359  03BD  120A  158A  21E4  120A  118A  	fcall	_Pant_Temporizador
  3360                           
  3361                           ;MEF.c: 132:             if(!Min && !Seg)
  3362  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  3363  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  3364  03C4  0869               	movf	_Min,w
  3365  03C5  1D03               	btfss	3,2
  3366  03C6  2C02               	goto	l4485
  3367  03C7  0868               	movf	_Seg,w
  3368  03C8  1D03               	btfss	3,2
  3369  03C9  2C02               	goto	l4485
  3370                           
  3371                           ;MEF.c: 133:             {;MEF.c: 134:                 Output = !Output;
  3372  03CA  0866               	movf	_Output,w
  3373  03CB  1D03               	btfss	3,2
  3374  03CC  2BCF               	goto	u4910
  3375  03CD  3001               	movlw	1
  3376  03CE  2BD0               	goto	u4920
  3377  03CF                     u4910:
  3378  03CF  3000               	movlw	0
  3379  03D0                     u4920:
  3380  03D0  00FF               	movwf	127
  3381  03D1  087F               	movf	127,w
  3382  03D2  00E6               	movwf	_Output
  3383                           
  3384                           ;MEF.c: 135:                 for(char i=0;i<3;i++)
  3385  03D3  1683               	bsf	3,5	;RP0=1, select bank1
  3386  03D4  1303               	bcf	3,6	;RP1=0, select bank1
  3387  03D5  01C5               	clrf	MEF_Subest_Actualizacion@i^(0+128)
  3388  03D6                     l242:
  3389                           
  3390                           ;MEF.c: 136:                 {;MEF.c: 137:                     PORTAbits.RA5 = 1;
  3391  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  3392  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  3393  03D8  1685               	bsf	5,5	;volatile
  3394                           
  3395                           ;MEF.c: 138:                     _delay((unsigned long)((100)*(20000000/4000.0)));
  3396  03D9  3003               	movlw	3
  3397  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  3398  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  3399  03DC  00E3               	movwf	??_MEF_Subest_Actualizacion+2
  3400  03DD  308A               	movlw	138
  3401  03DE  00E2               	movwf	??_MEF_Subest_Actualizacion+1
  3402  03DF  3055               	movlw	85
  3403  03E0  00E1               	movwf	??_MEF_Subest_Actualizacion
  3404  03E1                     u5327:
  3405  03E1  0BE1               	decfsz	??_MEF_Subest_Actualizacion,f
  3406  03E2  2BE1               	goto	u5327
  3407  03E3  0BE2               	decfsz	??_MEF_Subest_Actualizacion+1,f
  3408  03E4  2BE1               	goto	u5327
  3409  03E5  0BE3               	decfsz	??_MEF_Subest_Actualizacion+2,f
  3410  03E6  2BE1               	goto	u5327
  3411                           
  3412                           ;MEF.c: 139:                     PORTAbits.RA5 = 0;
  3413  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  3414  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  3415  03E9  1285               	bcf	5,5	;volatile
  3416                           
  3417                           ;MEF.c: 140:                     _delay((unsigned long)((100)*(20000000/4000.0)));
  3418  03EA  3003               	movlw	3
  3419  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  3420  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  3421  03ED  00E3               	movwf	??_MEF_Subest_Actualizacion+2
  3422  03EE  308A               	movlw	138
  3423  03EF  00E2               	movwf	??_MEF_Subest_Actualizacion+1
  3424  03F0  3055               	movlw	85
  3425  03F1  00E1               	movwf	??_MEF_Subest_Actualizacion
  3426  03F2                     u5337:
  3427  03F2  0BE1               	decfsz	??_MEF_Subest_Actualizacion,f
  3428  03F3  2BF2               	goto	u5337
  3429  03F4  0BE2               	decfsz	??_MEF_Subest_Actualizacion+1,f
  3430  03F5  2BF2               	goto	u5337
  3431  03F6  0BE3               	decfsz	??_MEF_Subest_Actualizacion+2,f
  3432  03F7  2BF2               	goto	u5337
  3433                           
  3434                           ;MEF.c: 141:                 }
  3435  03F8  3001               	movlw	1
  3436  03F9  00FF               	movwf	127
  3437  03FA  087F               	movf	127,w
  3438  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  3439  03FC  1303               	bcf	3,6	;RP1=0, select bank1
  3440  03FD  07C5               	addwf	MEF_Subest_Actualizacion@i^(0+128),f
  3441  03FE  3003               	movlw	3
  3442  03FF  0245               	subwf	MEF_Subest_Actualizacion@i^(0+128),w
  3443  0400  1C03               	skipc
  3444  0401  2BD6               	goto	l242
  3445  0402                     l4485:
  3446                           
  3447                           ;MEF.c: 144:             if(Output) Subestado_Actual = SUBEST_SALIDA;
  3448  0402  1283               	bcf	3,5	;RP0=0, select bank0
  3449  0403  0866               	movf	_Output,w
  3450  0404  1903               	btfsc	3,2
  3451  0405  2C0D               	goto	l4489
  3452  0406  3003               	movlw	3
  3453  0407  00FF               	movwf	127
  3454  0408  087F               	movf	127,w
  3455  0409  1683               	bsf	3,5	;RP0=1, select bank1
  3456  040A  1303               	bcf	3,6	;RP1=0, select bank1
  3457  040B  00B8               	movwf	_Subestado_Actual^(0+128)
  3458  040C  0008               	return
  3459  040D                     l4489:
  3460  040D  1683               	bsf	3,5	;RP0=1, select bank1
  3461  040E  1303               	bcf	3,6	;RP1=0, select bank1
  3462  040F  01B8               	clrf	_Subestado_Actual^(0+128)
  3463  0410  1283               	bcf	3,5	;RP0=0, select bank0
  3464  0411  1303               	bcf	3,6	;RP1=0, select bank0
  3465  0412  01E5               	clrf	_Reset
  3466  0413  0AE5               	incf	_Reset,f
  3467  0414  0008               	return
  3468  0415                     l4495:
  3469  0415  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0416  1303               	bcf	3,6	;RP1=0, select bank1
  3471  0417  0838               	movf	_Subestado_Actual^(0+128),w
  3472  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3473  0419  1303               	bcf	3,6	;RP1=0, select bank0
  3474  041A  00E1               	movwf	??_MEF_Subest_Actualizacion
  3475  041B  01E2               	clrf	??_MEF_Subest_Actualizacion+1
  3476                           
  3477                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3478                           ; Switch size 1, requested type "simple"
  3479                           ; Number of cases is 1, Range of values is 0 to 0
  3480                           ; switch strategies available:
  3481                           ; Name         Instructions Cycles
  3482                           ; simple_byte            4     3 (average)
  3483                           ; direct_byte           11     8 (fixed)
  3484                           ; jumptable            260     6 (fixed)
  3485                           ;	Chosen strategy is simple_byte
  3486  041C  0862               	movf	??_MEF_Subest_Actualizacion+1,w
  3487  041D  3A00               	xorlw	0	; case 0
  3488  041E  1903               	skipnz
  3489  041F  2C21               	goto	l4869
  3490  0420  2C32               	goto	l246
  3491  0421                     l4869:
  3492                           
  3493                           ; Switch size 1, requested type "simple"
  3494                           ; Number of cases is 5, Range of values is 0 to 4
  3495                           ; switch strategies available:
  3496                           ; Name         Instructions Cycles
  3497                           ; simple_byte           16     9 (average)
  3498                           ; direct_byte           23     8 (fixed)
  3499                           ; jumptable            260     6 (fixed)
  3500                           ;	Chosen strategy is simple_byte
  3501  0421  0861               	movf	??_MEF_Subest_Actualizacion,w
  3502  0422  3A00               	xorlw	0	; case 0
  3503  0423  1903               	skipnz
  3504  0424  2B35               	goto	l4407
  3505  0425  3A01               	xorlw	1	; case 1
  3506  0426  1903               	skipnz
  3507  0427  2B3D               	goto	l4411
  3508  0428  3A03               	xorlw	3	; case 2
  3509  0429  1903               	skipnz
  3510  042A  2B47               	goto	l4415
  3511  042B  3A01               	xorlw	1	; case 3
  3512  042C  1903               	skipnz
  3513  042D  2B87               	goto	l4441
  3514  042E  3A07               	xorlw	7	; case 4
  3515  042F  1903               	skipnz
  3516  0430  2BBD               	goto	l4463
  3517  0431  2C32               	goto	l246
  3518  0432                     l246:
  3519  0432  0008               	return
  3520  0433                     __end_of_MEF_Subest_Actualizacion:
  3521                           
  3522                           	psect	text11
  3523  0003                     __ptext11:	
  3524 ;; *************** function _Salida_Modo_Pulv *****************
  3525 ;; Defined at:
  3526 ;;		line 21 in file "Modo_Pulverizacion.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		None
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3540 ;;      Params:         0       0       0       0       0
  3541 ;;      Locals:         0       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0
  3543 ;;      Totals:         0       0       0       0       0
  3544 ;;Total ram usage:        0 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    2
  3547 ;; This function calls:
  3548 ;;		Nothing
  3549 ;; This function is called by:
  3550 ;;		_MEF_Subest_Actualizacion
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           
  3555                           ;psect for function _Salida_Modo_Pulv
  3556  0003                     _Salida_Modo_Pulv:
  3557                           
  3558                           ;Modo_Pulverizacion.c: 25:     return;
  3559                           
  3560                           ;incstack = 0
  3561                           ; Regs used in _Salida_Modo_Pulv: []
  3562  0003  0008               	return
  3563  0004                     __end_of_Salida_Modo_Pulv:
  3564                           
  3565                           	psect	text12
  3566  1622                     __ptext12:	
  3567 ;; *************** function _Salida_Modo_Fuga *****************
  3568 ;; Defined at:
  3569 ;;		line 15 in file "Modo_Fuga.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;		None
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		None
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3583 ;;      Params:         0       0       0       0       0
  3584 ;;      Locals:         0       0       0       0       0
  3585 ;;      Temps:          0       0       0       0       0
  3586 ;;      Totals:         0       0       0       0       0
  3587 ;;Total ram usage:        0 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    2
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_MEF_Subest_Actualizacion
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           
  3598                           ;psect for function _Salida_Modo_Fuga
  3599  1622                     _Salida_Modo_Fuga:
  3600                           
  3601                           ;Modo_Fuga.c: 19:     return;
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _Salida_Modo_Fuga: []
  3605  1622  0008               	return
  3606  1623                     __end_of_Salida_Modo_Fuga:
  3607                           
  3608                           	psect	text13
  3609  1625                     __ptext13:	
  3610 ;; *************** function _Salida_Modo_Flujo *****************
  3611 ;; Defined at:
  3612 ;;		line 15 in file "Modo_Flujo.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      void 
  3619 ;; Registers used:
  3620 ;;		None
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3626 ;;      Params:         0       0       0       0       0
  3627 ;;      Locals:         0       0       0       0       0
  3628 ;;      Temps:          0       0       0       0       0
  3629 ;;      Totals:         0       0       0       0       0
  3630 ;;Total ram usage:        0 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    2
  3633 ;; This function calls:
  3634 ;;		Nothing
  3635 ;; This function is called by:
  3636 ;;		_MEF_Subest_Actualizacion
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _Salida_Modo_Flujo
  3642  1625                     _Salida_Modo_Flujo:
  3643                           
  3644                           ;Modo_Flujo.c: 17:     PORTBbits.RB4=1;
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _Salida_Modo_Flujo: []
  3648  1625  1283               	bcf	3,5	;RP0=0, select bank0
  3649  1626  1303               	bcf	3,6	;RP1=0, select bank0
  3650  1627  1606               	bsf	6,4	;volatile
  3651                           
  3652                           ;Modo_Flujo.c: 21:     return;
  3653  1628  0008               	return
  3654  1629                     __end_of_Salida_Modo_Flujo:
  3655                           
  3656                           	psect	text14
  3657  0506                     __ptext14:	
  3658 ;; *************** function _Pant_Val_Act *****************
  3659 ;; Defined at:
  3660 ;;		line 76 in file "Display_Lcd.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;  buffer         20   26[BANK0 ] unsigned char [20]
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3674 ;;      Params:         0       0       0       0       0
  3675 ;;      Locals:         0      20       0       0       0
  3676 ;;      Temps:          0       2       0       0       0
  3677 ;;      Totals:         0      22       0       0       0
  3678 ;;Total ram usage:       22 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    4
  3681 ;; This function calls:
  3682 ;;		_LCD_array
  3683 ;;		_sprintf
  3684 ;; This function is called by:
  3685 ;;		_MEF_Subest_Actualizacion
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           
  3690                           ;psect for function _Pant_Val_Act
  3691  0506                     _Pant_Val_Act:
  3692                           
  3693                           ;Display_Lcd.c: 78:     char buffer[20];;Display_Lcd.c: 80:     sprintf(buffer,"%05u",Rp
      +                          m);
  3694                           
  3695                           ;incstack = 0
  3696                           ; Regs used in _Pant_Val_Act: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3697  0506  3099               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  3698  0507  00FF               	movwf	127
  3699  0508  087F               	movf	127,w
  3700  0509  1283               	bcf	3,5	;RP0=0, select bank0
  3701  050A  1303               	bcf	3,6	;RP1=0, select bank0
  3702  050B  00A9               	movwf	sprintf@f
  3703  050C  1683               	bsf	3,5	;RP0=1, select bank1
  3704  050D  1303               	bcf	3,6	;RP1=0, select bank1
  3705  050E  082F               	movf	(_Rpm+1)^(0+128),w
  3706  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3707  0510  1303               	bcf	3,6	;RP1=0, select bank0
  3708  0511  00AB               	movwf	?_sprintf+2
  3709  0512  1683               	bsf	3,5	;RP0=1, select bank1
  3710  0513  1303               	bcf	3,6	;RP1=0, select bank1
  3711  0514  082E               	movf	_Rpm^(0+128),w
  3712  0515  1283               	bcf	3,5	;RP0=0, select bank0
  3713  0516  1303               	bcf	3,6	;RP1=0, select bank0
  3714  0517  00AA               	movwf	?_sprintf+1
  3715  0518  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3716  0519  120A  118A  204D  120A  118A  	fcall	_sprintf
  3717                           
  3718                           ;Display_Lcd.c: 81:     LCD_array(1,5,buffer);
  3719  051E  3001               	movlw	1
  3720  051F  1283               	bcf	3,5	;RP0=0, select bank0
  3721  0520  1303               	bcf	3,6	;RP1=0, select bank0
  3722  0521  00A0               	movwf	LCD_array@x
  3723  0522  3000               	movlw	0
  3724  0523  00A1               	movwf	LCD_array@x+1
  3725  0524  3005               	movlw	5
  3726  0525  00A2               	movwf	LCD_array@y
  3727  0526  3000               	movlw	0
  3728  0527  00A3               	movwf	LCD_array@y+1
  3729  0528  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3730  0529  00A4               	movwf	LCD_array@date
  3731  052A  3000               	movlw	0
  3732  052B  00A5               	movwf	LCD_array@date+1
  3733  052C  120A  158A  22DC  120A  118A  	fcall	_LCD_array
  3734                           
  3735                           ;Display_Lcd.c: 82:     sprintf(buffer,"%02d",Pwm);
  3736  0531  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3737  0532  00FF               	movwf	127
  3738  0533  087F               	movf	127,w
  3739  0534  1283               	bcf	3,5	;RP0=0, select bank0
  3740  0535  1303               	bcf	3,6	;RP1=0, select bank0
  3741  0536  00A9               	movwf	sprintf@f
  3742  0537  086A               	movf	_Pwm,w
  3743  0538  00B8               	movwf	??_Pant_Val_Act
  3744  0539  01B9               	clrf	??_Pant_Val_Act+1
  3745  053A  0838               	movf	??_Pant_Val_Act,w
  3746  053B  00AA               	movwf	?_sprintf+1
  3747  053C  0839               	movf	??_Pant_Val_Act+1,w
  3748  053D  00AB               	movwf	?_sprintf+2
  3749  053E  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3750  053F  120A  118A  204D  120A  118A  	fcall	_sprintf
  3751                           
  3752                           ;Display_Lcd.c: 83:     LCD_array(2,5,buffer);
  3753  0544  3002               	movlw	2
  3754  0545  1283               	bcf	3,5	;RP0=0, select bank0
  3755  0546  1303               	bcf	3,6	;RP1=0, select bank0
  3756  0547  00A0               	movwf	LCD_array@x
  3757  0548  3000               	movlw	0
  3758  0549  00A1               	movwf	LCD_array@x+1
  3759  054A  3005               	movlw	5
  3760  054B  00A2               	movwf	LCD_array@y
  3761  054C  3000               	movlw	0
  3762  054D  00A3               	movwf	LCD_array@y+1
  3763  054E  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3764  054F  00A4               	movwf	LCD_array@date
  3765  0550  3000               	movlw	0
  3766  0551  00A5               	movwf	LCD_array@date+1
  3767  0552  120A  158A  22DC  120A  118A  	fcall	_LCD_array
  3768                           
  3769                           ;Display_Lcd.c: 84:     sprintf(buffer,"%02d",Min);
  3770  0557  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3771  0558  00FF               	movwf	127
  3772  0559  087F               	movf	127,w
  3773  055A  1283               	bcf	3,5	;RP0=0, select bank0
  3774  055B  1303               	bcf	3,6	;RP1=0, select bank0
  3775  055C  00A9               	movwf	sprintf@f
  3776  055D  0869               	movf	_Min,w
  3777  055E  00B8               	movwf	??_Pant_Val_Act
  3778  055F  01B9               	clrf	??_Pant_Val_Act+1
  3779  0560  0838               	movf	??_Pant_Val_Act,w
  3780  0561  00AA               	movwf	?_sprintf+1
  3781  0562  0839               	movf	??_Pant_Val_Act+1,w
  3782  0563  00AB               	movwf	?_sprintf+2
  3783  0564  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3784  0565  120A  118A  204D  120A  118A  	fcall	_sprintf
  3785                           
  3786                           ;Display_Lcd.c: 85:     LCD_array(3,8,buffer);
  3787  056A  3003               	movlw	3
  3788  056B  1283               	bcf	3,5	;RP0=0, select bank0
  3789  056C  1303               	bcf	3,6	;RP1=0, select bank0
  3790  056D  00A0               	movwf	LCD_array@x
  3791  056E  3000               	movlw	0
  3792  056F  00A1               	movwf	LCD_array@x+1
  3793  0570  3008               	movlw	8
  3794  0571  00A2               	movwf	LCD_array@y
  3795  0572  3000               	movlw	0
  3796  0573  00A3               	movwf	LCD_array@y+1
  3797  0574  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3798  0575  00A4               	movwf	LCD_array@date
  3799  0576  3000               	movlw	0
  3800  0577  00A5               	movwf	LCD_array@date+1
  3801  0578  120A  158A  22DC  120A  118A  	fcall	_LCD_array
  3802                           
  3803                           ;Display_Lcd.c: 86:     sprintf(buffer,"%02d",Seg);
  3804  057D  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3805  057E  00FF               	movwf	127
  3806  057F  087F               	movf	127,w
  3807  0580  1283               	bcf	3,5	;RP0=0, select bank0
  3808  0581  1303               	bcf	3,6	;RP1=0, select bank0
  3809  0582  00A9               	movwf	sprintf@f
  3810  0583  0868               	movf	_Seg,w
  3811  0584  00B8               	movwf	??_Pant_Val_Act
  3812  0585  01B9               	clrf	??_Pant_Val_Act+1
  3813  0586  0838               	movf	??_Pant_Val_Act,w
  3814  0587  00AA               	movwf	?_sprintf+1
  3815  0588  0839               	movf	??_Pant_Val_Act+1,w
  3816  0589  00AB               	movwf	?_sprintf+2
  3817  058A  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3818  058B  120A  118A  204D  120A  118A  	fcall	_sprintf
  3819                           
  3820                           ;Display_Lcd.c: 87:     LCD_array(3,11,buffer);
  3821  0590  3003               	movlw	3
  3822  0591  1283               	bcf	3,5	;RP0=0, select bank0
  3823  0592  1303               	bcf	3,6	;RP1=0, select bank0
  3824  0593  00A0               	movwf	LCD_array@x
  3825  0594  3000               	movlw	0
  3826  0595  00A1               	movwf	LCD_array@x+1
  3827  0596  300B               	movlw	11
  3828  0597  00A2               	movwf	LCD_array@y
  3829  0598  3000               	movlw	0
  3830  0599  00A3               	movwf	LCD_array@y+1
  3831  059A  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3832  059B  00A4               	movwf	LCD_array@date
  3833  059C  3000               	movlw	0
  3834  059D  00A5               	movwf	LCD_array@date+1
  3835  059E  120A  158A  22DC  120A  118A  	fcall	_LCD_array
  3836                           
  3837                           ;Display_Lcd.c: 88:     sprintf(buffer,"%02d",Temp);
  3838  05A3  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3839  05A4  00FF               	movwf	127
  3840  05A5  087F               	movf	127,w
  3841  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  3842  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  3843  05A8  00A9               	movwf	sprintf@f
  3844  05A9  087A               	movf	_Temp,w
  3845  05AA  00B8               	movwf	??_Pant_Val_Act
  3846  05AB  01B9               	clrf	??_Pant_Val_Act+1
  3847  05AC  0838               	movf	??_Pant_Val_Act,w
  3848  05AD  00AA               	movwf	?_sprintf+1
  3849  05AE  0839               	movf	??_Pant_Val_Act+1,w
  3850  05AF  00AB               	movwf	?_sprintf+2
  3851  05B0  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3852  05B1  120A  118A  204D  120A  118A  	fcall	_sprintf
  3853                           
  3854                           ;Display_Lcd.c: 89:     LCD_array(4,13,buffer);
  3855  05B6  3004               	movlw	4
  3856  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  3857  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  3858  05B9  00A0               	movwf	LCD_array@x
  3859  05BA  3000               	movlw	0
  3860  05BB  00A1               	movwf	LCD_array@x+1
  3861  05BC  300D               	movlw	13
  3862  05BD  00A2               	movwf	LCD_array@y
  3863  05BE  3000               	movlw	0
  3864  05BF  00A3               	movwf	LCD_array@y+1
  3865  05C0  303A               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3866  05C1  00A4               	movwf	LCD_array@date
  3867  05C2  3000               	movlw	0
  3868  05C3  00A5               	movwf	LCD_array@date+1
  3869  05C4  120A  158A  22DC   	fcall	_LCD_array
  3870  05C7  0008               	return
  3871  05C8                     __end_of_Pant_Val_Act:
  3872                           
  3873                           	psect	text15
  3874  09E4                     __ptext15:	
  3875 ;; *************** function _Pant_Temporizador *****************
  3876 ;; Defined at:
  3877 ;;		line 94 in file "Display_Lcd.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  buffer         20   26[BANK0 ] unsigned char [20]
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3891 ;;      Params:         0       0       0       0       0
  3892 ;;      Locals:         0      20       0       0       0
  3893 ;;      Temps:          0       2       0       0       0
  3894 ;;      Totals:         0      22       0       0       0
  3895 ;;Total ram usage:       22 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    4
  3898 ;; This function calls:
  3899 ;;		_LCD_array
  3900 ;;		_sprintf
  3901 ;; This function is called by:
  3902 ;;		_MEF_Subest_Actualizacion
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function _Pant_Temporizador
  3908  09E4                     _Pant_Temporizador:
  3909                           
  3910                           ;Display_Lcd.c: 96:     char buffer[20];;Display_Lcd.c: 98:     sprintf(buffer,"%02d",Mi
      +                          n);
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _Pant_Temporizador: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3914  09E4  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3915  09E5  00FF               	movwf	127
  3916  09E6  087F               	movf	127,w
  3917  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  3918  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  3919  09E9  00A9               	movwf	sprintf@f
  3920  09EA  0869               	movf	_Min,w
  3921  09EB  00B8               	movwf	??_Pant_Temporizador
  3922  09EC  01B9               	clrf	??_Pant_Temporizador+1
  3923  09ED  0838               	movf	??_Pant_Temporizador,w
  3924  09EE  00AA               	movwf	?_sprintf+1
  3925  09EF  0839               	movf	??_Pant_Temporizador+1,w
  3926  09F0  00AB               	movwf	?_sprintf+2
  3927  09F1  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  3928  09F2  120A  118A  204D  120A  158A  	fcall	_sprintf
  3929                           
  3930                           ;Display_Lcd.c: 99:     LCD_array(3,8,buffer);
  3931  09F7  3003               	movlw	3
  3932  09F8  1283               	bcf	3,5	;RP0=0, select bank0
  3933  09F9  1303               	bcf	3,6	;RP1=0, select bank0
  3934  09FA  00A0               	movwf	LCD_array@x
  3935  09FB  3000               	movlw	0
  3936  09FC  00A1               	movwf	LCD_array@x+1
  3937  09FD  3008               	movlw	8
  3938  09FE  00A2               	movwf	LCD_array@y
  3939  09FF  3000               	movlw	0
  3940  0A00  00A3               	movwf	LCD_array@y+1
  3941  0A01  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  3942  0A02  00A4               	movwf	LCD_array@date
  3943  0A03  3000               	movlw	0
  3944  0A04  00A5               	movwf	LCD_array@date+1
  3945  0A05  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  3946                           
  3947                           ;Display_Lcd.c: 100:     sprintf(buffer,"%02d",Seg);
  3948  0A0A  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3949  0A0B  00FF               	movwf	127
  3950  0A0C  087F               	movf	127,w
  3951  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  3952  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  3953  0A0F  00A9               	movwf	sprintf@f
  3954  0A10  0868               	movf	_Seg,w
  3955  0A11  00B8               	movwf	??_Pant_Temporizador
  3956  0A12  01B9               	clrf	??_Pant_Temporizador+1
  3957  0A13  0838               	movf	??_Pant_Temporizador,w
  3958  0A14  00AA               	movwf	?_sprintf+1
  3959  0A15  0839               	movf	??_Pant_Temporizador+1,w
  3960  0A16  00AB               	movwf	?_sprintf+2
  3961  0A17  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  3962  0A18  120A  118A  204D  120A  158A  	fcall	_sprintf
  3963                           
  3964                           ;Display_Lcd.c: 101:     LCD_array(3,11,buffer);
  3965  0A1D  3003               	movlw	3
  3966  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  3967  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  3968  0A20  00A0               	movwf	LCD_array@x
  3969  0A21  3000               	movlw	0
  3970  0A22  00A1               	movwf	LCD_array@x+1
  3971  0A23  300B               	movlw	11
  3972  0A24  00A2               	movwf	LCD_array@y
  3973  0A25  3000               	movlw	0
  3974  0A26  00A3               	movwf	LCD_array@y+1
  3975  0A27  303A               	movlw	(low (Pant_Temporizador@buffer| 0))& (0+255)
  3976  0A28  00A4               	movwf	LCD_array@date
  3977  0A29  3000               	movlw	0
  3978  0A2A  00A5               	movwf	LCD_array@date+1
  3979  0A2B  120A  158A  22DC   	fcall	_LCD_array
  3980  0A2E  0008               	return
  3981  0A2F                     __end_of_Pant_Temporizador:
  3982                           
  3983                           	psect	text16
  3984  004D                     __ptext16:	
  3985 ;; *************** function _sprintf *****************
  3986 ;; Defined at:
  3987 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  sp              1    wreg     PTR unsigned char 
  3990 ;;		 -> Pant_Temporizador@buffer(20), Pant_Val_Act@buffer(20), 
  3991 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  3992 ;;		 -> STR_30(5), STR_29(5), STR_28(5), STR_27(5), 
  3993 ;;		 -> STR_26(5), STR_25(5), STR_24(5), 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  sp              1   23[BANK0 ] PTR unsigned char 
  3996 ;;		 -> Pant_Temporizador@buffer(20), Pant_Val_Act@buffer(20), 
  3997 ;;  tmpval          4    0        struct .
  3998 ;;  width           2   20[BANK0 ] int 
  3999 ;;  val             2   17[BANK0 ] unsigned int 
  4000 ;;  cp              2    0        PTR const unsigned char 
  4001 ;;  len             2    0        unsigned int 
  4002 ;;  c               1   22[BANK0 ] unsigned char 
  4003 ;;  flag            1   19[BANK0 ] unsigned char 
  4004 ;;  ap              1   16[BANK0 ] PTR void [1]
  4005 ;;		 -> ?_sprintf(2), 
  4006 ;;  prec            1   15[BANK0 ] char 
  4007 ;; Return value:  Size  Location     Type
  4008 ;;                  2    9[BANK0 ] int 
  4009 ;; Registers used:
  4010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4016 ;;      Params:         0       3       0       0       0
  4017 ;;      Locals:         0       9       0       0       0
  4018 ;;      Temps:          0       3       0       0       0
  4019 ;;      Totals:         0      15       0       0       0
  4020 ;;Total ram usage:       15 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; Hardware stack levels required when called:    3
  4023 ;; This function calls:
  4024 ;;		___lwdiv
  4025 ;;		___lwmod
  4026 ;;		___wmul
  4027 ;;		_isdigit
  4028 ;; This function is called by:
  4029 ;;		_Pant_Val_Act
  4030 ;;		_Pant_Temporizador
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           
  4035                           ;psect for function _sprintf
  4036  004D                     _sprintf:
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4040                           ;sprintf@sp stored from wreg
  4041  004D  1283               	bcf	3,5	;RP0=0, select bank0
  4042  004E  1303               	bcf	3,6	;RP1=0, select bank0
  4043  004F  00B7               	movwf	sprintf@sp
  4044                           
  4045                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  4046  0050  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4047  0051  00FF               	movwf	127
  4048  0052  087F               	movf	127,w
  4049  0053  00B0               	movwf	sprintf@ap
  4050  0054                     l4243:	
  4051                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4052                           
  4053                           
  4054                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4055  0054  3001               	movlw	1
  4056  0055  07A9               	addwf	sprintf@f,f
  4057  0056  30FF               	movlw	-1
  4058  0057  0729               	addwf	sprintf@f,w
  4059  0058  0084               	movwf	4
  4060  0059  120A  158A  200A  120A  118A  	fcall	stringdir
  4061  005E  00FF               	movwf	127
  4062  005F  087F               	movf	127,w
  4063  0060  00B6               	movwf	sprintf@c
  4064  0061  0836               	movf	sprintf@c,w
  4065  0062  1903               	btfsc	3,2
  4066  0063  2A07               	goto	l4245
  4067                           
  4068                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4069  0064  3025               	movlw	37
  4070  0065  0636               	xorwf	sprintf@c,w
  4071  0066  1903               	btfsc	3,2
  4072  0067  2874               	goto	l4141
  4073                           
  4074                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4075  0068  0836               	movf	sprintf@c,w
  4076  0069  00FF               	movwf	127
  4077  006A  0837               	movf	sprintf@sp,w
  4078  006B  0084               	movwf	4
  4079  006C  087F               	movf	127,w
  4080  006D  1383               	bcf	3,7	;select IRP bank0
  4081  006E  0080               	movwf	0
  4082  006F  3001               	movlw	1
  4083  0070  00FF               	movwf	127
  4084  0071  087F               	movf	127,w
  4085  0072  07B7               	addwf	sprintf@sp,f
  4086                           
  4087                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 559:    continue;
  4088  0073  2854               	goto	l4243
  4089  0074                     l4141:
  4090                           
  4091                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  4092  0074  01B4               	clrf	sprintf@width
  4093  0075  01B5               	clrf	sprintf@width+1
  4094                           
  4095                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4096  0076  01B3               	clrf	sprintf@flag
  4097  0077  287D               	goto	l4147
  4098  0078                     l649:	
  4099                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 596:    case '0':
  4100                           
  4101                           
  4102                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  4103  0078  1533               	bsf	sprintf@flag,2
  4104                           
  4105                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 598:     f++;
  4106  0079  3001               	movlw	1
  4107  007A  00FF               	movwf	127
  4108  007B  087F               	movf	127,w
  4109  007C  07A9               	addwf	sprintf@f,f
  4110  007D                     l4147:	
  4111                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  4112                           
  4113  007D  0829               	movf	sprintf@f,w
  4114  007E  0084               	movwf	4
  4115  007F  120A  158A  200A  120A  118A  	fcall	stringdir
  4116  0084  00AC               	movwf	??_sprintf
  4117  0085  01AD               	clrf	??_sprintf+1
  4118                           
  4119                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4120                           ; Switch size 1, requested type "simple"
  4121                           ; Number of cases is 1, Range of values is 0 to 0
  4122                           ; switch strategies available:
  4123                           ; Name         Instructions Cycles
  4124                           ; simple_byte            4     3 (average)
  4125                           ; direct_byte           11     8 (fixed)
  4126                           ; jumptable            260     6 (fixed)
  4127                           ;	Chosen strategy is simple_byte
  4128  0086  082D               	movf	??_sprintf+1,w
  4129  0087  3A00               	xorlw	0	; case 0
  4130  0088  1903               	skipnz
  4131  0089  288B               	goto	l4871
  4132  008A  2890               	goto	l4149
  4133  008B                     l4871:
  4134                           
  4135                           ; Switch size 1, requested type "simple"
  4136                           ; Number of cases is 1, Range of values is 48 to 48
  4137                           ; switch strategies available:
  4138                           ; Name         Instructions Cycles
  4139                           ; simple_byte            4     3 (average)
  4140                           ; direct_byte           14    11 (fixed)
  4141                           ; jumptable            263     9 (fixed)
  4142                           ;	Chosen strategy is simple_byte
  4143  008B  082C               	movf	??_sprintf,w
  4144  008C  3A30               	xorlw	48	; case 48
  4145  008D  1903               	skipnz
  4146  008E  2878               	goto	l649
  4147  008F  2890               	goto	l4149
  4148  0090                     l4149:
  4149                           
  4150                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  4151  0090  0829               	movf	sprintf@f,w
  4152  0091  0084               	movwf	4
  4153  0092  120A  158A  200A  120A  118A  	fcall	stringdir
  4154  0097  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4155  009C  1C03               	btfss	3,0
  4156  009D  28DF               	goto	l4163
  4157                           
  4158                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  4159  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4160  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4161  00A0  01B4               	clrf	sprintf@width
  4162  00A1  01B5               	clrf	sprintf@width+1
  4163  00A2                     l4153:
  4164                           
  4165                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  4166  00A2  300A               	movlw	10
  4167  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  4168  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  4169  00A5  00A3               	movwf	___wmul@multiplier
  4170  00A6  3000               	movlw	0
  4171  00A7  00A4               	movwf	___wmul@multiplier+1
  4172  00A8  0835               	movf	sprintf@width+1,w
  4173  00A9  00A6               	movwf	___wmul@multiplicand+1
  4174  00AA  0834               	movf	sprintf@width,w
  4175  00AB  00A5               	movwf	___wmul@multiplicand
  4176  00AC  160A  118A  26AD  120A  118A  	fcall	___wmul
  4177  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  4178  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  4179  00B3  0824               	movf	?___wmul+1,w
  4180  00B4  00B5               	movwf	sprintf@width+1
  4181  00B5  0823               	movf	?___wmul,w
  4182  00B6  00B4               	movwf	sprintf@width
  4183                           
  4184                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  4185  00B7  0829               	movf	sprintf@f,w
  4186  00B8  0084               	movwf	4
  4187  00B9  120A  158A  200A  120A  118A  	fcall	stringdir
  4188  00BE  3ED0               	addlw	208
  4189  00BF  00AC               	movwf	??_sprintf
  4190  00C0  30FF               	movlw	255
  4191  00C1  1803               	skipnc
  4192  00C2  3000               	movlw	0
  4193  00C3  00AD               	movwf	??_sprintf+1
  4194  00C4  082C               	movf	??_sprintf,w
  4195  00C5  07B4               	addwf	sprintf@width,f
  4196  00C6  1803               	skipnc
  4197  00C7  0AB5               	incf	sprintf@width+1,f
  4198  00C8  082D               	movf	??_sprintf+1,w
  4199  00C9  07B5               	addwf	sprintf@width+1,f
  4200  00CA  3001               	movlw	1
  4201  00CB  00FF               	movwf	127
  4202  00CC  087F               	movf	127,w
  4203  00CD  07A9               	addwf	sprintf@f,f
  4204                           
  4205                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  4206  00CE  0829               	movf	sprintf@f,w
  4207  00CF  0084               	movwf	4
  4208  00D0  120A  158A  200A  120A  118A  	fcall	stringdir
  4209  00D5  120A  118A  27F2  120A  118A  	fcall	_isdigit
  4210  00DA  1C03               	btfss	3,0
  4211  00DB  28DF               	goto	l4163
  4212  00DC  28A2               	goto	l4153
  4213  00DD                     l663:	
  4214                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 843:   case 'u':
  4215                           
  4216                           
  4217                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          x40;
  4218  00DD  1733               	bsf	sprintf@flag,6
  4219                           
  4220                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 845:    break;
  4221  00DE  2901               	goto	l661
  4222  00DF                     l4163:
  4223  00DF  3001               	movlw	1
  4224  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  4225  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  4226  00E2  07A9               	addwf	sprintf@f,f
  4227  00E3  30FF               	movlw	-1
  4228  00E4  0729               	addwf	sprintf@f,w
  4229  00E5  0084               	movwf	4
  4230  00E6  120A  158A  200A  120A  118A  	fcall	stringdir
  4231  00EB  00B6               	movwf	sprintf@c
  4232  00EC  00AC               	movwf	??_sprintf
  4233  00ED  01AD               	clrf	??_sprintf+1
  4234                           
  4235                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4236                           ; Switch size 1, requested type "simple"
  4237                           ; Number of cases is 1, Range of values is 0 to 0
  4238                           ; switch strategies available:
  4239                           ; Name         Instructions Cycles
  4240                           ; simple_byte            4     3 (average)
  4241                           ; direct_byte           11     8 (fixed)
  4242                           ; jumptable            260     6 (fixed)
  4243                           ;	Chosen strategy is simple_byte
  4244  00EE  082D               	movf	??_sprintf+1,w
  4245  00EF  3A00               	xorlw	0	; case 0
  4246  00F0  1903               	skipnz
  4247  00F1  28F3               	goto	l4873
  4248  00F2  2854               	goto	l4243
  4249  00F3                     l4873:
  4250                           
  4251                           ; Switch size 1, requested type "simple"
  4252                           ; Number of cases is 4, Range of values is 0 to 117
  4253                           ; switch strategies available:
  4254                           ; Name         Instructions Cycles
  4255                           ; simple_byte           13     7 (average)
  4256                           ; jumptable            260     6 (fixed)
  4257                           ;	Chosen strategy is simple_byte
  4258  00F3  082C               	movf	??_sprintf,w
  4259  00F4  3A00               	xorlw	0	; case 0
  4260  00F5  1903               	skipnz
  4261  00F6  2A07               	goto	l4245
  4262  00F7  3A64               	xorlw	100	; case 100
  4263  00F8  1903               	skipnz
  4264  00F9  2901               	goto	l661
  4265  00FA  3A0D               	xorlw	13	; case 105
  4266  00FB  1903               	skipnz
  4267  00FC  2901               	goto	l661
  4268  00FD  3A1C               	xorlw	28	; case 117
  4269  00FE  1903               	skipnz
  4270  00FF  28DD               	goto	l663
  4271  0100  2854               	goto	l4243
  4272  0101                     l661:
  4273                           
  4274                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1277:   if((flag 
      +                          & 0x40) == 0x00)
  4275  0101  1B33               	btfsc	sprintf@flag,6
  4276  0102  291B               	goto	l4175
  4277                           
  4278                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4279  0103  0830               	movf	sprintf@ap,w
  4280  0104  0084               	movwf	4
  4281  0105  1383               	bcf	3,7	;select IRP bank0
  4282  0106  0800               	movf	0,w
  4283  0107  00B1               	movwf	sprintf@val
  4284  0108  0A84               	incf	4,f
  4285  0109  0800               	movf	0,w
  4286  010A  00B2               	movwf	sprintf@val+1
  4287  010B  3002               	movlw	2
  4288  010C  00FF               	movwf	127
  4289  010D  087F               	movf	127,w
  4290  010E  07B0               	addwf	sprintf@ap,f
  4291                           
  4292                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  4293  010F  1FB2               	btfss	sprintf@val+1,7
  4294  0110  2927               	goto	l4179
  4295                           
  4296                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  4297  0111  3003               	movlw	3
  4298  0112  00FF               	movwf	127
  4299  0113  087F               	movf	127,w
  4300  0114  04B3               	iorwf	sprintf@flag,f
  4301                           
  4302                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  4303  0115  09B1               	comf	sprintf@val,f
  4304  0116  09B2               	comf	sprintf@val+1,f
  4305  0117  0AB1               	incf	sprintf@val,f
  4306  0118  1903               	skipnz
  4307  0119  0AB2               	incf	sprintf@val+1,f
  4308  011A  2927               	goto	l4179
  4309  011B                     l4175:
  4310                           
  4311                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4312  011B  0830               	movf	sprintf@ap,w
  4313  011C  0084               	movwf	4
  4314  011D  1383               	bcf	3,7	;select IRP bank0
  4315  011E  0800               	movf	0,w
  4316  011F  00B1               	movwf	sprintf@val
  4317  0120  0A84               	incf	4,f
  4318  0121  0800               	movf	0,w
  4319  0122  00B2               	movwf	sprintf@val+1
  4320  0123  3002               	movlw	2
  4321  0124  00FF               	movwf	127
  4322  0125  087F               	movf	127,w
  4323  0126  07B0               	addwf	sprintf@ap,f
  4324  0127                     l4179:
  4325                           
  4326                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4327  0127  01B6               	clrf	sprintf@c
  4328  0128  0AB6               	incf	sprintf@c,f
  4329  0129                     l4185:
  4330                           
  4331                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  4332  0129  0836               	movf	sprintf@c,w
  4333  012A  00AC               	movwf	??_sprintf
  4334  012B  072C               	addwf	??_sprintf,w
  4335  012C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4336  012D  0084               	movwf	4
  4337  012E  120A  158A  200A  120A  118A  	fcall	stringdir
  4338  0133  00AD               	movwf	??_sprintf+1
  4339  0134  120A  158A  200A  120A  118A  	fcall	stringdir
  4340  0139  00AE               	movwf	??_sprintf+2
  4341  013A  082E               	movf	??_sprintf+2,w
  4342  013B  0232               	subwf	sprintf@val+1,w
  4343  013C  1D03               	skipz
  4344  013D  2940               	goto	u4465
  4345  013E  082D               	movf	??_sprintf+1,w
  4346  013F  0231               	subwf	sprintf@val,w
  4347  0140                     u4465:
  4348  0140  1C03               	btfss	3,0
  4349  0141  294A               	goto	l4193
  4350  0142  3001               	movlw	1
  4351  0143  00FF               	movwf	127
  4352  0144  087F               	movf	127,w
  4353  0145  07B6               	addwf	sprintf@c,f
  4354  0146  3005               	movlw	5
  4355  0147  0636               	xorwf	sprintf@c,w
  4356  0148  1D03               	btfss	3,2
  4357  0149  2929               	goto	l4185
  4358  014A                     l4193:
  4359                           
  4360                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  4361  014A  0834               	movf	sprintf@width,w
  4362  014B  0435               	iorwf	sprintf@width+1,w
  4363  014C  1903               	btfsc	3,2
  4364  014D  2958               	goto	l670
  4365  014E  0833               	movf	sprintf@flag,w
  4366  014F  3903               	andlw	3
  4367  0150  1903               	btfsc	3,2
  4368  0151  2958               	goto	l670
  4369                           
  4370                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1372:    width--;
  4371  0152  30FF               	movlw	255
  4372  0153  07B4               	addwf	sprintf@width,f
  4373  0154  1803               	skipnc
  4374  0155  0AB5               	incf	sprintf@width+1,f
  4375  0156  30FF               	movlw	255
  4376  0157  07B5               	addwf	sprintf@width+1,f
  4377  0158                     l670:
  4378                           
  4379                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  4380  0158  0835               	movf	sprintf@width+1,w
  4381  0159  3A80               	xorlw	128
  4382  015A  3C80               	sublw	128
  4383  015B  1D03               	skipz
  4384  015C  295F               	goto	u4505
  4385  015D  0834               	movf	sprintf@width,w
  4386  015E  0236               	subwf	sprintf@c,w
  4387  015F                     u4505:
  4388  015F  1803               	skipnc
  4389  0160  296D               	goto	l4201
  4390                           
  4391                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  4392  0161  1283               	bcf	3,5	;RP0=0, select bank0
  4393  0162  1303               	bcf	3,6	;RP1=0, select bank0
  4394  0163  0836               	movf	sprintf@c,w
  4395  0164  00AC               	movwf	??_sprintf
  4396  0165  01AD               	clrf	??_sprintf+1
  4397  0166  082C               	movf	??_sprintf,w
  4398  0167  02B4               	subwf	sprintf@width,f
  4399  0168  082D               	movf	??_sprintf+1,w
  4400  0169  1C03               	skipc
  4401  016A  03B5               	decf	sprintf@width+1,f
  4402  016B  02B5               	subwf	sprintf@width+1,f
  4403  016C  2971               	goto	l4203
  4404  016D                     l4201:
  4405                           
  4406                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  4407  016D  1283               	bcf	3,5	;RP0=0, select bank0
  4408  016E  1303               	bcf	3,6	;RP1=0, select bank0
  4409  016F  01B4               	clrf	sprintf@width
  4410  0170  01B5               	clrf	sprintf@width+1
  4411  0171                     l4203:
  4412                           
  4413                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  4414  0171  1D33               	btfss	sprintf@flag,2
  4415  0172  2998               	goto	l4219
  4416                           
  4417                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  4418  0173  0833               	movf	sprintf@flag,w
  4419  0174  3903               	andlw	3
  4420  0175  1903               	btfsc	3,2
  4421  0176  2982               	goto	l4211
  4422                           
  4423                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  4424  0177  302D               	movlw	45
  4425  0178  00FF               	movwf	127
  4426  0179  0837               	movf	sprintf@sp,w
  4427  017A  0084               	movwf	4
  4428  017B  087F               	movf	127,w
  4429  017C  1383               	bcf	3,7	;select IRP bank0
  4430  017D  0080               	movwf	0
  4431  017E  3001               	movlw	1
  4432  017F  00FF               	movwf	127
  4433  0180  087F               	movf	127,w
  4434  0181  07B7               	addwf	sprintf@sp,f
  4435  0182                     l4211:
  4436                           
  4437                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  4438  0182  0834               	movf	sprintf@width,w
  4439  0183  0435               	iorwf	sprintf@width+1,w
  4440  0184  1903               	btfsc	3,2
  4441  0185  29C0               	goto	l4233
  4442                           
  4443                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  4444  0186  3030               	movlw	48
  4445  0187  00FF               	movwf	127
  4446  0188  0837               	movf	sprintf@sp,w
  4447  0189  0084               	movwf	4
  4448  018A  087F               	movf	127,w
  4449  018B  1383               	bcf	3,7	;select IRP bank0
  4450  018C  0080               	movwf	0
  4451  018D  3001               	movlw	1
  4452  018E  00FF               	movwf	127
  4453  018F  087F               	movf	127,w
  4454  0190  07B7               	addwf	sprintf@sp,f
  4455  0191  30FF               	movlw	255
  4456  0192  07B4               	addwf	sprintf@width,f
  4457  0193  1803               	skipnc
  4458  0194  0AB5               	incf	sprintf@width+1,f
  4459  0195  30FF               	movlw	255
  4460  0196  07B5               	addwf	sprintf@width+1,f
  4461  0197  2982               	goto	l4211
  4462  0198                     l4219:
  4463                           
  4464                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1450:    if(width
  4465  0198  0834               	movf	sprintf@width,w
  4466  0199  0435               	iorwf	sprintf@width+1,w
  4467  019A  1903               	btfsc	3,2
  4468  019B  29B1               	goto	l4227
  4469  019C                     l4221:
  4470                           
  4471                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  4472  019C  3020               	movlw	32
  4473  019D  00FF               	movwf	127
  4474  019E  0837               	movf	sprintf@sp,w
  4475  019F  0084               	movwf	4
  4476  01A0  087F               	movf	127,w
  4477  01A1  1383               	bcf	3,7	;select IRP bank0
  4478  01A2  0080               	movwf	0
  4479  01A3  3001               	movlw	1
  4480  01A4  00FF               	movwf	127
  4481  01A5  087F               	movf	127,w
  4482  01A6  07B7               	addwf	sprintf@sp,f
  4483  01A7  30FF               	movlw	255
  4484  01A8  07B4               	addwf	sprintf@width,f
  4485  01A9  1803               	skipnc
  4486  01AA  0AB5               	incf	sprintf@width+1,f
  4487  01AB  30FF               	movlw	255
  4488  01AC  07B5               	addwf	sprintf@width+1,f
  4489  01AD  0834               	movf	sprintf@width,w
  4490  01AE  0435               	iorwf	sprintf@width+1,w
  4491  01AF  1D03               	btfss	3,2
  4492  01B0  299C               	goto	l4221
  4493  01B1                     l4227:
  4494                           
  4495                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  4496  01B1  0833               	movf	sprintf@flag,w
  4497  01B2  3903               	andlw	3
  4498  01B3  1903               	btfsc	3,2
  4499  01B4  29C0               	goto	l4233
  4500                           
  4501                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4502  01B5  302D               	movlw	45
  4503  01B6  00FF               	movwf	127
  4504  01B7  0837               	movf	sprintf@sp,w
  4505  01B8  0084               	movwf	4
  4506  01B9  087F               	movf	127,w
  4507  01BA  1383               	bcf	3,7	;select IRP bank0
  4508  01BB  0080               	movwf	0
  4509  01BC  3001               	movlw	1
  4510  01BD  00FF               	movwf	127
  4511  01BE  087F               	movf	127,w
  4512  01BF  07B7               	addwf	sprintf@sp,f
  4513  01C0                     l4233:
  4514                           
  4515                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  4516  01C0  0836               	movf	sprintf@c,w
  4517  01C1  00FF               	movwf	127
  4518  01C2  087F               	movf	127,w
  4519  01C3  00AF               	movwf	sprintf@prec
  4520  01C4                     l4241:	
  4521                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4522                           
  4523                           
  4524                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4525  01C4  30FF               	movlw	255
  4526  01C5  00FF               	movwf	127
  4527  01C6  087F               	movf	127,w
  4528  01C7  07AF               	addwf	sprintf@prec,f
  4529  01C8  0A2F               	incf	sprintf@prec,w
  4530  01C9  1903               	btfsc	3,2
  4531  01CA  2854               	goto	l4243
  4532                           
  4533                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4534  01CB  300A               	movlw	10
  4535  01CC  00A3               	movwf	___lwmod@divisor
  4536  01CD  3000               	movlw	0
  4537  01CE  00A4               	movwf	___lwmod@divisor+1
  4538  01CF  082F               	movf	sprintf@prec,w
  4539  01D0  00AC               	movwf	??_sprintf
  4540  01D1  072C               	addwf	??_sprintf,w
  4541  01D2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4542  01D3  0084               	movwf	4
  4543  01D4  120A  158A  200A  120A  118A  	fcall	stringdir
  4544  01D9  00F3               	movwf	___lwdiv@divisor
  4545  01DA  120A  158A  200A  120A  118A  	fcall	stringdir
  4546  01DF  00F4               	movwf	___lwdiv@divisor+1
  4547  01E0  0832               	movf	sprintf@val+1,w
  4548  01E1  00F6               	movwf	___lwdiv@dividend+1
  4549  01E2  0831               	movf	sprintf@val,w
  4550  01E3  00F5               	movwf	___lwdiv@dividend
  4551  01E4  120A  158A  2115  120A  118A  	fcall	___lwdiv
  4552  01E9  0874               	movf	?___lwdiv+1,w
  4553  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  4554  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  4555  01EC  00A6               	movwf	___lwmod@dividend+1
  4556  01ED  0873               	movf	?___lwdiv,w
  4557  01EE  00A5               	movwf	___lwmod@dividend
  4558  01EF  160A  118A  27CC  120A  118A  	fcall	___lwmod
  4559  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  4560  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  4561  01F6  0823               	movf	?___lwmod,w
  4562  01F7  3E30               	addlw	48
  4563  01F8  00FF               	movwf	127
  4564  01F9  087F               	movf	127,w
  4565  01FA  00B6               	movwf	sprintf@c
  4566                           
  4567                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  4568  01FB  0836               	movf	sprintf@c,w
  4569  01FC  00FF               	movwf	127
  4570  01FD  0837               	movf	sprintf@sp,w
  4571  01FE  0084               	movwf	4
  4572  01FF  087F               	movf	127,w
  4573  0200  1383               	bcf	3,7	;select IRP bank0
  4574  0201  0080               	movwf	0
  4575  0202  3001               	movlw	1
  4576  0203  00FF               	movwf	127
  4577  0204  087F               	movf	127,w
  4578  0205  07B7               	addwf	sprintf@sp,f
  4579  0206  29C4               	goto	l4241
  4580  0207                     l4245:
  4581                           
  4582                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4583  0207  0837               	movf	sprintf@sp,w
  4584  0208  0084               	movwf	4
  4585  0209  1383               	bcf	3,7	;select IRP bank0
  4586  020A  0180               	clrf	0
  4587  020B  0008               	return
  4588  020C                     __end_of_sprintf:
  4589                           
  4590                           	psect	text17
  4591  07F2                     __ptext17:	
  4592 ;; *************** function _isdigit *****************
  4593 ;; Defined at:
  4594 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\isdigit.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  c               1    wreg     unsigned char 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  c               1    4[COMMON] unsigned char 
  4599 ;; Return value:  Size  Location     Type
  4600 ;;		None               void
  4601 ;; Registers used:
  4602 ;;		wreg, status,2, status,0
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4608 ;;      Params:         0       0       0       0       0
  4609 ;;      Locals:         2       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0
  4611 ;;      Totals:         2       0       0       0       0
  4612 ;;Total ram usage:        2 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    2
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_sprintf
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _isdigit
  4624  07F2                     _isdigit:
  4625                           
  4626                           ;incstack = 0
  4627                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4628                           ;isdigit@c stored from wreg
  4629  07F2  00F4               	movwf	isdigit@c
  4630  07F3  01F3               	clrf	_isdigit$1239
  4631  07F4  303A               	movlw	58
  4632  07F5  0274               	subwf	isdigit@c,w
  4633  07F6  1803               	skipnc
  4634  07F7  2FFE               	goto	l3821
  4635  07F8  3030               	movlw	48
  4636  07F9  0274               	subwf	isdigit@c,w
  4637  07FA  1C03               	skipc
  4638  07FB  2FFE               	goto	l3821
  4639  07FC  01F3               	clrf	_isdigit$1239
  4640  07FD  0AF3               	incf	_isdigit$1239,f
  4641  07FE                     l3821:
  4642  07FE  0C73               	rrf	_isdigit$1239,w
  4643  07FF  0008               	return
  4644  0800                     __end_of_isdigit:
  4645                           
  4646                           	psect	text18
  4647  17CC                     __ptext18:	
  4648 ;; *************** function ___lwmod *****************
  4649 ;; Defined at:
  4650 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwmod.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  divisor         2    3[BANK0 ] unsigned int 
  4653 ;;  dividend        2    5[BANK0 ] unsigned int 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  counter         1    7[COMMON] unsigned char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  2    3[BANK0 ] unsigned int 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0, btemp+1
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4665 ;;      Params:         0       4       0       0       0
  4666 ;;      Locals:         1       0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0
  4668 ;;      Totals:         1       4       0       0       0
  4669 ;;Total ram usage:        5 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    2
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_sprintf
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function ___lwmod
  4681  17CC                     ___lwmod:
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  4685  17CC  1283               	bcf	3,5	;RP0=0, select bank0
  4686  17CD  1303               	bcf	3,6	;RP1=0, select bank0
  4687  17CE  0823               	movf	___lwmod@divisor,w
  4688  17CF  0424               	iorwf	___lwmod@divisor+1,w
  4689  17D0  1903               	btfsc	3,2
  4690  17D1  2FFB               	goto	l4035
  4691  17D2  01F7               	clrf	___lwmod@counter
  4692  17D3  0AF7               	incf	___lwmod@counter,f
  4693  17D4                     l4025:
  4694  17D4  1BA4               	btfsc	___lwmod@divisor+1,7
  4695  17D5  2FE2               	goto	l4027
  4696  17D6  3001               	movlw	1
  4697  17D7                     u4305:
  4698  17D7  1003               	clrc
  4699  17D8  0DA3               	rlf	___lwmod@divisor,f
  4700  17D9  0DA4               	rlf	___lwmod@divisor+1,f
  4701  17DA  3EFF               	addlw	-1
  4702  17DB  1D03               	skipz
  4703  17DC  2FD7               	goto	u4305
  4704  17DD  3001               	movlw	1
  4705  17DE  00FF               	movwf	127
  4706  17DF  087F               	movf	127,w
  4707  17E0  07F7               	addwf	___lwmod@counter,f
  4708  17E1  2FD4               	goto	l4025
  4709  17E2                     l4027:
  4710  17E2  0824               	movf	___lwmod@divisor+1,w
  4711  17E3  0226               	subwf	___lwmod@dividend+1,w
  4712  17E4  1D03               	skipz
  4713  17E5  2FE8               	goto	u4325
  4714  17E6  0823               	movf	___lwmod@divisor,w
  4715  17E7  0225               	subwf	___lwmod@dividend,w
  4716  17E8                     u4325:
  4717  17E8  1C03               	skipc
  4718  17E9  2FF0               	goto	l4031
  4719  17EA  0823               	movf	___lwmod@divisor,w
  4720  17EB  02A5               	subwf	___lwmod@dividend,f
  4721  17EC  0824               	movf	___lwmod@divisor+1,w
  4722  17ED  1C03               	skipc
  4723  17EE  03A6               	decf	___lwmod@dividend+1,f
  4724  17EF  02A6               	subwf	___lwmod@dividend+1,f
  4725  17F0                     l4031:
  4726  17F0  3001               	movlw	1
  4727  17F1                     u4335:
  4728  17F1  1003               	clrc
  4729  17F2  0CA4               	rrf	___lwmod@divisor+1,f
  4730  17F3  0CA3               	rrf	___lwmod@divisor,f
  4731  17F4  3EFF               	addlw	-1
  4732  17F5  1D03               	skipz
  4733  17F6  2FF1               	goto	u4335
  4734  17F7  3001               	movlw	1
  4735  17F8  02F7               	subwf	___lwmod@counter,f
  4736  17F9  1D03               	btfss	3,2
  4737  17FA  2FE2               	goto	l4027
  4738  17FB                     l4035:
  4739  17FB  0826               	movf	___lwmod@dividend+1,w
  4740  17FC  00A4               	movwf	?___lwmod+1
  4741  17FD  0825               	movf	___lwmod@dividend,w
  4742  17FE  00A3               	movwf	?___lwmod
  4743  17FF  0008               	return
  4744  1800                     __end_of___lwmod:
  4745                           
  4746                           	psect	text19
  4747  0E2B                     __ptext19:	
  4748 ;; *************** function _Pant_Modos *****************
  4749 ;; Defined at:
  4750 ;;		line 64 in file "Display_Lcd.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4764 ;;      Params:         0       0       0       0       0
  4765 ;;      Locals:         0       0       0       0       0
  4766 ;;      Temps:          0       0       0       0       0
  4767 ;;      Totals:         0       0       0       0       0
  4768 ;;Total ram usage:        0 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    4
  4771 ;; This function calls:
  4772 ;;		_LCD_array
  4773 ;;		_LCD_command
  4774 ;;		_LCD_date
  4775 ;;		_LCD_xy
  4776 ;; This function is called by:
  4777 ;;		_MEF_Subest_Actualizacion
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           
  4782                           ;psect for function _Pant_Modos
  4783  0E2B                     _Pant_Modos:
  4784                           
  4785                           ;Display_Lcd.c: 66:     LCD_command(0x01);
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _Pant_Modos: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4789  0E2B  3001               	movlw	1
  4790  0E2C  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  4791                           
  4792                           ;Display_Lcd.c: 67:     LCD_array(1,1,"RPM:");
  4793  0E31  3001               	movlw	1
  4794  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  4795  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  4796  0E34  00A0               	movwf	LCD_array@x
  4797  0E35  3000               	movlw	0
  4798  0E36  00A1               	movwf	LCD_array@x+1
  4799  0E37  3001               	movlw	1
  4800  0E38  00A2               	movwf	LCD_array@y
  4801  0E39  3000               	movlw	0
  4802  0E3A  00A3               	movwf	LCD_array@y+1
  4803  0E3B  3085               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  4804  0E3C  00A4               	movwf	LCD_array@date
  4805  0E3D  3080               	movlw	128
  4806  0E3E  00A5               	movwf	LCD_array@date+1
  4807  0E3F  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  4808                           
  4809                           ;Display_Lcd.c: 68:     LCD_array(2,1,"PWM:");
  4810  0E44  3002               	movlw	2
  4811  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  4812  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  4813  0E47  00A0               	movwf	LCD_array@x
  4814  0E48  3000               	movlw	0
  4815  0E49  00A1               	movwf	LCD_array@x+1
  4816  0E4A  3001               	movlw	1
  4817  0E4B  00A2               	movwf	LCD_array@y
  4818  0E4C  3000               	movlw	0
  4819  0E4D  00A3               	movwf	LCD_array@y+1
  4820  0E4E  308A               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  4821  0E4F  00A4               	movwf	LCD_array@date
  4822  0E50  3080               	movlw	128
  4823  0E51  00A5               	movwf	LCD_array@date+1
  4824  0E52  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  4825                           
  4826                           ;Display_Lcd.c: 69:     LCD_array(3,1,"TIEMPO:"),LCD_array(3,10,":");
  4827  0E57  3003               	movlw	3
  4828  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  4829  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  4830  0E5A  00A0               	movwf	LCD_array@x
  4831  0E5B  3000               	movlw	0
  4832  0E5C  00A1               	movwf	LCD_array@x+1
  4833  0E5D  3001               	movlw	1
  4834  0E5E  00A2               	movwf	LCD_array@y
  4835  0E5F  3000               	movlw	0
  4836  0E60  00A3               	movwf	LCD_array@y+1
  4837  0E61  3077               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  4838  0E62  00A4               	movwf	LCD_array@date
  4839  0E63  3080               	movlw	128
  4840  0E64  00A5               	movwf	LCD_array@date+1
  4841  0E65  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  4842  0E6A  3003               	movlw	3
  4843  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  4844  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  4845  0E6D  00A0               	movwf	LCD_array@x
  4846  0E6E  3000               	movlw	0
  4847  0E6F  00A1               	movwf	LCD_array@x+1
  4848  0E70  300A               	movlw	10
  4849  0E71  00A2               	movwf	LCD_array@y
  4850  0E72  3000               	movlw	0
  4851  0E73  00A3               	movwf	LCD_array@y+1
  4852  0E74  3075               	movlw	(low (((STR_22+11)-__stringbase)| (0+32768)))& (0+255)
  4853  0E75  00A4               	movwf	LCD_array@date
  4854  0E76  3080               	movlw	128
  4855  0E77  00A5               	movwf	LCD_array@date+1
  4856  0E78  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  4857                           
  4858                           ;Display_Lcd.c: 70:     LCD_array(4,1,"TEMPERATURA:"),LCD_xy(4,16),LCD_date(0x01);
  4859  0E7D  3004               	movlw	4
  4860  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  4861  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  4862  0E80  00A0               	movwf	LCD_array@x
  4863  0E81  3000               	movlw	0
  4864  0E82  00A1               	movwf	LCD_array@x+1
  4865  0E83  3001               	movlw	1
  4866  0E84  00A2               	movwf	LCD_array@y
  4867  0E85  3000               	movlw	0
  4868  0E86  00A3               	movwf	LCD_array@y+1
  4869  0E87  306A               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  4870  0E88  00A4               	movwf	LCD_array@date
  4871  0E89  3080               	movlw	128
  4872  0E8A  00A5               	movwf	LCD_array@date+1
  4873  0E8B  120A  158A  22DC  120A  158A  	fcall	_LCD_array
  4874  0E90  3004               	movlw	4
  4875  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  4877  0E93  00A0               	movwf	LCD_xy@x
  4878  0E94  3000               	movlw	0
  4879  0E95  00A1               	movwf	LCD_xy@x+1
  4880  0E96  3010               	movlw	16
  4881  0E97  00A2               	movwf	LCD_xy@y
  4882  0E98  3000               	movlw	0
  4883  0E99  00A3               	movwf	LCD_xy@y+1
  4884  0E9A  160A  118A  2799  120A  158A  	fcall	_LCD_xy
  4885  0E9F  3001               	movlw	1
  4886  0EA0  120A  118A  2682  120A  158A  	fcall	_LCD_date
  4887                           
  4888                           ;Display_Lcd.c: 71:     LCD_array(4,17,"C");
  4889  0EA5  3004               	movlw	4
  4890  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  4891  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  4892  0EA8  00A0               	movwf	LCD_array@x
  4893  0EA9  3000               	movlw	0
  4894  0EAA  00A1               	movwf	LCD_array@x+1
  4895  0EAB  3011               	movlw	17
  4896  0EAC  00A2               	movwf	LCD_array@y
  4897  0EAD  3000               	movlw	0
  4898  0EAE  00A3               	movwf	LCD_array@y+1
  4899  0EAF  30A0               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  4900  0EB0  00A4               	movwf	LCD_array@date
  4901  0EB1  3080               	movlw	128
  4902  0EB2  00A5               	movwf	LCD_array@date+1
  4903  0EB3  120A  158A  22DC   	fcall	_LCD_array
  4904  0EB6  0008               	return
  4905  0EB7                     __end_of_Pant_Modos:
  4906                           
  4907                           	psect	text20
  4908  1799                     __ptext20:	
  4909 ;; *************** function _LCD_xy *****************
  4910 ;; Defined at:
  4911 ;;		line 163 in file "Lcd.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  x               2    0[BANK0 ] int 
  4914 ;;  y               2    2[BANK0 ] int 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4926 ;;      Params:         0       4       0       0       0
  4927 ;;      Locals:         0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0
  4929 ;;      Totals:         0       4       0       0       0
  4930 ;;Total ram usage:        4 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    3
  4933 ;; This function calls:
  4934 ;;		_LCD_command
  4935 ;; This function is called by:
  4936 ;;		_Pant_Modos
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function _LCD_xy
  4942  1799                     _LCD_xy:
  4943                           
  4944                           ;Lcd.c: 163: void LCD_xy(int x,int y);Lcd.c: 164: {;Lcd.c: 165:     switch(x)
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _LCD_xy: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4948  1799  2FB6               	goto	l4127
  4949  179A                     l4117:
  4950  179A  0822               	movf	LCD_xy@y,w
  4951  179B  3EFF               	addlw	255
  4952  179C  3880               	iorlw	128
  4953  179D  120A  118A  25C8   	fcall	_LCD_command
  4954                           
  4955                           ;Lcd.c: 168:         break;
  4956  17A0  0008               	return
  4957  17A1                     l4119:
  4958  17A1  0822               	movf	LCD_xy@y,w
  4959  17A2  3E3F               	addlw	63
  4960  17A3  3880               	iorlw	128
  4961  17A4  120A  118A  25C8   	fcall	_LCD_command
  4962                           
  4963                           ;Lcd.c: 170:         break;
  4964  17A7  0008               	return
  4965  17A8                     l4121:
  4966  17A8  0822               	movf	LCD_xy@y,w
  4967  17A9  3E13               	addlw	19
  4968  17AA  3880               	iorlw	128
  4969  17AB  120A  118A  25C8   	fcall	_LCD_command
  4970                           
  4971                           ;Lcd.c: 172:         break;
  4972  17AE  0008               	return
  4973  17AF                     l4123:
  4974  17AF  0822               	movf	LCD_xy@y,w
  4975  17B0  3E53               	addlw	83
  4976  17B1  3880               	iorlw	128
  4977  17B2  120A  118A  25C8   	fcall	_LCD_command
  4978                           
  4979                           ;Lcd.c: 174:         break;
  4980  17B5  0008               	return
  4981  17B6                     l4127:
  4982                           
  4983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4984                           ; Switch size 1, requested type "simple"
  4985                           ; Number of cases is 1, Range of values is 0 to 0
  4986                           ; switch strategies available:
  4987                           ; Name         Instructions Cycles
  4988                           ; simple_byte            4     3 (average)
  4989                           ; direct_byte           11     8 (fixed)
  4990                           ; jumptable            260     6 (fixed)
  4991                           ;	Chosen strategy is simple_byte
  4992  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  4993  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  4994  17B8  0821               	movf	LCD_xy@x+1,w
  4995  17B9  3A00               	xorlw	0	; case 0
  4996  17BA  1903               	skipnz
  4997  17BB  2FBD               	goto	l4875
  4998  17BC  2FCB               	goto	l427
  4999  17BD                     l4875:
  5000                           
  5001                           ; Switch size 1, requested type "simple"
  5002                           ; Number of cases is 4, Range of values is 1 to 4
  5003                           ; switch strategies available:
  5004                           ; Name         Instructions Cycles
  5005                           ; simple_byte           13     7 (average)
  5006                           ; direct_byte           23    11 (fixed)
  5007                           ; jumptable            263     9 (fixed)
  5008                           ;	Chosen strategy is simple_byte
  5009  17BD  0820               	movf	LCD_xy@x,w
  5010  17BE  3A01               	xorlw	1	; case 1
  5011  17BF  1903               	skipnz
  5012  17C0  2F9A               	goto	l4117
  5013  17C1  3A03               	xorlw	3	; case 2
  5014  17C2  1903               	skipnz
  5015  17C3  2FA1               	goto	l4119
  5016  17C4  3A01               	xorlw	1	; case 3
  5017  17C5  1903               	skipnz
  5018  17C6  2FA8               	goto	l4121
  5019  17C7  3A07               	xorlw	7	; case 4
  5020  17C8  1903               	skipnz
  5021  17C9  2FAF               	goto	l4123
  5022  17CA  2FCB               	goto	l427
  5023  17CB                     l427:
  5024  17CB  0008               	return
  5025  17CC                     __end_of_LCD_xy:
  5026                           
  5027                           	psect	text21
  5028  0ADC                     __ptext21:	
  5029 ;; *************** function _LCD_array *****************
  5030 ;; Defined at:
  5031 ;;		line 137 in file "Lcd.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  x               2    0[BANK0 ] int 
  5034 ;;  y               2    2[BANK0 ] int 
  5035 ;;  date            2    4[BANK0 ] PTR unsigned char 
  5036 ;;		 -> Pant_Temporizador@buffer(20), Pant_Val_Act@buffer(20), STR_23(2), STR_22(13), 
  5037 ;;		 -> STR_21(2), STR_20(8), STR_19(5), STR_18(5), 
  5038 ;;		 -> STR_17(18), STR_16(6), STR_15(5), STR_14(14), 
  5039 ;;		 -> STR_13(2), STR_12(2), STR_11(2), STR_10(2), 
  5040 ;;		 -> STR_9(2), STR_8(2), STR_7(2), STR_6(2), 
  5041 ;;		 -> STR_5(2), STR_4(21), STR_3(21), STR_2(21), 
  5042 ;;		 -> STR_1(21), 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;		None
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5054 ;;      Params:         0       6       0       0       0
  5055 ;;      Locals:         0       0       0       0       0
  5056 ;;      Temps:          2       0       0       0       0
  5057 ;;      Totals:         2       6       0       0       0
  5058 ;;Total ram usage:        8 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    3
  5061 ;; This function calls:
  5062 ;;		_LCD_command
  5063 ;;		_LCD_date
  5064 ;; This function is called by:
  5065 ;;		_Pant_Inicio
  5066 ;;		_Pant_Selector
  5067 ;;		_Pant_Menu
  5068 ;;		_Pant_Modos
  5069 ;;		_Pant_Val_Act
  5070 ;;		_Pant_Temporizador
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _LCD_array
  5076  0ADC                     _LCD_array:
  5077                           
  5078                           ;Lcd.c: 137: void LCD_array(int x,int y,char *date);Lcd.c: 138: {;Lcd.c: 140:     switch
      +                          (x)
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _LCD_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5082  0ADC  2B01               	goto	l4101
  5083  0ADD                     l4091:
  5084  0ADD  0822               	movf	LCD_array@y,w
  5085  0ADE  3EFF               	addlw	255
  5086  0ADF  3880               	iorlw	128
  5087  0AE0  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  5088                           
  5089                           ;Lcd.c: 143:         break;
  5090  0AE5  2B34               	goto	l4109
  5091  0AE6                     l4093:
  5092  0AE6  0822               	movf	LCD_array@y,w
  5093  0AE7  3E3F               	addlw	63
  5094  0AE8  3880               	iorlw	128
  5095  0AE9  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  5096                           
  5097                           ;Lcd.c: 145:         break;
  5098  0AEE  2B34               	goto	l4109
  5099  0AEF                     l4095:
  5100  0AEF  0822               	movf	LCD_array@y,w
  5101  0AF0  3E13               	addlw	19
  5102  0AF1  3880               	iorlw	128
  5103  0AF2  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  5104                           
  5105                           ;Lcd.c: 147:         break;
  5106  0AF7  2B34               	goto	l4109
  5107  0AF8                     l4097:
  5108  0AF8  0822               	movf	LCD_array@y,w
  5109  0AF9  3E53               	addlw	83
  5110  0AFA  3880               	iorlw	128
  5111  0AFB  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  5112                           
  5113                           ;Lcd.c: 149:         break;
  5114  0B00  2B34               	goto	l4109
  5115  0B01                     l4101:
  5116                           
  5117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5118                           ; Switch size 1, requested type "simple"
  5119                           ; Number of cases is 1, Range of values is 0 to 0
  5120                           ; switch strategies available:
  5121                           ; Name         Instructions Cycles
  5122                           ; simple_byte            4     3 (average)
  5123                           ; direct_byte           11     8 (fixed)
  5124                           ; jumptable            260     6 (fixed)
  5125                           ;	Chosen strategy is simple_byte
  5126  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  5127  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  5128  0B03  0821               	movf	LCD_array@x+1,w
  5129  0B04  3A00               	xorlw	0	; case 0
  5130  0B05  1903               	skipnz
  5131  0B06  2B08               	goto	l4877
  5132  0B07  2B34               	goto	l4109
  5133  0B08                     l4877:
  5134                           
  5135                           ; Switch size 1, requested type "simple"
  5136                           ; Number of cases is 4, Range of values is 1 to 4
  5137                           ; switch strategies available:
  5138                           ; Name         Instructions Cycles
  5139                           ; simple_byte           13     7 (average)
  5140                           ; direct_byte           23    11 (fixed)
  5141                           ; jumptable            263     9 (fixed)
  5142                           ;	Chosen strategy is simple_byte
  5143  0B08  0820               	movf	LCD_array@x,w
  5144  0B09  3A01               	xorlw	1	; case 1
  5145  0B0A  1903               	skipnz
  5146  0B0B  2ADD               	goto	l4091
  5147  0B0C  3A03               	xorlw	3	; case 2
  5148  0B0D  1903               	skipnz
  5149  0B0E  2AE6               	goto	l4093
  5150  0B0F  3A01               	xorlw	1	; case 3
  5151  0B10  1903               	skipnz
  5152  0B11  2AEF               	goto	l4095
  5153  0B12  3A07               	xorlw	7	; case 4
  5154  0B13  1903               	skipnz
  5155  0B14  2AF8               	goto	l4097
  5156  0B15  2B34               	goto	l4109
  5157  0B16                     l4103:
  5158                           
  5159                           ;Lcd.c: 154:     {;Lcd.c: 155:         LCD_date(*date);
  5160  0B16  0825               	movf	LCD_array@date+1,w
  5161  0B17  00FF               	movwf	127
  5162  0B18  0824               	movf	LCD_array@date,w
  5163  0B19  0084               	movwf	4
  5164  0B1A  120A  158A  2000  120A  158A  	fcall	stringtab
  5165  0B1F  120A  118A  2682  120A  158A  	fcall	_LCD_date
  5166                           
  5167                           ;Lcd.c: 156:         _delay((unsigned long)((1)*(20000000/4000.0)));
  5168  0B24  3007               	movlw	7
  5169  0B25  00F7               	movwf	??_LCD_array+1
  5170  0B26  307D               	movlw	125
  5171  0B27  00F6               	movwf	??_LCD_array
  5172  0B28                     u5347:
  5173  0B28  0BF6               	decfsz	??_LCD_array,f
  5174  0B29  2B28               	goto	u5347
  5175  0B2A  0BF7               	decfsz	??_LCD_array+1,f
  5176  0B2B  2B28               	goto	u5347
  5177                           
  5178                           ;Lcd.c: 157:         date++;
  5179  0B2C  3001               	movlw	1
  5180  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  5181  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  5182  0B2F  07A4               	addwf	LCD_array@date,f
  5183  0B30  1803               	skipnc
  5184  0B31  0AA5               	incf	LCD_array@date+1,f
  5185  0B32  3000               	movlw	0
  5186  0B33  07A5               	addwf	LCD_array@date+1,f
  5187  0B34                     l4109:
  5188                           
  5189                           ;Lcd.c: 153:     while(*date)
  5190  0B34  1283               	bcf	3,5	;RP0=0, select bank0
  5191  0B35  1303               	bcf	3,6	;RP1=0, select bank0
  5192  0B36  0825               	movf	LCD_array@date+1,w
  5193  0B37  00FF               	movwf	127
  5194  0B38  0824               	movf	LCD_array@date,w
  5195  0B39  0084               	movwf	4
  5196  0B3A  120A  158A  2000  120A  158A  	fcall	stringtab
  5197  0B3F  3A00               	xorlw	0
  5198  0B40  1903               	btfsc	3,2
  5199  0B41  0008               	return
  5200  0B42  2B16               	goto	l4103
  5201  0B43                     __end_of_LCD_array:
  5202                           
  5203                           	psect	text22
  5204  0682                     __ptext22:	
  5205 ;; *************** function _LCD_date *****************
  5206 ;; Defined at:
  5207 ;;		line 88 in file "Lcd.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  date            1    wreg     unsigned char 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;  date            1    5[COMMON] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5221 ;;      Params:         0       0       0       0       0
  5222 ;;      Locals:         1       0       0       0       0
  5223 ;;      Temps:          2       0       0       0       0
  5224 ;;      Totals:         3       0       0       0       0
  5225 ;;Total ram usage:        3 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    2
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_Pant_Modos
  5232 ;;		_LCD_array
  5233 ;;		_LCD_character
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           
  5238                           ;psect for function _LCD_date
  5239  0682                     _LCD_date:
  5240                           
  5241                           ;incstack = 0
  5242                           ; Regs used in _LCD_date: [wreg+status,2+status,0]
  5243                           ;LCD_date@date stored from wreg
  5244  0682  00F5               	movwf	LCD_date@date
  5245                           
  5246                           ;Lcd.c: 88: void LCD_date(char date);Lcd.c: 89: {;Lcd.c: 91:     PORTCbits.RC4=0,PORTCbi
      +                          ts.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  5247  0683  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0684  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0685  1207               	bcf	7,4	;volatile
  5250  0686  1287               	bcf	7,5	;volatile
  5251  0687  1307               	bcf	7,6	;volatile
  5252  0688  1387               	bcf	7,7	;volatile
  5253                           
  5254                           ;Lcd.c: 94:     PORTCbits.RC4 = ((date >> 4) & 0x01);
  5255  0689  0875               	movf	LCD_date@date,w
  5256  068A  00F3               	movwf	??_LCD_date
  5257  068B  3004               	movlw	4
  5258  068C                     u3755:
  5259  068C  1003               	clrc
  5260  068D  0CF3               	rrf	??_LCD_date,f
  5261  068E  3EFF               	addlw	-1
  5262  068F  1D03               	skipz
  5263  0690  2E8C               	goto	u3755
  5264  0691  0873               	movf	??_LCD_date,w
  5265  0692  3901               	andlw	1
  5266  0693  00F4               	movwf	??_LCD_date+1
  5267  0694  0EF4               	swapf	??_LCD_date+1,f
  5268  0695  0807               	movf	7,w	;volatile
  5269  0696  0674               	xorwf	??_LCD_date+1,w
  5270  0697  39EF               	andlw	-17
  5271  0698  0674               	xorwf	??_LCD_date+1,w
  5272  0699  0087               	movwf	7	;volatile
  5273                           
  5274                           ;Lcd.c: 95:     PORTCbits.RC5 = ((date >> 5) & 0x01);
  5275  069A  0875               	movf	LCD_date@date,w
  5276  069B  00F3               	movwf	??_LCD_date
  5277  069C  3005               	movlw	5
  5278  069D                     u3765:
  5279  069D  1003               	clrc
  5280  069E  0CF3               	rrf	??_LCD_date,f
  5281  069F  3EFF               	addlw	-1
  5282  06A0  1D03               	skipz
  5283  06A1  2E9D               	goto	u3765
  5284  06A2  0873               	movf	??_LCD_date,w
  5285  06A3  3901               	andlw	1
  5286  06A4  00F4               	movwf	??_LCD_date+1
  5287  06A5  0EF4               	swapf	??_LCD_date+1,f
  5288  06A6  0DF4               	rlf	??_LCD_date+1,f
  5289  06A7  0807               	movf	7,w	;volatile
  5290  06A8  0674               	xorwf	??_LCD_date+1,w
  5291  06A9  39DF               	andlw	-33
  5292  06AA  0674               	xorwf	??_LCD_date+1,w
  5293  06AB  0087               	movwf	7	;volatile
  5294                           
  5295                           ;Lcd.c: 96:     PORTCbits.RC6 = ((date >> 6) & 0x01);
  5296  06AC  0875               	movf	LCD_date@date,w
  5297  06AD  00F3               	movwf	??_LCD_date
  5298  06AE  3006               	movlw	6
  5299  06AF                     u3775:
  5300  06AF  1003               	clrc
  5301  06B0  0CF3               	rrf	??_LCD_date,f
  5302  06B1  3EFF               	addlw	-1
  5303  06B2  1D03               	skipz
  5304  06B3  2EAF               	goto	u3775
  5305  06B4  0873               	movf	??_LCD_date,w
  5306  06B5  3901               	andlw	1
  5307  06B6  00F4               	movwf	??_LCD_date+1
  5308  06B7  0EF4               	swapf	??_LCD_date+1,f
  5309  06B8  0DF4               	rlf	??_LCD_date+1,f
  5310  06B9  0DF4               	rlf	??_LCD_date+1,f
  5311  06BA  0807               	movf	7,w	;volatile
  5312  06BB  0674               	xorwf	??_LCD_date+1,w
  5313  06BC  39BF               	andlw	-65
  5314  06BD  0674               	xorwf	??_LCD_date+1,w
  5315  06BE  0087               	movwf	7	;volatile
  5316                           
  5317                           ;Lcd.c: 97:     PORTCbits.RC7 = ((date >> 7) & 0x01);
  5318  06BF  0875               	movf	LCD_date@date,w
  5319  06C0  00F3               	movwf	??_LCD_date
  5320  06C1  3007               	movlw	7
  5321  06C2                     u3785:
  5322  06C2  1003               	clrc
  5323  06C3  0CF3               	rrf	??_LCD_date,f
  5324  06C4  3EFF               	addlw	-1
  5325  06C5  1D03               	skipz
  5326  06C6  2EC2               	goto	u3785
  5327  06C7  0873               	movf	??_LCD_date,w
  5328  06C8  3901               	andlw	1
  5329  06C9  00F4               	movwf	??_LCD_date+1
  5330  06CA  0CF4               	rrf	??_LCD_date+1,f
  5331  06CB  0CF4               	rrf	??_LCD_date+1,f
  5332  06CC  0807               	movf	7,w	;volatile
  5333  06CD  0674               	xorwf	??_LCD_date+1,w
  5334  06CE  397F               	andlw	-129
  5335  06CF  0674               	xorwf	??_LCD_date+1,w
  5336  06D0  0087               	movwf	7	;volatile
  5337                           
  5338                           ;Lcd.c: 100:     PORTCbits.RC1 = 1;
  5339  06D1  1487               	bsf	7,1	;volatile
  5340                           
  5341                           ;Lcd.c: 101:     PORTCbits.RC3 = 0;
  5342  06D2  1187               	bcf	7,3	;volatile
  5343                           
  5344                           ;Lcd.c: 104:     PORTCbits.RC3 = 1;
  5345  06D3  1587               	bsf	7,3	;volatile
  5346                           
  5347                           ;Lcd.c: 105:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  5348  06D4  3018               	movlw	24
  5349  06D5  00F3               	movwf	??_LCD_date
  5350  06D6                     u5357:
  5351  06D6  0BF3               	decfsz	??_LCD_date,f
  5352  06D7  2ED6               	goto	u5357
  5353  06D8  2ED9               	nop2
  5354                           
  5355                           ;Lcd.c: 106:     PORTCbits.RC3 = 0;
  5356  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  5357  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  5358  06DB  1187               	bcf	7,3	;volatile
  5359                           
  5360                           ;Lcd.c: 107:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  5361  06DC  3018               	movlw	24
  5362  06DD  00F3               	movwf	??_LCD_date
  5363  06DE                     u5367:
  5364  06DE  0BF3               	decfsz	??_LCD_date,f
  5365  06DF  2EDE               	goto	u5367
  5366  06E0  2EE1               	nop2
  5367                           
  5368                           ;Lcd.c: 111:     PORTCbits.RC4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  5369  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  5370  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  5371  06E3  1207               	bcf	7,4	;volatile
  5372  06E4  1287               	bcf	7,5	;volatile
  5373  06E5  1307               	bcf	7,6	;volatile
  5374  06E6  1387               	bcf	7,7	;volatile
  5375                           
  5376                           ;Lcd.c: 114:     PORTCbits.RC4 = (date & 0x01);
  5377  06E7  0875               	movf	LCD_date@date,w
  5378  06E8  3901               	andlw	1
  5379  06E9  00F3               	movwf	??_LCD_date
  5380  06EA  0EF3               	swapf	??_LCD_date,f
  5381  06EB  0807               	movf	7,w	;volatile
  5382  06EC  0673               	xorwf	??_LCD_date,w
  5383  06ED  39EF               	andlw	-17
  5384  06EE  0673               	xorwf	??_LCD_date,w
  5385  06EF  0087               	movwf	7	;volatile
  5386                           
  5387                           ;Lcd.c: 115:     PORTCbits.RC5 = ((date >> 1) & 0x01);
  5388  06F0  0875               	movf	LCD_date@date,w
  5389  06F1  00F3               	movwf	??_LCD_date
  5390  06F2  1003               	clrc
  5391  06F3  0C73               	rrf	??_LCD_date,w
  5392  06F4  3901               	andlw	1
  5393  06F5  00F4               	movwf	??_LCD_date+1
  5394  06F6  0EF4               	swapf	??_LCD_date+1,f
  5395  06F7  0DF4               	rlf	??_LCD_date+1,f
  5396  06F8  0807               	movf	7,w	;volatile
  5397  06F9  0674               	xorwf	??_LCD_date+1,w
  5398  06FA  39DF               	andlw	-33
  5399  06FB  0674               	xorwf	??_LCD_date+1,w
  5400  06FC  0087               	movwf	7	;volatile
  5401                           
  5402                           ;Lcd.c: 116:     PORTCbits.RC6 = ((date >> 2) & 0x01);
  5403  06FD  0875               	movf	LCD_date@date,w
  5404  06FE  00F3               	movwf	??_LCD_date
  5405  06FF  3002               	movlw	2
  5406  0700                     u3795:
  5407  0700  1003               	clrc
  5408  0701  0CF3               	rrf	??_LCD_date,f
  5409  0702  3EFF               	addlw	-1
  5410  0703  1D03               	skipz
  5411  0704  2F00               	goto	u3795
  5412  0705  0873               	movf	??_LCD_date,w
  5413  0706  3901               	andlw	1
  5414  0707  00F4               	movwf	??_LCD_date+1
  5415  0708  0EF4               	swapf	??_LCD_date+1,f
  5416  0709  0DF4               	rlf	??_LCD_date+1,f
  5417  070A  0DF4               	rlf	??_LCD_date+1,f
  5418  070B  0807               	movf	7,w	;volatile
  5419  070C  0674               	xorwf	??_LCD_date+1,w
  5420  070D  39BF               	andlw	-65
  5421  070E  0674               	xorwf	??_LCD_date+1,w
  5422  070F  0087               	movwf	7	;volatile
  5423                           
  5424                           ;Lcd.c: 117:     PORTCbits.RC7 = ((date >> 3) & 0x01);
  5425  0710  0875               	movf	LCD_date@date,w
  5426  0711  00F3               	movwf	??_LCD_date
  5427  0712  3003               	movlw	3
  5428  0713                     u3805:
  5429  0713  1003               	clrc
  5430  0714  0CF3               	rrf	??_LCD_date,f
  5431  0715  3EFF               	addlw	-1
  5432  0716  1D03               	skipz
  5433  0717  2F13               	goto	u3805
  5434  0718  0873               	movf	??_LCD_date,w
  5435  0719  3901               	andlw	1
  5436  071A  00F4               	movwf	??_LCD_date+1
  5437  071B  0CF4               	rrf	??_LCD_date+1,f
  5438  071C  0CF4               	rrf	??_LCD_date+1,f
  5439  071D  0807               	movf	7,w	;volatile
  5440  071E  0674               	xorwf	??_LCD_date+1,w
  5441  071F  397F               	andlw	-129
  5442  0720  0674               	xorwf	??_LCD_date+1,w
  5443  0721  0087               	movwf	7	;volatile
  5444                           
  5445                           ;Lcd.c: 120:     PORTCbits.RC1 = 1;
  5446  0722  1487               	bsf	7,1	;volatile
  5447                           
  5448                           ;Lcd.c: 121:     PORTCbits.RC3 = 0;
  5449  0723  1187               	bcf	7,3	;volatile
  5450                           
  5451                           ;Lcd.c: 124:     PORTCbits.RC3 = 1;
  5452  0724  1587               	bsf	7,3	;volatile
  5453                           
  5454                           ;Lcd.c: 125:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  5455  0725  3053               	movlw	83
  5456  0726  00F3               	movwf	??_LCD_date
  5457  0727                     u5377:
  5458  0727  0BF3               	decfsz	??_LCD_date,f
  5459  0728  2F27               	goto	u5377
  5460                           
  5461                           ;Lcd.c: 126:     PORTCbits.RC3 = 0;
  5462  0729  1283               	bcf	3,5	;RP0=0, select bank0
  5463  072A  1303               	bcf	3,6	;RP1=0, select bank0
  5464  072B  1187               	bcf	7,3	;volatile
  5465                           
  5466                           ;Lcd.c: 127:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  5467  072C  3053               	movlw	83
  5468  072D  00F3               	movwf	??_LCD_date
  5469  072E                     u5387:
  5470  072E  0BF3               	decfsz	??_LCD_date,f
  5471  072F  2F2E               	goto	u5387
  5472                           
  5473                           ;Lcd.c: 130:     _delay((unsigned long)((3)*(20000000/4000.0)));
  5474  0730  3014               	movlw	20
  5475  0731  00F4               	movwf	??_LCD_date+1
  5476  0732  3079               	movlw	121
  5477  0733  00F3               	movwf	??_LCD_date
  5478  0734                     u5397:
  5479  0734  0BF3               	decfsz	??_LCD_date,f
  5480  0735  2F34               	goto	u5397
  5481  0736  0BF4               	decfsz	??_LCD_date+1,f
  5482  0737  2F34               	goto	u5397
  5483  0738  2F39               	nop2
  5484  0739  0008               	return
  5485  073A                     __end_of_LCD_date:
  5486                           
  5487                           	psect	text23
  5488  1667                     __ptext23:	
  5489 ;; *************** function _Lec_Adc_Modo_Pulv *****************
  5490 ;; Defined at:
  5491 ;;		line 4 in file "Modo_Pulverizacion.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5505 ;;      Params:         0       0       0       0       0
  5506 ;;      Locals:         0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0
  5508 ;;      Totals:         0       0       0       0       0
  5509 ;;Total ram usage:        0 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    5
  5512 ;; This function calls:
  5513 ;;		_Adc_Min_Read
  5514 ;;		_Adc_Pwm_Read
  5515 ;;		_Adc_Rpm_Read
  5516 ;;		_Adc_Temp_Read
  5517 ;; This function is called by:
  5518 ;;		_MEF_Subest_Actualizacion
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function _Lec_Adc_Modo_Pulv
  5524  1667                     _Lec_Adc_Modo_Pulv:
  5525                           
  5526                           ;Modo_Pulverizacion.c: 7:     Adc_Rpm_Read();
  5527                           
  5528                           ;incstack = 0
  5529                           ; Regs used in _Lec_Adc_Modo_Pulv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5530  1667  120A  118A  220C  160A  118A  	fcall	_Adc_Rpm_Read
  5531                           
  5532                           ;Modo_Pulverizacion.c: 10:     Adc_Pwm_Read();
  5533  166C  120A  158A  25A3  160A  118A  	fcall	_Adc_Pwm_Read
  5534                           
  5535                           ;Modo_Pulverizacion.c: 13:     Adc_Min_Read();
  5536  1671  120A  158A  242B  160A  118A  	fcall	_Adc_Min_Read
  5537                           
  5538                           ;Modo_Pulverizacion.c: 16:     Adc_Temp_Read();
  5539  1676  120A  158A  227A   	fcall	_Adc_Temp_Read
  5540  1679  0008               	return
  5541  167A                     __end_of_Lec_Adc_Modo_Pulv:
  5542                           
  5543                           	psect	text24
  5544  020C                     __ptext24:	
  5545 ;; *************** function _Adc_Rpm_Read *****************
  5546 ;; Defined at:
  5547 ;;		line 9 in file "Adc_Read.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  valor           2   63[BANK0 ] unsigned int 
  5552 ;;  dec_m           2   61[BANK0 ] unsigned int 
  5553 ;;  uni_m           2   59[BANK0 ] unsigned int 
  5554 ;;  cent            2   57[BANK0 ] unsigned int 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5564 ;;      Params:         0       0       0       0       0
  5565 ;;      Locals:         0      11       0       0       0
  5566 ;;      Temps:          0       4       0       0       0
  5567 ;;      Totals:         0      15       0       0       0
  5568 ;;Total ram usage:       15 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    4
  5571 ;; This function calls:
  5572 ;;		_Adc
  5573 ;;		___awtoft
  5574 ;;		___ftdiv
  5575 ;;		___ftmul
  5576 ;;		___fttol
  5577 ;;		___lwdiv
  5578 ;;		___wmul
  5579 ;; This function is called by:
  5580 ;;		_Lec_Adc_Modo_Pulv
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _Adc_Rpm_Read
  5586  020C                     _Adc_Rpm_Read:
  5587                           
  5588                           ;incstack = 0
  5589                           ; Regs used in _Adc_Rpm_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5590  020C  1283               	bcf	3,5	;RP0=0, select bank0
  5591  020D  1303               	bcf	3,6	;RP1=0, select bank0
  5592  020E  01DD               	clrf	Adc_Rpm_Read@dec_m
  5593  020F  01DE               	clrf	Adc_Rpm_Read@dec_m+1
  5594  0210  01DB               	clrf	Adc_Rpm_Read@uni_m
  5595  0211  01DC               	clrf	Adc_Rpm_Read@uni_m+1
  5596                           
  5597                           ;Adc_Read.c: 13:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  5598  0212  3000               	movlw	0
  5599  0213  120A  158A  219B  120A  118A  	fcall	_Adc
  5600  0218  0874               	movf	?_Adc+1,w
  5601  0219  1283               	bcf	3,5	;RP0=0, select bank0
  5602  021A  1303               	bcf	3,6	;RP1=0, select bank0
  5603  021B  00A4               	movwf	___awtoft@c+1
  5604  021C  0873               	movf	?_Adc,w
  5605  021D  00A3               	movwf	___awtoft@c
  5606  021E  160A  118A  26F4  120A  118A  	fcall	___awtoft
  5607  0223  1283               	bcf	3,5	;RP0=0, select bank0
  5608  0224  1303               	bcf	3,6	;RP1=0, select bank0
  5609  0225  0823               	movf	?___awtoft,w
  5610  0226  00AA               	movwf	___ftmul@f2
  5611  0227  0824               	movf	?___awtoft+1,w
  5612  0228  00AB               	movwf	___ftmul@f2+1
  5613  0229  0825               	movf	?___awtoft+2,w
  5614  022A  00AC               	movwf	___ftmul@f2+2
  5615  022B  3000               	movlw	0
  5616  022C  00A7               	movwf	___ftmul@f1
  5617  022D  30A0               	movlw	160
  5618  022E  00A8               	movwf	___ftmul@f1+1
  5619  022F  3040               	movlw	64
  5620  0230  00A9               	movwf	___ftmul@f1+2
  5621  0231  120A  118A  2433  120A  118A  	fcall	___ftmul
  5622  0236  1283               	bcf	3,5	;RP0=0, select bank0
  5623  0237  1303               	bcf	3,6	;RP1=0, select bank0
  5624  0238  0827               	movf	?___ftmul,w
  5625  0239  00B9               	movwf	___ftdiv@f1
  5626  023A  0828               	movf	?___ftmul+1,w
  5627  023B  00BA               	movwf	___ftdiv@f1+1
  5628  023C  0829               	movf	?___ftmul+2,w
  5629  023D  00BB               	movwf	___ftdiv@f1+2
  5630  023E  30C0               	movlw	192
  5631  023F  00B6               	movwf	___ftdiv@f2
  5632  0240  307F               	movlw	127
  5633  0241  00B7               	movwf	___ftdiv@f2+1
  5634  0242  3044               	movlw	68
  5635  0243  00B8               	movwf	___ftdiv@f2+2
  5636  0244  120A  118A  273A  120A  118A  	fcall	___ftdiv
  5637  0249  1283               	bcf	3,5	;RP0=0, select bank0
  5638  024A  1303               	bcf	3,6	;RP1=0, select bank0
  5639  024B  0836               	movf	?___ftdiv,w
  5640  024C  00D6               	movwf	_Adc_Rpm_Read$1436
  5641  024D  0837               	movf	?___ftdiv+1,w
  5642  024E  00D7               	movwf	_Adc_Rpm_Read$1436+1
  5643  024F  0838               	movf	?___ftdiv+2,w
  5644  0250  00D8               	movwf	_Adc_Rpm_Read$1436+2
  5645                           
  5646                           ;Adc_Read.c: 13:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  5647  0251  0856               	movf	_Adc_Rpm_Read$1436,w
  5648  0252  00AA               	movwf	___ftmul@f2
  5649  0253  0857               	movf	_Adc_Rpm_Read$1436+1,w
  5650  0254  00AB               	movwf	___ftmul@f2+1
  5651  0255  0858               	movf	_Adc_Rpm_Read$1436+2,w
  5652  0256  00AC               	movwf	___ftmul@f2+2
  5653  0257  3040               	movlw	64
  5654  0258  00A7               	movwf	___ftmul@f1
  5655  0259  301C               	movlw	28
  5656  025A  00A8               	movwf	___ftmul@f1+1
  5657  025B  3046               	movlw	70
  5658  025C  00A9               	movwf	___ftmul@f1+2
  5659  025D  120A  118A  2433  120A  118A  	fcall	___ftmul
  5660  0262  1283               	bcf	3,5	;RP0=0, select bank0
  5661  0263  1303               	bcf	3,6	;RP1=0, select bank0
  5662  0264  0827               	movf	?___ftmul,w
  5663  0265  00B9               	movwf	___ftdiv@f1
  5664  0266  0828               	movf	?___ftmul+1,w
  5665  0267  00BA               	movwf	___ftdiv@f1+1
  5666  0268  0829               	movf	?___ftmul+2,w
  5667  0269  00BB               	movwf	___ftdiv@f1+2
  5668  026A  3000               	movlw	0
  5669  026B  00B6               	movwf	___ftdiv@f2
  5670  026C  30A0               	movlw	160
  5671  026D  00B7               	movwf	___ftdiv@f2+1
  5672  026E  3040               	movlw	64
  5673  026F  00B8               	movwf	___ftdiv@f2+2
  5674  0270  120A  118A  273A  120A  118A  	fcall	___ftdiv
  5675  0275  1283               	bcf	3,5	;RP0=0, select bank0
  5676  0276  1303               	bcf	3,6	;RP1=0, select bank0
  5677  0277  0836               	movf	?___ftdiv,w
  5678  0278  00C5               	movwf	___fttol@f1
  5679  0279  0837               	movf	?___ftdiv+1,w
  5680  027A  00C6               	movwf	___fttol@f1+1
  5681  027B  0838               	movf	?___ftdiv+2,w
  5682  027C  00C7               	movwf	___fttol@f1+2
  5683  027D  120A  158A  24A7  120A  118A  	fcall	___fttol
  5684  0282  1283               	bcf	3,5	;RP0=0, select bank0
  5685  0283  1303               	bcf	3,6	;RP1=0, select bank0
  5686  0284  0846               	movf	?___fttol+1,w
  5687  0285  00E0               	movwf	Adc_Rpm_Read@valor+1
  5688  0286  0845               	movf	?___fttol,w
  5689  0287  00DF               	movwf	Adc_Rpm_Read@valor
  5690                           
  5691                           ;Adc_Read.c: 15:     dec_m = (int)(valor/10000)*10000;
  5692  0288  3010               	movlw	16
  5693  0289  00F3               	movwf	___lwdiv@divisor
  5694  028A  3027               	movlw	39
  5695  028B  00F4               	movwf	___lwdiv@divisor+1
  5696  028C  0860               	movf	Adc_Rpm_Read@valor+1,w
  5697  028D  00F6               	movwf	___lwdiv@dividend+1
  5698  028E  085F               	movf	Adc_Rpm_Read@valor,w
  5699  028F  00F5               	movwf	___lwdiv@dividend
  5700  0290  120A  158A  2115  120A  118A  	fcall	___lwdiv
  5701  0295  0874               	movf	?___lwdiv+1,w
  5702  0296  1283               	bcf	3,5	;RP0=0, select bank0
  5703  0297  1303               	bcf	3,6	;RP1=0, select bank0
  5704  0298  00A4               	movwf	___wmul@multiplier+1
  5705  0299  0873               	movf	?___lwdiv,w
  5706  029A  00A3               	movwf	___wmul@multiplier
  5707  029B  3010               	movlw	16
  5708  029C  00A5               	movwf	___wmul@multiplicand
  5709  029D  3027               	movlw	39
  5710  029E  00A6               	movwf	___wmul@multiplicand+1
  5711  029F  160A  118A  26AD  120A  118A  	fcall	___wmul
  5712  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  5713  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  5714  02A6  0824               	movf	?___wmul+1,w
  5715  02A7  00DE               	movwf	Adc_Rpm_Read@dec_m+1
  5716  02A8  0823               	movf	?___wmul,w
  5717  02A9  00DD               	movwf	Adc_Rpm_Read@dec_m
  5718                           
  5719                           ;Adc_Read.c: 16:     uni_m = (int)((valor-dec_m)/1000)*1000;
  5720  02AA  30E8               	movlw	232
  5721  02AB  00F3               	movwf	___lwdiv@divisor
  5722  02AC  3003               	movlw	3
  5723  02AD  00F4               	movwf	___lwdiv@divisor+1
  5724  02AE  085D               	movf	Adc_Rpm_Read@dec_m,w
  5725  02AF  025F               	subwf	Adc_Rpm_Read@valor,w
  5726  02B0  00F5               	movwf	___lwdiv@dividend
  5727  02B1  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5728  02B2  1C03               	skipc
  5729  02B3  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5730  02B4  0260               	subwf	Adc_Rpm_Read@valor+1,w
  5731  02B5  00F6               	movwf	___lwdiv@dividend+1
  5732  02B6  120A  158A  2115  120A  118A  	fcall	___lwdiv
  5733  02BB  0874               	movf	?___lwdiv+1,w
  5734  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  5735  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  5736  02BE  00A4               	movwf	___wmul@multiplier+1
  5737  02BF  0873               	movf	?___lwdiv,w
  5738  02C0  00A3               	movwf	___wmul@multiplier
  5739  02C1  30E8               	movlw	232
  5740  02C2  00A5               	movwf	___wmul@multiplicand
  5741  02C3  3003               	movlw	3
  5742  02C4  00A6               	movwf	___wmul@multiplicand+1
  5743  02C5  160A  118A  26AD  120A  118A  	fcall	___wmul
  5744  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  5745  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  5746  02CC  0824               	movf	?___wmul+1,w
  5747  02CD  00DC               	movwf	Adc_Rpm_Read@uni_m+1
  5748  02CE  0823               	movf	?___wmul,w
  5749  02CF  00DB               	movwf	Adc_Rpm_Read@uni_m
  5750                           
  5751                           ;Adc_Read.c: 17:     cent = (int)((valor-(uni_m+dec_m))/100)*100;
  5752  02D0  3064               	movlw	100
  5753  02D1  00F3               	movwf	___lwdiv@divisor
  5754  02D2  3000               	movlw	0
  5755  02D3  00F4               	movwf	___lwdiv@divisor+1
  5756  02D4  095B               	comf	Adc_Rpm_Read@uni_m,w
  5757  02D5  00D2               	movwf	??_Adc_Rpm_Read
  5758  02D6  095C               	comf	Adc_Rpm_Read@uni_m+1,w
  5759  02D7  00D3               	movwf	??_Adc_Rpm_Read+1
  5760  02D8  0AD2               	incf	??_Adc_Rpm_Read,f
  5761  02D9  1903               	skipnz
  5762  02DA  0AD3               	incf	??_Adc_Rpm_Read+1,f
  5763  02DB  085D               	movf	Adc_Rpm_Read@dec_m,w
  5764  02DC  0252               	subwf	??_Adc_Rpm_Read,w
  5765  02DD  00D4               	movwf	??_Adc_Rpm_Read+2
  5766  02DE  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5767  02DF  1C03               	skipc
  5768  02E0  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5769  02E1  0253               	subwf	??_Adc_Rpm_Read+1,w
  5770  02E2  00D5               	movwf	??_Adc_Rpm_Read+3
  5771  02E3  085F               	movf	Adc_Rpm_Read@valor,w
  5772  02E4  0754               	addwf	??_Adc_Rpm_Read+2,w
  5773  02E5  00F5               	movwf	___lwdiv@dividend
  5774  02E6  0860               	movf	Adc_Rpm_Read@valor+1,w
  5775  02E7  1803               	skipnc
  5776  02E8  0A60               	incf	Adc_Rpm_Read@valor+1,w
  5777  02E9  0755               	addwf	??_Adc_Rpm_Read+3,w
  5778  02EA  00F6               	movwf	___lwdiv@dividend+1
  5779  02EB  120A  158A  2115  120A  118A  	fcall	___lwdiv
  5780  02F0  0874               	movf	?___lwdiv+1,w
  5781  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  5782  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  5783  02F3  00A4               	movwf	___wmul@multiplier+1
  5784  02F4  0873               	movf	?___lwdiv,w
  5785  02F5  00A3               	movwf	___wmul@multiplier
  5786  02F6  3064               	movlw	100
  5787  02F7  00A5               	movwf	___wmul@multiplicand
  5788  02F8  3000               	movlw	0
  5789  02F9  00A6               	movwf	___wmul@multiplicand+1
  5790  02FA  160A  118A  26AD  120A  118A  	fcall	___wmul
  5791  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5792  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5793  0301  0824               	movf	?___wmul+1,w
  5794  0302  00DA               	movwf	Adc_Rpm_Read@cent+1
  5795  0303  0823               	movf	?___wmul,w
  5796  0304  00D9               	movwf	Adc_Rpm_Read@cent
  5797                           
  5798                           ;Adc_Read.c: 19:     valor = cent+uni_m+dec_m;
  5799  0305  085B               	movf	Adc_Rpm_Read@uni_m,w
  5800  0306  0759               	addwf	Adc_Rpm_Read@cent,w
  5801  0307  00D2               	movwf	??_Adc_Rpm_Read
  5802  0308  085C               	movf	Adc_Rpm_Read@uni_m+1,w
  5803  0309  1803               	skipnc
  5804  030A  0A5C               	incf	Adc_Rpm_Read@uni_m+1,w
  5805  030B  075A               	addwf	Adc_Rpm_Read@cent+1,w
  5806  030C  00D3               	movwf	??_Adc_Rpm_Read+1
  5807  030D  085D               	movf	Adc_Rpm_Read@dec_m,w
  5808  030E  0752               	addwf	??_Adc_Rpm_Read,w
  5809  030F  00DF               	movwf	Adc_Rpm_Read@valor
  5810  0310  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5811  0311  1803               	skipnc
  5812  0312  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5813  0313  0753               	addwf	??_Adc_Rpm_Read+1,w
  5814  0314  00E0               	movwf	Adc_Rpm_Read@valor+1
  5815                           
  5816                           ;Adc_Read.c: 20:     Rpm = valor;
  5817  0315  0860               	movf	Adc_Rpm_Read@valor+1,w
  5818  0316  1683               	bsf	3,5	;RP0=1, select bank1
  5819  0317  1303               	bcf	3,6	;RP1=0, select bank1
  5820  0318  00AF               	movwf	(_Rpm+1)^(0+128)
  5821  0319  1283               	bcf	3,5	;RP0=0, select bank0
  5822  031A  1303               	bcf	3,6	;RP1=0, select bank0
  5823  031B  085F               	movf	Adc_Rpm_Read@valor,w
  5824  031C  1683               	bsf	3,5	;RP0=1, select bank1
  5825  031D  1303               	bcf	3,6	;RP1=0, select bank1
  5826  031E  00AE               	movwf	_Rpm^(0+128)
  5827                           
  5828                           ;Adc_Read.c: 22:     if(Rpm == 0) Rpm = 60;
  5829  031F  082E               	movf	_Rpm^(0+128),w
  5830  0320  042F               	iorwf	(_Rpm+1)^(0+128),w
  5831  0321  1D03               	btfss	3,2
  5832  0322  2B28               	goto	l4059
  5833  0323  303C               	movlw	60
  5834  0324  00AE               	movwf	_Rpm^(0+128)
  5835  0325  3000               	movlw	0
  5836  0326  00AF               	movwf	(_Rpm^(0+128)+1)
  5837  0327  0008               	return
  5838  0328                     l4059:
  5839  0328  3027               	movlw	39
  5840  0329  022F               	subwf	(_Rpm+1)^(0+128),w
  5841  032A  3011               	movlw	17
  5842  032B  1903               	skipnz
  5843  032C  022E               	subwf	_Rpm^(0+128),w
  5844  032D  1C03               	skipc
  5845  032E  0008               	return
  5846  032F  3010               	movlw	16
  5847  0330  00AE               	movwf	_Rpm^(0+128)
  5848  0331  3027               	movlw	39
  5849  0332  00AF               	movwf	(_Rpm^(0+128)+1)
  5850  0333  0008               	return
  5851  0334                     __end_of_Adc_Rpm_Read:
  5852                           
  5853                           	psect	text25
  5854  16AD                     __ptext25:	
  5855 ;; *************** function ___wmul *****************
  5856 ;; Defined at:
  5857 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\Umul16.c"
  5858 ;; Parameters:    Size  Location     Type
  5859 ;;  multiplier      2    3[BANK0 ] unsigned int 
  5860 ;;  multiplicand    2    5[BANK0 ] unsigned int 
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  product         2    7[BANK0 ] unsigned int 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  2    3[BANK0 ] unsigned int 
  5865 ;; Registers used:
  5866 ;;		wreg, status,2, status,0
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5872 ;;      Params:         0       4       0       0       0
  5873 ;;      Locals:         0       2       0       0       0
  5874 ;;      Temps:          0       0       0       0       0
  5875 ;;      Totals:         0       6       0       0       0
  5876 ;;Total ram usage:        6 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    2
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		_Adc_Rpm_Read
  5883 ;;		_sprintf
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function ___wmul
  5889  16AD                     ___wmul:
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5893  16AD  1283               	bcf	3,5	;RP0=0, select bank0
  5894  16AE  1303               	bcf	3,6	;RP1=0, select bank0
  5895  16AF  01A7               	clrf	___wmul@product
  5896  16B0  01A8               	clrf	___wmul@product+1
  5897  16B1                     l3827:
  5898  16B1  1C23               	btfss	___wmul@multiplier,0
  5899  16B2  2EB9               	goto	l691
  5900  16B3  0825               	movf	___wmul@multiplicand,w
  5901  16B4  07A7               	addwf	___wmul@product,f
  5902  16B5  1803               	skipnc
  5903  16B6  0AA8               	incf	___wmul@product+1,f
  5904  16B7  0826               	movf	___wmul@multiplicand+1,w
  5905  16B8  07A8               	addwf	___wmul@product+1,f
  5906  16B9                     l691:
  5907  16B9  3001               	movlw	1
  5908  16BA                     u3865:
  5909  16BA  1003               	clrc
  5910  16BB  0DA5               	rlf	___wmul@multiplicand,f
  5911  16BC  0DA6               	rlf	___wmul@multiplicand+1,f
  5912  16BD  3EFF               	addlw	-1
  5913  16BE  1D03               	skipz
  5914  16BF  2EBA               	goto	u3865
  5915  16C0  3001               	movlw	1
  5916  16C1                     u3875:
  5917  16C1  1003               	clrc
  5918  16C2  0CA4               	rrf	___wmul@multiplier+1,f
  5919  16C3  0CA3               	rrf	___wmul@multiplier,f
  5920  16C4  3EFF               	addlw	-1
  5921  16C5  1D03               	skipz
  5922  16C6  2EC1               	goto	u3875
  5923  16C7  0823               	movf	___wmul@multiplier,w
  5924  16C8  0424               	iorwf	___wmul@multiplier+1,w
  5925  16C9  1D03               	btfss	3,2
  5926  16CA  2EB1               	goto	l3827
  5927  16CB  0828               	movf	___wmul@product+1,w
  5928  16CC  00A4               	movwf	?___wmul+1
  5929  16CD  0827               	movf	___wmul@product,w
  5930  16CE  00A3               	movwf	?___wmul
  5931  16CF  0008               	return
  5932  16D0                     __end_of___wmul:
  5933                           
  5934                           	psect	text26
  5935  0915                     __ptext26:	
  5936 ;; *************** function ___lwdiv *****************
  5937 ;; Defined at:
  5938 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwdiv.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  divisor         2    3[COMMON] unsigned int 
  5941 ;;  dividend        2    5[COMMON] unsigned int 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  quotient        2    1[BANK0 ] unsigned int 
  5944 ;;  counter         1    0[BANK0 ] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  2    3[COMMON] unsigned int 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, btemp+1
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5954 ;;      Params:         4       0       0       0       0
  5955 ;;      Locals:         0       3       0       0       0
  5956 ;;      Temps:          0       0       0       0       0
  5957 ;;      Totals:         4       3       0       0       0
  5958 ;;Total ram usage:        7 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    2
  5961 ;; This function calls:
  5962 ;;		Nothing
  5963 ;; This function is called by:
  5964 ;;		_Adc_Rpm_Read
  5965 ;;		_sprintf
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           
  5970                           ;psect for function ___lwdiv
  5971  0915                     ___lwdiv:
  5972                           
  5973                           ;incstack = 0
  5974                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  5975  0915  1283               	bcf	3,5	;RP0=0, select bank0
  5976  0916  1303               	bcf	3,6	;RP1=0, select bank0
  5977  0917  01A1               	clrf	___lwdiv@quotient
  5978  0918  01A2               	clrf	___lwdiv@quotient+1
  5979  0919  0873               	movf	___lwdiv@divisor,w
  5980  091A  0474               	iorwf	___lwdiv@divisor+1,w
  5981  091B  1903               	btfsc	3,2
  5982  091C  294E               	goto	l4013
  5983  091D  01A0               	clrf	___lwdiv@counter
  5984  091E  0AA0               	incf	___lwdiv@counter,f
  5985  091F                     l4001:
  5986  091F  1BF4               	btfsc	___lwdiv@divisor+1,7
  5987  0920  292D               	goto	l4003
  5988  0921  3001               	movlw	1
  5989  0922                     u4235:
  5990  0922  1003               	clrc
  5991  0923  0DF3               	rlf	___lwdiv@divisor,f
  5992  0924  0DF4               	rlf	___lwdiv@divisor+1,f
  5993  0925  3EFF               	addlw	-1
  5994  0926  1D03               	skipz
  5995  0927  2922               	goto	u4235
  5996  0928  3001               	movlw	1
  5997  0929  00FF               	movwf	127
  5998  092A  087F               	movf	127,w
  5999  092B  07A0               	addwf	___lwdiv@counter,f
  6000  092C  291F               	goto	l4001
  6001  092D                     l4003:
  6002  092D  3001               	movlw	1
  6003  092E                     u4255:
  6004  092E  1003               	clrc
  6005  092F  0DA1               	rlf	___lwdiv@quotient,f
  6006  0930  0DA2               	rlf	___lwdiv@quotient+1,f
  6007  0931  3EFF               	addlw	-1
  6008  0932  1D03               	skipz
  6009  0933  292E               	goto	u4255
  6010  0934  0874               	movf	___lwdiv@divisor+1,w
  6011  0935  0276               	subwf	___lwdiv@dividend+1,w
  6012  0936  1D03               	skipz
  6013  0937  293A               	goto	u4265
  6014  0938  0873               	movf	___lwdiv@divisor,w
  6015  0939  0275               	subwf	___lwdiv@dividend,w
  6016  093A                     u4265:
  6017  093A  1C03               	skipc
  6018  093B  2943               	goto	l4009
  6019  093C  0873               	movf	___lwdiv@divisor,w
  6020  093D  02F5               	subwf	___lwdiv@dividend,f
  6021  093E  0874               	movf	___lwdiv@divisor+1,w
  6022  093F  1C03               	skipc
  6023  0940  03F6               	decf	___lwdiv@dividend+1,f
  6024  0941  02F6               	subwf	___lwdiv@dividend+1,f
  6025  0942  1421               	bsf	___lwdiv@quotient,0
  6026  0943                     l4009:
  6027  0943  3001               	movlw	1
  6028  0944                     u4275:
  6029  0944  1003               	clrc
  6030  0945  0CF4               	rrf	___lwdiv@divisor+1,f
  6031  0946  0CF3               	rrf	___lwdiv@divisor,f
  6032  0947  3EFF               	addlw	-1
  6033  0948  1D03               	skipz
  6034  0949  2944               	goto	u4275
  6035  094A  3001               	movlw	1
  6036  094B  02A0               	subwf	___lwdiv@counter,f
  6037  094C  1D03               	btfss	3,2
  6038  094D  292D               	goto	l4003
  6039  094E                     l4013:
  6040  094E  0822               	movf	___lwdiv@quotient+1,w
  6041  094F  00F4               	movwf	?___lwdiv+1
  6042  0950  0821               	movf	___lwdiv@quotient,w
  6043  0951  00F3               	movwf	?___lwdiv
  6044  0952  0008               	return
  6045  0953                     __end_of___lwdiv:
  6046                           
  6047                           	psect	text27
  6048  0DA3                     __ptext27:	
  6049 ;; *************** function _Adc_Pwm_Read *****************
  6050 ;; Defined at:
  6051 ;;		line 28 in file "Adc_Read.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;		None
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6065 ;;      Params:         0       0       0       0       0
  6066 ;;      Locals:         0       3       0       0       0
  6067 ;;      Temps:          0       0       0       0       0
  6068 ;;      Totals:         0       3       0       0       0
  6069 ;;Total ram usage:        3 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    4
  6072 ;; This function calls:
  6073 ;;		_Adc
  6074 ;;		___awtoft
  6075 ;;		___ftdiv
  6076 ;;		___ftmul
  6077 ;;		___fttol
  6078 ;; This function is called by:
  6079 ;;		_Lec_Adc_Modo_Pulv
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _Adc_Pwm_Read
  6085  0DA3                     _Adc_Pwm_Read:
  6086                           
  6087                           ;Adc_Read.c: 30:     Pwm = (int)((Adc(1)*5.0/1023.0)*100.0/5.0);
  6088                           
  6089                           ;incstack = 0
  6090                           ; Regs used in _Adc_Pwm_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6091  0DA3  3001               	movlw	1
  6092  0DA4  120A  158A  219B  120A  158A  	fcall	_Adc
  6093  0DA9  0874               	movf	?_Adc+1,w
  6094  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  6095  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  6096  0DAC  00A4               	movwf	___awtoft@c+1
  6097  0DAD  0873               	movf	?_Adc,w
  6098  0DAE  00A3               	movwf	___awtoft@c
  6099  0DAF  160A  118A  26F4  120A  158A  	fcall	___awtoft
  6100  0DB4  1283               	bcf	3,5	;RP0=0, select bank0
  6101  0DB5  1303               	bcf	3,6	;RP1=0, select bank0
  6102  0DB6  0823               	movf	?___awtoft,w
  6103  0DB7  00AA               	movwf	___ftmul@f2
  6104  0DB8  0824               	movf	?___awtoft+1,w
  6105  0DB9  00AB               	movwf	___ftmul@f2+1
  6106  0DBA  0825               	movf	?___awtoft+2,w
  6107  0DBB  00AC               	movwf	___ftmul@f2+2
  6108  0DBC  3000               	movlw	0
  6109  0DBD  00A7               	movwf	___ftmul@f1
  6110  0DBE  30A0               	movlw	160
  6111  0DBF  00A8               	movwf	___ftmul@f1+1
  6112  0DC0  3040               	movlw	64
  6113  0DC1  00A9               	movwf	___ftmul@f1+2
  6114  0DC2  120A  118A  2433  120A  158A  	fcall	___ftmul
  6115  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  6116  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  6117  0DC9  0827               	movf	?___ftmul,w
  6118  0DCA  00B9               	movwf	___ftdiv@f1
  6119  0DCB  0828               	movf	?___ftmul+1,w
  6120  0DCC  00BA               	movwf	___ftdiv@f1+1
  6121  0DCD  0829               	movf	?___ftmul+2,w
  6122  0DCE  00BB               	movwf	___ftdiv@f1+2
  6123  0DCF  30C0               	movlw	192
  6124  0DD0  00B6               	movwf	___ftdiv@f2
  6125  0DD1  307F               	movlw	127
  6126  0DD2  00B7               	movwf	___ftdiv@f2+1
  6127  0DD3  3044               	movlw	68
  6128  0DD4  00B8               	movwf	___ftdiv@f2+2
  6129  0DD5  120A  118A  273A  120A  158A  	fcall	___ftdiv
  6130  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  6131  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  6132  0DDC  0836               	movf	?___ftdiv,w
  6133  0DDD  00D2               	movwf	_Adc_Pwm_Read$1437
  6134  0DDE  0837               	movf	?___ftdiv+1,w
  6135  0DDF  00D3               	movwf	_Adc_Pwm_Read$1437+1
  6136  0DE0  0838               	movf	?___ftdiv+2,w
  6137  0DE1  00D4               	movwf	_Adc_Pwm_Read$1437+2
  6138                           
  6139                           ;Adc_Read.c: 30:     Pwm = (int)((Adc(1)*5.0/1023.0)*100.0/5.0);
  6140  0DE2  0852               	movf	_Adc_Pwm_Read$1437,w
  6141  0DE3  00AA               	movwf	___ftmul@f2
  6142  0DE4  0853               	movf	_Adc_Pwm_Read$1437+1,w
  6143  0DE5  00AB               	movwf	___ftmul@f2+1
  6144  0DE6  0854               	movf	_Adc_Pwm_Read$1437+2,w
  6145  0DE7  00AC               	movwf	___ftmul@f2+2
  6146  0DE8  3000               	movlw	0
  6147  0DE9  00A7               	movwf	___ftmul@f1
  6148  0DEA  30C8               	movlw	200
  6149  0DEB  00A8               	movwf	___ftmul@f1+1
  6150  0DEC  3042               	movlw	66
  6151  0DED  00A9               	movwf	___ftmul@f1+2
  6152  0DEE  120A  118A  2433  120A  158A  	fcall	___ftmul
  6153  0DF3  1283               	bcf	3,5	;RP0=0, select bank0
  6154  0DF4  1303               	bcf	3,6	;RP1=0, select bank0
  6155  0DF5  0827               	movf	?___ftmul,w
  6156  0DF6  00B9               	movwf	___ftdiv@f1
  6157  0DF7  0828               	movf	?___ftmul+1,w
  6158  0DF8  00BA               	movwf	___ftdiv@f1+1
  6159  0DF9  0829               	movf	?___ftmul+2,w
  6160  0DFA  00BB               	movwf	___ftdiv@f1+2
  6161  0DFB  3000               	movlw	0
  6162  0DFC  00B6               	movwf	___ftdiv@f2
  6163  0DFD  30A0               	movlw	160
  6164  0DFE  00B7               	movwf	___ftdiv@f2+1
  6165  0DFF  3040               	movlw	64
  6166  0E00  00B8               	movwf	___ftdiv@f2+2
  6167  0E01  120A  118A  273A  120A  158A  	fcall	___ftdiv
  6168  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  6169  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  6170  0E08  0836               	movf	?___ftdiv,w
  6171  0E09  00C5               	movwf	___fttol@f1
  6172  0E0A  0837               	movf	?___ftdiv+1,w
  6173  0E0B  00C6               	movwf	___fttol@f1+1
  6174  0E0C  0838               	movf	?___ftdiv+2,w
  6175  0E0D  00C7               	movwf	___fttol@f1+2
  6176  0E0E  120A  158A  24A7  120A  158A  	fcall	___fttol
  6177  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  6178  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  6179  0E15  0845               	movf	?___fttol,w
  6180  0E16  00FF               	movwf	127
  6181  0E17  087F               	movf	127,w
  6182  0E18  00EA               	movwf	_Pwm
  6183                           
  6184                           ;Adc_Read.c: 31:     if(Pwm > 95) Pwm = 95;
  6185  0E19  3060               	movlw	96
  6186  0E1A  026A               	subwf	_Pwm,w
  6187  0E1B  1C03               	skipc
  6188  0E1C  2E22               	goto	l4071
  6189  0E1D  305F               	movlw	95
  6190  0E1E  00FF               	movwf	127
  6191  0E1F  087F               	movf	127,w
  6192  0E20  00EA               	movwf	_Pwm
  6193  0E21  0008               	return
  6194  0E22                     l4071:
  6195  0E22  3005               	movlw	5
  6196  0E23  026A               	subwf	_Pwm,w
  6197  0E24  1803               	skipnc
  6198  0E25  0008               	return
  6199  0E26  3005               	movlw	5
  6200  0E27  00FF               	movwf	127
  6201  0E28  087F               	movf	127,w
  6202  0E29  00EA               	movwf	_Pwm
  6203  0E2A  0008               	return
  6204  0E2B                     __end_of_Adc_Pwm_Read:
  6205                           
  6206                           	psect	text28
  6207  164D                     __ptext28:	
  6208 ;; *************** function _Lec_Adc_Modo_Fuga *****************
  6209 ;; Defined at:
  6210 ;;		line 4 in file "Modo_Fuga.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;		None
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;		None
  6215 ;; Return value:  Size  Location     Type
  6216 ;;                  1    wreg      void 
  6217 ;; Registers used:
  6218 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6224 ;;      Params:         0       0       0       0       0
  6225 ;;      Locals:         0       0       0       0       0
  6226 ;;      Temps:          0       0       0       0       0
  6227 ;;      Totals:         0       0       0       0       0
  6228 ;;Total ram usage:        0 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    5
  6231 ;; This function calls:
  6232 ;;		_Adc_Min_Read
  6233 ;;		_Adc_Temp_Read
  6234 ;; This function is called by:
  6235 ;;		_MEF_Subest_Actualizacion
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           
  6240                           ;psect for function _Lec_Adc_Modo_Fuga
  6241  164D                     _Lec_Adc_Modo_Fuga:
  6242                           
  6243                           ;Modo_Fuga.c: 7:     Adc_Min_Read();
  6244                           
  6245                           ;incstack = 0
  6246                           ; Regs used in _Lec_Adc_Modo_Fuga: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6247  164D  120A  158A  242B  160A  118A  	fcall	_Adc_Min_Read
  6248                           
  6249                           ;Modo_Fuga.c: 10:     Adc_Temp_Read();
  6250  1652  120A  158A  227A   	fcall	_Adc_Temp_Read
  6251  1655  0008               	return
  6252  1656                     __end_of_Lec_Adc_Modo_Fuga:
  6253                           
  6254                           	psect	text29
  6255  1644                     __ptext29:	
  6256 ;; *************** function _Lec_Adc_Modo_Flujo *****************
  6257 ;; Defined at:
  6258 ;;		line 4 in file "Modo_Flujo.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;		None
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;		None
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  1    wreg      void 
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6272 ;;      Params:         0       0       0       0       0
  6273 ;;      Locals:         0       0       0       0       0
  6274 ;;      Temps:          0       0       0       0       0
  6275 ;;      Totals:         0       0       0       0       0
  6276 ;;Total ram usage:        0 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    5
  6279 ;; This function calls:
  6280 ;;		_Adc_Min_Read
  6281 ;;		_Adc_Temp_Read
  6282 ;; This function is called by:
  6283 ;;		_MEF_Subest_Actualizacion
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _Lec_Adc_Modo_Flujo
  6289  1644                     _Lec_Adc_Modo_Flujo:
  6290                           
  6291                           ;Modo_Flujo.c: 7:     Adc_Min_Read();
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _Lec_Adc_Modo_Flujo: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6295  1644  120A  158A  242B  160A  118A  	fcall	_Adc_Min_Read
  6296                           
  6297                           ;Modo_Flujo.c: 10:     Adc_Temp_Read();
  6298  1649  120A  158A  227A   	fcall	_Adc_Temp_Read
  6299  164C  0008               	return
  6300  164D                     __end_of_Lec_Adc_Modo_Flujo:
  6301                           
  6302                           	psect	text30
  6303  0A7A                     __ptext30:	
  6304 ;; *************** function _Adc_Temp_Read *****************
  6305 ;; Defined at:
  6306 ;;		line 47 in file "Adc_Read.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;		None
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;		None
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  1    wreg      void 
  6313 ;; Registers used:
  6314 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6320 ;;      Params:         0       0       0       0       0
  6321 ;;      Locals:         0       3       0       0       0
  6322 ;;      Temps:          0       0       0       0       0
  6323 ;;      Totals:         0       3       0       0       0
  6324 ;;Total ram usage:        3 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    4
  6327 ;; This function calls:
  6328 ;;		_Adc
  6329 ;;		___awtoft
  6330 ;;		___ftdiv
  6331 ;;		___ftmul
  6332 ;;		___fttol
  6333 ;; This function is called by:
  6334 ;;		_Lec_Adc_Modo_Pulv
  6335 ;;		_Lec_Adc_Modo_Fuga
  6336 ;;		_Lec_Adc_Modo_Flujo
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           
  6341                           ;psect for function _Adc_Temp_Read
  6342  0A7A                     _Adc_Temp_Read:
  6343                           
  6344                           ;Adc_Read.c: 49:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  6345                           
  6346                           ;incstack = 0
  6347                           ; Regs used in _Adc_Temp_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6348  0A7A  3003               	movlw	3
  6349  0A7B  120A  158A  219B  120A  158A  	fcall	_Adc
  6350  0A80  0874               	movf	?_Adc+1,w
  6351  0A81  1283               	bcf	3,5	;RP0=0, select bank0
  6352  0A82  1303               	bcf	3,6	;RP1=0, select bank0
  6353  0A83  00A4               	movwf	___awtoft@c+1
  6354  0A84  0873               	movf	?_Adc,w
  6355  0A85  00A3               	movwf	___awtoft@c
  6356  0A86  160A  118A  26F4  120A  158A  	fcall	___awtoft
  6357  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  6358  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  6359  0A8D  0823               	movf	?___awtoft,w
  6360  0A8E  00AA               	movwf	___ftmul@f2
  6361  0A8F  0824               	movf	?___awtoft+1,w
  6362  0A90  00AB               	movwf	___ftmul@f2+1
  6363  0A91  0825               	movf	?___awtoft+2,w
  6364  0A92  00AC               	movwf	___ftmul@f2+2
  6365  0A93  3000               	movlw	0
  6366  0A94  00A7               	movwf	___ftmul@f1
  6367  0A95  30A0               	movlw	160
  6368  0A96  00A8               	movwf	___ftmul@f1+1
  6369  0A97  3040               	movlw	64
  6370  0A98  00A9               	movwf	___ftmul@f1+2
  6371  0A99  120A  118A  2433  120A  158A  	fcall	___ftmul
  6372  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  6373  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  6374  0AA0  0827               	movf	?___ftmul,w
  6375  0AA1  00B9               	movwf	___ftdiv@f1
  6376  0AA2  0828               	movf	?___ftmul+1,w
  6377  0AA3  00BA               	movwf	___ftdiv@f1+1
  6378  0AA4  0829               	movf	?___ftmul+2,w
  6379  0AA5  00BB               	movwf	___ftdiv@f1+2
  6380  0AA6  30C0               	movlw	192
  6381  0AA7  00B6               	movwf	___ftdiv@f2
  6382  0AA8  307F               	movlw	127
  6383  0AA9  00B7               	movwf	___ftdiv@f2+1
  6384  0AAA  3044               	movlw	68
  6385  0AAB  00B8               	movwf	___ftdiv@f2+2
  6386  0AAC  120A  118A  273A  120A  158A  	fcall	___ftdiv
  6387  0AB1  1283               	bcf	3,5	;RP0=0, select bank0
  6388  0AB2  1303               	bcf	3,6	;RP1=0, select bank0
  6389  0AB3  0836               	movf	?___ftdiv,w
  6390  0AB4  00D2               	movwf	_Adc_Temp_Read$1439
  6391  0AB5  0837               	movf	?___ftdiv+1,w
  6392  0AB6  00D3               	movwf	_Adc_Temp_Read$1439+1
  6393  0AB7  0838               	movf	?___ftdiv+2,w
  6394  0AB8  00D4               	movwf	_Adc_Temp_Read$1439+2
  6395                           
  6396                           ;Adc_Read.c: 49:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  6397  0AB9  0852               	movf	_Adc_Temp_Read$1439,w
  6398  0ABA  00AA               	movwf	___ftmul@f2
  6399  0ABB  0853               	movf	_Adc_Temp_Read$1439+1,w
  6400  0ABC  00AB               	movwf	___ftmul@f2+1
  6401  0ABD  0854               	movf	_Adc_Temp_Read$1439+2,w
  6402  0ABE  00AC               	movwf	___ftmul@f2+2
  6403  0ABF  3000               	movlw	0
  6404  0AC0  00A7               	movwf	___ftmul@f1
  6405  0AC1  30C8               	movlw	200
  6406  0AC2  00A8               	movwf	___ftmul@f1+1
  6407  0AC3  3042               	movlw	66
  6408  0AC4  00A9               	movwf	___ftmul@f1+2
  6409  0AC5  120A  118A  2433  120A  158A  	fcall	___ftmul
  6410  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  6411  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  6412  0ACC  0827               	movf	?___ftmul,w
  6413  0ACD  00C5               	movwf	___fttol@f1
  6414  0ACE  0828               	movf	?___ftmul+1,w
  6415  0ACF  00C6               	movwf	___fttol@f1+1
  6416  0AD0  0829               	movf	?___ftmul+2,w
  6417  0AD1  00C7               	movwf	___fttol@f1+2
  6418  0AD2  120A  158A  24A7   	fcall	___fttol
  6419  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  6420  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  6421  0AD7  0845               	movf	?___fttol,w
  6422  0AD8  00FF               	movwf	127
  6423  0AD9  087F               	movf	127,w
  6424  0ADA  00FA               	movwf	_Temp
  6425  0ADB  0008               	return
  6426  0ADC                     __end_of_Adc_Temp_Read:
  6427                           
  6428                           	psect	text31
  6429  0C2B                     __ptext31:	
  6430 ;; *************** function _Adc_Min_Read *****************
  6431 ;; Defined at:
  6432 ;;		line 37 in file "Adc_Read.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;		None
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  1    wreg      void 
  6439 ;; Registers used:
  6440 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6446 ;;      Params:         0       0       0       0       0
  6447 ;;      Locals:         0       3       0       0       0
  6448 ;;      Temps:          0       0       0       0       0
  6449 ;;      Totals:         0       3       0       0       0
  6450 ;;Total ram usage:        3 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:    4
  6453 ;; This function calls:
  6454 ;;		_Adc
  6455 ;;		___awtoft
  6456 ;;		___ftdiv
  6457 ;;		___ftmul
  6458 ;;		___fttol
  6459 ;; This function is called by:
  6460 ;;		_Lec_Adc_Modo_Pulv
  6461 ;;		_Lec_Adc_Modo_Fuga
  6462 ;;		_Lec_Adc_Modo_Flujo
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _Adc_Min_Read
  6468  0C2B                     _Adc_Min_Read:
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _Adc_Min_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6472  0C2B  3002               	movlw	2
  6473  0C2C  120A  158A  219B  120A  158A  	fcall	_Adc
  6474  0C31  0874               	movf	?_Adc+1,w
  6475  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  6476  0C33  1303               	bcf	3,6	;RP1=0, select bank0
  6477  0C34  00A4               	movwf	___awtoft@c+1
  6478  0C35  0873               	movf	?_Adc,w
  6479  0C36  00A3               	movwf	___awtoft@c
  6480  0C37  160A  118A  26F4  120A  158A  	fcall	___awtoft
  6481  0C3C  1283               	bcf	3,5	;RP0=0, select bank0
  6482  0C3D  1303               	bcf	3,6	;RP1=0, select bank0
  6483  0C3E  0823               	movf	?___awtoft,w
  6484  0C3F  00AA               	movwf	___ftmul@f2
  6485  0C40  0824               	movf	?___awtoft+1,w
  6486  0C41  00AB               	movwf	___ftmul@f2+1
  6487  0C42  0825               	movf	?___awtoft+2,w
  6488  0C43  00AC               	movwf	___ftmul@f2+2
  6489  0C44  3000               	movlw	0
  6490  0C45  00A7               	movwf	___ftmul@f1
  6491  0C46  30A0               	movlw	160
  6492  0C47  00A8               	movwf	___ftmul@f1+1
  6493  0C48  3040               	movlw	64
  6494  0C49  00A9               	movwf	___ftmul@f1+2
  6495  0C4A  120A  118A  2433  120A  158A  	fcall	___ftmul
  6496  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  6497  0C50  1303               	bcf	3,6	;RP1=0, select bank0
  6498  0C51  0827               	movf	?___ftmul,w
  6499  0C52  00B9               	movwf	___ftdiv@f1
  6500  0C53  0828               	movf	?___ftmul+1,w
  6501  0C54  00BA               	movwf	___ftdiv@f1+1
  6502  0C55  0829               	movf	?___ftmul+2,w
  6503  0C56  00BB               	movwf	___ftdiv@f1+2
  6504  0C57  30C0               	movlw	192
  6505  0C58  00B6               	movwf	___ftdiv@f2
  6506  0C59  307F               	movlw	127
  6507  0C5A  00B7               	movwf	___ftdiv@f2+1
  6508  0C5B  3044               	movlw	68
  6509  0C5C  00B8               	movwf	___ftdiv@f2+2
  6510  0C5D  120A  118A  273A  120A  158A  	fcall	___ftdiv
  6511  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  6512  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  6513  0C64  0836               	movf	?___ftdiv,w
  6514  0C65  00D2               	movwf	_Adc_Min_Read$1438
  6515  0C66  0837               	movf	?___ftdiv+1,w
  6516  0C67  00D3               	movwf	_Adc_Min_Read$1438+1
  6517  0C68  0838               	movf	?___ftdiv+2,w
  6518  0C69  00D4               	movwf	_Adc_Min_Read$1438+2
  6519  0C6A  0852               	movf	_Adc_Min_Read$1438,w
  6520  0C6B  00AA               	movwf	___ftmul@f2
  6521  0C6C  0853               	movf	_Adc_Min_Read$1438+1,w
  6522  0C6D  00AB               	movwf	___ftmul@f2+1
  6523  0C6E  0854               	movf	_Adc_Min_Read$1438+2,w
  6524  0C6F  00AC               	movwf	___ftmul@f2+2
  6525  0C70  3000               	movlw	0
  6526  0C71  00A7               	movwf	___ftmul@f1
  6527  0C72  306C               	movlw	108
  6528  0C73  00A8               	movwf	___ftmul@f1+1
  6529  0C74  3042               	movlw	66
  6530  0C75  00A9               	movwf	___ftmul@f1+2
  6531  0C76  120A  118A  2433  120A  158A  	fcall	___ftmul
  6532  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  6533  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  6534  0C7D  0827               	movf	?___ftmul,w
  6535  0C7E  00B9               	movwf	___ftdiv@f1
  6536  0C7F  0828               	movf	?___ftmul+1,w
  6537  0C80  00BA               	movwf	___ftdiv@f1+1
  6538  0C81  0829               	movf	?___ftmul+2,w
  6539  0C82  00BB               	movwf	___ftdiv@f1+2
  6540  0C83  3000               	movlw	0
  6541  0C84  00B6               	movwf	___ftdiv@f2
  6542  0C85  30A0               	movlw	160
  6543  0C86  00B7               	movwf	___ftdiv@f2+1
  6544  0C87  3040               	movlw	64
  6545  0C88  00B8               	movwf	___ftdiv@f2+2
  6546  0C89  120A  118A  273A  120A  158A  	fcall	___ftdiv
  6547  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  6548  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  6549  0C90  0836               	movf	?___ftdiv,w
  6550  0C91  00C5               	movwf	___fttol@f1
  6551  0C92  0837               	movf	?___ftdiv+1,w
  6552  0C93  00C6               	movwf	___fttol@f1+1
  6553  0C94  0838               	movf	?___ftdiv+2,w
  6554  0C95  00C7               	movwf	___fttol@f1+2
  6555  0C96  120A  158A  24A7  120A  158A  	fcall	___fttol
  6556  0C9B  1283               	bcf	3,5	;RP0=0, select bank0
  6557  0C9C  1303               	bcf	3,6	;RP1=0, select bank0
  6558  0C9D  0845               	movf	?___fttol,w
  6559  0C9E  00FF               	movwf	127
  6560  0C9F  087F               	movf	127,w
  6561  0CA0  00E9               	movwf	_Min
  6562                           
  6563                           ;Adc_Read.c: 42:     if(Seg == 0) Seg = 1;
  6564  0CA1  0868               	movf	_Seg,w
  6565  0CA2  1D03               	btfss	3,2
  6566  0CA3  0008               	return
  6567  0CA4  01E8               	clrf	_Seg
  6568  0CA5  0AE8               	incf	_Seg,f
  6569  0CA6  0008               	return
  6570  0CA7                     __end_of_Adc_Min_Read:
  6571                           
  6572                           	psect	text32
  6573  0CA7                     __ptext32:	
  6574 ;; *************** function ___fttol *****************
  6575 ;; Defined at:
  6576 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\fttol.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  f1              3   37[BANK0 ] float 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  lval            4   45[BANK0 ] unsigned long 
  6581 ;;  exp1            1   49[BANK0 ] unsigned char 
  6582 ;;  sign1           1   44[BANK0 ] unsigned char 
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  4   37[BANK0 ] long 
  6585 ;; Registers used:
  6586 ;;		wreg, status,2, status,0, btemp+1
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6592 ;;      Params:         0       4       0       0       0
  6593 ;;      Locals:         0       6       0       0       0
  6594 ;;      Temps:          0       3       0       0       0
  6595 ;;      Totals:         0      13       0       0       0
  6596 ;;Total ram usage:       13 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    2
  6599 ;; This function calls:
  6600 ;;		Nothing
  6601 ;; This function is called by:
  6602 ;;		_Adc_Rpm_Read
  6603 ;;		_Adc_Pwm_Read
  6604 ;;		_Adc_Min_Read
  6605 ;;		_Adc_Temp_Read
  6606 ;;		_Pwm1_init
  6607 ;;		_Pwm1
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function ___fttol
  6613  0CA7                     ___fttol:
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  6617  0CA7  1283               	bcf	3,5	;RP0=0, select bank0
  6618  0CA8  1303               	bcf	3,6	;RP1=0, select bank0
  6619  0CA9  0845               	movf	___fttol@f1,w
  6620  0CAA  00C9               	movwf	??___fttol
  6621  0CAB  0846               	movf	___fttol@f1+1,w
  6622  0CAC  00CA               	movwf	??___fttol+1
  6623  0CAD  0847               	movf	___fttol@f1+2,w
  6624  0CAE  00CB               	movwf	??___fttol+2
  6625  0CAF  1003               	clrc
  6626  0CB0  0D4A               	rlf	??___fttol+1,w
  6627  0CB1  0D4B               	rlf	??___fttol+2,w
  6628  0CB2  00FF               	movwf	127
  6629  0CB3  087F               	movf	127,w
  6630  0CB4  00D1               	movwf	___fttol@exp1
  6631  0CB5  0851               	movf	___fttol@exp1,w
  6632  0CB6  1D03               	btfss	3,2
  6633  0CB7  2CC1               	goto	l3953
  6634  0CB8                     l3949:
  6635  0CB8  3000               	movlw	0
  6636  0CB9  00C8               	movwf	?___fttol+3
  6637  0CBA  3000               	movlw	0
  6638  0CBB  00C7               	movwf	?___fttol+2
  6639  0CBC  3000               	movlw	0
  6640  0CBD  00C6               	movwf	?___fttol+1
  6641  0CBE  3000               	movlw	0
  6642  0CBF  00C5               	movwf	?___fttol
  6643  0CC0  0008               	return
  6644  0CC1                     l3953:
  6645  0CC1  0845               	movf	___fttol@f1,w
  6646  0CC2  00C9               	movwf	??___fttol
  6647  0CC3  0846               	movf	___fttol@f1+1,w
  6648  0CC4  00CA               	movwf	??___fttol+1
  6649  0CC5  0847               	movf	___fttol@f1+2,w
  6650  0CC6  00CB               	movwf	??___fttol+2
  6651  0CC7  3017               	movlw	23
  6652  0CC8                     u4135:
  6653  0CC8  1003               	clrc
  6654  0CC9  0CCB               	rrf	??___fttol+2,f
  6655  0CCA  0CCA               	rrf	??___fttol+1,f
  6656  0CCB  0CC9               	rrf	??___fttol,f
  6657  0CCC  3EFF               	addlw	-1
  6658  0CCD  1D03               	skipz
  6659  0CCE  2CC8               	goto	u4135
  6660  0CCF  0849               	movf	??___fttol,w
  6661  0CD0  00FF               	movwf	127
  6662  0CD1  087F               	movf	127,w
  6663  0CD2  00CC               	movwf	___fttol@sign1
  6664  0CD3  17C6               	bsf	___fttol@f1+1,7
  6665  0CD4  30FF               	movlw	255
  6666  0CD5  05C5               	andwf	___fttol@f1,f
  6667  0CD6  30FF               	movlw	255
  6668  0CD7  05C6               	andwf	___fttol@f1+1,f
  6669  0CD8  3000               	movlw	0
  6670  0CD9  05C7               	andwf	___fttol@f1+2,f
  6671  0CDA  0845               	movf	___fttol@f1,w
  6672  0CDB  00CD               	movwf	___fttol@lval
  6673  0CDC  0846               	movf	___fttol@f1+1,w
  6674  0CDD  00CE               	movwf	___fttol@lval+1
  6675  0CDE  0847               	movf	___fttol@f1+2,w
  6676  0CDF  00CF               	movwf	___fttol@lval+2
  6677  0CE0  01D0               	clrf	___fttol@lval+3
  6678  0CE1  308E               	movlw	142
  6679  0CE2  02D1               	subwf	___fttol@exp1,f
  6680  0CE3  1FD1               	btfss	___fttol@exp1,7
  6681  0CE4  2CFA               	goto	l3975
  6682  0CE5  0851               	movf	___fttol@exp1,w
  6683  0CE6  3A80               	xorlw	128
  6684  0CE7  3E8F               	addlw	143
  6685  0CE8  1C03               	btfss	3,0
  6686  0CE9  2CB8               	goto	l3949
  6687  0CEA                     l3971:
  6688  0CEA  3001               	movlw	1
  6689  0CEB                     u4165:
  6690  0CEB  1003               	clrc
  6691  0CEC  0CD0               	rrf	___fttol@lval+3,f
  6692  0CED  0CCF               	rrf	___fttol@lval+2,f
  6693  0CEE  0CCE               	rrf	___fttol@lval+1,f
  6694  0CEF  0CCD               	rrf	___fttol@lval,f
  6695  0CF0  3EFF               	addlw	-1
  6696  0CF1  1D03               	skipz
  6697  0CF2  2CEB               	goto	u4165
  6698  0CF3  3001               	movlw	1
  6699  0CF4  00FF               	movwf	127
  6700  0CF5  087F               	movf	127,w
  6701  0CF6  07D1               	addwf	___fttol@exp1,f
  6702  0CF7  1903               	btfsc	3,2
  6703  0CF8  2D0D               	goto	l3983
  6704  0CF9  2CEA               	goto	l3971
  6705  0CFA                     l3975:
  6706  0CFA  3018               	movlw	24
  6707  0CFB  0251               	subwf	___fttol@exp1,w
  6708  0CFC  1803               	btfsc	3,0
  6709  0CFD  2CB8               	goto	l3949
  6710  0CFE                     l994:
  6711  0CFE  0851               	movf	___fttol@exp1,w
  6712  0CFF  1903               	btfsc	3,2
  6713  0D00  2D0D               	goto	l3983
  6714  0D01  3001               	movlw	1
  6715  0D02  00C9               	movwf	??___fttol
  6716  0D03                     u4195:
  6717  0D03  1003               	clrc
  6718  0D04  0DCD               	rlf	___fttol@lval,f
  6719  0D05  0DCE               	rlf	___fttol@lval+1,f
  6720  0D06  0DCF               	rlf	___fttol@lval+2,f
  6721  0D07  0DD0               	rlf	___fttol@lval+3,f
  6722  0D08  0BC9               	decfsz	??___fttol,f
  6723  0D09  2D03               	goto	u4195
  6724  0D0A  3001               	movlw	1
  6725  0D0B  02D1               	subwf	___fttol@exp1,f
  6726  0D0C  2CFE               	goto	l994
  6727  0D0D                     l3983:
  6728  0D0D  084C               	movf	___fttol@sign1,w
  6729  0D0E  1903               	btfsc	3,2
  6730  0D0F  2D1B               	goto	l3987
  6731  0D10  09CD               	comf	___fttol@lval,f
  6732  0D11  09CE               	comf	___fttol@lval+1,f
  6733  0D12  09CF               	comf	___fttol@lval+2,f
  6734  0D13  09D0               	comf	___fttol@lval+3,f
  6735  0D14  0ACD               	incf	___fttol@lval,f
  6736  0D15  1903               	skipnz
  6737  0D16  0ACE               	incf	___fttol@lval+1,f
  6738  0D17  1903               	skipnz
  6739  0D18  0ACF               	incf	___fttol@lval+2,f
  6740  0D19  1903               	skipnz
  6741  0D1A  0AD0               	incf	___fttol@lval+3,f
  6742  0D1B                     l3987:
  6743  0D1B  0850               	movf	___fttol@lval+3,w
  6744  0D1C  00C8               	movwf	?___fttol+3
  6745  0D1D  084F               	movf	___fttol@lval+2,w
  6746  0D1E  00C7               	movwf	?___fttol+2
  6747  0D1F  084E               	movf	___fttol@lval+1,w
  6748  0D20  00C6               	movwf	?___fttol+1
  6749  0D21  084D               	movf	___fttol@lval,w
  6750  0D22  00C5               	movwf	?___fttol
  6751  0D23  0008               	return
  6752  0D24                     __end_of___fttol:
  6753                           
  6754                           	psect	text33
  6755  0433                     __ptext33:	
  6756 ;; *************** function ___ftmul *****************
  6757 ;; Defined at:
  6758 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftmul.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  f1              3    7[BANK0 ] float 
  6761 ;;  f2              3   10[BANK0 ] float 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
  6764 ;;  sign            1   21[BANK0 ] unsigned char 
  6765 ;;  cntr            1   20[BANK0 ] unsigned char 
  6766 ;;  exp             1   16[BANK0 ] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  3    7[BANK0 ] float 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6776 ;;      Params:         0       6       0       0       0
  6777 ;;      Locals:         0       6       0       0       0
  6778 ;;      Temps:          0       3       0       0       0
  6779 ;;      Totals:         0      15       0       0       0
  6780 ;;Total ram usage:       15 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    3
  6783 ;; This function calls:
  6784 ;;		___ftpack
  6785 ;; This function is called by:
  6786 ;;		_Adc_Rpm_Read
  6787 ;;		_Adc_Pwm_Read
  6788 ;;		_Adc_Min_Read
  6789 ;;		_Adc_Temp_Read
  6790 ;;		_Pwm1
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function ___ftmul
  6796  0433                     ___ftmul:
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6800  0433  1283               	bcf	3,5	;RP0=0, select bank0
  6801  0434  1303               	bcf	3,6	;RP1=0, select bank0
  6802  0435  0827               	movf	___ftmul@f1,w
  6803  0436  00AD               	movwf	??___ftmul
  6804  0437  0828               	movf	___ftmul@f1+1,w
  6805  0438  00AE               	movwf	??___ftmul+1
  6806  0439  0829               	movf	___ftmul@f1+2,w
  6807  043A  00AF               	movwf	??___ftmul+2
  6808  043B  1003               	clrc
  6809  043C  0D2E               	rlf	??___ftmul+1,w
  6810  043D  0D2F               	rlf	??___ftmul+2,w
  6811  043E  00FF               	movwf	127
  6812  043F  087F               	movf	127,w
  6813  0440  00B0               	movwf	___ftmul@exp
  6814  0441  0830               	movf	___ftmul@exp,w
  6815  0442  1D03               	btfss	3,2
  6816  0443  2C4B               	goto	l3903
  6817  0444  3000               	movlw	0
  6818  0445  00A7               	movwf	?___ftmul
  6819  0446  3000               	movlw	0
  6820  0447  00A8               	movwf	?___ftmul+1
  6821  0448  3000               	movlw	0
  6822  0449  00A9               	movwf	?___ftmul+2
  6823  044A  0008               	return
  6824  044B                     l3903:
  6825  044B  082A               	movf	___ftmul@f2,w
  6826  044C  00AD               	movwf	??___ftmul
  6827  044D  082B               	movf	___ftmul@f2+1,w
  6828  044E  00AE               	movwf	??___ftmul+1
  6829  044F  082C               	movf	___ftmul@f2+2,w
  6830  0450  00AF               	movwf	??___ftmul+2
  6831  0451  1003               	clrc
  6832  0452  0D2E               	rlf	??___ftmul+1,w
  6833  0453  0D2F               	rlf	??___ftmul+2,w
  6834  0454  00FF               	movwf	127
  6835  0455  087F               	movf	127,w
  6836  0456  00B5               	movwf	___ftmul@sign
  6837  0457  0835               	movf	___ftmul@sign,w
  6838  0458  1D03               	btfss	3,2
  6839  0459  2C61               	goto	l3909
  6840  045A  3000               	movlw	0
  6841  045B  00A7               	movwf	?___ftmul
  6842  045C  3000               	movlw	0
  6843  045D  00A8               	movwf	?___ftmul+1
  6844  045E  3000               	movlw	0
  6845  045F  00A9               	movwf	?___ftmul+2
  6846  0460  0008               	return
  6847  0461                     l3909:
  6848  0461  0835               	movf	___ftmul@sign,w
  6849  0462  3E7B               	addlw	123
  6850  0463  00FF               	movwf	127
  6851  0464  087F               	movf	127,w
  6852  0465  07B0               	addwf	___ftmul@exp,f
  6853  0466  0827               	movf	___ftmul@f1,w
  6854  0467  00AD               	movwf	??___ftmul
  6855  0468  0828               	movf	___ftmul@f1+1,w
  6856  0469  00AE               	movwf	??___ftmul+1
  6857  046A  0829               	movf	___ftmul@f1+2,w
  6858  046B  00AF               	movwf	??___ftmul+2
  6859  046C  3010               	movlw	16
  6860  046D                     u4005:
  6861  046D  1003               	clrc
  6862  046E  0CAF               	rrf	??___ftmul+2,f
  6863  046F  0CAE               	rrf	??___ftmul+1,f
  6864  0470  0CAD               	rrf	??___ftmul,f
  6865  0471  3EFF               	addlw	-1
  6866  0472  1D03               	skipz
  6867  0473  2C6D               	goto	u4005
  6868  0474  082D               	movf	??___ftmul,w
  6869  0475  00FF               	movwf	127
  6870  0476  087F               	movf	127,w
  6871  0477  00B5               	movwf	___ftmul@sign
  6872  0478  082A               	movf	___ftmul@f2,w
  6873  0479  00AD               	movwf	??___ftmul
  6874  047A  082B               	movf	___ftmul@f2+1,w
  6875  047B  00AE               	movwf	??___ftmul+1
  6876  047C  082C               	movf	___ftmul@f2+2,w
  6877  047D  00AF               	movwf	??___ftmul+2
  6878  047E  3010               	movlw	16
  6879  047F                     u4015:
  6880  047F  1003               	clrc
  6881  0480  0CAF               	rrf	??___ftmul+2,f
  6882  0481  0CAE               	rrf	??___ftmul+1,f
  6883  0482  0CAD               	rrf	??___ftmul,f
  6884  0483  3EFF               	addlw	-1
  6885  0484  1D03               	skipz
  6886  0485  2C7F               	goto	u4015
  6887  0486  082D               	movf	??___ftmul,w
  6888  0487  00FF               	movwf	127
  6889  0488  087F               	movf	127,w
  6890  0489  06B5               	xorwf	___ftmul@sign,f
  6891  048A  3080               	movlw	128
  6892  048B  00FF               	movwf	127
  6893  048C  087F               	movf	127,w
  6894  048D  05B5               	andwf	___ftmul@sign,f
  6895  048E  17A8               	bsf	___ftmul@f1+1,7
  6896  048F  17AB               	bsf	___ftmul@f2+1,7
  6897  0490  30FF               	movlw	255
  6898  0491  05AA               	andwf	___ftmul@f2,f
  6899  0492  30FF               	movlw	255
  6900  0493  05AB               	andwf	___ftmul@f2+1,f
  6901  0494  3000               	movlw	0
  6902  0495  05AC               	andwf	___ftmul@f2+2,f
  6903  0496  3000               	movlw	0
  6904  0497  00B1               	movwf	___ftmul@f3_as_product
  6905  0498  3000               	movlw	0
  6906  0499  00B2               	movwf	___ftmul@f3_as_product+1
  6907  049A  3000               	movlw	0
  6908  049B  00B3               	movwf	___ftmul@f3_as_product+2
  6909  049C  3007               	movlw	7
  6910  049D  00FF               	movwf	127
  6911  049E  087F               	movf	127,w
  6912  049F  00B4               	movwf	___ftmul@cntr
  6913  04A0                     l3921:
  6914  04A0  1C27               	btfss	___ftmul@f1,0
  6915  04A1  2CB0               	goto	l3925
  6916  04A2  082A               	movf	___ftmul@f2,w
  6917  04A3  07B1               	addwf	___ftmul@f3_as_product,f
  6918  04A4  082B               	movf	___ftmul@f2+1,w
  6919  04A5  1103               	clrz
  6920  04A6  1803               	skipnc
  6921  04A7  0A2B               	incf	___ftmul@f2+1,w
  6922  04A8  1D03               	btfss	3,2
  6923  04A9  07B2               	addwf	___ftmul@f3_as_product+1,f
  6924  04AA  082C               	movf	___ftmul@f2+2,w
  6925  04AB  1103               	clrz
  6926  04AC  1803               	skipnc
  6927  04AD  0A2C               	incf	___ftmul@f2+2,w
  6928  04AE  1D03               	btfss	3,2
  6929  04AF  07B3               	addwf	___ftmul@f3_as_product+2,f
  6930  04B0                     l3925:
  6931  04B0  3001               	movlw	1
  6932  04B1                     u4045:
  6933  04B1  1003               	clrc
  6934  04B2  0CA9               	rrf	___ftmul@f1+2,f
  6935  04B3  0CA8               	rrf	___ftmul@f1+1,f
  6936  04B4  0CA7               	rrf	___ftmul@f1,f
  6937  04B5  3EFF               	addlw	-1
  6938  04B6  1D03               	skipz
  6939  04B7  2CB1               	goto	u4045
  6940  04B8  3001               	movlw	1
  6941  04B9                     u4055:
  6942  04B9  1003               	clrc
  6943  04BA  0DAA               	rlf	___ftmul@f2,f
  6944  04BB  0DAB               	rlf	___ftmul@f2+1,f
  6945  04BC  0DAC               	rlf	___ftmul@f2+2,f
  6946  04BD  3EFF               	addlw	-1
  6947  04BE  1D03               	skipz
  6948  04BF  2CB9               	goto	u4055
  6949  04C0  3001               	movlw	1
  6950  04C1  02B4               	subwf	___ftmul@cntr,f
  6951  04C2  1D03               	btfss	3,2
  6952  04C3  2CA0               	goto	l3921
  6953  04C4  3009               	movlw	9
  6954  04C5  00FF               	movwf	127
  6955  04C6  087F               	movf	127,w
  6956  04C7  00B4               	movwf	___ftmul@cntr
  6957  04C8                     l3933:
  6958  04C8  1C27               	btfss	___ftmul@f1,0
  6959  04C9  2CD8               	goto	l3937
  6960  04CA  082A               	movf	___ftmul@f2,w
  6961  04CB  07B1               	addwf	___ftmul@f3_as_product,f
  6962  04CC  082B               	movf	___ftmul@f2+1,w
  6963  04CD  1103               	clrz
  6964  04CE  1803               	skipnc
  6965  04CF  0A2B               	incf	___ftmul@f2+1,w
  6966  04D0  1D03               	btfss	3,2
  6967  04D1  07B2               	addwf	___ftmul@f3_as_product+1,f
  6968  04D2  082C               	movf	___ftmul@f2+2,w
  6969  04D3  1103               	clrz
  6970  04D4  1803               	skipnc
  6971  04D5  0A2C               	incf	___ftmul@f2+2,w
  6972  04D6  1D03               	btfss	3,2
  6973  04D7  07B3               	addwf	___ftmul@f3_as_product+2,f
  6974  04D8                     l3937:
  6975  04D8  3001               	movlw	1
  6976  04D9                     u4095:
  6977  04D9  1003               	clrc
  6978  04DA  0CA9               	rrf	___ftmul@f1+2,f
  6979  04DB  0CA8               	rrf	___ftmul@f1+1,f
  6980  04DC  0CA7               	rrf	___ftmul@f1,f
  6981  04DD  3EFF               	addlw	-1
  6982  04DE  1D03               	skipz
  6983  04DF  2CD9               	goto	u4095
  6984  04E0  3001               	movlw	1
  6985  04E1                     u4105:
  6986  04E1  1003               	clrc
  6987  04E2  0CB3               	rrf	___ftmul@f3_as_product+2,f
  6988  04E3  0CB2               	rrf	___ftmul@f3_as_product+1,f
  6989  04E4  0CB1               	rrf	___ftmul@f3_as_product,f
  6990  04E5  3EFF               	addlw	-1
  6991  04E6  1D03               	skipz
  6992  04E7  2CE1               	goto	u4105
  6993  04E8  3001               	movlw	1
  6994  04E9  02B4               	subwf	___ftmul@cntr,f
  6995  04EA  1D03               	btfss	3,2
  6996  04EB  2CC8               	goto	l3933
  6997  04EC  0831               	movf	___ftmul@f3_as_product,w
  6998  04ED  00F3               	movwf	___ftpack@arg
  6999  04EE  0832               	movf	___ftmul@f3_as_product+1,w
  7000  04EF  00F4               	movwf	___ftpack@arg+1
  7001  04F0  0833               	movf	___ftmul@f3_as_product+2,w
  7002  04F1  00F5               	movwf	___ftpack@arg+2
  7003  04F2  0830               	movf	___ftmul@exp,w
  7004  04F3  00FF               	movwf	127
  7005  04F4  087F               	movf	127,w
  7006  04F5  00F6               	movwf	___ftpack@exp
  7007  04F6  0835               	movf	___ftmul@sign,w
  7008  04F7  00FF               	movwf	127
  7009  04F8  087F               	movf	127,w
  7010  04F9  00F7               	movwf	___ftpack@sign
  7011  04FA  120A  158A  2343   	fcall	___ftpack
  7012  04FD  0873               	movf	?___ftpack,w
  7013  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  7014  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  7015  0500  00A7               	movwf	?___ftmul
  7016  0501  0874               	movf	?___ftpack+1,w
  7017  0502  00A8               	movwf	?___ftmul+1
  7018  0503  0875               	movf	?___ftpack+2,w
  7019  0504  00A9               	movwf	?___ftmul+2
  7020  0505  0008               	return
  7021  0506                     __end_of___ftmul:
  7022                           
  7023                           	psect	text34
  7024  073A                     __ptext34:	
  7025 ;; *************** function ___ftdiv *****************
  7026 ;; Defined at:
  7027 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftdiv.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;  f2              3   22[BANK0 ] float 
  7030 ;;  f1              3   25[BANK0 ] float 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  f3              3   32[BANK0 ] float 
  7033 ;;  sign            1   36[BANK0 ] unsigned char 
  7034 ;;  exp             1   35[BANK0 ] unsigned char 
  7035 ;;  cntr            1   31[BANK0 ] unsigned char 
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  3   22[BANK0 ] float 
  7038 ;; Registers used:
  7039 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7040 ;; Tracked objects:
  7041 ;;		On entry : 0/0
  7042 ;;		On exit  : 0/0
  7043 ;;		Unchanged: 0/0
  7044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7045 ;;      Params:         0       6       0       0       0
  7046 ;;      Locals:         0       6       0       0       0
  7047 ;;      Temps:          0       3       0       0       0
  7048 ;;      Totals:         0      15       0       0       0
  7049 ;;Total ram usage:       15 bytes
  7050 ;; Hardware stack levels used:    1
  7051 ;; Hardware stack levels required when called:    3
  7052 ;; This function calls:
  7053 ;;		___ftpack
  7054 ;; This function is called by:
  7055 ;;		_Adc_Rpm_Read
  7056 ;;		_Adc_Pwm_Read
  7057 ;;		_Adc_Min_Read
  7058 ;;		_Adc_Temp_Read
  7059 ;;		_Pwm1_init
  7060 ;;		_Pwm1
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function ___ftdiv
  7066  073A                     ___ftdiv:
  7067                           
  7068                           ;incstack = 0
  7069                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7070  073A  1283               	bcf	3,5	;RP0=0, select bank0
  7071  073B  1303               	bcf	3,6	;RP1=0, select bank0
  7072  073C  0839               	movf	___ftdiv@f1,w
  7073  073D  00BC               	movwf	??___ftdiv
  7074  073E  083A               	movf	___ftdiv@f1+1,w
  7075  073F  00BD               	movwf	??___ftdiv+1
  7076  0740  083B               	movf	___ftdiv@f1+2,w
  7077  0741  00BE               	movwf	??___ftdiv+2
  7078  0742  1003               	clrc
  7079  0743  0D3D               	rlf	??___ftdiv+1,w
  7080  0744  0D3E               	rlf	??___ftdiv+2,w
  7081  0745  00FF               	movwf	127
  7082  0746  087F               	movf	127,w
  7083  0747  00C3               	movwf	___ftdiv@exp
  7084  0748  0843               	movf	___ftdiv@exp,w
  7085  0749  1D03               	btfss	3,2
  7086  074A  2F52               	goto	l3857
  7087  074B  3000               	movlw	0
  7088  074C  00B6               	movwf	?___ftdiv
  7089  074D  3000               	movlw	0
  7090  074E  00B7               	movwf	?___ftdiv+1
  7091  074F  3000               	movlw	0
  7092  0750  00B8               	movwf	?___ftdiv+2
  7093  0751  0008               	return
  7094  0752                     l3857:
  7095  0752  0836               	movf	___ftdiv@f2,w
  7096  0753  00BC               	movwf	??___ftdiv
  7097  0754  0837               	movf	___ftdiv@f2+1,w
  7098  0755  00BD               	movwf	??___ftdiv+1
  7099  0756  0838               	movf	___ftdiv@f2+2,w
  7100  0757  00BE               	movwf	??___ftdiv+2
  7101  0758  1003               	clrc
  7102  0759  0D3D               	rlf	??___ftdiv+1,w
  7103  075A  0D3E               	rlf	??___ftdiv+2,w
  7104  075B  00FF               	movwf	127
  7105  075C  087F               	movf	127,w
  7106  075D  00C4               	movwf	___ftdiv@sign
  7107  075E  0844               	movf	___ftdiv@sign,w
  7108  075F  1D03               	btfss	3,2
  7109  0760  2F68               	goto	l3863
  7110  0761  3000               	movlw	0
  7111  0762  00B6               	movwf	?___ftdiv
  7112  0763  3000               	movlw	0
  7113  0764  00B7               	movwf	?___ftdiv+1
  7114  0765  3000               	movlw	0
  7115  0766  00B8               	movwf	?___ftdiv+2
  7116  0767  0008               	return
  7117  0768                     l3863:
  7118  0768  3000               	movlw	0
  7119  0769  00C0               	movwf	___ftdiv@f3
  7120  076A  3000               	movlw	0
  7121  076B  00C1               	movwf	___ftdiv@f3+1
  7122  076C  3000               	movlw	0
  7123  076D  00C2               	movwf	___ftdiv@f3+2
  7124  076E  3089               	movlw	137
  7125  076F  0744               	addwf	___ftdiv@sign,w
  7126  0770  00BC               	movwf	??___ftdiv
  7127  0771  083C               	movf	??___ftdiv,w
  7128  0772  02C3               	subwf	___ftdiv@exp,f
  7129  0773  0839               	movf	___ftdiv@f1,w
  7130  0774  00BC               	movwf	??___ftdiv
  7131  0775  083A               	movf	___ftdiv@f1+1,w
  7132  0776  00BD               	movwf	??___ftdiv+1
  7133  0777  083B               	movf	___ftdiv@f1+2,w
  7134  0778  00BE               	movwf	??___ftdiv+2
  7135  0779  3010               	movlw	16
  7136  077A                     u3925:
  7137  077A  1003               	clrc
  7138  077B  0CBE               	rrf	??___ftdiv+2,f
  7139  077C  0CBD               	rrf	??___ftdiv+1,f
  7140  077D  0CBC               	rrf	??___ftdiv,f
  7141  077E  3EFF               	addlw	-1
  7142  077F  1D03               	skipz
  7143  0780  2F7A               	goto	u3925
  7144  0781  083C               	movf	??___ftdiv,w
  7145  0782  00FF               	movwf	127
  7146  0783  087F               	movf	127,w
  7147  0784  00C4               	movwf	___ftdiv@sign
  7148  0785  0836               	movf	___ftdiv@f2,w
  7149  0786  00BC               	movwf	??___ftdiv
  7150  0787  0837               	movf	___ftdiv@f2+1,w
  7151  0788  00BD               	movwf	??___ftdiv+1
  7152  0789  0838               	movf	___ftdiv@f2+2,w
  7153  078A  00BE               	movwf	??___ftdiv+2
  7154  078B  3010               	movlw	16
  7155  078C                     u3935:
  7156  078C  1003               	clrc
  7157  078D  0CBE               	rrf	??___ftdiv+2,f
  7158  078E  0CBD               	rrf	??___ftdiv+1,f
  7159  078F  0CBC               	rrf	??___ftdiv,f
  7160  0790  3EFF               	addlw	-1
  7161  0791  1D03               	skipz
  7162  0792  2F8C               	goto	u3935
  7163  0793  083C               	movf	??___ftdiv,w
  7164  0794  00FF               	movwf	127
  7165  0795  087F               	movf	127,w
  7166  0796  06C4               	xorwf	___ftdiv@sign,f
  7167  0797  3080               	movlw	128
  7168  0798  00FF               	movwf	127
  7169  0799  087F               	movf	127,w
  7170  079A  05C4               	andwf	___ftdiv@sign,f
  7171  079B  17BA               	bsf	___ftdiv@f1+1,7
  7172  079C  30FF               	movlw	255
  7173  079D  05B9               	andwf	___ftdiv@f1,f
  7174  079E  30FF               	movlw	255
  7175  079F  05BA               	andwf	___ftdiv@f1+1,f
  7176  07A0  3000               	movlw	0
  7177  07A1  05BB               	andwf	___ftdiv@f1+2,f
  7178  07A2  17B7               	bsf	___ftdiv@f2+1,7
  7179  07A3  30FF               	movlw	255
  7180  07A4  05B6               	andwf	___ftdiv@f2,f
  7181  07A5  30FF               	movlw	255
  7182  07A6  05B7               	andwf	___ftdiv@f2+1,f
  7183  07A7  3000               	movlw	0
  7184  07A8  05B8               	andwf	___ftdiv@f2+2,f
  7185  07A9  3018               	movlw	24
  7186  07AA  00FF               	movwf	127
  7187  07AB  087F               	movf	127,w
  7188  07AC  00BF               	movwf	___ftdiv@cntr
  7189  07AD                     l3881:
  7190  07AD  3001               	movlw	1
  7191  07AE                     u3945:
  7192  07AE  1003               	clrc
  7193  07AF  0DC0               	rlf	___ftdiv@f3,f
  7194  07B0  0DC1               	rlf	___ftdiv@f3+1,f
  7195  07B1  0DC2               	rlf	___ftdiv@f3+2,f
  7196  07B2  3EFF               	addlw	-1
  7197  07B3  1D03               	skipz
  7198  07B4  2FAE               	goto	u3945
  7199  07B5  0838               	movf	___ftdiv@f2+2,w
  7200  07B6  023B               	subwf	___ftdiv@f1+2,w
  7201  07B7  1D03               	skipz
  7202  07B8  2FBF               	goto	u3955
  7203  07B9  0837               	movf	___ftdiv@f2+1,w
  7204  07BA  023A               	subwf	___ftdiv@f1+1,w
  7205  07BB  1D03               	skipz
  7206  07BC  2FBF               	goto	u3955
  7207  07BD  0836               	movf	___ftdiv@f2,w
  7208  07BE  0239               	subwf	___ftdiv@f1,w
  7209  07BF                     u3955:
  7210  07BF  1C03               	skipc
  7211  07C0  2FCC               	goto	l3889
  7212  07C1  0836               	movf	___ftdiv@f2,w
  7213  07C2  02B9               	subwf	___ftdiv@f1,f
  7214  07C3  0837               	movf	___ftdiv@f2+1,w
  7215  07C4  1C03               	skipc
  7216  07C5  0F37               	incfsz	___ftdiv@f2+1,w
  7217  07C6  02BA               	subwf	___ftdiv@f1+1,f
  7218  07C7  0838               	movf	___ftdiv@f2+2,w
  7219  07C8  1C03               	skipc
  7220  07C9  0A38               	incf	___ftdiv@f2+2,w
  7221  07CA  02BB               	subwf	___ftdiv@f1+2,f
  7222  07CB  1440               	bsf	___ftdiv@f3,0
  7223  07CC                     l3889:
  7224  07CC  3001               	movlw	1
  7225  07CD                     u3965:
  7226  07CD  1003               	clrc
  7227  07CE  0DB9               	rlf	___ftdiv@f1,f
  7228  07CF  0DBA               	rlf	___ftdiv@f1+1,f
  7229  07D0  0DBB               	rlf	___ftdiv@f1+2,f
  7230  07D1  3EFF               	addlw	-1
  7231  07D2  1D03               	skipz
  7232  07D3  2FCD               	goto	u3965
  7233  07D4  3001               	movlw	1
  7234  07D5  02BF               	subwf	___ftdiv@cntr,f
  7235  07D6  1D03               	btfss	3,2
  7236  07D7  2FAD               	goto	l3881
  7237  07D8  0840               	movf	___ftdiv@f3,w
  7238  07D9  00F3               	movwf	___ftpack@arg
  7239  07DA  0841               	movf	___ftdiv@f3+1,w
  7240  07DB  00F4               	movwf	___ftpack@arg+1
  7241  07DC  0842               	movf	___ftdiv@f3+2,w
  7242  07DD  00F5               	movwf	___ftpack@arg+2
  7243  07DE  0843               	movf	___ftdiv@exp,w
  7244  07DF  00FF               	movwf	127
  7245  07E0  087F               	movf	127,w
  7246  07E1  00F6               	movwf	___ftpack@exp
  7247  07E2  0844               	movf	___ftdiv@sign,w
  7248  07E3  00FF               	movwf	127
  7249  07E4  087F               	movf	127,w
  7250  07E5  00F7               	movwf	___ftpack@sign
  7251  07E6  120A  158A  2343   	fcall	___ftpack
  7252  07E9  0873               	movf	?___ftpack,w
  7253  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  7254  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  7255  07EC  00B6               	movwf	?___ftdiv
  7256  07ED  0874               	movf	?___ftpack+1,w
  7257  07EE  00B7               	movwf	?___ftdiv+1
  7258  07EF  0875               	movf	?___ftpack+2,w
  7259  07F0  00B8               	movwf	?___ftdiv+2
  7260  07F1  0008               	return
  7261  07F2                     __end_of___ftdiv:
  7262                           
  7263                           	psect	text35
  7264  16F4                     __ptext35:	
  7265 ;; *************** function ___awtoft *****************
  7266 ;; Defined at:
  7267 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\awtoft.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  c               2    3[BANK0 ] int 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  sign            1    6[BANK0 ] unsigned char 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  3    3[BANK0 ] float 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7281 ;;      Params:         0       3       0       0       0
  7282 ;;      Locals:         0       1       0       0       0
  7283 ;;      Temps:          0       0       0       0       0
  7284 ;;      Totals:         0       4       0       0       0
  7285 ;;Total ram usage:        4 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    3
  7288 ;; This function calls:
  7289 ;;		___ftpack
  7290 ;; This function is called by:
  7291 ;;		_Adc_Rpm_Read
  7292 ;;		_Adc_Pwm_Read
  7293 ;;		_Adc_Min_Read
  7294 ;;		_Adc_Temp_Read
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           
  7299                           ;psect for function ___awtoft
  7300  16F4                     ___awtoft:
  7301                           
  7302                           ;incstack = 0
  7303                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7304  16F4  1283               	bcf	3,5	;RP0=0, select bank0
  7305  16F5  1303               	bcf	3,6	;RP1=0, select bank0
  7306  16F6  01A6               	clrf	___awtoft@sign
  7307  16F7  1FA4               	btfss	___awtoft@c+1,7
  7308  16F8  2F00               	goto	l3847
  7309  16F9  09A3               	comf	___awtoft@c,f
  7310  16FA  09A4               	comf	___awtoft@c+1,f
  7311  16FB  0AA3               	incf	___awtoft@c,f
  7312  16FC  1903               	skipnz
  7313  16FD  0AA4               	incf	___awtoft@c+1,f
  7314  16FE  01A6               	clrf	___awtoft@sign
  7315  16FF  0AA6               	incf	___awtoft@sign,f
  7316  1700                     l3847:
  7317  1700  0823               	movf	___awtoft@c,w
  7318  1701  00F3               	movwf	___ftpack@arg
  7319  1702  0824               	movf	___awtoft@c+1,w
  7320  1703  00F4               	movwf	___ftpack@arg+1
  7321  1704  01F5               	clrf	___ftpack@arg+2
  7322  1705  308E               	movlw	142
  7323  1706  00FF               	movwf	127
  7324  1707  087F               	movf	127,w
  7325  1708  00F6               	movwf	___ftpack@exp
  7326  1709  0826               	movf	___awtoft@sign,w
  7327  170A  00FF               	movwf	127
  7328  170B  087F               	movf	127,w
  7329  170C  00F7               	movwf	___ftpack@sign
  7330  170D  120A  158A  2343   	fcall	___ftpack
  7331  1710  0873               	movf	?___ftpack,w
  7332  1711  1283               	bcf	3,5	;RP0=0, select bank0
  7333  1712  1303               	bcf	3,6	;RP1=0, select bank0
  7334  1713  00A3               	movwf	?___awtoft
  7335  1714  0874               	movf	?___ftpack+1,w
  7336  1715  00A4               	movwf	?___awtoft+1
  7337  1716  0875               	movf	?___ftpack+2,w
  7338  1717  00A5               	movwf	?___awtoft+2
  7339  1718  0008               	return
  7340  1719                     __end_of___awtoft:
  7341                           
  7342                           	psect	text36
  7343  0B43                     __ptext36:	
  7344 ;; *************** function ___ftpack *****************
  7345 ;; Defined at:
  7346 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\float.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;  arg             3    3[COMMON] unsigned um
  7349 ;;  exp             1    6[COMMON] unsigned char 
  7350 ;;  sign            1    7[COMMON] unsigned char 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;                  3    3[COMMON] float 
  7355 ;; Registers used:
  7356 ;;		wreg, status,2, status,0, btemp+1
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7362 ;;      Params:         5       0       0       0       0
  7363 ;;      Locals:         0       0       0       0       0
  7364 ;;      Temps:          0       3       0       0       0
  7365 ;;      Totals:         5       3       0       0       0
  7366 ;;Total ram usage:        8 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; Hardware stack levels required when called:    2
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		___awtoft
  7373 ;;		___ftdiv
  7374 ;;		___ftmul
  7375 ;;		___lwtoft
  7376 ;;		___ftadd
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           
  7381                           ;psect for function ___ftpack
  7382  0B43                     ___ftpack:
  7383                           
  7384                           ;incstack = 0
  7385                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  7386  0B43  0876               	movf	___ftpack@exp,w
  7387  0B44  1903               	btfsc	3,2
  7388  0B45  2B4B               	goto	l3675
  7389  0B46  0875               	movf	___ftpack@arg+2,w
  7390  0B47  0474               	iorwf	___ftpack@arg+1,w
  7391  0B48  0473               	iorwf	___ftpack@arg,w
  7392  0B49  1D03               	skipz
  7393  0B4A  2B5E               	goto	l3683
  7394  0B4B                     l3675:
  7395  0B4B  3000               	movlw	0
  7396  0B4C  00F3               	movwf	?___ftpack
  7397  0B4D  3000               	movlw	0
  7398  0B4E  00F4               	movwf	?___ftpack+1
  7399  0B4F  3000               	movlw	0
  7400  0B50  00F5               	movwf	?___ftpack+2
  7401  0B51  0008               	return
  7402  0B52                     l3679:
  7403  0B52  3001               	movlw	1
  7404  0B53  00FF               	movwf	127
  7405  0B54  087F               	movf	127,w
  7406  0B55  07F6               	addwf	___ftpack@exp,f
  7407  0B56  3001               	movlw	1
  7408  0B57                     u3595:
  7409  0B57  1003               	clrc
  7410  0B58  0CF5               	rrf	___ftpack@arg+2,f
  7411  0B59  0CF4               	rrf	___ftpack@arg+1,f
  7412  0B5A  0CF3               	rrf	___ftpack@arg,f
  7413  0B5B  3EFF               	addlw	-1
  7414  0B5C  1D03               	skipz
  7415  0B5D  2B57               	goto	u3595
  7416  0B5E                     l3683:
  7417  0B5E  30FE               	movlw	254
  7418  0B5F  0575               	andwf	___ftpack@arg+2,w
  7419  0B60  1903               	btfsc	3,2
  7420  0B61  2B79               	goto	l3691
  7421  0B62  2B52               	goto	l3679
  7422  0B63                     l3685:
  7423  0B63  3001               	movlw	1
  7424  0B64  00FF               	movwf	127
  7425  0B65  087F               	movf	127,w
  7426  0B66  07F6               	addwf	___ftpack@exp,f
  7427  0B67  3001               	movlw	1
  7428  0B68  07F3               	addwf	___ftpack@arg,f
  7429  0B69  3000               	movlw	0
  7430  0B6A  1803               	skipnc
  7431  0B6B  3001               	movlw	1
  7432  0B6C  07F4               	addwf	___ftpack@arg+1,f
  7433  0B6D  3000               	movlw	0
  7434  0B6E  1803               	skipnc
  7435  0B6F  3001               	movlw	1
  7436  0B70  07F5               	addwf	___ftpack@arg+2,f
  7437  0B71  3001               	movlw	1
  7438  0B72                     u3615:
  7439  0B72  1003               	clrc
  7440  0B73  0CF5               	rrf	___ftpack@arg+2,f
  7441  0B74  0CF4               	rrf	___ftpack@arg+1,f
  7442  0B75  0CF3               	rrf	___ftpack@arg,f
  7443  0B76  3EFF               	addlw	-1
  7444  0B77  1D03               	skipz
  7445  0B78  2B72               	goto	u3615
  7446  0B79                     l3691:
  7447  0B79  30FF               	movlw	255
  7448  0B7A  0575               	andwf	___ftpack@arg+2,w
  7449  0B7B  1903               	btfsc	3,2
  7450  0B7C  2B8C               	goto	l3695
  7451  0B7D  2B63               	goto	l3685
  7452  0B7E                     l3697:
  7453  0B7E  3002               	movlw	2
  7454  0B7F  0276               	subwf	___ftpack@exp,w
  7455  0B80  1C03               	btfss	3,0
  7456  0B81  2B8E               	goto	l910
  7457  0B82  3001               	movlw	1
  7458  0B83  02F6               	subwf	___ftpack@exp,f
  7459  0B84  3001               	movlw	1
  7460  0B85                     u3635:
  7461  0B85  1003               	clrc
  7462  0B86  0DF3               	rlf	___ftpack@arg,f
  7463  0B87  0DF4               	rlf	___ftpack@arg+1,f
  7464  0B88  0DF5               	rlf	___ftpack@arg+2,f
  7465  0B89  3EFF               	addlw	-1
  7466  0B8A  1D03               	skipz
  7467  0B8B  2B85               	goto	u3635
  7468  0B8C                     l3695:
  7469  0B8C  1FF4               	btfss	___ftpack@arg+1,7
  7470  0B8D  2B7E               	goto	l3697
  7471  0B8E                     l910:
  7472  0B8E  1876               	btfsc	___ftpack@exp,0
  7473  0B8F  2B96               	goto	l911
  7474  0B90  30FF               	movlw	255
  7475  0B91  05F3               	andwf	___ftpack@arg,f
  7476  0B92  307F               	movlw	127
  7477  0B93  05F4               	andwf	___ftpack@arg+1,f
  7478  0B94  30FF               	movlw	255
  7479  0B95  05F5               	andwf	___ftpack@arg+2,f
  7480  0B96                     l911:
  7481  0B96  1003               	clrc
  7482  0B97  0CF6               	rrf	___ftpack@exp,f
  7483  0B98  0876               	movf	___ftpack@exp,w
  7484  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  7485  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  7486  0B9B  00A0               	movwf	??___ftpack
  7487  0B9C  01A1               	clrf	??___ftpack+1
  7488  0B9D  01A2               	clrf	??___ftpack+2
  7489  0B9E  3010               	movlw	16
  7490  0B9F                     u3675:
  7491  0B9F  1003               	clrc
  7492  0BA0  0DA0               	rlf	??___ftpack,f
  7493  0BA1  0DA1               	rlf	??___ftpack+1,f
  7494  0BA2  0DA2               	rlf	??___ftpack+2,f
  7495  0BA3  3EFF               	addlw	-1
  7496  0BA4  1D03               	skipz
  7497  0BA5  2B9F               	goto	u3675
  7498  0BA6  0820               	movf	??___ftpack,w
  7499  0BA7  04F3               	iorwf	___ftpack@arg,f
  7500  0BA8  0821               	movf	??___ftpack+1,w
  7501  0BA9  04F4               	iorwf	___ftpack@arg+1,f
  7502  0BAA  0822               	movf	??___ftpack+2,w
  7503  0BAB  04F5               	iorwf	___ftpack@arg+2,f
  7504  0BAC  0877               	movf	___ftpack@sign,w
  7505  0BAD  1903               	btfsc	3,2
  7506  0BAE  0008               	return
  7507  0BAF  17F5               	bsf	___ftpack@arg+2,7
  7508  0BB0  0008               	return
  7509  0BB1                     __end_of___ftpack:
  7510                           
  7511                           	psect	text37
  7512  099B                     __ptext37:	
  7513 ;; *************** function _Adc *****************
  7514 ;; Defined at:
  7515 ;;		line 25 in file "ADC.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  channel         1    wreg     unsigned char 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  channel         1    0[BANK0 ] unsigned char 
  7520 ;;  convertion      2    1[BANK0 ] int 
  7521 ;; Return value:  Size  Location     Type
  7522 ;;                  2    3[COMMON] int 
  7523 ;; Registers used:
  7524 ;;		wreg, status,2, status,0, btemp+1
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7530 ;;      Params:         2       0       0       0       0
  7531 ;;      Locals:         0       3       0       0       0
  7532 ;;      Temps:          2       0       0       0       0
  7533 ;;      Totals:         4       3       0       0       0
  7534 ;;Total ram usage:        7 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    2
  7537 ;; This function calls:
  7538 ;;		Nothing
  7539 ;; This function is called by:
  7540 ;;		_Adc_Rpm_Read
  7541 ;;		_Adc_Pwm_Read
  7542 ;;		_Adc_Min_Read
  7543 ;;		_Adc_Temp_Read
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           
  7548                           ;psect for function _Adc
  7549  099B                     _Adc:
  7550                           
  7551                           ;incstack = 0
  7552                           ; Regs used in _Adc: [wreg+status,2+status,0+btemp+1]
  7553                           ;Adc@channel stored from wreg
  7554  099B  1283               	bcf	3,5	;RP0=0, select bank0
  7555  099C  1303               	bcf	3,6	;RP1=0, select bank0
  7556  099D  00A0               	movwf	Adc@channel
  7557                           
  7558                           ;ADC.c: 32:     ADCON0 &= 0xC3;
  7559  099E  30C3               	movlw	195
  7560  099F  00FF               	movwf	127
  7561  09A0  087F               	movf	127,w
  7562  09A1  059F               	andwf	31,f	;volatile
  7563                           
  7564                           ;ADC.c: 33:     ADCON0 |= channel<<2;
  7565  09A2  0820               	movf	Adc@channel,w	;volatile
  7566  09A3  00F5               	movwf	??_Adc
  7567  09A4  3001               	movlw	1
  7568  09A5                     u3815:
  7569  09A5  1003               	clrc
  7570  09A6  0DF5               	rlf	??_Adc,f
  7571  09A7  3EFF               	addlw	-1
  7572  09A8  1D03               	skipz
  7573  09A9  29A5               	goto	u3815
  7574  09AA  1003               	clrc
  7575  09AB  0D75               	rlf	??_Adc,w
  7576  09AC  00FF               	movwf	127
  7577  09AD  087F               	movf	127,w
  7578  09AE  049F               	iorwf	31,f	;volatile
  7579                           
  7580                           ;ADC.c: 36:     ADCON0bits.ADON = 1;
  7581  09AF  141F               	bsf	31,0	;volatile
  7582                           
  7583                           ;ADC.c: 37:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  7584  09B0  3074               	movlw	116
  7585  09B1  00F5               	movwf	??_Adc
  7586  09B2                     u5407:
  7587  09B2  0BF5               	decfsz	??_Adc,f
  7588  09B3  29B2               	goto	u5407
  7589  09B4  0000               	nop
  7590                           
  7591                           ;ADC.c: 41:     ADCON0bits.GO_nDONE = 1;
  7592  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  7593  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  7594  09B7  149F               	bsf	31,1	;volatile
  7595  09B8                     l512:	
  7596                           ;ADC.c: 42:     while(ADCON0bits.GO_nDONE == 1);
  7597                           
  7598  09B8  189F               	btfsc	31,1	;volatile
  7599  09B9  29B8               	goto	l512
  7600                           
  7601                           ;ADC.c: 43:     convertion = ADRESH, convertion = convertion<<8;
  7602  09BA  081E               	movf	30,w	;volatile
  7603  09BB  00F5               	movwf	??_Adc
  7604  09BC  01F6               	clrf	??_Adc+1
  7605  09BD  0875               	movf	??_Adc,w
  7606  09BE  00A1               	movwf	Adc@convertion
  7607  09BF  0876               	movf	??_Adc+1,w
  7608  09C0  00A2               	movwf	Adc@convertion+1
  7609  09C1  0822               	movf	Adc@convertion+1,w
  7610  09C2  00F6               	movwf	??_Adc+1
  7611  09C3  0821               	movf	Adc@convertion,w
  7612  09C4  00F5               	movwf	??_Adc
  7613  09C5  0875               	movf	??_Adc,w
  7614  09C6  00F6               	movwf	??_Adc+1
  7615  09C7  01F5               	clrf	??_Adc
  7616  09C8  0875               	movf	??_Adc,w
  7617  09C9  00A1               	movwf	Adc@convertion
  7618  09CA  0876               	movf	??_Adc+1,w
  7619  09CB  00A2               	movwf	Adc@convertion+1
  7620                           
  7621                           ;ADC.c: 44:     convertion |= ADRESL;
  7622  09CC  1683               	bsf	3,5	;RP0=1, select bank1
  7623  09CD  1303               	bcf	3,6	;RP1=0, select bank1
  7624  09CE  081E               	movf	30,w	;volatile
  7625  09CF  00F5               	movwf	??_Adc
  7626  09D0  01F6               	clrf	??_Adc+1
  7627  09D1  0875               	movf	??_Adc,w
  7628  09D2  1283               	bcf	3,5	;RP0=0, select bank0
  7629  09D3  1303               	bcf	3,6	;RP1=0, select bank0
  7630  09D4  04A1               	iorwf	Adc@convertion,f
  7631  09D5  0876               	movf	??_Adc+1,w
  7632  09D6  04A2               	iorwf	Adc@convertion+1,f
  7633                           
  7634                           ;ADC.c: 48:     ADCON0bits.ADON = 0;
  7635  09D7  101F               	bcf	31,0	;volatile
  7636                           
  7637                           ;ADC.c: 49:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  7638  09D8  3074               	movlw	116
  7639  09D9  00F5               	movwf	??_Adc
  7640  09DA                     u5417:
  7641  09DA  0BF5               	decfsz	??_Adc,f
  7642  09DB  29DA               	goto	u5417
  7643  09DC  0000               	nop
  7644                           
  7645                           ;ADC.c: 51:     return convertion;
  7646  09DD  1283               	bcf	3,5	;RP0=0, select bank0
  7647  09DE  1303               	bcf	3,6	;RP1=0, select bank0
  7648  09DF  0822               	movf	Adc@convertion+1,w
  7649  09E0  00F4               	movwf	?_Adc+1
  7650  09E1  0821               	movf	Adc@convertion,w
  7651  09E2  00F3               	movwf	?_Adc
  7652  09E3  0008               	return
  7653  09E4                     __end_of_Adc:
  7654                           
  7655                           	psect	text38
  7656  1719                     __ptext38:	
  7657 ;; *************** function _Antirrebote *****************
  7658 ;; Defined at:
  7659 ;;		line 78 in file "Main.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;		None
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;		None
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7673 ;;      Params:         0       0       0       0       0
  7674 ;;      Locals:         0       0       0       0       0
  7675 ;;      Temps:          3       0       0       0       0
  7676 ;;      Totals:         3       0       0       0       0
  7677 ;;Total ram usage:        3 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    2
  7680 ;; This function calls:
  7681 ;;		Nothing
  7682 ;; This function is called by:
  7683 ;;		_MEF_Actualizacion
  7684 ;;		_MEF_Subest_Actualizacion
  7685 ;;		_Select_Modo
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           
  7690                           ;psect for function _Antirrebote
  7691  1719                     _Antirrebote:
  7692                           
  7693                           ;Main.c: 80:     PORTAbits.RA5 = 1;
  7694                           
  7695                           ;incstack = 0
  7696                           ; Regs used in _Antirrebote: [wreg]
  7697  1719  1283               	bcf	3,5	;RP0=0, select bank0
  7698  171A  1303               	bcf	3,6	;RP1=0, select bank0
  7699  171B  1685               	bsf	5,5	;volatile
  7700                           
  7701                           ;Main.c: 81:     _delay((unsigned long)((50)*(20000000/4000.0)));
  7702  171C  3002               	movlw	2
  7703  171D  00F5               	movwf	??_Antirrebote+2
  7704  171E  3045               	movlw	69
  7705  171F  00F4               	movwf	??_Antirrebote+1
  7706  1720  30A9               	movlw	169
  7707  1721  00F3               	movwf	??_Antirrebote
  7708  1722                     u5427:
  7709  1722  0BF3               	decfsz	??_Antirrebote,f
  7710  1723  2F22               	goto	u5427
  7711  1724  0BF4               	decfsz	??_Antirrebote+1,f
  7712  1725  2F22               	goto	u5427
  7713  1726  0BF5               	decfsz	??_Antirrebote+2,f
  7714  1727  2F22               	goto	u5427
  7715  1728  2F29               	nop2
  7716                           
  7717                           ;Main.c: 82:     PORTAbits.RA5 = 0;
  7718  1729  1283               	bcf	3,5	;RP0=0, select bank0
  7719  172A  1303               	bcf	3,6	;RP1=0, select bank0
  7720  172B  1285               	bcf	5,5	;volatile
  7721  172C                     l4265:	
  7722                           ;Main.c: 83:     while(PORTBbits.RB0 || PORTBbits.RB1 || PORTBbits.RB2 || PORTBbits.RB3)
      +                           _delay((unsigned long)((10)*(20000000/4000.0)));
  7723                           
  7724  172C  1283               	bcf	3,5	;RP0=0, select bank0
  7725  172D  1303               	bcf	3,6	;RP1=0, select bank0
  7726  172E  1C06               	btfss	6,0	;volatile
  7727  172F  2F3A               	goto	l4267
  7728  1730                     l4263:
  7729  1730  3041               	movlw	65
  7730  1731  00F4               	movwf	??_Antirrebote+1
  7731  1732  30EE               	movlw	238
  7732  1733  00F3               	movwf	??_Antirrebote
  7733  1734                     u5437:
  7734  1734  0BF3               	decfsz	??_Antirrebote,f
  7735  1735  2F34               	goto	u5437
  7736  1736  0BF4               	decfsz	??_Antirrebote+1,f
  7737  1737  2F34               	goto	u5437
  7738  1738  0000               	nop
  7739  1739  2F2C               	goto	l4265
  7740  173A                     l4267:
  7741  173A  1C86               	btfss	6,1	;volatile
  7742  173B  1906               	btfsc	6,2	;volatile
  7743  173C  2F30               	goto	l4263
  7744  173D  1D86               	btfss	6,3	;volatile
  7745  173E  0008               	return
  7746  173F  2F30               	goto	l4263
  7747  1740                     __end_of_Antirrebote:
  7748                           
  7749                           	psect	text39
  7750  0BB1                     __ptext39:	
  7751 ;; *************** function _LCD_init *****************
  7752 ;; Defined at:
  7753 ;;		line 4 in file "Lcd.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;		None
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  i               1    0[BANK0 ] unsigned char 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      void 
  7760 ;; Registers used:
  7761 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7767 ;;      Params:         0       0       0       0       0
  7768 ;;      Locals:         0       1       0       0       0
  7769 ;;      Temps:          2       0       0       0       0
  7770 ;;      Totals:         2       1       0       0       0
  7771 ;;Total ram usage:        3 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    3
  7774 ;; This function calls:
  7775 ;;		_LCD_command
  7776 ;; This function is called by:
  7777 ;;		_main
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           
  7782                           ;psect for function _LCD_init
  7783  0BB1                     _LCD_init:
  7784                           
  7785                           ;Lcd.c: 7:     TRISCbits.TRISC4=0,TRISCbits.TRISC5=0,TRISCbits.TRISC6=0,TRISCbits.TRISC7
      +                          =0;
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7789  0BB1  1683               	bsf	3,5	;RP0=1, select bank1
  7790  0BB2  1303               	bcf	3,6	;RP1=0, select bank1
  7791  0BB3  1207               	bcf	7,4	;volatile
  7792  0BB4  1287               	bcf	7,5	;volatile
  7793  0BB5  1307               	bcf	7,6	;volatile
  7794  0BB6  1387               	bcf	7,7	;volatile
  7795                           
  7796                           ;Lcd.c: 8:     TRISCbits.TRISC1=0,TRISCbits.TRISC3=0;
  7797  0BB7  1087               	bcf	7,1	;volatile
  7798  0BB8  1187               	bcf	7,3	;volatile
  7799                           
  7800                           ;Lcd.c: 9:     TRISCbits.TRISC2=0,PORTCbits.RC2=0;
  7801  0BB9  1107               	bcf	7,2	;volatile
  7802  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  7803  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  7804  0BBC  1107               	bcf	7,2	;volatile
  7805                           
  7806                           ;Lcd.c: 12:     _delay((unsigned long)((30)*(20000000/4000.0)));
  7807  0BBD  30C3               	movlw	195
  7808  0BBE  00F7               	movwf	??_LCD_init+1
  7809  0BBF  30CD               	movlw	205
  7810  0BC0  00F6               	movwf	??_LCD_init
  7811  0BC1                     u5447:
  7812  0BC1  0BF6               	decfsz	??_LCD_init,f
  7813  0BC2  2BC1               	goto	u5447
  7814  0BC3  0BF7               	decfsz	??_LCD_init+1,f
  7815  0BC4  2BC1               	goto	u5447
  7816                           
  7817                           ;Lcd.c: 14:     for(char i=0;i<3;i++)
  7818  0BC5  1283               	bcf	3,5	;RP0=0, select bank0
  7819  0BC6  1303               	bcf	3,6	;RP1=0, select bank0
  7820  0BC7  01A0               	clrf	LCD_init@i
  7821  0BC8                     l4511:
  7822                           
  7823                           ;Lcd.c: 15:     {;Lcd.c: 16:         LCD_command(0x03);
  7824  0BC8  3003               	movlw	3
  7825  0BC9  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  7826                           
  7827                           ;Lcd.c: 17:         _delay((unsigned long)((7)*(20000000/4000.0)));
  7828  0BCE  302E               	movlw	46
  7829  0BCF  00F7               	movwf	??_LCD_init+1
  7830  0BD0  3073               	movlw	115
  7831  0BD1  00F6               	movwf	??_LCD_init
  7832  0BD2                     u5457:
  7833  0BD2  0BF6               	decfsz	??_LCD_init,f
  7834  0BD3  2BD2               	goto	u5457
  7835  0BD4  0BF7               	decfsz	??_LCD_init+1,f
  7836  0BD5  2BD2               	goto	u5457
  7837                           
  7838                           ;Lcd.c: 18:     }
  7839  0BD6  3001               	movlw	1
  7840  0BD7  00FF               	movwf	127
  7841  0BD8  087F               	movf	127,w
  7842  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  7843  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  7844  0BDB  07A0               	addwf	LCD_init@i,f
  7845  0BDC  3003               	movlw	3
  7846  0BDD  0220               	subwf	LCD_init@i,w
  7847  0BDE  1C03               	skipc
  7848  0BDF  2BC8               	goto	l4511
  7849                           
  7850                           ;Lcd.c: 21:  LCD_command(0x33);
  7851  0BE0  3033               	movlw	51
  7852  0BE1  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  7853                           
  7854                           ;Lcd.c: 22:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7855  0BE6  30A6               	movlw	166
  7856  0BE7  00F6               	movwf	??_LCD_init
  7857  0BE8                     u5467:
  7858  0BE8  0BF6               	decfsz	??_LCD_init,f
  7859  0BE9  2BE8               	goto	u5467
  7860  0BEA  0000               	nop
  7861                           
  7862                           ;Lcd.c: 23:     LCD_command(0x32);
  7863  0BEB  3032               	movlw	50
  7864  0BEC  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  7865                           
  7866                           ;Lcd.c: 24:     _delay((unsigned long)((5)*(20000000/4000.0)));
  7867  0BF1  3021               	movlw	33
  7868  0BF2  00F7               	movwf	??_LCD_init+1
  7869  0BF3  3076               	movlw	118
  7870  0BF4  00F6               	movwf	??_LCD_init
  7871  0BF5                     u5477:
  7872  0BF5  0BF6               	decfsz	??_LCD_init,f
  7873  0BF6  2BF5               	goto	u5477
  7874  0BF7  0BF7               	decfsz	??_LCD_init+1,f
  7875  0BF8  2BF5               	goto	u5477
  7876  0BF9  0000               	nop
  7877                           
  7878                           ;Lcd.c: 25:  LCD_command(0x28);
  7879  0BFA  3028               	movlw	40
  7880  0BFB  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  7881                           
  7882                           ;Lcd.c: 26:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7883  0C00  30A6               	movlw	166
  7884  0C01  00F6               	movwf	??_LCD_init
  7885  0C02                     u5487:
  7886  0C02  0BF6               	decfsz	??_LCD_init,f
  7887  0C03  2C02               	goto	u5487
  7888  0C04  0000               	nop
  7889                           
  7890                           ;Lcd.c: 27:  LCD_command(0x0C);
  7891  0C05  300C               	movlw	12
  7892  0C06  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  7893                           
  7894                           ;Lcd.c: 28:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7895  0C0B  30A6               	movlw	166
  7896  0C0C  00F6               	movwf	??_LCD_init
  7897  0C0D                     u5497:
  7898  0C0D  0BF6               	decfsz	??_LCD_init,f
  7899  0C0E  2C0D               	goto	u5497
  7900  0C0F  0000               	nop
  7901                           
  7902                           ;Lcd.c: 29:  LCD_command(0x06);
  7903  0C10  3006               	movlw	6
  7904  0C11  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  7905                           
  7906                           ;Lcd.c: 30:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7907  0C16  30A6               	movlw	166
  7908  0C17  00F6               	movwf	??_LCD_init
  7909  0C18                     u5507:
  7910  0C18  0BF6               	decfsz	??_LCD_init,f
  7911  0C19  2C18               	goto	u5507
  7912  0C1A  0000               	nop
  7913                           
  7914                           ;Lcd.c: 31:     LCD_command(0x01);
  7915  0C1B  3001               	movlw	1
  7916  0C1C  120A  118A  25C8  120A  158A  	fcall	_LCD_command
  7917                           
  7918                           ;Lcd.c: 32:     _delay((unsigned long)((10)*(20000000/4000.0)));
  7919  0C21  3041               	movlw	65
  7920  0C22  00F7               	movwf	??_LCD_init+1
  7921  0C23  30EE               	movlw	238
  7922  0C24  00F6               	movwf	??_LCD_init
  7923  0C25                     u5517:
  7924  0C25  0BF6               	decfsz	??_LCD_init,f
  7925  0C26  2C25               	goto	u5517
  7926  0C27  0BF7               	decfsz	??_LCD_init+1,f
  7927  0C28  2C25               	goto	u5517
  7928  0C29  0000               	nop
  7929  0C2A  0008               	return
  7930  0C2B                     __end_of_LCD_init:
  7931                           
  7932                           	psect	text40
  7933  05C8                     __ptext40:	
  7934 ;; *************** function _LCD_command *****************
  7935 ;; Defined at:
  7936 ;;		line 39 in file "Lcd.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  cmd             1    wreg     unsigned char 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  cmd             1    5[COMMON] unsigned char 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  1    wreg      void 
  7943 ;; Registers used:
  7944 ;;		wreg, status,2, status,0
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7950 ;;      Params:         0       0       0       0       0
  7951 ;;      Locals:         1       0       0       0       0
  7952 ;;      Temps:          2       0       0       0       0
  7953 ;;      Totals:         3       0       0       0       0
  7954 ;;Total ram usage:        3 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    2
  7957 ;; This function calls:
  7958 ;;		Nothing
  7959 ;; This function is called by:
  7960 ;;		_MEF_Actualizacion
  7961 ;;		_Pant_Inicio
  7962 ;;		_Pant_Modos
  7963 ;;		_LCD_init
  7964 ;;		_LCD_array
  7965 ;;		_LCD_xy
  7966 ;;		_LCD_character
  7967 ;;		_LCD_shift
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           
  7972                           ;psect for function _LCD_command
  7973  05C8                     _LCD_command:
  7974                           
  7975                           ;incstack = 0
  7976                           ; Regs used in _LCD_command: [wreg+status,2+status,0]
  7977                           ;LCD_command@cmd stored from wreg
  7978  05C8  00F5               	movwf	LCD_command@cmd
  7979                           
  7980                           ;Lcd.c: 39: void LCD_command(unsigned char cmd);Lcd.c: 40: {;Lcd.c: 42:     PORTCbits.RC
      +                          4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  7981  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  7982  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  7983  05CB  1207               	bcf	7,4	;volatile
  7984  05CC  1287               	bcf	7,5	;volatile
  7985  05CD  1307               	bcf	7,6	;volatile
  7986  05CE  1387               	bcf	7,7	;volatile
  7987                           
  7988                           ;Lcd.c: 45:     PORTCbits.RC4 = ((cmd >> 4) & 0x01);
  7989  05CF  0875               	movf	LCD_command@cmd,w
  7990  05D0  00F3               	movwf	??_LCD_command
  7991  05D1  3004               	movlw	4
  7992  05D2                     u3695:
  7993  05D2  1003               	clrc
  7994  05D3  0CF3               	rrf	??_LCD_command,f
  7995  05D4  3EFF               	addlw	-1
  7996  05D5  1D03               	skipz
  7997  05D6  2DD2               	goto	u3695
  7998  05D7  0873               	movf	??_LCD_command,w
  7999  05D8  3901               	andlw	1
  8000  05D9  00F4               	movwf	??_LCD_command+1
  8001  05DA  0EF4               	swapf	??_LCD_command+1,f
  8002  05DB  0807               	movf	7,w	;volatile
  8003  05DC  0674               	xorwf	??_LCD_command+1,w
  8004  05DD  39EF               	andlw	-17
  8005  05DE  0674               	xorwf	??_LCD_command+1,w
  8006  05DF  0087               	movwf	7	;volatile
  8007                           
  8008                           ;Lcd.c: 46:     PORTCbits.RC5 = ((cmd >> 5) & 0x01);
  8009  05E0  0875               	movf	LCD_command@cmd,w
  8010  05E1  00F3               	movwf	??_LCD_command
  8011  05E2  3005               	movlw	5
  8012  05E3                     u3705:
  8013  05E3  1003               	clrc
  8014  05E4  0CF3               	rrf	??_LCD_command,f
  8015  05E5  3EFF               	addlw	-1
  8016  05E6  1D03               	skipz
  8017  05E7  2DE3               	goto	u3705
  8018  05E8  0873               	movf	??_LCD_command,w
  8019  05E9  3901               	andlw	1
  8020  05EA  00F4               	movwf	??_LCD_command+1
  8021  05EB  0EF4               	swapf	??_LCD_command+1,f
  8022  05EC  0DF4               	rlf	??_LCD_command+1,f
  8023  05ED  0807               	movf	7,w	;volatile
  8024  05EE  0674               	xorwf	??_LCD_command+1,w
  8025  05EF  39DF               	andlw	-33
  8026  05F0  0674               	xorwf	??_LCD_command+1,w
  8027  05F1  0087               	movwf	7	;volatile
  8028                           
  8029                           ;Lcd.c: 47:     PORTCbits.RC6 = ((cmd >> 6) & 0x01);
  8030  05F2  0875               	movf	LCD_command@cmd,w
  8031  05F3  00F3               	movwf	??_LCD_command
  8032  05F4  3006               	movlw	6
  8033  05F5                     u3715:
  8034  05F5  1003               	clrc
  8035  05F6  0CF3               	rrf	??_LCD_command,f
  8036  05F7  3EFF               	addlw	-1
  8037  05F8  1D03               	skipz
  8038  05F9  2DF5               	goto	u3715
  8039  05FA  0873               	movf	??_LCD_command,w
  8040  05FB  3901               	andlw	1
  8041  05FC  00F4               	movwf	??_LCD_command+1
  8042  05FD  0EF4               	swapf	??_LCD_command+1,f
  8043  05FE  0DF4               	rlf	??_LCD_command+1,f
  8044  05FF  0DF4               	rlf	??_LCD_command+1,f
  8045  0600  0807               	movf	7,w	;volatile
  8046  0601  0674               	xorwf	??_LCD_command+1,w
  8047  0602  39BF               	andlw	-65
  8048  0603  0674               	xorwf	??_LCD_command+1,w
  8049  0604  0087               	movwf	7	;volatile
  8050                           
  8051                           ;Lcd.c: 48:     PORTCbits.RC7 = ((cmd >> 7) & 0x01);
  8052  0605  0875               	movf	LCD_command@cmd,w
  8053  0606  00F3               	movwf	??_LCD_command
  8054  0607  3007               	movlw	7
  8055  0608                     u3725:
  8056  0608  1003               	clrc
  8057  0609  0CF3               	rrf	??_LCD_command,f
  8058  060A  3EFF               	addlw	-1
  8059  060B  1D03               	skipz
  8060  060C  2E08               	goto	u3725
  8061  060D  0873               	movf	??_LCD_command,w
  8062  060E  3901               	andlw	1
  8063  060F  00F4               	movwf	??_LCD_command+1
  8064  0610  0CF4               	rrf	??_LCD_command+1,f
  8065  0611  0CF4               	rrf	??_LCD_command+1,f
  8066  0612  0807               	movf	7,w	;volatile
  8067  0613  0674               	xorwf	??_LCD_command+1,w
  8068  0614  397F               	andlw	-129
  8069  0615  0674               	xorwf	??_LCD_command+1,w
  8070  0616  0087               	movwf	7	;volatile
  8071                           
  8072                           ;Lcd.c: 51:     PORTCbits.RC1 = 0;
  8073  0617  1087               	bcf	7,1	;volatile
  8074                           
  8075                           ;Lcd.c: 52:     PORTCbits.RC3 = 0;
  8076  0618  1187               	bcf	7,3	;volatile
  8077                           
  8078                           ;Lcd.c: 55:     PORTCbits.RC3 = 1;
  8079  0619  1587               	bsf	7,3	;volatile
  8080                           
  8081                           ;Lcd.c: 56:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8082  061A  3018               	movlw	24
  8083  061B  00F3               	movwf	??_LCD_command
  8084  061C                     u5527:
  8085  061C  0BF3               	decfsz	??_LCD_command,f
  8086  061D  2E1C               	goto	u5527
  8087  061E  2E1F               	nop2
  8088                           
  8089                           ;Lcd.c: 57:     PORTCbits.RC3 = 0;
  8090  061F  1283               	bcf	3,5	;RP0=0, select bank0
  8091  0620  1303               	bcf	3,6	;RP1=0, select bank0
  8092  0621  1187               	bcf	7,3	;volatile
  8093                           
  8094                           ;Lcd.c: 58:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8095  0622  3018               	movlw	24
  8096  0623  00F3               	movwf	??_LCD_command
  8097  0624                     u5537:
  8098  0624  0BF3               	decfsz	??_LCD_command,f
  8099  0625  2E24               	goto	u5537
  8100  0626  2E27               	nop2
  8101                           
  8102                           ;Lcd.c: 62:     PORTCbits.RC4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  8103  0627  1283               	bcf	3,5	;RP0=0, select bank0
  8104  0628  1303               	bcf	3,6	;RP1=0, select bank0
  8105  0629  1207               	bcf	7,4	;volatile
  8106  062A  1287               	bcf	7,5	;volatile
  8107  062B  1307               	bcf	7,6	;volatile
  8108  062C  1387               	bcf	7,7	;volatile
  8109                           
  8110                           ;Lcd.c: 65:     PORTCbits.RC4 = (cmd & 0x01);
  8111  062D  0875               	movf	LCD_command@cmd,w
  8112  062E  3901               	andlw	1
  8113  062F  00F3               	movwf	??_LCD_command
  8114  0630  0EF3               	swapf	??_LCD_command,f
  8115  0631  0807               	movf	7,w	;volatile
  8116  0632  0673               	xorwf	??_LCD_command,w
  8117  0633  39EF               	andlw	-17
  8118  0634  0673               	xorwf	??_LCD_command,w
  8119  0635  0087               	movwf	7	;volatile
  8120                           
  8121                           ;Lcd.c: 66:     PORTCbits.RC5 = ((cmd >> 1) & 0x01);
  8122  0636  0875               	movf	LCD_command@cmd,w
  8123  0637  00F3               	movwf	??_LCD_command
  8124  0638  1003               	clrc
  8125  0639  0C73               	rrf	??_LCD_command,w
  8126  063A  3901               	andlw	1
  8127  063B  00F4               	movwf	??_LCD_command+1
  8128  063C  0EF4               	swapf	??_LCD_command+1,f
  8129  063D  0DF4               	rlf	??_LCD_command+1,f
  8130  063E  0807               	movf	7,w	;volatile
  8131  063F  0674               	xorwf	??_LCD_command+1,w
  8132  0640  39DF               	andlw	-33
  8133  0641  0674               	xorwf	??_LCD_command+1,w
  8134  0642  0087               	movwf	7	;volatile
  8135                           
  8136                           ;Lcd.c: 67:     PORTCbits.RC6 = ((cmd >> 2) & 0x01);
  8137  0643  0875               	movf	LCD_command@cmd,w
  8138  0644  00F3               	movwf	??_LCD_command
  8139  0645  3002               	movlw	2
  8140  0646                     u3735:
  8141  0646  1003               	clrc
  8142  0647  0CF3               	rrf	??_LCD_command,f
  8143  0648  3EFF               	addlw	-1
  8144  0649  1D03               	skipz
  8145  064A  2E46               	goto	u3735
  8146  064B  0873               	movf	??_LCD_command,w
  8147  064C  3901               	andlw	1
  8148  064D  00F4               	movwf	??_LCD_command+1
  8149  064E  0EF4               	swapf	??_LCD_command+1,f
  8150  064F  0DF4               	rlf	??_LCD_command+1,f
  8151  0650  0DF4               	rlf	??_LCD_command+1,f
  8152  0651  0807               	movf	7,w	;volatile
  8153  0652  0674               	xorwf	??_LCD_command+1,w
  8154  0653  39BF               	andlw	-65
  8155  0654  0674               	xorwf	??_LCD_command+1,w
  8156  0655  0087               	movwf	7	;volatile
  8157                           
  8158                           ;Lcd.c: 68:     PORTCbits.RC7 = ((cmd >> 3) & 0x01);
  8159  0656  0875               	movf	LCD_command@cmd,w
  8160  0657  00F3               	movwf	??_LCD_command
  8161  0658  3003               	movlw	3
  8162  0659                     u3745:
  8163  0659  1003               	clrc
  8164  065A  0CF3               	rrf	??_LCD_command,f
  8165  065B  3EFF               	addlw	-1
  8166  065C  1D03               	skipz
  8167  065D  2E59               	goto	u3745
  8168  065E  0873               	movf	??_LCD_command,w
  8169  065F  3901               	andlw	1
  8170  0660  00F4               	movwf	??_LCD_command+1
  8171  0661  0CF4               	rrf	??_LCD_command+1,f
  8172  0662  0CF4               	rrf	??_LCD_command+1,f
  8173  0663  0807               	movf	7,w	;volatile
  8174  0664  0674               	xorwf	??_LCD_command+1,w
  8175  0665  397F               	andlw	-129
  8176  0666  0674               	xorwf	??_LCD_command+1,w
  8177  0667  0087               	movwf	7	;volatile
  8178                           
  8179                           ;Lcd.c: 71:     PORTCbits.RC1 = 0;
  8180  0668  1087               	bcf	7,1	;volatile
  8181                           
  8182                           ;Lcd.c: 72:     PORTCbits.RC3 = 0;
  8183  0669  1187               	bcf	7,3	;volatile
  8184                           
  8185                           ;Lcd.c: 75:     PORTCbits.RC3 = 1;
  8186  066A  1587               	bsf	7,3	;volatile
  8187                           
  8188                           ;Lcd.c: 76:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8189  066B  3018               	movlw	24
  8190  066C  00F3               	movwf	??_LCD_command
  8191  066D                     u5547:
  8192  066D  0BF3               	decfsz	??_LCD_command,f
  8193  066E  2E6D               	goto	u5547
  8194  066F  2E70               	nop2
  8195                           
  8196                           ;Lcd.c: 77:     PORTCbits.RC3 = 0;
  8197  0670  1283               	bcf	3,5	;RP0=0, select bank0
  8198  0671  1303               	bcf	3,6	;RP1=0, select bank0
  8199  0672  1187               	bcf	7,3	;volatile
  8200                           
  8201                           ;Lcd.c: 78:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  8202  0673  3018               	movlw	24
  8203  0674  00F3               	movwf	??_LCD_command
  8204  0675                     u5557:
  8205  0675  0BF3               	decfsz	??_LCD_command,f
  8206  0676  2E75               	goto	u5557
  8207  0677  2E78               	nop2
  8208                           
  8209                           ;Lcd.c: 81:     _delay((unsigned long)((3)*(20000000/4000.0)));
  8210  0678  3014               	movlw	20
  8211  0679  00F4               	movwf	??_LCD_command+1
  8212  067A  3079               	movlw	121
  8213  067B  00F3               	movwf	??_LCD_command
  8214  067C                     u5567:
  8215  067C  0BF3               	decfsz	??_LCD_command,f
  8216  067D  2E7C               	goto	u5567
  8217  067E  0BF4               	decfsz	??_LCD_command+1,f
  8218  067F  2E7C               	goto	u5567
  8219  0680  2E81               	nop2
  8220  0681  0008               	return
  8221  0682                     __end_of_LCD_command:
  8222                           
  8223                           	psect	text41
  8224  16D0                     __ptext41:	
  8225 ;; *************** function _Adc_init *****************
  8226 ;; Defined at:
  8227 ;;		line 5 in file "ADC.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;		None
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;		None
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  1    wreg      void 
  8234 ;; Registers used:
  8235 ;;		wreg, status,2, status,0
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8241 ;;      Params:         0       0       0       0       0
  8242 ;;      Locals:         0       0       0       0       0
  8243 ;;      Temps:          0       0       0       0       0
  8244 ;;      Totals:         0       0       0       0       0
  8245 ;;Total ram usage:        0 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    2
  8248 ;; This function calls:
  8249 ;;		Nothing
  8250 ;; This function is called by:
  8251 ;;		_main
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           
  8256                           ;psect for function _Adc_init
  8257  16D0                     _Adc_init:
  8258                           
  8259                           ;ADC.c: 8:     TRISAbits.TRISA0 = 1,ANSELbits.ANS0 = 1;
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in _Adc_init: [wreg+status,2+status,0]
  8263  16D0  1683               	bsf	3,5	;RP0=1, select bank1
  8264  16D1  1303               	bcf	3,6	;RP1=0, select bank1
  8265  16D2  1405               	bsf	5,0	;volatile
  8266  16D3  1683               	bsf	3,5	;RP0=1, select bank3
  8267  16D4  1703               	bsf	3,6	;RP1=1, select bank3
  8268  16D5  1408               	bsf	8,0	;volatile
  8269                           
  8270                           ;ADC.c: 9:     TRISAbits.TRISA1 = 1;ANSELbits.ANS1 = 1;
  8271  16D6  1683               	bsf	3,5	;RP0=1, select bank1
  8272  16D7  1303               	bcf	3,6	;RP1=0, select bank1
  8273  16D8  1485               	bsf	5,1	;volatile
  8274  16D9  1683               	bsf	3,5	;RP0=1, select bank3
  8275  16DA  1703               	bsf	3,6	;RP1=1, select bank3
  8276  16DB  1488               	bsf	8,1	;volatile
  8277                           
  8278                           ;ADC.c: 10:     TRISAbits.TRISA2 = 1,ANSELbits.ANS2 = 1;
  8279  16DC  1683               	bsf	3,5	;RP0=1, select bank1
  8280  16DD  1303               	bcf	3,6	;RP1=0, select bank1
  8281  16DE  1505               	bsf	5,2	;volatile
  8282  16DF  1683               	bsf	3,5	;RP0=1, select bank3
  8283  16E0  1703               	bsf	3,6	;RP1=1, select bank3
  8284  16E1  1508               	bsf	8,2	;volatile
  8285                           
  8286                           ;ADC.c: 11:     TRISAbits.TRISA3 = 1,ANSELbits.ANS3 = 1;
  8287  16E2  1683               	bsf	3,5	;RP0=1, select bank1
  8288  16E3  1303               	bcf	3,6	;RP1=0, select bank1
  8289  16E4  1585               	bsf	5,3	;volatile
  8290  16E5  1683               	bsf	3,5	;RP0=1, select bank3
  8291  16E6  1703               	bsf	3,6	;RP1=1, select bank3
  8292  16E7  1588               	bsf	8,3	;volatile
  8293                           
  8294                           ;ADC.c: 14:     ADCON0bits.ADCS = 0b10;
  8295  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  8296  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  8297  16EA  081F               	movf	31,w	;volatile
  8298  16EB  393F               	andlw	-193
  8299  16EC  3880               	iorlw	128
  8300  16ED  009F               	movwf	31	;volatile
  8301                           
  8302                           ;ADC.c: 17:     ADCON1bits.ADFM = 1;
  8303  16EE  1683               	bsf	3,5	;RP0=1, select bank1
  8304  16EF  1303               	bcf	3,6	;RP1=0, select bank1
  8305  16F0  179F               	bsf	31,7	;volatile
  8306                           
  8307                           ;ADC.c: 19:     ADCON1bits.VCFG0 = 0;
  8308  16F1  121F               	bcf	31,4	;volatile
  8309                           
  8310                           ;ADC.c: 20:     ADCON1bits.VCFG1 = 0;
  8311  16F2  129F               	bcf	31,5	;volatile
  8312  16F3  0008               	return
  8313  16F4                     __end_of_Adc_init:
  8314                           
  8315                           	psect	text42
  8316  0953                     __ptext42:	
  8317 ;; *************** function _ISR *****************
  8318 ;; Defined at:
  8319 ;;		line 88 in file "Main.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;		None
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;		None
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      void 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 0/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8333 ;;      Params:         0       0       0       0       0
  8334 ;;      Locals:         0       0       0       0       0
  8335 ;;      Temps:          3       0       0       0       0
  8336 ;;      Totals:         3       0       0       0       0
  8337 ;;Total ram usage:        3 bytes
  8338 ;; Hardware stack levels used:    1
  8339 ;; Hardware stack levels required when called:    1
  8340 ;; This function calls:
  8341 ;;		_Task_Ready
  8342 ;; This function is called by:
  8343 ;;		Interrupt level 1
  8344 ;; This function uses a non-reentrant model
  8345 ;;
  8346                           
  8347                           
  8348                           ;psect for function _ISR
  8349  0953                     _ISR:
  8350                           
  8351                           ;Main.c: 91:     if(TMR1IF == 1)
  8352  0953  1C0C               	btfss	12,0	;volatile
  8353  0954  297F               	goto	i1l3479
  8354                           
  8355                           ;Main.c: 92:     {;Main.c: 93:         if(Delay100ms!=0 && !Mostrar) Delay100ms--;
  8356  0955  0878               	movf	_Delay100ms,w	;volatile
  8357  0956  0479               	iorwf	_Delay100ms+1,w	;volatile
  8358  0957  1903               	btfsc	3,2
  8359  0958  2962               	goto	i1l3463
  8360  0959  0867               	movf	_Mostrar,w
  8361  095A  1D03               	btfss	3,2
  8362  095B  2962               	goto	i1l3463
  8363  095C  3001               	movlw	1
  8364  095D  02F8               	subwf	_Delay100ms,f	;volatile
  8365  095E  3000               	movlw	0
  8366  095F  1C03               	skipc
  8367  0960  03F9               	decf	_Delay100ms+1,f	;volatile
  8368  0961  02F9               	subwf	_Delay100ms+1,f	;volatile
  8369  0962                     i1l3463:
  8370                           
  8371                           ;Main.c: 94:         if(Delay200ms!=0) Delay200ms--;
  8372  0962  086E               	movf	_Delay200ms,w	;volatile
  8373  0963  046F               	iorwf	_Delay200ms+1,w	;volatile
  8374  0964  1903               	btfsc	3,2
  8375  0965  296C               	goto	i1l3467
  8376  0966  3001               	movlw	1
  8377  0967  02EE               	subwf	_Delay200ms,f	;volatile
  8378  0968  3000               	movlw	0
  8379  0969  1C03               	skipc
  8380  096A  03EF               	decf	_Delay200ms+1,f	;volatile
  8381  096B  02EF               	subwf	_Delay200ms+1,f	;volatile
  8382  096C                     i1l3467:
  8383                           
  8384                           ;Main.c: 95:         if(Delay1s!=0 && Output) Delay1s--;
  8385  096C  086C               	movf	_Delay1s,w	;volatile
  8386  096D  046D               	iorwf	_Delay1s+1,w	;volatile
  8387  096E  1903               	btfsc	3,2
  8388  096F  2979               	goto	i1l3473
  8389  0970  0866               	movf	_Output,w
  8390  0971  1903               	btfsc	3,2
  8391  0972  2979               	goto	i1l3473
  8392  0973  3001               	movlw	1
  8393  0974  02EC               	subwf	_Delay1s,f	;volatile
  8394  0975  3000               	movlw	0
  8395  0976  1C03               	skipc
  8396  0977  03ED               	decf	_Delay1s+1,f	;volatile
  8397  0978  02ED               	subwf	_Delay1s+1,f	;volatile
  8398  0979                     i1l3473:
  8399                           
  8400                           ;Main.c: 97:         TMR1 = 65285;
  8401  0979  30FF               	movlw	255
  8402  097A  008F               	movwf	15	;volatile
  8403  097B  3005               	movlw	5
  8404  097C  008E               	movwf	14	;volatile
  8405                           
  8406                           ;Main.c: 98:         TMR1ON = 1;
  8407  097D  1410               	bsf	16,0	;volatile
  8408                           
  8409                           ;Main.c: 99:         TMR1IF = 0;
  8410  097E  100C               	bcf	12,0	;volatile
  8411  097F                     i1l3479:
  8412                           
  8413                           ;Main.c: 102:     if(!Delay100ms || !Delay200ms || !Delay1s) Task_Ready();
  8414  097F  0878               	movf	_Delay100ms,w	;volatile
  8415  0980  0479               	iorwf	_Delay100ms+1,w	;volatile
  8416  0981  1903               	btfsc	3,2
  8417  0982  298B               	goto	i1l3485
  8418  0983  086E               	movf	_Delay200ms,w	;volatile
  8419  0984  046F               	iorwf	_Delay200ms+1,w	;volatile
  8420  0985  1903               	btfsc	3,2
  8421  0986  298B               	goto	i1l3485
  8422  0987  086C               	movf	_Delay1s,w	;volatile
  8423  0988  046D               	iorwf	_Delay1s+1,w	;volatile
  8424  0989  1D03               	btfss	3,2
  8425  098A  2990               	goto	i1l121
  8426  098B                     i1l3485:
  8427  098B  120A  158A  20DA  120A  158A  	fcall	_Task_Ready
  8428  0990                     i1l121:
  8429  0990  0872               	movf	??_ISR+2,w
  8430  0991  1283               	bcf	3,5	;RP0=0, select bank0
  8431  0992  1303               	bcf	3,6	;RP1=0, select bank0
  8432  0993  00FF               	movwf	127
  8433  0994  0871               	movf	??_ISR+1,w
  8434  0995  008A               	movwf	10
  8435  0996  0E70               	swapf	??_ISR^(0+4294967168),w
  8436  0997  0083               	movwf	3
  8437  0998  0EFE               	swapf	126,f
  8438  0999  0E7E               	swapf	126,w
  8439  099A  0009               	retfie
  8440  099B                     __end_of_ISR:
  8441                           
  8442                           	psect	intentry
  8443  0004                     __pintentry:	
  8444                           ;incstack = 0
  8445                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8446                           
  8447  0004                     interrupt_function:
  8448  007E                     saved_w	set	btemp
  8449  0004  00FE               	movwf	btemp
  8450  0005  0E03               	swapf	3,w
  8451  0006  00F0               	movwf	??_ISR
  8452  0007  080A               	movf	10,w
  8453  0008  00F1               	movwf	??_ISR+1
  8454  0009  1283               	bcf	3,5	;RP0=0, select bank0
  8455  000A  1303               	bcf	3,6	;RP1=0, select bank0
  8456  000B  087F               	movf	btemp+1,w
  8457  000C  00F2               	movwf	??_ISR+2
  8458  000D  120A  158A  2953   	ljmp	_ISR
  8459                           
  8460                           	psect	text43
  8461  08DA                     __ptext43:	
  8462 ;; *************** function _Task_Ready *****************
  8463 ;; Defined at:
  8464 ;;		line 107 in file "Main.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;		None
  8467 ;; Auto vars:     Size  Location     Type
  8468 ;;		None
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  1    wreg      void 
  8471 ;; Registers used:
  8472 ;;		wreg, status,2, status,0, btemp+1
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8478 ;;      Params:         0       0       0       0       0
  8479 ;;      Locals:         0       0       0       0       0
  8480 ;;      Temps:          0       0       0       0       0
  8481 ;;      Totals:         0       0       0       0       0
  8482 ;;Total ram usage:        0 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_ISR
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           
  8492                           ;psect for function _Task_Ready
  8493  08DA                     _Task_Ready:
  8494                           
  8495                           ;Main.c: 109:     if(!Delay100ms)
  8496                           
  8497                           ;incstack = 0
  8498                           ; Regs used in _Task_Ready: [wreg+status,2+status,0+btemp+1]
  8499  08DA  0878               	movf	_Delay100ms,w	;volatile
  8500  08DB  0479               	iorwf	_Delay100ms+1,w	;volatile
  8501  08DC  1D03               	btfss	3,2
  8502  08DD  28E6               	goto	i1l3335
  8503                           
  8504                           ;Main.c: 110:     {;Main.c: 111:         Mostrar = 1;
  8505  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  8506  08DF  1303               	bcf	3,6	;RP1=0, select bank0
  8507  08E0  01E7               	clrf	_Mostrar
  8508  08E1  0AE7               	incf	_Mostrar,f
  8509                           
  8510                           ;Main.c: 112:         Delay100ms = 1000;
  8511  08E2  30E8               	movlw	232
  8512  08E3  00F8               	movwf	_Delay100ms	;volatile
  8513  08E4  3003               	movlw	3
  8514  08E5  00F9               	movwf	_Delay100ms+1	;volatile
  8515  08E6                     i1l3335:
  8516                           
  8517                           ;Main.c: 114:     if(!Delay200ms)
  8518  08E6  1283               	bcf	3,5	;RP0=0, select bank0
  8519  08E7  1303               	bcf	3,6	;RP1=0, select bank0
  8520  08E8  086E               	movf	_Delay200ms,w	;volatile
  8521  08E9  046F               	iorwf	_Delay200ms+1,w	;volatile
  8522  08EA  1D03               	btfss	3,2
  8523  08EB  28F7               	goto	i1l3341
  8524  08EC  0064               	clrwdt	;# 
  8525                           
  8526                           ;Main.c: 117:         Act_Variables = 1;
  8527  08ED  1683               	bsf	3,5	;RP0=1, select bank1
  8528  08EE  1303               	bcf	3,6	;RP1=0, select bank1
  8529  08EF  01BB               	clrf	_Act_Variables^(0+128)
  8530  08F0  0ABB               	incf	_Act_Variables^(0+128),f
  8531                           
  8532                           ;Main.c: 118:         Delay200ms = 2000;
  8533  08F1  30D0               	movlw	208
  8534  08F2  1283               	bcf	3,5	;RP0=0, select bank0
  8535  08F3  1303               	bcf	3,6	;RP1=0, select bank0
  8536  08F4  00EE               	movwf	_Delay200ms	;volatile
  8537  08F5  3007               	movlw	7
  8538  08F6  00EF               	movwf	_Delay200ms+1	;volatile
  8539  08F7                     i1l3341:
  8540                           
  8541                           ;Main.c: 120:     if(!Delay1s)
  8542  08F7  086C               	movf	_Delay1s,w	;volatile
  8543  08F8  046D               	iorwf	_Delay1s+1,w	;volatile
  8544  08F9  1D03               	btfss	3,2
  8545  08FA  0008               	return
  8546                           
  8547                           ;Main.c: 121:     {;Main.c: 122:         if(Seg == 0)
  8548  08FB  0868               	movf	_Seg,w
  8549  08FC  1D03               	btfss	3,2
  8550  08FD  2908               	goto	i1l3351
  8551                           
  8552                           ;Main.c: 123:         {;Main.c: 124:             if(Min != 0) Min--,Seg=59;
  8553  08FE  0869               	movf	_Min,w
  8554  08FF  1903               	btfsc	3,2
  8555  0900  290A               	goto	i1l3353
  8556  0901  3001               	movlw	1
  8557  0902  02E9               	subwf	_Min,f
  8558  0903  303B               	movlw	59
  8559  0904  00FF               	movwf	127
  8560  0905  087F               	movf	127,w
  8561  0906  00E8               	movwf	_Seg
  8562  0907  290A               	goto	i1l3353
  8563  0908                     i1l3351:
  8564  0908  3001               	movlw	1
  8565  0909  02E8               	subwf	_Seg,f
  8566  090A                     i1l3353:
  8567                           
  8568                           ;Main.c: 127:         Temporizador = 1;
  8569  090A  1683               	bsf	3,5	;RP0=1, select bank1
  8570  090B  1303               	bcf	3,6	;RP1=0, select bank1
  8571  090C  01B9               	clrf	_Temporizador^(0+128)
  8572  090D  0AB9               	incf	_Temporizador^(0+128),f
  8573                           
  8574                           ;Main.c: 128:         Delay1s = 10000;
  8575  090E  3010               	movlw	16
  8576  090F  1283               	bcf	3,5	;RP0=0, select bank0
  8577  0910  1303               	bcf	3,6	;RP1=0, select bank0
  8578  0911  00EC               	movwf	_Delay1s	;volatile
  8579  0912  3027               	movlw	39
  8580  0913  00ED               	movwf	_Delay1s+1	;volatile
  8581  0914  0008               	return
  8582  0915                     __end_of_Task_Ready:
  8583  007E                     btemp	set	126	;btemp
  8584  007E                     wtemp0	set	126
  8585                           
  8586                           	psect	config
  8587                           
  8588                           ;Config register CONFIG1 @ 0x2007
  8589                           ;	Oscillator Selection bits
  8590                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  8591                           ;	Watchdog Timer Enable bit
  8592                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  8593                           ;	Power-up Timer Enable bit
  8594                           ;	PWRTE = ON, PWRT enabled
  8595                           ;	RE3/MCLR pin function select bit
  8596                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  8597                           ;	Code Protection bit
  8598                           ;	CP = OFF, Program memory code protection is disabled
  8599                           ;	Data Code Protection bit
  8600                           ;	CPD = OFF, Data memory code protection is disabled
  8601                           ;	Brown Out Reset Selection bits
  8602                           ;	BOREN = OFF, BOR disabled
  8603                           ;	Internal External Switchover bit
  8604                           ;	IESO = ON, Internal/External Switchover mode is enabled
  8605                           ;	Fail-Safe Clock Monitor Enabled bit
  8606                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  8607                           ;	Low Voltage Programming Enable bit
  8608                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  8609                           ;	In-Circuit Debugger Mode bit
  8610                           ;	DEBUG = 0x1, unprogrammed default
  8611  2007                     	org	8199
  8612  2007  2CE2               	dw	11490
  8613                           
  8614                           ;Config register CONFIG2 @ 0x2008
  8615                           ;	Brown-out Reset Selection bit
  8616                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  8617                           ;	Flash Program Memory Self Write Enable bits
  8618                           ;	WRT = OFF, Write protection off
  8619  2008                     	org	8200
  8620  2008  3FFF               	dw	16383

Data Sizes:
    Strings     151
    Constant    10
    Data        14
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     68      80
    BANK1            80      3      40
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_30(CODE[5]), STR_29(CODE[5]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[5]), STR_24(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> Pant_Temporizador@buffer(BANK0[20]), Pant_Val_Act@buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_character@caracter	PTR unsigned char  size(1) Largest target is 8
		 -> Pant_Inicio@caracter(BANK0[8]), Pant_Inicio@caracter1(BANK0[8]), 

    LCD_array@date	PTR unsigned char  size(2) Largest target is 21
		 -> Pant_Temporizador@buffer(BANK0[20]), Pant_Val_Act@buffer(BANK0[20]), STR_23(CODE[2]), STR_22(CODE[13]), 
		 -> STR_21(CODE[2]), STR_20(CODE[8]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_17(CODE[18]), STR_16(CODE[6]), STR_15(CODE[5]), STR_14(CODE[14]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), 
		 -> STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), STR_4(CODE[21]), STR_3(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 


Critical Paths under _main in COMMON

    _main->_LCD_init
    _Pant_Selector->_LCD_array
    _Pant_Menu->_LCD_array
    _Pant_Inicio->_LCD_array
    _Pant_Inicio->_LCD_character
    _LCD_character->_LCD_command
    _LCD_character->_LCD_date
    _Pant_Val_Act->_LCD_array
    _Pant_Temporizador->_LCD_array
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Pant_Modos->_LCD_array
    _LCD_xy->_LCD_command
    _LCD_array->_LCD_command
    _LCD_array->_LCD_date
    ___wmul->___lwdiv
    ___ftmul->___ftpack
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _LCD_init->_LCD_command

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _MEF_Actualizacion->_MEF_Subest_Actualizacion
    _Pant_Selector->_LCD_array
    _Pant_Menu->_LCD_array
    _Pant_Inicio->_LCD_array
    _Pant_Val_Act->_sprintf
    _Pant_Temporizador->_sprintf
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _Pant_Modos->_LCD_array
    _Lec_Adc_Modo_Pulv->_Adc_Rpm_Read
    _Adc_Rpm_Read->___fttol
    ___wmul->___lwdiv
    _Adc_Pwm_Read->___fttol
    _Lec_Adc_Modo_Fuga->_Adc_Min_Read
    _Lec_Adc_Modo_Fuga->_Adc_Temp_Read
    _Lec_Adc_Modo_Flujo->_Adc_Min_Read
    _Lec_Adc_Modo_Flujo->_Adc_Temp_Read
    _Adc_Temp_Read->___fttol
    _Adc_Min_Read->___fttol
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___awtoft->_Adc
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_MEF_Actualizacion
    _MEF_Actualizacion->_MEF_Subest_Actualizacion

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  175635
                           _Adc_init
                           _LCD_init
                  _MEF_Actualizacion
                           _MEF_Init
                         _Pines_Init
                           _Pwm_init
 ---------------------------------------------------------------------------------
 (1) _Pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Pines_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MEF_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MEF_Actualizacion                                    2     2      0  175319
                                              1 BANK1      2     2      0
                        _Antirrebote
                        _LCD_command
           _MEF_Subest_Actualizacion
                        _Pant_Inicio
                        _Select_Modo
 ---------------------------------------------------------------------------------
 (2) _Select_Modo                                          0     0      0   15292
                        _Antirrebote
                          _Pant_Menu
                      _Pant_Selector
 ---------------------------------------------------------------------------------
 (3) _Pant_Selector                                        0     0      0    7646
                          _LCD_array
 ---------------------------------------------------------------------------------
 (3) _Pant_Menu                                            0     0      0    7646
                          _LCD_array
 ---------------------------------------------------------------------------------
 (2) _Pant_Inicio                                         20    20      0    8779
                                              6 BANK0     20    20      0
                          _LCD_array
                      _LCD_character
                        _LCD_command
 ---------------------------------------------------------------------------------
 (3) _LCD_character                                        4     3      1     811
                                              6 COMMON     2     1      1
                                              0 BANK0      2     2      0
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (2) _MEF_Subest_Actualizacion                             4     4      0  151000
                                             65 BANK0      3     3      0
                                              0 BANK1      1     1      0
                        _Antirrebote
                 _Lec_Adc_Modo_Flujo
                  _Lec_Adc_Modo_Fuga
                  _Lec_Adc_Modo_Pulv
                         _Pant_Modos
                  _Pant_Temporizador
                       _Pant_Val_Act
                  _Salida_Modo_Flujo
                   _Salida_Modo_Fuga
                   _Salida_Modo_Pulv
 ---------------------------------------------------------------------------------
 (3) _Salida_Modo_Pulv                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Salida_Modo_Fuga                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Salida_Modo_Flujo                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Pant_Val_Act                                        22    22      0   12263
                                             24 BANK0     22    22      0
                          _LCD_array
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _Pant_Temporizador                                   22    22      0   12077
                                             24 BANK0     22    22      0
                          _LCD_array
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             23    20      3    4259
                                              9 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     386
                                              7 COMMON     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Pant_Modos                                           0     0      0    8699
                          _LCD_array
                        _LCD_command
                           _LCD_date
                             _LCD_xy
 ---------------------------------------------------------------------------------
 (4) _LCD_xy                                               4     0      4     557
                                              0 BANK0      4     0      4
                        _LCD_command
 ---------------------------------------------------------------------------------
 (4) _LCD_array                                            8     2      6    7646
                                              6 COMMON     2     2      0
                                              0 BANK0      6     0      6
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (5) _LCD_date                                             3     3      0     248
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Pulv                                    0     0      0   59901
                       _Adc_Min_Read
                       _Adc_Pwm_Read
                       _Adc_Rpm_Read
                      _Adc_Temp_Read
 ---------------------------------------------------------------------------------
 (4) _Adc_Rpm_Read                                        15    15      0   16424
                                             50 BANK0     15    15      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     752
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     857
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _Adc_Pwm_Read                                         3     3      0   14481
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Fuga                                    0     0      0   28996
                       _Adc_Min_Read
                      _Adc_Temp_Read
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Flujo                                   0     0      0   28996
                       _Adc_Min_Read
                      _Adc_Temp_Read
 ---------------------------------------------------------------------------------
 (4) _Adc_Temp_Read                                        3     3      0   14481
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) _Adc_Min_Read                                         3     3      0   14515
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             13     9      4     910
                                             37 BANK0     13     9      4
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4952
                                              7 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    5192
                                             22 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3288
                                              3 BANK0      4     1      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2770
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _Adc                                                  7     5      2     105
                                              3 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _Antirrebote                                          3     3      0       0
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0     316
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (5) _LCD_command                                          3     3      0     248
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
                         _Task_Ready
 ---------------------------------------------------------------------------------
 (8) _Task_Ready                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adc_init
   _LCD_init
     _LCD_command
   _MEF_Actualizacion
     _Antirrebote
     _LCD_command
     _MEF_Subest_Actualizacion
       _Antirrebote
       _Lec_Adc_Modo_Flujo
         _Adc_Min_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Temp_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
       _Lec_Adc_Modo_Fuga
         _Adc_Min_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Temp_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
       _Lec_Adc_Modo_Pulv
         _Adc_Min_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Pwm_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Rpm_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
           ___lwdiv
           ___wmul
             ___lwdiv (ARG)
         _Adc_Temp_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
       _Pant_Modos
         _LCD_array
           _LCD_command
           _LCD_date
         _LCD_command
         _LCD_date
         _LCD_xy
           _LCD_command
       _Pant_Temporizador
         _LCD_array
           _LCD_command
           _LCD_date
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
       _Pant_Val_Act
         _LCD_array
           _LCD_command
           _LCD_date
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
       _Salida_Modo_Flujo
       _Salida_Modo_Fuga
       _Salida_Modo_Pulv
     _Pant_Inicio
       _LCD_array
         _LCD_command
         _LCD_date
       _LCD_character
         _LCD_command
         _LCD_date
       _LCD_command
     _Select_Modo
       _Antirrebote
       _Pant_Menu
         _LCD_array
           _LCD_command
           _LCD_date
       _Pant_Selector
         _LCD_array
           _LCD_command
           _LCD_date
   _MEF_Init
   _Pines_Init
   _Pwm_init

 _ISR (ROOT)
   _Task_Ready

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      3      28       7       50.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     44      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      83      12        0.0%
ABS                  0      0      83       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Dec 18 16:06:46 2020

               ??_Salida_Modo_Fuga 0073                 ??_Salida_Modo_Pulv 0073  
                                pc 0002                ??_Salida_Modo_Flujo 0073  
                               fsr 0004                ___wmul@multiplicand 0025  
                 Adc_Rpm_Read@cent 0059                                l206 0D48  
                              l208 0D4A                                l217 0DA2  
                              l242 03D6                                l246 0432  
                              l512 09B8                                l281 08CF  
                              l427 17CB                                l661 0101  
                              l910 0B8E                                l670 0158  
                              l911 0B96                                l663 00DD  
                              l649 0078                                l691 16B9  
                              l994 0CFE                                _GIE 005F  
                              _RB4 0034                                _ISR 0953  
                              _Adc 099B                                _Min 0069  
                              _Seg 0068                                _Rpm 00AE  
                              _Pwm 006A                                fsr0 0004  
                              indf 0000                  _MEF_Actualizacion 0D24  
                       _Delay100ms 0078                  Adc_Rpm_Read@dec_m 005D  
                       _Delay200ms 006E                               ?_ISR 0070  
                             ?_Adc 0073                 ?_MEF_Actualizacion 0070  
                     ___ftdiv@cntr 003F                  Adc_Rpm_Read@valor 005F  
        __end_of_Salida_Modo_Flujo 1629                       ___ftdiv@sign 0044  
                Adc_Rpm_Read@uni_m 005B                               l4001 091F  
                             l4003 092D                               l4013 094E  
                             l4101 0B01                               l4103 0B16  
                             l4031 17F0                               l4009 0943  
                             l4121 17A8                               l4025 17D4  
                             l4201 016D                               l4123 17AF  
                             l4027 17E2                               l4035 17FB  
                             l4211 0182                               l4203 0171  
                             l4109 0B34                               l4117 179A  
                             l4221 019C                               l4141 0074  
                             l4071 0E22                               l4119 17A1  
                             l4127 17B6                               l4241 01C4  
                             l4233 01C0                               l4153 00A2  
                             l4059 0328                               l4091 0ADD  
                             l4227 01B1                               l4219 0198  
                             l4163 00DF                               l4147 007D  
                             l4243 0054                               l4411 033D  
                             l4331 0F06                               l4093 0AE6  
                             l4245 0207                               l4149 0090  
                             l4511 0BC8                               l4263 1730  
                             l4095 0AEF                               l4175 011B  
                             l4423 035B                               l4415 0347  
                             l4407 0335                               l4335 0F2D  
                             l4327 0EDF                               l4265 172C  
                             l4097 0AF8                               l4193 014A  
                             l4185 0129                               l4441 0387  
                             l4433 036C                               l4267 173A  
                             l4179 0127                               l4427 0364  
                             l4419 0351                               l3821 07FE  
                             l4453 03A4                               l4445 0391  
                             l4349 1782                               l4541 0D25  
                             l3903 044B                               l4463 03BD  
                             l3921 04A0                               l4449 039B  
                             l4393 08C4                               l3691 0B79  
                             l3683 0B5E                               l3675 0B4B  
                             l3827 16B1                               l4459 03B3  
                             l4547 0D2E                               l3685 0B63  
                             l3933 04C8                               l3925 04B0  
                             l3909 0461                               l4485 0402  
                             l4389 08BF                               l4557 0D3C  
                             l3695 0B8C                               l3679 0B52  
                             l3847 1700                               l3863 0768  
                             l4495 0415                               l4399 08D1  
                             l3697 0B7E                               l3881 07AD  
                             l3857 0752                               l3937 04D8  
                             l3953 0CC1                               l4489 040D  
                             l4585 0D74                               l4577 0D63  
                             l4569 0D52                               l3971 0CEA  
                             l4595 0D85                               l3949 0CB8  
                             l3983 0D0D                               l3975 0CFA  
                             l4871 008B                               l3889 07CC  
                             l4873 00F3                               l4697 1766  
                             l3987 0D1B                               l4875 17BD  
                             l4867 0D91                               l4877 0B08  
                             l4869 0421                               STR_1 0844  
                             STR_2 082F                               STR_3 081A  
                             STR_4 0844                               STR_5 08AD  
                             STR_6 082D                               STR_7 08AD  
                             STR_8 082D                               STR_9 08AD  
                     ?_LCD_command 0070                               u4005 046D  
                             u4015 047F                               u4105 04E1  
                             u4045 04B1                               u4055 04B9  
                             u4135 0CC8                               u4305 17D7  
                             u4235 0922                               u4165 0CEB  
                             u4325 17E8                               u3615 0B72  
                             u4095 04D9                               u4255 092E  
                             u4335 17F1                               u3705 05E3  
                             u4265 093A                               u4505 015F  
                             u3715 05F5                               u3635 0B85  
                             u4195 0D03                               u4275 0944  
                             _PEIE 005E                               u4700 0F5E  
                             u3725 0608                               u3805 0713  
                             u5317 0FE2                               u4710 0F79  
                             u3735 0646                               u5407 09B2  
                             u3815 09A5                               u5327 03E1  
                             u3745 0659                               u5417 09DA  
                             u4465 0140                               u5337 03F2  
                             u5507 0C18                               u5427 1722  
                             u3675 0B9F                               u3595 0B57  
                             u3755 068C                               u5347 0B28  
                             u4820 0382                               u5517 0C25  
                             u5437 1734                               u3925 077A  
                             u5357 06D6                               u3765 069D  
                             u4910 03CF                               u4830 0383  
                             u5527 061C                               u3695 05D2  
                             u5447 0BC1                               u3935 078C  
                             u5367 06DE                               u3775 06AF  
                             u4920 03D0                               u5537 0624  
                             u5457 0BD2                               u3945 07AE  
                             u3865 16BA                               u5377 0727  
                             u3785 06C2                               u5547 066D  
                             u5467 0BE8                               u3955 07BF  
                             u3875 16C1                               u5387 072E  
                             u3795 0700                               u5557 0675  
                             u5477 0BF5                               u3965 07CD  
                             u5397 0734                               u4685 1772  
                             u5567 067C                               u5487 0C02  
                             u5497 0C0D                               _TMR1 000E  
                             _Modo 006B                               _Temp 007A  
                             _main 1740                       ___ftpack@arg 0073  
                     ___ftpack@exp 0076                               btemp 007E  
              ??_MEF_Actualizacion 00C6                               start 0010  
               __size_of_LCD_array 0067                      _Estado_Actual 0064  
                     ___ftmul@cntr 0034                       ___ftmul@sign 0035  
                            ??_ISR 0070                              ??_Adc 0075  
                     ___fttol@exp1 0051                       ___fttol@lval 004D  
              __end_of_Antirrebote 1740                   __end_of_LCD_date 073A  
                 __end_of_LCD_init 0C2B                   __end_of_MEF_Init 1634  
                            ?_main 0070                              STR_10 082D  
                            STR_11 08AD                              STR_12 082D  
                            STR_20 0886                              STR_21 0884  
                            STR_13 08AD                              STR_30 08A3  
                            STR_22 0879                              STR_14 086B  
                            STR_23 08AF                              STR_15 089E  
                            STR_24 08A8                              STR_16 088E  
                            STR_25 08A3                              STR_17 0859  
                            STR_26 08A3                              STR_18 0894  
                            STR_27 08A3                              STR_19 0899  
                            STR_28 08A3                              STR_29 08A3  
                  __end_of___ftdiv 07F2                    __end_of___ftmul 0506  
                  __end_of___fttol 0D24                      _LCD_character 176C  
                  __end_of___lwdiv 0953                              i1l121 0990  
                  __end_of___lwmod 1800          __end_of_MEF_Actualizacion 0DA3  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _TRISB 0086  
                            _TRISC 0087                      ??_Pant_Inicio 0026  
                            _PwmS1 00B4                              _Reset 0065  
                    ___awtoft@sign 0026                    __end_of_dpowers 081A  
           __size_of_Pant_Selector 009D                    __end_of_isdigit 0800  
                    ___ftpack@sign 0077                   __end_of_Adc_init 16F4  
                            pclath 000A                    ??_Adc_Temp_Read 0078  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 020C                      ?_Pant_Val_Act 0070  
                  __initialization 0013                       __end_of_main 176C  
                       _Pant_Modos 0E2B                     ?_LCD_character 0076  
                           ??_main 0078                      ___fttol@sign1 004C  
                    ??_Select_Modo 0078                  __end_of_LCD_array 0B43  
                 __end_of_Pwm_init 16AD                             _ADCON0 001F  
                           _ADRESH 001E                             _ADRESL 009E  
       __size_of_Salida_Modo_Flujo 0004                   __end_of___awtoft 1719  
                 __end_of___ftpack 0BB1                         _Pines_Init 167A  
                           i1l3341 08F7                             i1l3351 0908  
                           i1l3335 08E6                             i1l3353 090A  
                           i1l3463 0962                             i1l3473 0979  
                           i1l3467 096C                             i1l3485 098B  
                           i1l3479 097F                __end_of_Pant_Inicio 1000  
                           _LCD_xy 1799                      _Act_Variables 00BB  
                           _TMR1IE 0460                             _TMR1IF 0060  
                       _Task_Ready 08DA                             _TMR1ON 0080  
                           _TRISB4 0434                   Pant_Inicio@F1323 00BD  
                 Pant_Inicio@F1325 00A0                 __size_of_Pant_Menu 004B  
                   ??_Pant_Val_Act 0038                        _Antirrebote 1719  
       ??_MEF_Subest_Actualizacion 0061                             _Output 0066  
                 _Subestado_Actual 00B8                      _Pant_Selector 0EB7  
                           ___wmul 16AD                          ??___ftdiv 003C  
               _Lec_Adc_Modo_Flujo 1644                          ??___ftmul 002D  
                        ??___fttol 0049                          ??___lwdiv 0077  
                        ??___lwmod 0077                       LCD_date@date 0075  
            ___ftmul@f3_as_product 0031                ?_Lec_Adc_Modo_Flujo 0070  
       __size_of_MEF_Actualizacion 007F                       __pdataCOMMON 0078  
                        ??_isdigit 0073                             saved_w 007E  
                        ??_sprintf 002C                __end_of_Select_Modo 08DA  
          __end_of__initialization 0049               __size_of_LCD_command 00BA  
                        ?_LCD_date 0070               ??_Lec_Adc_Modo_Flujo 0078  
                        ?_LCD_init 0070                          ?_MEF_Init 0070  
                       ___ftdiv@f1 0039                         ___ftdiv@f2 0036  
                       ___ftdiv@f3 0040                         ___awtoft@c 0023  
                       ___ftmul@f1 0027                         ___ftmul@f2 002A  
                       ___fttol@f1 0045                     ?_Pant_Selector 0070  
                   __pcstackCOMMON 0070                       __pidataBANK0 1629  
                     __pidataBANK1 163C                    ??_LCD_character 0077  
                _Adc_Min_Read$1438 0052                          LCD_init@i 0020  
                      ?_Pant_Modos 0070                          ?_Adc_init 0070  
        __size_of_Salida_Modo_Fuga 0001          __size_of_Salida_Modo_Pulv 0001  
                __end_of_Pant_Menu 0A7A                        _Pant_Inicio 0F54  
                     sprintf@width 0034                        ?_Pines_Init 0070  
                       __pbssBANK0 0064                         __pbssBANK1 00A0  
                          ?_LCD_xy 0020                        ?_Task_Ready 0070  
                       ??_LCD_date 0073                            LCD_xy@x 0020  
                          LCD_xy@y 0022                         ??_LCD_init 0076  
                       ??_MEF_Init 0073                         __pmaintext 1740  
                          ?___wmul 0023                          ?_Pwm_init 0070  
                       __pintentry 0004                          ?___awtoft 0023  
                        ?___ftpack 0073                         ??_Adc_init 0073  
                      _Select_Modo 08B1               __end_of_Pant_Val_Act 05C8  
                       __stringtab 0800                            _Delay1s 006C  
                  __size_of_LCD_xy 0033                __size_of_Pant_Modos 008C  
                  ??_Pant_Selector 0078                            _Mostrar 0067  
                _Pant_Temporizador 09E4                            ___ftdiv 073A  
                       ??_Pwm_init 0073                    __size_of___wmul 0023  
                          ___ftmul 0433                            ___fttol 0CA7  
                          ___lwdiv 0915                            ___lwmod 17CC  
               ?_Pant_Temporizador 0070                         ??___awtoft 0078  
                       ??___ftpack 0020                          _ANSELbits 0188  
              __size_of_Pines_Init 0019                            __ptext1 1693  
                          __ptext2 167A                            __ptext3 162D  
                          __ptext4 0D24                            __ptext5 08B1  
                          __ptext6 0EB7                            __ptext7 0A2F  
                          __ptext8 0F54                            __ptext9 176C  
              __size_of_Task_Ready 003B               Pant_Inicio@caracter1 002A  
                     __size_of_ISR 0048                       __size_of_Adc 0049  
                        _T1CONbits 0010                            _dpowers 0810  
                          _isdigit 07F2                         _mod_tiempo 00BA  
              ??_Pant_Temporizador 0038            Pant_Temporizador@buffer 003A  
                          _sprintf 004D                            clrloop0 1635  
             end_of_initialization 0049                          _LCD_array 0ADC  
            __end_of_Adc_Temp_Read 0ADC                 Pant_Val_Act@buffer 003A  
                     ?_Antirrebote 0070          __end_of_Pant_Temporizador 0A2F  
                    ?_Adc_Min_Read 0070                          _PORTAbits 0005  
                        _PORTBbits 0006                          _PORTCbits 0007  
                 _Salida_Modo_Fuga 1622                   _Salida_Modo_Pulv 0003  
                    LCD_array@date 0024                      ?_Adc_Rpm_Read 0070  
                        _TRISAbits 0085                          _TRISBbits 0086  
                        _TRISCbits 0087                      ?_Adc_Pwm_Read 0070  
                        _Act_PwmS1 00BC                         ?_LCD_array 0020  
                      ___ftdiv@exp 0043                     __end_of_LCD_xy 17CC  
                __size_of_LCD_date 00B8                  __size_of_LCD_init 007A  
                __size_of_MEF_Init 0007                        ___ftmul@exp 0030  
                   ??_Adc_Min_Read 0078                     __end_of___wmul 16D0  
                    __pidataCOMMON 1623                       ??_Pant_Modos 0078  
            __size_of_Pant_Val_Act 00C2                 _Adc_Temp_Read$1439 0052  
                   ??_Adc_Rpm_Read 0052                  __size_of_Adc_init 0024  
                       LCD_array@x 0020                         LCD_array@y 0022  
                   ??_Adc_Pwm_Read 0078                start_initialization 0013  
                     ?_Pant_Inicio 0070  __size_of_MEF_Subest_Actualizacion 00FF  
                      __end_of_ISR 099B                        __end_of_Adc 09E4  
        ?_MEF_Subest_Actualizacion 0070                          _Pant_Menu 0A2F  
                    ??_LCD_command 0073                          _Per_PwmS1 00AB  
                     ??_Pines_Init 0073                           ??_LCD_xy 0076  
                     ??_Task_Ready 0070        __size_of_Lec_Adc_Modo_Flujo 0009  
               __end_of_Pant_Modos 0EB7         __size_of_Pant_Temporizador 004B  
                     _Pant_Val_Act 0506                  _Lec_Adc_Modo_Fuga 164D  
                _Lec_Adc_Modo_Pulv 1667                           ??___wmul 0077  
                       init_fetch0 1656                        __pdataBANK0 006C  
                      __pdataBANK1 00BD                 ?_Lec_Adc_Modo_Fuga 0070  
               ?_Lec_Adc_Modo_Pulv 0070                  __size_of_Pwm_init 001A  
            __end_of_LCD_character 1799                 __end_of_Pines_Init 1693  
                __size_of___awtoft 0025                  __size_of___ftpack 006E  
               __end_of_Task_Ready 0915                ??_Lec_Adc_Modo_Fuga 0078  
                     ?_Select_Modo 0070                        __pbssCOMMON 007A  
              ??_Lec_Adc_Modo_Pulv 0078                          ___latbits 0002  
                    __pcstackBANK0 0020                      __pcstackBANK1 00C5  
                     _isdigit$1239 0073                         ?_Pant_Menu 0070  
                      ??_LCD_array 0076                        sprintf@flag 0033  
                      sprintf@prec 002F          MEF_Subest_Actualizacion@i 00C5  
              __end_of_LCD_command 0682          __end_of_Lec_Adc_Modo_Fuga 1656  
        __end_of_Lec_Adc_Modo_Pulv 167A                   ___lwdiv@dividend 0075  
             __size_of_Antirrebote 0027                           ?___ftdiv 0036  
                         ?___ftmul 0027                           ?___fttol 0045  
                         ?___lwdiv 0073                           ?___lwmod 0023  
                        __pstrings 0800                          _freqPwmS1 00B6  
                         ?_isdigit 0070                   ___lwdiv@quotient 0021  
                         ?_sprintf 0029               __end_of_Adc_Min_Read 0CA7  
              Pant_Inicio@caracter 0032                         Adc@channel 0020  
                interrupt_function 0004                LCD_character@adress 0020  
                   ___wmul@product 0027                           _LCD_date 0682  
                         _LCD_init 0BB1                           _MEF_Init 162D  
                        clear_ram0 1634           __end_of_Salida_Modo_Fuga 1623  
         __end_of_Salida_Modo_Pulv 0004               __end_of_Adc_Rpm_Read 0334  
             __end_of_Adc_Pwm_Read 0E2B              __end_of_Pant_Selector 0F54  
                         _PER_T_S1 00B0                           _Adc_init 16D0  
                       _ADCON0bits 001F                        __stringbase 080F  
                       _ADCON1bits 009F                  ___wmul@multiplier 0023  
                         _P_W_T_S1 00B2               __size_of_Pant_Inicio 00AC  
                      ??_Pant_Menu 0078                        _LCD_command 05C8  
                    Adc@convertion 0021         __size_of_Lec_Adc_Modo_Fuga 0009  
                         _Pw_PwmS1 00A8         __size_of_Lec_Adc_Modo_Pulv 0013  
 __end_of_MEF_Subest_Actualizacion 0433                           _Pwm_init 1693  
                 __size_of___ftdiv 00B8                   __size_of___ftmul 00D3  
                 __size_of___fttol 007D                   __size_of___lwdiv 003E  
                 __size_of___lwmod 0034                           ___awtoft 16F4  
                         ___ftpack 0B43                 __end_of__stringtab 0810  
                       _ANSELHbits 0189             __size_of_Adc_Temp_Read 0062  
                       sprintf@val 0031                   __size_of_isdigit 000E  
                  ___lwdiv@divisor 0073                    ___lwdiv@counter 0020  
                         __ptext10 0334                           __ptext11 0003  
                         __ptext20 1799                           __ptext12 1622  
                         __ptext21 0ADC                           __ptext13 1625  
                         __ptext30 0A7A                           __ptext22 0682  
                         __ptext14 0506                           __ptext31 0C2B  
                         __ptext23 1667                           __ptext15 09E4  
                         __ptext40 05C8                           __ptext32 0CA7  
                         __ptext24 020C                           __ptext16 004D  
                         __ptext41 16D0                           __ptext33 0433  
                         __ptext25 16AD                           __ptext17 07F2  
                         __ptext42 0953                           __ptext34 073A  
                         __ptext26 0915                           __ptext18 17CC  
                         __ptext43 08DA                           __ptext35 16F4  
                         __ptext27 0DA3                           __ptext19 0E2B  
                         __ptext36 0B43                           __ptext28 164D  
                         __ptext37 099B                           __ptext29 1644  
                         __ptext38 1719                           __ptext39 0BB1  
                _Adc_Rpm_Read$1436 0056               __size_of_Select_Modo 0029  
                 __size_of_sprintf 01BF                       _Temporizador 00B9  
                    __size_of_main 002C              LCD_character@caracter 0076  
                   LCD_character@i 0021              __size_of_Adc_Min_Read 007C  
                         init_ram0 165A                           isdigit@c 0074  
                         intlevel1 0000                          sprintf@ap 0030  
                        sprintf@sp 0037         __end_of_Lec_Adc_Modo_Flujo 164D  
            __size_of_Adc_Rpm_Read 0128              __size_of_Adc_Pwm_Read 0088  
                 ___lwmod@dividend 0025                      _Adc_Temp_Read 0A7A  
                        stringcode 080A                  _Adc_Pwm_Read$1437 0052  
                     _Adc_Min_Read 0C2B           _MEF_Subest_Actualizacion 0334  
                         sprintf@c 0036                           sprintf@f 0029  
                  ___lwmod@divisor 0023                    ___lwmod@counter 0077  
                     _Adc_Rpm_Read 020C                           stringdir 080A  
                         stringtab 0800                       _Adc_Pwm_Read 0DA3  
                       _WDTCONbits 0105                  _Salida_Modo_Flujo 1625  
                   ?_Adc_Temp_Read 0070             __size_of_LCD_character 002D  
               ?_Salida_Modo_Flujo 0070                      ??_Antirrebote 0073  
                   LCD_command@cmd 0075                  ?_Salida_Modo_Fuga 0070  
                ?_Salida_Modo_Pulv 0070  

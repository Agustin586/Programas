

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Dec 18 12:10:19 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F886
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=3
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    62                           	dabs	1,0x7E,2
    63  0000                     
    64                           ; Version 2.20
    65                           ; Generated 09/04/2020 GMT
    66                           ; 
    67                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F886 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0009                     	;# 
   107  000A                     	;# 
   108  000B                     	;# 
   109  000C                     	;# 
   110  000D                     	;# 
   111  000E                     	;# 
   112  000E                     	;# 
   113  000F                     	;# 
   114  0010                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  001D                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  0081                     	;# 
   133  0085                     	;# 
   134  0086                     	;# 
   135  0087                     	;# 
   136  0089                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0093                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0095                     	;# 
   149  0096                     	;# 
   150  0097                     	;# 
   151  0098                     	;# 
   152  0099                     	;# 
   153  009A                     	;# 
   154  009B                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  0105                     	;# 
   160  0107                     	;# 
   161  0108                     	;# 
   162  0109                     	;# 
   163  010C                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  0185                     	;# 
   169  0187                     	;# 
   170  0188                     	;# 
   171  0189                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  000E                     	;# 
   189  000F                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0013                     	;# 
   194  0014                     	;# 
   195  0015                     	;# 
   196  0015                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001B                     	;# 
   204  001C                     	;# 
   205  001D                     	;# 
   206  001E                     	;# 
   207  001F                     	;# 
   208  0081                     	;# 
   209  0085                     	;# 
   210  0086                     	;# 
   211  0087                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250  0000                     	;# 
   251  0001                     	;# 
   252  0002                     	;# 
   253  0003                     	;# 
   254  0004                     	;# 
   255  0005                     	;# 
   256  0006                     	;# 
   257  0007                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  000E                     	;# 
   265  000F                     	;# 
   266  0010                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0014                     	;# 
   271  0015                     	;# 
   272  0015                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001B                     	;# 
   280  001C                     	;# 
   281  001D                     	;# 
   282  001E                     	;# 
   283  001F                     	;# 
   284  0081                     	;# 
   285  0085                     	;# 
   286  0086                     	;# 
   287  0087                     	;# 
   288  0089                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  008F                     	;# 
   293  0090                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0093                     	;# 
   297  0093                     	;# 
   298  0093                     	;# 
   299  0094                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0098                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  009F                     	;# 
   311  0105                     	;# 
   312  0107                     	;# 
   313  0108                     	;# 
   314  0109                     	;# 
   315  010C                     	;# 
   316  010C                     	;# 
   317  010D                     	;# 
   318  010E                     	;# 
   319  010F                     	;# 
   320  0185                     	;# 
   321  0187                     	;# 
   322  0188                     	;# 
   323  0189                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  0000                     	;# 
   327  0001                     	;# 
   328  0002                     	;# 
   329  0003                     	;# 
   330  0004                     	;# 
   331  0005                     	;# 
   332  0006                     	;# 
   333  0007                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  000E                     	;# 
   341  000F                     	;# 
   342  0010                     	;# 
   343  0011                     	;# 
   344  0012                     	;# 
   345  0013                     	;# 
   346  0014                     	;# 
   347  0015                     	;# 
   348  0015                     	;# 
   349  0016                     	;# 
   350  0017                     	;# 
   351  0018                     	;# 
   352  0019                     	;# 
   353  001A                     	;# 
   354  001B                     	;# 
   355  001B                     	;# 
   356  001C                     	;# 
   357  001D                     	;# 
   358  001E                     	;# 
   359  001F                     	;# 
   360  0081                     	;# 
   361  0085                     	;# 
   362  0086                     	;# 
   363  0087                     	;# 
   364  0089                     	;# 
   365  008C                     	;# 
   366  008D                     	;# 
   367  008E                     	;# 
   368  008F                     	;# 
   369  0090                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0093                     	;# 
   374  0093                     	;# 
   375  0094                     	;# 
   376  0095                     	;# 
   377  0096                     	;# 
   378  0097                     	;# 
   379  0098                     	;# 
   380  0099                     	;# 
   381  009A                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  0105                     	;# 
   388  0107                     	;# 
   389  0108                     	;# 
   390  0109                     	;# 
   391  010C                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0185                     	;# 
   397  0187                     	;# 
   398  0188                     	;# 
   399  0189                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0009                     	;# 
   411  000A                     	;# 
   412  000B                     	;# 
   413  000C                     	;# 
   414  000D                     	;# 
   415  000E                     	;# 
   416  000E                     	;# 
   417  000F                     	;# 
   418  0010                     	;# 
   419  0011                     	;# 
   420  0012                     	;# 
   421  0013                     	;# 
   422  0014                     	;# 
   423  0015                     	;# 
   424  0015                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001B                     	;# 
   432  001C                     	;# 
   433  001D                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  0081                     	;# 
   437  0085                     	;# 
   438  0086                     	;# 
   439  0087                     	;# 
   440  0089                     	;# 
   441  008C                     	;# 
   442  008D                     	;# 
   443  008E                     	;# 
   444  008F                     	;# 
   445  0090                     	;# 
   446  0091                     	;# 
   447  0092                     	;# 
   448  0093                     	;# 
   449  0093                     	;# 
   450  0093                     	;# 
   451  0094                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0098                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  009F                     	;# 
   463  0105                     	;# 
   464  0107                     	;# 
   465  0108                     	;# 
   466  0109                     	;# 
   467  010C                     	;# 
   468  010C                     	;# 
   469  010D                     	;# 
   470  010E                     	;# 
   471  010F                     	;# 
   472  0185                     	;# 
   473  0187                     	;# 
   474  0188                     	;# 
   475  0189                     	;# 
   476  018C                     	;# 
   477  018D                     	;# 
   478  0000                     	;# 
   479  0001                     	;# 
   480  0002                     	;# 
   481  0003                     	;# 
   482  0004                     	;# 
   483  0005                     	;# 
   484  0006                     	;# 
   485  0007                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  000E                     	;# 
   493  000F                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0014                     	;# 
   499  0015                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0017                     	;# 
   503  0018                     	;# 
   504  0019                     	;# 
   505  001A                     	;# 
   506  001B                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  001D                     	;# 
   510  001E                     	;# 
   511  001F                     	;# 
   512  0081                     	;# 
   513  0085                     	;# 
   514  0086                     	;# 
   515  0087                     	;# 
   516  0089                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  008F                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0093                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0094                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0098                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  009F                     	;# 
   539  0105                     	;# 
   540  0107                     	;# 
   541  0108                     	;# 
   542  0109                     	;# 
   543  010C                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  010F                     	;# 
   548  0185                     	;# 
   549  0187                     	;# 
   550  0188                     	;# 
   551  0189                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0009                     	;# 
   563  000A                     	;# 
   564  000B                     	;# 
   565  000C                     	;# 
   566  000D                     	;# 
   567  000E                     	;# 
   568  000E                     	;# 
   569  000F                     	;# 
   570  0010                     	;# 
   571  0011                     	;# 
   572  0012                     	;# 
   573  0013                     	;# 
   574  0014                     	;# 
   575  0015                     	;# 
   576  0015                     	;# 
   577  0016                     	;# 
   578  0017                     	;# 
   579  0018                     	;# 
   580  0019                     	;# 
   581  001A                     	;# 
   582  001B                     	;# 
   583  001B                     	;# 
   584  001C                     	;# 
   585  001D                     	;# 
   586  001E                     	;# 
   587  001F                     	;# 
   588  0081                     	;# 
   589  0085                     	;# 
   590  0086                     	;# 
   591  0087                     	;# 
   592  0089                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  008F                     	;# 
   597  0090                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0093                     	;# 
   602  0093                     	;# 
   603  0094                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009C                     	;# 
   612  009D                     	;# 
   613  009E                     	;# 
   614  009F                     	;# 
   615  0105                     	;# 
   616  0107                     	;# 
   617  0108                     	;# 
   618  0109                     	;# 
   619  010C                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  010E                     	;# 
   623  010F                     	;# 
   624  0185                     	;# 
   625  0187                     	;# 
   626  0188                     	;# 
   627  0189                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0089                     	;# 
   669  008C                     	;# 
   670  008D                     	;# 
   671  008E                     	;# 
   672  008F                     	;# 
   673  0090                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0093                     	;# 
   678  0093                     	;# 
   679  0094                     	;# 
   680  0095                     	;# 
   681  0096                     	;# 
   682  0097                     	;# 
   683  0098                     	;# 
   684  0099                     	;# 
   685  009A                     	;# 
   686  009B                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009E                     	;# 
   690  009F                     	;# 
   691  0105                     	;# 
   692  0107                     	;# 
   693  0108                     	;# 
   694  0109                     	;# 
   695  010C                     	;# 
   696  010C                     	;# 
   697  010D                     	;# 
   698  010E                     	;# 
   699  010F                     	;# 
   700  0185                     	;# 
   701  0187                     	;# 
   702  0188                     	;# 
   703  0189                     	;# 
   704  018C                     	;# 
   705  018D                     	;# 
   706  0000                     	;# 
   707  0001                     	;# 
   708  0002                     	;# 
   709  0003                     	;# 
   710  0004                     	;# 
   711  0005                     	;# 
   712  0006                     	;# 
   713  0007                     	;# 
   714  0009                     	;# 
   715  000A                     	;# 
   716  000B                     	;# 
   717  000C                     	;# 
   718  000D                     	;# 
   719  000E                     	;# 
   720  000E                     	;# 
   721  000F                     	;# 
   722  0010                     	;# 
   723  0011                     	;# 
   724  0012                     	;# 
   725  0013                     	;# 
   726  0014                     	;# 
   727  0015                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  001D                     	;# 
   738  001E                     	;# 
   739  001F                     	;# 
   740  0081                     	;# 
   741  0085                     	;# 
   742  0086                     	;# 
   743  0087                     	;# 
   744  0089                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  008F                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0093                     	;# 
   753  0093                     	;# 
   754  0093                     	;# 
   755  0094                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0098                     	;# 
   760  0099                     	;# 
   761  009A                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  009F                     	;# 
   767  0105                     	;# 
   768  0107                     	;# 
   769  0108                     	;# 
   770  0109                     	;# 
   771  010C                     	;# 
   772  010C                     	;# 
   773  010D                     	;# 
   774  010E                     	;# 
   775  010F                     	;# 
   776  0185                     	;# 
   777  0187                     	;# 
   778  0188                     	;# 
   779  0189                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  0000                     	;# 
   783  0001                     	;# 
   784  0002                     	;# 
   785  0003                     	;# 
   786  0004                     	;# 
   787  0005                     	;# 
   788  0006                     	;# 
   789  0007                     	;# 
   790  0009                     	;# 
   791  000A                     	;# 
   792  000B                     	;# 
   793  000C                     	;# 
   794  000D                     	;# 
   795  000E                     	;# 
   796  000E                     	;# 
   797  000F                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001B                     	;# 
   812  001C                     	;# 
   813  001D                     	;# 
   814  001E                     	;# 
   815  001F                     	;# 
   816  0081                     	;# 
   817  0085                     	;# 
   818  0086                     	;# 
   819  0087                     	;# 
   820  0089                     	;# 
   821  008C                     	;# 
   822  008D                     	;# 
   823  008E                     	;# 
   824  008F                     	;# 
   825  0090                     	;# 
   826  0091                     	;# 
   827  0092                     	;# 
   828  0093                     	;# 
   829  0093                     	;# 
   830  0093                     	;# 
   831  0094                     	;# 
   832  0095                     	;# 
   833  0096                     	;# 
   834  0097                     	;# 
   835  0098                     	;# 
   836  0099                     	;# 
   837  009A                     	;# 
   838  009B                     	;# 
   839  009C                     	;# 
   840  009D                     	;# 
   841  009E                     	;# 
   842  009F                     	;# 
   843  0105                     	;# 
   844  0107                     	;# 
   845  0108                     	;# 
   846  0109                     	;# 
   847  010C                     	;# 
   848  010C                     	;# 
   849  010D                     	;# 
   850  010E                     	;# 
   851  010F                     	;# 
   852  0185                     	;# 
   853  0187                     	;# 
   854  0188                     	;# 
   855  0189                     	;# 
   856  018C                     	;# 
   857  018D                     	;# 
   858  0000                     	;# 
   859  0001                     	;# 
   860  0002                     	;# 
   861  0003                     	;# 
   862  0004                     	;# 
   863  0005                     	;# 
   864  0006                     	;# 
   865  0007                     	;# 
   866  0009                     	;# 
   867  000A                     	;# 
   868  000B                     	;# 
   869  000C                     	;# 
   870  000D                     	;# 
   871  000E                     	;# 
   872  000E                     	;# 
   873  000F                     	;# 
   874  0010                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0014                     	;# 
   879  0015                     	;# 
   880  0015                     	;# 
   881  0016                     	;# 
   882  0017                     	;# 
   883  0018                     	;# 
   884  0019                     	;# 
   885  001A                     	;# 
   886  001B                     	;# 
   887  001B                     	;# 
   888  001C                     	;# 
   889  001D                     	;# 
   890  001E                     	;# 
   891  001F                     	;# 
   892  0081                     	;# 
   893  0085                     	;# 
   894  0086                     	;# 
   895  0087                     	;# 
   896  0089                     	;# 
   897  008C                     	;# 
   898  008D                     	;# 
   899  008E                     	;# 
   900  008F                     	;# 
   901  0090                     	;# 
   902  0091                     	;# 
   903  0092                     	;# 
   904  0093                     	;# 
   905  0093                     	;# 
   906  0093                     	;# 
   907  0094                     	;# 
   908  0095                     	;# 
   909  0096                     	;# 
   910  0097                     	;# 
   911  0098                     	;# 
   912  0099                     	;# 
   913  009A                     	;# 
   914  009B                     	;# 
   915  009C                     	;# 
   916  009D                     	;# 
   917  009E                     	;# 
   918  009F                     	;# 
   919  0105                     	;# 
   920  0107                     	;# 
   921  0108                     	;# 
   922  0109                     	;# 
   923  010C                     	;# 
   924  010C                     	;# 
   925  010D                     	;# 
   926  010E                     	;# 
   927  010F                     	;# 
   928  0185                     	;# 
   929  0187                     	;# 
   930  0188                     	;# 
   931  0189                     	;# 
   932  018C                     	;# 
   933  018D                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  000E                     	;# 
   949  000F                     	;# 
   950  0010                     	;# 
   951  0011                     	;# 
   952  0012                     	;# 
   953  0013                     	;# 
   954  0014                     	;# 
   955  0015                     	;# 
   956  0015                     	;# 
   957  0016                     	;# 
   958  0017                     	;# 
   959  0018                     	;# 
   960  0019                     	;# 
   961  001A                     	;# 
   962  001B                     	;# 
   963  001B                     	;# 
   964  001C                     	;# 
   965  001D                     	;# 
   966  001E                     	;# 
   967  001F                     	;# 
   968  0081                     	;# 
   969  0085                     	;# 
   970  0086                     	;# 
   971  0087                     	;# 
   972  0089                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  008F                     	;# 
   977  0090                     	;# 
   978  0091                     	;# 
   979  0092                     	;# 
   980  0093                     	;# 
   981  0093                     	;# 
   982  0093                     	;# 
   983  0094                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0098                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009C                     	;# 
   992  009D                     	;# 
   993  009E                     	;# 
   994  009F                     	;# 
   995  0105                     	;# 
   996  0107                     	;# 
   997  0108                     	;# 
   998  0109                     	;# 
   999  010C                     	;# 
  1000  010C                     	;# 
  1001  010D                     	;# 
  1002  010E                     	;# 
  1003  010F                     	;# 
  1004  0185                     	;# 
  1005  0187                     	;# 
  1006  0188                     	;# 
  1007  0189                     	;# 
  1008  018C                     	;# 
  1009  018D                     	;# 
  1010                           
  1011                           	psect	idataCOMMON
  1012  0800                     __pidataCOMMON:
  1013                           
  1014                           ;initializer for _Delay100ms
  1015  0800  34E8               	retlw	232
  1016  0801  3403               	retlw	3
  1017                           
  1018                           	psect	idataBANK0
  1019  17CF                     __pidataBANK0:	
  1020                           ;initializer for _Delay500ms
  1021                           
  1022  17CF  34D0               	retlw	208
  1023  17D0  3407               	retlw	7
  1024                           
  1025                           	psect	idataBANK1
  1026  17D9                     __pidataBANK1:
  1027                           
  1028                           ;initializer for Pant_Inicio@F1321
  1029  17D9  3406               	retlw	6
  1030  17DA  3409               	retlw	9
  1031  17DB  3409               	retlw	9
  1032  17DC  3406               	retlw	6
  1033  17DD  3400               	retlw	0
  1034  17DE  3400               	retlw	0
  1035  17DF  3400               	retlw	0
  1036  17E0  3400               	retlw	0
  1037                           
  1038                           	psect	strings
  1039  0700                     __pstrings:
  1040  0700                     stringtab:
  1041  0700                     __stringtab:
  1042                           
  1043                           ;	String table - string pointers are 1 byte each
  1044  0700  1BFF               	btfsc	btemp+1,7
  1045  0701  2F0A               	ljmp	stringcode
  1046  0702  1383               	bcf	3,7
  1047  0703  187F               	btfsc	btemp+1,0
  1048  0704  1783               	bsf	3,7
  1049  0705  0800               	movf	0,w
  1050  0706  0A84               	incf	4,f
  1051  0707  1903               	skipnz
  1052  0708  0AFF               	incf	btemp+1,f
  1053  0709  0008               	return
  1054  070A                     stringcode:
  1055  070A                     stringdir:
  1056  070A  3007               	movlw	high stringdir
  1057  070B  008A               	movwf	10
  1058  070C  0804               	movf	4,w
  1059  070D  0A84               	incf	4,f
  1060  070E  0782               	addwf	2,f
  1061  070F                     __stringbase:
  1062  070F  3400               	retlw	0
  1063  0710                     __end_of__stringtab:
  1064  0710                     _dpowers:
  1065  0710  3401               	retlw	1
  1066  0711  3400               	retlw	0
  1067  0712  340A               	retlw	10
  1068  0713  3400               	retlw	0
  1069  0714  3464               	retlw	100
  1070  0715  3400               	retlw	0
  1071  0716  34E8               	retlw	232
  1072  0717  3403               	retlw	3
  1073  0718  3410               	retlw	16
  1074  0719  3427               	retlw	39
  1075  071A                     __end_of_dpowers:
  1076  000E                     _TMR1	set	14
  1077  001E                     _ADRESH	set	30
  1078  001F                     _ADCON0	set	31
  1079  001F                     _ADCON0bits	set	31
  1080  0010                     _T1CONbits	set	16
  1081  0007                     _PORTCbits	set	7
  1082  0006                     _PORTBbits	set	6
  1083  0007                     _PORTC	set	7
  1084  0006                     _PORTB	set	6
  1085  0005                     _PORTA	set	5
  1086  0034                     _RB4	set	52
  1087  005F                     _GIE	set	95
  1088  005E                     _PEIE	set	94
  1089  0080                     _TMR1ON	set	128
  1090  0060                     _TMR1IF	set	96
  1091  009E                     _ADRESL	set	158
  1092  009F                     _ADCON1bits	set	159
  1093  0087                     _TRISCbits	set	135
  1094  0087                     _TRISC	set	135
  1095  0086                     _TRISB	set	134
  1096  0085                     _TRISAbits	set	133
  1097  0434                     _TRISB4	set	1076
  1098  0460                     _TMR1IE	set	1120
  1099  0105                     _WDTCONbits	set	261
  1100  0188                     _ANSELbits	set	392
  1101  0189                     _ANSELHbits	set	393
  1102  071A                     STR_3:
  1103  071A  3420               	retlw	32	;' '
  1104  071B  3420               	retlw	32	;' '
  1105  071C  3420               	retlw	32	;' '
  1106  071D  3444               	retlw	68	;'D'
  1107  071E  3445               	retlw	69	;'E'
  1108  071F  3420               	retlw	32	;' '
  1109  0720  3449               	retlw	73	;'I'
  1110  0721  344E               	retlw	78	;'N'
  1111  0722  3459               	retlw	89	;'Y'
  1112  0723  3445               	retlw	69	;'E'
  1113  0724  3443               	retlw	67	;'C'
  1114  0725  3454               	retlw	84	;'T'
  1115  0726  344F               	retlw	79	;'O'
  1116  0727  3452               	retlw	82	;'R'
  1117  0728  3445               	retlw	69	;'E'
  1118  0729  3453               	retlw	83	;'S'
  1119  072A  3420               	retlw	32	;' '
  1120  072B  3420               	retlw	32	;' '
  1121  072C  3420               	retlw	32	;' '
  1122  072D  3420               	retlw	32	;' '
  1123  072E  3400               	retlw	0
  1124  072F                     STR_2:
  1125  072F  3450               	retlw	80	;'P'
  1126  0730  3452               	retlw	82	;'R'
  1127  0731  344F               	retlw	79	;'O'
  1128  0732  3442               	retlw	66	;'B'
  1129  0733  3441               	retlw	65	;'A'
  1130  0734  3444               	retlw	68	;'D'
  1131  0735  344F               	retlw	79	;'O'
  1132  0736  3452               	retlw	82	;'R'
  1133  0737  3420               	retlw	32	;' '
  1134  0738  3441               	retlw	65	;'A'
  1135  0739  3455               	retlw	85	;'U'
  1136  073A  3454               	retlw	84	;'T'
  1137  073B  344F               	retlw	79	;'O'
  1138  073C  344D               	retlw	77	;'M'
  1139  073D  344F               	retlw	79	;'O'
  1140  073E  3454               	retlw	84	;'T'
  1141  073F  3452               	retlw	82	;'R'
  1142  0740  3449               	retlw	73	;'I'
  1143  0741  345A               	retlw	90	;'Z'
  1144  0742  3420               	retlw	32	;' '
  1145  0743  3400               	retlw	0
  1146  0744                     STR_1:
  1147  0744  343D               	retlw	61	;'='
  1148  0745  343D               	retlw	61	;'='
  1149  0746  343D               	retlw	61	;'='
  1150  0747  343D               	retlw	61	;'='
  1151  0748  343D               	retlw	61	;'='
  1152  0749  343D               	retlw	61	;'='
  1153  074A  343D               	retlw	61	;'='
  1154  074B  343D               	retlw	61	;'='
  1155  074C  343D               	retlw	61	;'='
  1156  074D  343D               	retlw	61	;'='
  1157  074E  343D               	retlw	61	;'='
  1158  074F  343D               	retlw	61	;'='
  1159  0750  343D               	retlw	61	;'='
  1160  0751  343D               	retlw	61	;'='
  1161  0752  343D               	retlw	61	;'='
  1162  0753  343D               	retlw	61	;'='
  1163  0754  343D               	retlw	61	;'='
  1164  0755  343D               	retlw	61	;'='
  1165  0756  343D               	retlw	61	;'='
  1166  0757  343D               	retlw	61	;'='
  1167  0758  3400               	retlw	0
  1168  0759                     STR_17:
  1169  0759  344C               	retlw	76	;'L'
  1170  075A  3449               	retlw	73	;'I'
  1171  075B  344D               	retlw	77	;'M'
  1172  075C  3450               	retlw	80	;'P'
  1173  075D  342E               	retlw	46	;'.'
  1174  075E  3420               	retlw	32	;' '
  1175  075F  3455               	retlw	85	;'U'
  1176  0760  344C               	retlw	76	;'L'
  1177  0761  3454               	retlw	84	;'T'
  1178  0762  3452               	retlw	82	;'R'
  1179  0763  3441               	retlw	65	;'A'
  1180  0764  3453               	retlw	83	;'S'
  1181  0765  344F               	retlw	79	;'O'
  1182  0766  344E               	retlw	78	;'N'
  1183  0767  3449               	retlw	73	;'I'
  1184  0768  3444               	retlw	68	;'D'
  1185  0769  344F               	retlw	79	;'O'
  1186  076A  3400               	retlw	0
  1187  076B                     STR_14:
  1188  076B  3450               	retlw	80	;'P'
  1189  076C  3455               	retlw	85	;'U'
  1190  076D  344C               	retlw	76	;'L'
  1191  076E  3456               	retlw	86	;'V'
  1192  076F  3445               	retlw	69	;'E'
  1193  0770  3452               	retlw	82	;'R'
  1194  0771  3449               	retlw	73	;'I'
  1195  0772  345A               	retlw	90	;'Z'
  1196  0773  3441               	retlw	65	;'A'
  1197  0774  3443               	retlw	67	;'C'
  1198  0775  3449               	retlw	73	;'I'
  1199  0776  344F               	retlw	79	;'O'
  1200  0777  344E               	retlw	78	;'N'
  1201  0778  3400               	retlw	0
  1202  0779                     STR_22:
  1203  0779  3454               	retlw	84	;'T'
  1204  077A  3445               	retlw	69	;'E'
  1205  077B  344D               	retlw	77	;'M'
  1206  077C  3450               	retlw	80	;'P'
  1207  077D  3445               	retlw	69	;'E'
  1208  077E  3452               	retlw	82	;'R'
  1209  077F  3441               	retlw	65	;'A'
  1210  0780  3454               	retlw	84	;'T'
  1211  0781  3455               	retlw	85	;'U'
  1212  0782  3452               	retlw	82	;'R'
  1213  0783  3441               	retlw	65	;'A'
  1214  0784  343A               	retlw	58	;':'
  1215  0785  3400               	retlw	0
  1216  0786                     STR_20:
  1217  0786  3454               	retlw	84	;'T'
  1218  0787  3449               	retlw	73	;'I'
  1219  0788  3445               	retlw	69	;'E'
  1220  0789  344D               	retlw	77	;'M'
  1221  078A  3450               	retlw	80	;'P'
  1222  078B  344F               	retlw	79	;'O'
  1223  078C  343A               	retlw	58	;':'
  1224  078D  3400               	retlw	0
  1225  078E                     STR_16:
  1226  078E  3446               	retlw	70	;'F'
  1227  078F  344C               	retlw	76	;'L'
  1228  0790  3455               	retlw	85	;'U'
  1229  0791  344A               	retlw	74	;'J'
  1230  0792  344F               	retlw	79	;'O'
  1231  0793  3400               	retlw	0
  1232  0794                     STR_18:
  1233  0794  3452               	retlw	82	;'R'
  1234  0795  3450               	retlw	80	;'P'
  1235  0796  344D               	retlw	77	;'M'
  1236  0797  343A               	retlw	58	;':'
  1237  0798  3400               	retlw	0
  1238  0799                     STR_19:
  1239  0799  3450               	retlw	80	;'P'
  1240  079A  3457               	retlw	87	;'W'
  1241  079B  344D               	retlw	77	;'M'
  1242  079C  343A               	retlw	58	;':'
  1243  079D  3400               	retlw	0
  1244  079E                     STR_15:
  1245  079E  3446               	retlw	70	;'F'
  1246  079F  3455               	retlw	85	;'U'
  1247  07A0  3447               	retlw	71	;'G'
  1248  07A1  3441               	retlw	65	;'A'
  1249  07A2  3400               	retlw	0
  1250  07A3                     STR_25:
  1251  07A3  3425               	retlw	37	;'%'
  1252  07A4  3430               	retlw	48	;'0'
  1253  07A5  3432               	retlw	50	;'2'
  1254  07A6  3464               	retlw	100	;'d'
  1255  07A7  3400               	retlw	0
  1256  07A8                     STR_24:
  1257  07A8  3425               	retlw	37	;'%'
  1258  07A9  3430               	retlw	48	;'0'
  1259  07AA  3435               	retlw	53	;'5'
  1260  07AB  3475               	retlw	117	;'u'
  1261  07AC  3400               	retlw	0
  1262  07AD                     STR_5:
  1263  07AD  343E               	retlw	62	;'>'
  1264  07AE  3400               	retlw	0
  1265  07AF                     STR_23:
  1266  07AF  3443               	retlw	67	;'C'
  1267  07B0  3400               	retlw	0
  1268  072D                     
  1269                           	psect	cinit
  1270  000F                     start_initialization:	
  1271                           ; #config settings
  1272                           
  1273  000F                     __initialization:
  1274                           
  1275                           ; Initialize objects allocated to BANK1
  1276  000F  1383               	bcf	3,7	;select IRP bank0
  1277  0010  30BD               	movlw	low (__pdataBANK1+8)
  1278  0011  00FD               	movwf	btemp+-1
  1279  0012  3017               	movlw	high __pidataBANK1
  1280  0013  00FE               	movwf	btemp
  1281  0014  30D9               	movlw	low __pidataBANK1
  1282  0015  00FF               	movwf	btemp+1
  1283  0016  30B5               	movlw	low __pdataBANK1
  1284  0017  0084               	movwf	4
  1285  0018  160A  118A  27F3  120A  118A  	fcall	init_ram0
  1286                           
  1287                           ; Initialize objects allocated to BANK0
  1288  001D  160A  118A  27CF  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1289  0022  00EE               	movwf	__pdataBANK0& (0+127)
  1290  0023  160A  118A  27D0  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
  1291  0028  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  1292                           
  1293                           ; Initialize objects allocated to COMMON
  1294  0029  120A  158A  2000  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1295  002E  00F9               	movwf	__pdataCOMMON& (0+127)
  1296  002F  120A  158A  2001  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1297  0034  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
  1298                           
  1299                           ; Clear objects allocated to BANK1
  1300  0035  30A0               	movlw	low __pbssBANK1
  1301  0036  0084               	movwf	4
  1302  0037  30B5               	movlw	low (__pbssBANK1+21)
  1303  0038  160A  118A  27D1  120A  118A  	fcall	clear_ram0
  1304                           
  1305                           ; Clear objects allocated to BANK0
  1306  003D  3061               	movlw	low __pbssBANK0
  1307  003E  0084               	movwf	4
  1308  003F  306E               	movlw	low (__pbssBANK0+13)
  1309  0040  160A  118A  27D1   	fcall	clear_ram0
  1310                           
  1311                           ; Clear objects allocated to COMMON
  1312  0043  01FB               	clrf	__pbssCOMMON& (0+127)
  1313  0044                     end_of_initialization:	
  1314                           ;End of C runtime variable initialization code
  1315                           
  1316  0044                     __end_of__initialization:
  1317  0044  0183               	clrf	3
  1318  0045  120A  158A  2912   	ljmp	_main	;jump to C main() function
  1319                           
  1320                           	psect	bssCOMMON
  1321  007B                     __pbssCOMMON:
  1322  007B                     _Mostrar:
  1323  007B                     	ds	1
  1324                           
  1325                           	psect	dataCOMMON
  1326  0079                     __pdataCOMMON:
  1327  0079                     _Delay100ms:
  1328  0079                     	ds	2
  1329                           
  1330                           	psect	bssBANK0
  1331  0061                     __pbssBANK0:
  1332  0061                     _Rpm:
  1333  0061                     	ds	2
  1334  0063                     _PwmS1:
  1335  0063                     	ds	2
  1336  0065                     _Subestado_Actual:
  1337  0065                     	ds	1
  1338  0066                     _Estado_Actual:
  1339  0066                     	ds	1
  1340  0067                     _Act_Variables:
  1341  0067                     	ds	1
  1342  0068                     _Temp:
  1343  0068                     	ds	1
  1344  0069                     _Seg:
  1345  0069                     	ds	1
  1346  006A                     _Min:
  1347  006A                     	ds	1
  1348  006B                     _Pwm:
  1349  006B                     	ds	1
  1350  006C                     _Modo:
  1351  006C                     	ds	1
  1352  006D                     _Act_PwmS1:
  1353  006D                     	ds	1
  1354                           
  1355                           	psect	dataBANK0
  1356  006E                     __pdataBANK0:
  1357  006E                     _Delay500ms:
  1358  006E                     	ds	2
  1359                           
  1360                           	psect	bssBANK1
  1361  00A0                     __pbssBANK1:
  1362  00A0                     Pant_Inicio@F1323:
  1363  00A0                     	ds	8
  1364  00A8                     _Pw_PwmS1:
  1365  00A8                     	ds	3
  1366  00AB                     _Per_PwmS1:
  1367  00AB                     	ds	3
  1368  00AE                     _PER_T_S1:
  1369  00AE                     	ds	2
  1370  00B0                     _P_W_T_S1:
  1371  00B0                     	ds	2
  1372  00B2                     _freqPwmS1:
  1373  00B2                     	ds	2
  1374  00B4                     _mod_tiempo:
  1375  00B4                     	ds	1
  1376                           
  1377                           	psect	dataBANK1
  1378  00B5                     __pdataBANK1:
  1379  00B5                     Pant_Inicio@F1321:
  1380  00B5                     	ds	8
  1381                           
  1382                           	psect	inittext
  1383  17EF                     init_fetch0:	
  1384                           ;	Called with low address in FSR and high address in W
  1385                           
  1386  17EF  087E               	movf	126,w
  1387  17F0  008A               	movwf	10
  1388  17F1  087F               	movf	127,w
  1389  17F2  0082               	movwf	2
  1390  17F3                     init_ram0:	
  1391                           ;Called with:
  1392                           ;	high address of idata address in btemp 
  1393                           ;	low address of idata address in btemp+1 
  1394                           ;	low address of data in FSR
  1395                           ;	high address + 1 of data in btemp-1
  1396                           
  1397  17F3  27EF  160A  118A   	fcall	init_fetch0
  1398  17F6  0080               	movwf	0
  1399  17F7  0A84               	incf	4,f
  1400  17F8  0804               	movf	4,w
  1401  17F9  067D               	xorwf	125,w
  1402  17FA  1903               	btfsc	3,2
  1403  17FB  3400               	retlw	0
  1404  17FC  0AFF               	incf	127,f
  1405  17FD  1903               	btfsc	3,2
  1406  17FE  0AFE               	incf	126,f
  1407  17FF  2FF3               	goto	init_ram0
  1408                           
  1409                           	psect	clrtext
  1410  17D1                     clear_ram0:	
  1411                           ;	Called with FSR containing the base address, and
  1412                           ;	W with the last address+1
  1413                           
  1414  17D1  0064               	clrwdt	;clear the watchdog before getting into this loop
  1415  17D2                     clrloop0:
  1416  17D2  0180               	clrf	0	;clear RAM location pointed to by FSR
  1417  17D3  0A84               	incf	4,f	;increment pointer
  1418  17D4  0604               	xorwf	4,w	;XOR with final address
  1419  17D5  1903               	btfsc	3,2	;have we reached the end yet?
  1420  17D6  3400               	retlw	0	;all done for this memory range, return
  1421  17D7  0604               	xorwf	4,w	;XOR again to restore value
  1422  17D8  2FD2               	goto	clrloop0	;do the next byte
  1423                           
  1424                           	psect	cstackBANK1
  1425  00BD                     __pcstackBANK1:
  1426  00BD                     ??_MEF_Subest_Actualizacion:
  1427                           
  1428                           ; 1 bytes @ 0x0
  1429  00BD                     	ds	2
  1430  00BF                     ??_MEF_Actualizacion:
  1431                           
  1432                           ; 1 bytes @ 0x2
  1433  00BF                     	ds	2
  1434                           
  1435                           	psect	cstackCOMMON
  1436  0070                     __pcstackCOMMON:
  1437  0070                     ?_isdigit:
  1438  0070                     ?_Pines_Init:	
  1439                           ; 1 bit 
  1440                           
  1441  0070                     ?_MEF_Init:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0070                     ?_LCD_init:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0070                     ?_Pwm_init:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0070                     ?_Adc_init:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0070                     ?_MEF_Actualizacion:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0070                     ?_Task_Ready:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0070                     ??_Task_Ready:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0070                     ?_Pant_Inicio:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0070                     ?_Select_Modo:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0070                     ?_MEF_Subest_Actualizacion:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0070                     ?_Pant_Modos:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0070                     ?_Pant_Val_Act:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0070                     ?_Lec_Adc_Modo_Pulv:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0070                     ?_Lec_Adc_Modo_Fuga:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0070                     ?_Lec_Adc_Modo_Flujo:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0070                     ?_Pant_Menu:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0070                     ?_Pant_Selector:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0070                     ?_Adc_Rpm_Read:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0070                     ?_Adc_Pwm_Read:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  0070                     ?_Adc_Min_Read:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  0070                     ?_Adc_Temp_Read:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  0070                     ?_LCD_command:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  0070                     ?_LCD_date:	
  1508                           ; 1 bytes @ 0x0
  1509                           
  1510  0070                     ?_main:	
  1511                           ; 1 bytes @ 0x0
  1512                           
  1513  0070                     ?_Antirrebote:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  0070                     ?_ISR:	
  1517                           ; 1 bytes @ 0x0
  1518                           
  1519  0070                     ??_ISR:	
  1520                           ; 1 bytes @ 0x0
  1521                           
  1522                           
  1523                           ; 1 bytes @ 0x0
  1524  0070                     	ds	2
  1525  0072                     ??_Pines_Init:
  1526  0072                     ??_MEF_Init:	
  1527                           ; 1 bytes @ 0x2
  1528                           
  1529  0072                     ??_Pwm_init:	
  1530                           ; 1 bytes @ 0x2
  1531                           
  1532  0072                     ??_Adc_init:	
  1533                           ; 1 bytes @ 0x2
  1534                           
  1535  0072                     ??_Lec_Adc_Modo_Fuga:	
  1536                           ; 1 bytes @ 0x2
  1537                           
  1538  0072                     ??_Lec_Adc_Modo_Flujo:	
  1539                           ; 1 bytes @ 0x2
  1540                           
  1541  0072                     ??_LCD_command:	
  1542                           ; 1 bytes @ 0x2
  1543                           
  1544  0072                     ??_LCD_date:	
  1545                           ; 1 bytes @ 0x2
  1546                           
  1547  0072                     ??_isdigit:	
  1548                           ; 1 bytes @ 0x2
  1549                           
  1550  0072                     ??_Antirrebote:	
  1551                           ; 1 bytes @ 0x2
  1552                           
  1553  0072                     ?_Adc:	
  1554                           ; 1 bytes @ 0x2
  1555                           
  1556  0072                     ?___lwdiv:	
  1557                           ; 2 bytes @ 0x2
  1558                           
  1559  0072                     ?___ftpack:	
  1560                           ; 2 bytes @ 0x2
  1561                           
  1562  0072                     _isdigit$1119:	
  1563                           ; 3 bytes @ 0x2
  1564                           
  1565  0072                     ___lwdiv@divisor:	
  1566                           ; 1 bytes @ 0x2
  1567                           
  1568  0072                     ___ftpack@arg:	
  1569                           ; 2 bytes @ 0x2
  1570                           
  1571                           
  1572                           ; 3 bytes @ 0x2
  1573  0072                     	ds	1
  1574  0073                     isdigit@c:
  1575                           
  1576                           ; 1 bytes @ 0x3
  1577  0073                     	ds	1
  1578  0074                     ??_Adc:
  1579  0074                     LCD_command@cmd:	
  1580                           ; 1 bytes @ 0x4
  1581                           
  1582  0074                     LCD_date@date:	
  1583                           ; 1 bytes @ 0x4
  1584                           
  1585  0074                     ___lwdiv@dividend:	
  1586                           ; 1 bytes @ 0x4
  1587                           
  1588                           
  1589                           ; 2 bytes @ 0x4
  1590  0074                     	ds	1
  1591  0075                     ??_LCD_init:
  1592  0075                     ?_LCD_character:	
  1593                           ; 1 bytes @ 0x5
  1594                           
  1595  0075                     ??_LCD_array:	
  1596                           ; 1 bytes @ 0x5
  1597                           
  1598  0075                     ?_LCD_xy:	
  1599                           ; 1 bytes @ 0x5
  1600                           
  1601  0075                     LCD_character@caracter:	
  1602                           ; 1 bytes @ 0x5
  1603                           
  1604  0075                     ___ftpack@exp:	
  1605                           ; 1 bytes @ 0x5
  1606                           
  1607  0075                     LCD_xy@x:	
  1608                           ; 1 bytes @ 0x5
  1609                           
  1610                           
  1611                           ; 2 bytes @ 0x5
  1612  0075                     	ds	1
  1613  0076                     ??_LCD_character:
  1614  0076                     ??___lwdiv:	
  1615                           ; 1 bytes @ 0x6
  1616                           
  1617  0076                     Adc@channel:	
  1618                           ; 1 bytes @ 0x6
  1619                           
  1620  0076                     ___ftpack@sign:	
  1621                           ; 1 bytes @ 0x6
  1622                           
  1623  0076                     ___lwdiv@quotient:	
  1624                           ; 1 bytes @ 0x6
  1625                           
  1626                           
  1627                           ; 2 bytes @ 0x6
  1628  0076                     	ds	1
  1629  0077                     ??_Select_Modo:
  1630  0077                     ??_Pant_Menu:	
  1631                           ; 1 bytes @ 0x7
  1632                           
  1633  0077                     ??_Pant_Selector:	
  1634                           ; 1 bytes @ 0x7
  1635                           
  1636  0077                     LCD_init@i:	
  1637                           ; 1 bytes @ 0x7
  1638                           
  1639  0077                     LCD_character@adress:	
  1640                           ; 1 bytes @ 0x7
  1641                           
  1642  0077                     LCD_xy@y:	
  1643                           ; 1 bytes @ 0x7
  1644                           
  1645  0077                     Adc@convertion:	
  1646                           ; 2 bytes @ 0x7
  1647                           
  1648                           
  1649                           ; 2 bytes @ 0x7
  1650  0077                     	ds	1
  1651  0078                     LCD_character@i:
  1652  0078                     ___lwdiv@counter:	
  1653                           ; 1 bytes @ 0x8
  1654                           
  1655                           
  1656                           ; 1 bytes @ 0x8
  1657  0078                     	ds	1
  1658  0079                     ??_Pant_Modos:
  1659  0079                     ??_Lec_Adc_Modo_Pulv:	
  1660                           ; 1 bytes @ 0x9
  1661                           
  1662  0079                     ??_Adc_Pwm_Read:	
  1663                           ; 1 bytes @ 0x9
  1664                           
  1665  0079                     ??_Adc_Min_Read:	
  1666                           ; 1 bytes @ 0x9
  1667                           
  1668  0079                     ??_Adc_Temp_Read:	
  1669                           ; 1 bytes @ 0x9
  1670                           
  1671  0079                     ??_LCD_xy:	
  1672                           ; 1 bytes @ 0x9
  1673                           
  1674  0079                     ??_main:	
  1675                           ; 1 bytes @ 0x9
  1676                           
  1677  0079                     ??___wmul:	
  1678                           ; 1 bytes @ 0x9
  1679                           
  1680  0079                     ??___awtoft:	
  1681                           ; 1 bytes @ 0x9
  1682                           
  1683  0079                     ??___lwmod:	
  1684                           ; 1 bytes @ 0x9
  1685                           
  1686                           
  1687                           	psect	cstackBANK0
  1688  0020                     __pcstackBANK0:	
  1689                           ; 1 bytes @ 0x9
  1690                           
  1691  0020                     ?_LCD_array:
  1692  0020                     ??___ftpack:	
  1693                           ; 1 bytes @ 0x0
  1694                           
  1695  0020                     ?___wmul:	
  1696                           ; 1 bytes @ 0x0
  1697                           
  1698  0020                     ?___lwmod:	
  1699                           ; 2 bytes @ 0x0
  1700                           
  1701  0020                     LCD_array@x:	
  1702                           ; 2 bytes @ 0x0
  1703                           
  1704  0020                     ___wmul@multiplier:	
  1705                           ; 2 bytes @ 0x0
  1706                           
  1707  0020                     ___lwmod@divisor:	
  1708                           ; 2 bytes @ 0x0
  1709                           
  1710                           
  1711                           ; 2 bytes @ 0x0
  1712  0020                     	ds	2
  1713  0022                     LCD_array@y:
  1714  0022                     ___wmul@multiplicand:	
  1715                           ; 2 bytes @ 0x2
  1716                           
  1717  0022                     ___lwmod@dividend:	
  1718                           ; 2 bytes @ 0x2
  1719                           
  1720                           
  1721                           ; 2 bytes @ 0x2
  1722  0022                     	ds	1
  1723  0023                     ?___awtoft:
  1724  0023                     ___awtoft@c:	
  1725                           ; 3 bytes @ 0x3
  1726                           
  1727                           
  1728                           ; 2 bytes @ 0x3
  1729  0023                     	ds	1
  1730  0024                     ___lwmod@counter:
  1731  0024                     LCD_array@date:	
  1732                           ; 1 bytes @ 0x4
  1733                           
  1734  0024                     ___wmul@product:	
  1735                           ; 2 bytes @ 0x4
  1736                           
  1737                           
  1738                           ; 2 bytes @ 0x4
  1739  0024                     	ds	2
  1740  0026                     ??_Pant_Inicio:
  1741  0026                     ?_sprintf:	
  1742                           ; 1 bytes @ 0x6
  1743                           
  1744  0026                     sprintf@f:	
  1745                           ; 2 bytes @ 0x6
  1746                           
  1747  0026                     ___awtoft@sign:	
  1748                           ; 1 bytes @ 0x6
  1749                           
  1750                           
  1751                           ; 1 bytes @ 0x6
  1752  0026                     	ds	1
  1753  0027                     ?___ftmul:
  1754  0027                     ___ftmul@f1:	
  1755                           ; 3 bytes @ 0x7
  1756                           
  1757                           
  1758                           ; 3 bytes @ 0x7
  1759  0027                     	ds	2
  1760  0029                     ??_sprintf:
  1761                           
  1762                           ; 1 bytes @ 0x9
  1763  0029                     	ds	1
  1764  002A                     ___ftmul@f2:
  1765  002A                     Pant_Inicio@caracter1:	
  1766                           ; 3 bytes @ 0xA
  1767                           
  1768                           
  1769                           ; 8 bytes @ 0xA
  1770  002A                     	ds	2
  1771  002C                     sprintf@prec:
  1772                           
  1773                           ; 1 bytes @ 0xC
  1774  002C                     	ds	1
  1775  002D                     ??___ftmul:
  1776  002D                     sprintf@ap:	
  1777                           ; 1 bytes @ 0xD
  1778                           
  1779                           
  1780                           ; 1 bytes @ 0xD
  1781  002D                     	ds	1
  1782  002E                     sprintf@val:
  1783                           
  1784                           ; 2 bytes @ 0xE
  1785  002E                     	ds	2
  1786  0030                     sprintf@flag:
  1787  0030                     ___ftmul@exp:	
  1788                           ; 1 bytes @ 0x10
  1789                           
  1790                           
  1791                           ; 1 bytes @ 0x10
  1792  0030                     	ds	1
  1793  0031                     sprintf@width:
  1794  0031                     ___ftmul@f3_as_product:	
  1795                           ; 2 bytes @ 0x11
  1796                           
  1797                           
  1798                           ; 3 bytes @ 0x11
  1799  0031                     	ds	1
  1800  0032                     Pant_Inicio@caracter:
  1801                           
  1802                           ; 8 bytes @ 0x12
  1803  0032                     	ds	1
  1804  0033                     sprintf@sp:
  1805                           
  1806                           ; 1 bytes @ 0x13
  1807  0033                     	ds	1
  1808  0034                     sprintf@c:
  1809  0034                     ___ftmul@cntr:	
  1810                           ; 1 bytes @ 0x14
  1811                           
  1812                           
  1813                           ; 1 bytes @ 0x14
  1814  0034                     	ds	1
  1815  0035                     ??_Pant_Val_Act:
  1816  0035                     ___ftmul@sign:	
  1817                           ; 1 bytes @ 0x15
  1818                           
  1819                           
  1820                           ; 1 bytes @ 0x15
  1821  0035                     	ds	1
  1822  0036                     ?___ftdiv:
  1823  0036                     ___ftdiv@f2:	
  1824                           ; 3 bytes @ 0x16
  1825                           
  1826                           
  1827                           ; 3 bytes @ 0x16
  1828  0036                     	ds	1
  1829  0037                     Pant_Val_Act@buffer:
  1830                           
  1831                           ; 20 bytes @ 0x17
  1832  0037                     	ds	2
  1833  0039                     ___ftdiv@f1:
  1834                           
  1835                           ; 3 bytes @ 0x19
  1836  0039                     	ds	3
  1837  003C                     ??___ftdiv:
  1838                           
  1839                           ; 1 bytes @ 0x1C
  1840  003C                     	ds	3
  1841  003F                     ___ftdiv@cntr:
  1842                           
  1843                           ; 1 bytes @ 0x1F
  1844  003F                     	ds	1
  1845  0040                     ___ftdiv@f3:
  1846                           
  1847                           ; 3 bytes @ 0x20
  1848  0040                     	ds	3
  1849  0043                     ___ftdiv@exp:
  1850                           
  1851                           ; 1 bytes @ 0x23
  1852  0043                     	ds	1
  1853  0044                     ___ftdiv@sign:
  1854                           
  1855                           ; 1 bytes @ 0x24
  1856  0044                     	ds	1
  1857  0045                     ?___fttol:
  1858  0045                     ___fttol@f1:	
  1859                           ; 4 bytes @ 0x25
  1860                           
  1861                           
  1862                           ; 3 bytes @ 0x25
  1863  0045                     	ds	4
  1864  0049                     ??___fttol:
  1865                           
  1866                           ; 1 bytes @ 0x29
  1867  0049                     	ds	3
  1868  004C                     ___fttol@sign1:
  1869                           
  1870                           ; 1 bytes @ 0x2C
  1871  004C                     	ds	1
  1872  004D                     ___fttol@lval:
  1873                           
  1874                           ; 4 bytes @ 0x2D
  1875  004D                     	ds	4
  1876  0051                     ___fttol@exp1:
  1877                           
  1878                           ; 1 bytes @ 0x31
  1879  0051                     	ds	1
  1880  0052                     ??_Adc_Rpm_Read:
  1881  0052                     _Adc_Pwm_Read$1323:	
  1882                           ; 1 bytes @ 0x32
  1883                           
  1884  0052                     _Adc_Min_Read$1324:	
  1885                           ; 3 bytes @ 0x32
  1886                           
  1887  0052                     _Adc_Temp_Read$1325:	
  1888                           ; 3 bytes @ 0x32
  1889                           
  1890                           
  1891                           ; 3 bytes @ 0x32
  1892  0052                     	ds	4
  1893  0056                     _Adc_Rpm_Read$1322:
  1894                           
  1895                           ; 3 bytes @ 0x36
  1896  0056                     	ds	3
  1897  0059                     Adc_Rpm_Read@cent:
  1898                           
  1899                           ; 2 bytes @ 0x39
  1900  0059                     	ds	2
  1901  005B                     Adc_Rpm_Read@uni_m:
  1902                           
  1903                           ; 2 bytes @ 0x3B
  1904  005B                     	ds	2
  1905  005D                     Adc_Rpm_Read@dec_m:
  1906                           
  1907                           ; 2 bytes @ 0x3D
  1908  005D                     	ds	2
  1909  005F                     Adc_Rpm_Read@valor:
  1910                           
  1911                           ; 2 bytes @ 0x3F
  1912  005F                     	ds	2
  1913                           
  1914                           	psect	maintext
  1915  0912                     __pmaintext:	
  1916 ;;
  1917 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1918 ;;
  1919 ;; *************** function _main *****************
  1920 ;; Defined at:
  1921 ;;		line 30 in file "Main.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : B00/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         0       0       0       0       0
  1936 ;;      Locals:         0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0
  1938 ;;      Totals:         0       0       0       0       0
  1939 ;;Total ram usage:        0 bytes
  1940 ;; Hardware stack levels required when called:    8
  1941 ;; This function calls:
  1942 ;;		_Adc_init
  1943 ;;		_LCD_init
  1944 ;;		_MEF_Actualizacion
  1945 ;;		_MEF_Init
  1946 ;;		_Pines_Init
  1947 ;;		_Pwm_init
  1948 ;; This function is called by:
  1949 ;;		Startup code after reset
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           
  1954                           ;psect for function _main
  1955  0912                     _main:
  1956                           
  1957                           ;Main.c: 33:     Pines_Init();
  1958                           
  1959                           ;incstack = 0
  1960                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1961  0912  120A  158A  2028  120A  158A  	fcall	_Pines_Init
  1962                           
  1963                           ;Main.c: 34:     MEF_Init();
  1964  0917  120A  118A  26FA  120A  158A  	fcall	_MEF_Init
  1965                           
  1966                           ;Main.c: 35:     LCD_init();
  1967  091C  120A  158A  2436  120A  158A  	fcall	_LCD_init
  1968                           
  1969                           ;Main.c: 36:     Pwm_init();
  1970  0921  120A  118A  26E0  120A  158A  	fcall	_Pwm_init
  1971                           
  1972                           ;Main.c: 37:     Adc_init();
  1973  0926  120A  158A  207B  120A  158A  	fcall	_Adc_init
  1974                           
  1975                           ;Main.c: 39:     TMR1IE=1,TMR1IF=1;
  1976  092B  1683               	bsf	3,5	;RP0=1, select bank1
  1977  092C  1303               	bcf	3,6	;RP1=0, select bank1
  1978  092D  140C               	bsf	12,0	;volatile
  1979  092E  1283               	bcf	3,5	;RP0=0, select bank0
  1980  092F  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0930  140C               	bsf	12,0	;volatile
  1982                           
  1983                           ;Main.c: 41:     WDTCONbits.SWDTEN = 1;
  1984  0931  1283               	bcf	3,5	;RP0=0, select bank2
  1985  0932  1703               	bsf	3,6	;RP1=1, select bank2
  1986  0933  1405               	bsf	5,0	;volatile
  1987                           
  1988                           ;Main.c: 42:     WDTCONbits.WDTPS = 0b1010;
  1989  0934  0805               	movf	5,w	;volatile
  1990  0935  39E1               	andlw	-31
  1991  0936  3814               	iorlw	20
  1992  0937  0085               	movwf	5	;volatile
  1993  0938                     l4000:
  1994                           
  1995                           ;Main.c: 45:     {;Main.c: 46:         MEF_Actualizacion();
  1996  0938  120A  118A  27B1  120A  158A  	fcall	_MEF_Actualizacion
  1997  093D  2938               	goto	l4000
  1998  093E                     __end_of_main:
  1999                           
  2000                           	psect	text1
  2001  06E0                     __ptext1:	
  2002 ;; *************** function _Pwm_init *****************
  2003 ;; Defined at:
  2004 ;;		line 5 in file "Pwm_Soft.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      void 
  2011 ;; Registers used:
  2012 ;;		wreg, status,2, status,0
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2018 ;;      Params:         0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0
  2021 ;;      Totals:         0       0       0       0       0
  2022 ;;Total ram usage:        0 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    2
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_main
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           
  2033                           ;psect for function _Pwm_init
  2034  06E0                     _Pwm_init:
  2035                           
  2036                           ;Pwm_Soft.c: 7:     ANSELHbits.ANS11 = 0;
  2037                           
  2038                           ;incstack = 0
  2039                           ; Regs used in _Pwm_init: [wreg+status,2+status,0]
  2040  06E0  1683               	bsf	3,5	;RP0=1, select bank3
  2041  06E1  1703               	bsf	3,6	;RP1=1, select bank3
  2042  06E2  1189               	bcf	9,3	;volatile
  2043                           
  2044                           ;Pwm_Soft.c: 10:     T1CONbits.TMR1GE = 0;
  2045  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  2046  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  2047  06E5  1310               	bcf	16,6	;volatile
  2048                           
  2049                           ;Pwm_Soft.c: 11:     T1CONbits.T1SYNC = 1;
  2050  06E6  1510               	bsf	16,2	;volatile
  2051                           
  2052                           ;Pwm_Soft.c: 12:     T1CONbits.TMR1CS = 0;
  2053  06E7  1090               	bcf	16,1	;volatile
  2054                           
  2055                           ;Pwm_Soft.c: 13:     T1CONbits.T1CKPS = 0b01;
  2056  06E8  0810               	movf	16,w	;volatile
  2057  06E9  39CF               	andlw	-49
  2058  06EA  3810               	iorlw	16
  2059  06EB  0090               	movwf	16	;volatile
  2060                           
  2061                           ;Pwm_Soft.c: 14:     T1CONbits.TMR1ON = 1;
  2062  06EC  1410               	bsf	16,0	;volatile
  2063                           
  2064                           ;Pwm_Soft.c: 16:     TMR1 = 65285;
  2065  06ED  30FF               	movlw	255
  2066  06EE  008F               	movwf	15	;volatile
  2067  06EF  3005               	movlw	5
  2068  06F0  008E               	movwf	14	;volatile
  2069                           
  2070                           ;Pwm_Soft.c: 19:     PEIE = 1;
  2071  06F1  170B               	bsf	11,6	;volatile
  2072                           
  2073                           ;Pwm_Soft.c: 20:     GIE = 1;
  2074  06F2  178B               	bsf	11,7	;volatile
  2075                           
  2076                           ;Pwm_Soft.c: 21:     TMR1IE = 0;
  2077  06F3  1683               	bsf	3,5	;RP0=1, select bank1
  2078  06F4  1303               	bcf	3,6	;RP1=0, select bank1
  2079  06F5  100C               	bcf	12,0	;volatile
  2080                           
  2081                           ;Pwm_Soft.c: 22:     TMR1IF = 1;
  2082  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  2083  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  2084  06F8  140C               	bsf	12,0	;volatile
  2085  06F9  0008               	return
  2086  06FA                     __end_of_Pwm_init:
  2087                           
  2088                           	psect	text2
  2089  0828                     __ptext2:	
  2090 ;; *************** function _Pines_Init *****************
  2091 ;; Defined at:
  2092 ;;		line 52 in file "Main.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2106 ;;      Params:         0       0       0       0       0
  2107 ;;      Locals:         0       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0
  2109 ;;      Totals:         0       0       0       0       0
  2110 ;;Total ram usage:        0 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    2
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           
  2121                           ;psect for function _Pines_Init
  2122  0828                     _Pines_Init:
  2123                           
  2124                           ;Main.c: 55:     TRISAbits.TRISA5 = 0;
  2125                           
  2126                           ;incstack = 0
  2127                           ; Regs used in _Pines_Init: [wreg+status,2]
  2128  0828  1683               	bsf	3,5	;RP0=1, select bank1
  2129  0829  1303               	bcf	3,6	;RP1=0, select bank1
  2130  082A  1285               	bcf	5,5	;volatile
  2131                           
  2132                           ;Main.c: 56:     PORTA = 0;
  2133  082B  1283               	bcf	3,5	;RP0=0, select bank0
  2134  082C  1303               	bcf	3,6	;RP1=0, select bank0
  2135  082D  0185               	clrf	5	;volatile
  2136                           
  2137                           ;Main.c: 57:     PORTB = 0;
  2138  082E  0186               	clrf	6	;volatile
  2139                           
  2140                           ;Main.c: 58:     PORTC = 0;
  2141  082F  0187               	clrf	7	;volatile
  2142                           
  2143                           ;Main.c: 59:     TRISB = 0xFF;
  2144  0830  30FF               	movlw	255
  2145  0831  1683               	bsf	3,5	;RP0=1, select bank1
  2146  0832  1303               	bcf	3,6	;RP1=0, select bank1
  2147  0833  0086               	movwf	6	;volatile
  2148                           
  2149                           ;Main.c: 60:     TRISC = 0x00;
  2150  0834  0187               	clrf	7	;volatile
  2151                           
  2152                           ;Main.c: 61:     ANSELHbits.ANS12 = 0;
  2153  0835  1683               	bsf	3,5	;RP0=1, select bank3
  2154  0836  1703               	bsf	3,6	;RP1=1, select bank3
  2155  0837  1209               	bcf	9,4	;volatile
  2156                           
  2157                           ;Main.c: 62:     ANSELHbits.ANS11 = 0;
  2158  0838  1189               	bcf	9,3	;volatile
  2159                           
  2160                           ;Main.c: 63:     ANSELHbits.ANS10 = 0;
  2161  0839  1109               	bcf	9,2	;volatile
  2162                           
  2163                           ;Main.c: 64:     ANSELHbits.ANS8 = 0;
  2164  083A  1009               	bcf	9,0	;volatile
  2165                           
  2166                           ;Main.c: 65:     ANSELHbits.ANS9 = 0;
  2167  083B  1089               	bcf	9,1	;volatile
  2168                           
  2169                           ;Main.c: 66:     ANSELbits.ANS4 = 0;
  2170  083C  1208               	bcf	8,4	;volatile
  2171  083D  0008               	return
  2172  083E                     __end_of_Pines_Init:
  2173                           
  2174                           	psect	text3
  2175  06FA                     __ptext3:	
  2176 ;; *************** function _MEF_Init *****************
  2177 ;; Defined at:
  2178 ;;		line 33 in file "MEF.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		status,2
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2192 ;;      Params:         0       0       0       0       0
  2193 ;;      Locals:         0       0       0       0       0
  2194 ;;      Temps:          0       0       0       0       0
  2195 ;;      Totals:         0       0       0       0       0
  2196 ;;Total ram usage:        0 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    2
  2199 ;; This function calls:
  2200 ;;		Nothing
  2201 ;; This function is called by:
  2202 ;;		_main
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           
  2207                           ;psect for function _MEF_Init
  2208  06FA                     _MEF_Init:
  2209                           
  2210                           ;MEF.c: 35:     Estado_Actual = ESTADO_INICIO;
  2211                           
  2212                           ;incstack = 0
  2213                           ; Regs used in _MEF_Init: [status,2]
  2214  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  2215  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  2216  06FC  01E6               	clrf	_Estado_Actual
  2217                           
  2218                           ;MEF.c: 36:     Subestado_Actual = SUBEST_INICIAL;
  2219  06FD  01E5               	clrf	_Subestado_Actual
  2220  06FE  0008               	return
  2221  06FF                     __end_of_MEF_Init:
  2222                           
  2223                           	psect	text4
  2224  07B1                     __ptext4:	
  2225 ;; *************** function _MEF_Actualizacion *****************
  2226 ;; Defined at:
  2227 ;;		line 41 in file "MEF.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;		None
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2241 ;;      Params:         0       0       0       0       0
  2242 ;;      Locals:         0       0       0       0       0
  2243 ;;      Temps:          0       0       2       0       0
  2244 ;;      Totals:         0       0       2       0       0
  2245 ;;Total ram usage:        2 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    7
  2248 ;; This function calls:
  2249 ;;		_Antirrebote
  2250 ;;		_MEF_Subest_Actualizacion
  2251 ;;		_Pant_Inicio
  2252 ;;		_Select_Modo
  2253 ;; This function is called by:
  2254 ;;		_main
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function _MEF_Actualizacion
  2260  07B1                     _MEF_Actualizacion:
  2261                           
  2262                           ;MEF.c: 43:     switch(Estado_Actual)
  2263                           
  2264                           ;incstack = 0
  2265                           ; Regs used in _MEF_Actualizacion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2266  07B1  2FE2               	goto	l3898
  2267  07B2                     l3868:
  2268                           
  2269                           ;MEF.c: 46:         {;MEF.c: 47:             Pant_Inicio();
  2270  07B2  120A  158A  2754   	fcall	_Pant_Inicio
  2271                           
  2272                           ;MEF.c: 49:             Estado_Actual = ESTADO_MENU;
  2273  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  2274  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  2275  07B7  01E6               	clrf	_Estado_Actual
  2276  07B8  0AE6               	incf	_Estado_Actual,f
  2277                           
  2278                           ;MEF.c: 50:         break;
  2279  07B9  0008               	return
  2280  07BA                     l3872:
  2281                           
  2282                           ;MEF.c: 53:         {;MEF.c: 54:             Select_Modo();
  2283  07BA  120A  158A  20EB  120A  118A  	fcall	_Select_Modo
  2284                           
  2285                           ;MEF.c: 56:             if(PORTBbits.RB1 && Modo==1) Estado_Actual = ESTADO_MODO_PULV,An
      +                          tirrebote();
  2286  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  2287  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  2288  07C1  1C86               	btfss	6,1	;volatile
  2289  07C2  2FD4               	goto	l165
  2290  07C3  036C               	decf	_Modo,w
  2291  07C4  1D03               	btfss	3,2
  2292  07C5  2FD4               	goto	l165
  2293  07C6  3002               	movlw	2
  2294  07C7  2FCD               	goto	L1
  2295  07C8                     l3882:
  2296  07C8  3002               	movlw	2
  2297  07C9  066C               	xorwf	_Modo,w
  2298  07CA  1D03               	btfss	3,2
  2299  07CB  2FD6               	goto	l167
  2300  07CC  3003               	movlw	3
  2301  07CD                     L1:
  2302  07CD  00FF               	movwf	127
  2303  07CE  087F               	movf	127,w
  2304  07CF  00E6               	movwf	_Estado_Actual
  2305  07D0  120A  158A  2015   	fcall	_Antirrebote
  2306  07D3  0008               	return
  2307  07D4                     l165:	
  2308                           ;MEF.c: 57:             else if(PORTBbits.RB1 && Modo==2) Estado_Actual = ESTADO_MODO_FU
      +                          GA,Antirrebote();
  2309                           
  2310  07D4  1886               	btfsc	6,1	;volatile
  2311  07D5  2FC8               	goto	l3882
  2312  07D6                     l167:	
  2313                           ;MEF.c: 58:             else if(PORTBbits.RB1 && Modo==3) Estado_Actual = ESTADO_MODO_FL
      +                          UJO,Antirrebote();
  2314                           
  2315  07D6  1C86               	btfss	6,1	;volatile
  2316  07D7  0008               	return
  2317  07D8  3003               	movlw	3
  2318  07D9  066C               	xorwf	_Modo,w
  2319  07DA  1D03               	btfss	3,2
  2320  07DB  0008               	return
  2321  07DC  3004               	movlw	4
  2322  07DD  2FCD               	goto	L1
  2323  07DE                     l3894:	
  2324                           ;MEF.c: 59:         break;
  2325                           
  2326                           
  2327                           ;MEF.c: 62:         {;MEF.c: 63:             MEF_Subest_Actualizacion();
  2328  07DE  120A  158A  22A6   	fcall	_MEF_Subest_Actualizacion
  2329                           
  2330                           ;MEF.c: 66:         break;
  2331  07E1  0008               	return
  2332  07E2                     l3898:
  2333  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  2334  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  2335  07E4  0866               	movf	_Estado_Actual,w
  2336  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  2337  07E6  1303               	bcf	3,6	;RP1=0, select bank1
  2338  07E7  00BF               	movwf	??_MEF_Actualizacion^(0+128)
  2339  07E8  01C0               	clrf	(??_MEF_Actualizacion^(0+128)+1)
  2340                           
  2341                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2342                           ; Switch size 1, requested type "simple"
  2343                           ; Number of cases is 1, Range of values is 0 to 0
  2344                           ; switch strategies available:
  2345                           ; Name         Instructions Cycles
  2346                           ; simple_byte            4     3 (average)
  2347                           ; direct_byte           11     8 (fixed)
  2348                           ; jumptable            260     6 (fixed)
  2349                           ;	Chosen strategy is simple_byte
  2350  07E9  0840               	movf	(??_MEF_Actualizacion+1)^(0+128),w
  2351  07EA  3A00               	xorlw	0	; case 0
  2352  07EB  1903               	skipnz
  2353  07EC  2FEE               	goto	l4166
  2354  07ED  2FFF               	goto	l173
  2355  07EE                     l4166:
  2356                           
  2357                           ; Switch size 1, requested type "simple"
  2358                           ; Number of cases is 5, Range of values is 0 to 4
  2359                           ; switch strategies available:
  2360                           ; Name         Instructions Cycles
  2361                           ; simple_byte           16     9 (average)
  2362                           ; direct_byte           23     8 (fixed)
  2363                           ; jumptable            260     6 (fixed)
  2364                           ;	Chosen strategy is simple_byte
  2365  07EE  083F               	movf	??_MEF_Actualizacion^(0+128),w
  2366  07EF  3A00               	xorlw	0	; case 0
  2367  07F0  1903               	skipnz
  2368  07F1  2FB2               	goto	l3868
  2369  07F2  3A01               	xorlw	1	; case 1
  2370  07F3  1903               	skipnz
  2371  07F4  2FBA               	goto	l3872
  2372  07F5  3A03               	xorlw	3	; case 2
  2373  07F6  1903               	skipnz
  2374  07F7  2FDE               	goto	l3894
  2375  07F8  3A01               	xorlw	1	; case 3
  2376  07F9  1903               	skipnz
  2377  07FA  2FFF               	goto	l173
  2378  07FB  3A07               	xorlw	7	; case 4
  2379  07FC  1903               	skipnz
  2380  07FD  2FFF               	goto	l173
  2381  07FE  2FFF               	goto	l173
  2382  07FF                     l173:
  2383  07FF  0008               	return
  2384  0800                     __end_of_MEF_Actualizacion:
  2385                           
  2386                           	psect	text5
  2387  08EB                     __ptext5:	
  2388 ;; *************** function _Select_Modo *****************
  2389 ;; Defined at:
  2390 ;;		line 12 in file "Menu_Modo.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;		None
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;		None
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2404 ;;      Params:         0       0       0       0       0
  2405 ;;      Locals:         0       0       0       0       0
  2406 ;;      Temps:          0       0       0       0       0
  2407 ;;      Totals:         0       0       0       0       0
  2408 ;;Total ram usage:        0 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    5
  2411 ;; This function calls:
  2412 ;;		_Antirrebote
  2413 ;;		_Pant_Menu
  2414 ;;		_Pant_Selector
  2415 ;; This function is called by:
  2416 ;;		_MEF_Actualizacion
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           
  2421                           ;psect for function _Select_Modo
  2422  08EB                     _Select_Modo:
  2423                           
  2424                           ;incstack = 0
  2425                           ; Regs used in _Select_Modo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2426  08EB  0064               	clrwdt	;# 
  2427                           
  2428                           ;Menu_Modo.c: 16:     if(Mostrar) Pant_Menu(),Mostrar=0;
  2429  08EC  087B               	movf	_Mostrar,w
  2430  08ED  1903               	btfsc	3,2
  2431  08EE  28F5               	goto	l3812
  2432  08EF  120A  158A  225B  120A  158A  	fcall	_Pant_Menu
  2433  08F4  01FB               	clrf	_Mostrar
  2434  08F5                     l3812:
  2435                           
  2436                           ;Menu_Modo.c: 18:     if(PORTBbits.RB3 || Modo==0)
  2437  08F5  1283               	bcf	3,5	;RP0=0, select bank0
  2438  08F6  1303               	bcf	3,6	;RP1=0, select bank0
  2439  08F7  1986               	btfsc	6,3	;volatile
  2440  08F8  28FC               	goto	l3816
  2441  08F9  086C               	movf	_Modo,w
  2442  08FA  1D03               	btfss	3,2
  2443  08FB  0008               	return
  2444  08FC                     l3816:
  2445                           
  2446                           ;Menu_Modo.c: 19:     {;Menu_Modo.c: 20:         Modo+=1;
  2447  08FC  3001               	movlw	1
  2448  08FD  00FF               	movwf	127
  2449  08FE  087F               	movf	127,w
  2450  08FF  07EC               	addwf	_Modo,f
  2451                           
  2452                           ;Menu_Modo.c: 21:         if(Modo>=5||Modo<1) Modo=1;
  2453  0900  3005               	movlw	5
  2454  0901  026C               	subwf	_Modo,w
  2455  0902  1803               	skipnc
  2456  0903  2907               	goto	l224
  2457  0904  086C               	movf	_Modo,w
  2458  0905  1D03               	btfss	3,2
  2459  0906  2909               	goto	l3822
  2460  0907                     l224:
  2461  0907  01EC               	clrf	_Modo
  2462  0908  0AEC               	incf	_Modo,f
  2463  0909                     l3822:
  2464                           
  2465                           ;Menu_Modo.c: 22:         Pant_Selector(),Antirrebote();
  2466  0909  120A  158A  26B7  120A  158A  	fcall	_Pant_Selector
  2467  090E  120A  158A  2015   	fcall	_Antirrebote
  2468  0911  0008               	return
  2469  0912                     __end_of_Select_Modo:
  2470                           
  2471                           	psect	text6
  2472  0EB7                     __ptext6:	
  2473 ;; *************** function _Pant_Selector *****************
  2474 ;; Defined at:
  2475 ;;		line 44 in file "Display_Lcd.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;		None
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2489 ;;      Params:         0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0
  2492 ;;      Totals:         0       0       0       0       0
  2493 ;;Total ram usage:        0 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    4
  2496 ;; This function calls:
  2497 ;;		_LCD_array
  2498 ;; This function is called by:
  2499 ;;		_Select_Modo
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           
  2504                           ;psect for function _Pant_Selector
  2505  0EB7                     _Pant_Selector:
  2506                           
  2507                           ;Display_Lcd.c: 46:     if(Modo == 1) LCD_array(4,1," "),LCD_array(1,1,">");
  2508                           
  2509                           ;incstack = 0
  2510                           ; Regs used in _Pant_Selector: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2511  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0EB9  036C               	decf	_Modo,w
  2514  0EBA  1D03               	btfss	3,2
  2515  0EBB  2EDF               	goto	l3764
  2516  0EBC  3004               	movlw	4
  2517  0EBD  00A0               	movwf	LCD_array@x
  2518  0EBE  3000               	movlw	0
  2519  0EBF  00A1               	movwf	LCD_array@x+1
  2520  0EC0  3001               	movlw	1
  2521  0EC1  00A2               	movwf	LCD_array@y
  2522  0EC2  3000               	movlw	0
  2523  0EC3  00A3               	movwf	LCD_array@y+1
  2524  0EC4  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2525  0EC5  00A4               	movwf	LCD_array@date
  2526  0EC6  3080               	movlw	128
  2527  0EC7  00A5               	movwf	LCD_array@date+1
  2528  0EC8  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2529  0ECD  3001               	movlw	1
  2530  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0ED0  00A0               	movwf	LCD_array@x
  2533  0ED1  3000               	movlw	0
  2534  0ED2  00A1               	movwf	LCD_array@x+1
  2535  0ED3  3001               	movlw	1
  2536  0ED4  00A2               	movwf	LCD_array@y
  2537  0ED5  3000               	movlw	0
  2538  0ED6  00A3               	movwf	LCD_array@y+1
  2539  0ED7  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2540  0ED8  00A4               	movwf	LCD_array@date
  2541  0ED9  3080               	movlw	128
  2542  0EDA  00A5               	movwf	LCD_array@date+1
  2543  0EDB  120A  158A  2361   	fcall	_LCD_array
  2544  0EDE  0008               	return
  2545  0EDF                     l3764:
  2546  0EDF  3002               	movlw	2
  2547  0EE0  066C               	xorwf	_Modo,w
  2548  0EE1  1D03               	btfss	3,2
  2549  0EE2  2F06               	goto	l3768
  2550  0EE3  3001               	movlw	1
  2551  0EE4  00A0               	movwf	LCD_array@x
  2552  0EE5  3000               	movlw	0
  2553  0EE6  00A1               	movwf	LCD_array@x+1
  2554  0EE7  3001               	movlw	1
  2555  0EE8  00A2               	movwf	LCD_array@y
  2556  0EE9  3000               	movlw	0
  2557  0EEA  00A3               	movwf	LCD_array@y+1
  2558  0EEB  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2559  0EEC  00A4               	movwf	LCD_array@date
  2560  0EED  3080               	movlw	128
  2561  0EEE  00A5               	movwf	LCD_array@date+1
  2562  0EEF  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2563  0EF4  3002               	movlw	2
  2564  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2566  0EF7  00A0               	movwf	LCD_array@x
  2567  0EF8  3000               	movlw	0
  2568  0EF9  00A1               	movwf	LCD_array@x+1
  2569  0EFA  3001               	movlw	1
  2570  0EFB  00A2               	movwf	LCD_array@y
  2571  0EFC  3000               	movlw	0
  2572  0EFD  00A3               	movwf	LCD_array@y+1
  2573  0EFE  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2574  0EFF  00A4               	movwf	LCD_array@date
  2575  0F00  3080               	movlw	128
  2576  0F01  00A5               	movwf	LCD_array@date+1
  2577  0F02  120A  158A  2361   	fcall	_LCD_array
  2578  0F05  0008               	return
  2579  0F06                     l3768:
  2580  0F06  3003               	movlw	3
  2581  0F07  066C               	xorwf	_Modo,w
  2582  0F08  1D03               	btfss	3,2
  2583  0F09  2F2D               	goto	l3772
  2584  0F0A  3002               	movlw	2
  2585  0F0B  00A0               	movwf	LCD_array@x
  2586  0F0C  3000               	movlw	0
  2587  0F0D  00A1               	movwf	LCD_array@x+1
  2588  0F0E  3001               	movlw	1
  2589  0F0F  00A2               	movwf	LCD_array@y
  2590  0F10  3000               	movlw	0
  2591  0F11  00A3               	movwf	LCD_array@y+1
  2592  0F12  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2593  0F13  00A4               	movwf	LCD_array@date
  2594  0F14  3080               	movlw	128
  2595  0F15  00A5               	movwf	LCD_array@date+1
  2596  0F16  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2597  0F1B  3003               	movlw	3
  2598  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  2599  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  2600  0F1E  00A0               	movwf	LCD_array@x
  2601  0F1F  3000               	movlw	0
  2602  0F20  00A1               	movwf	LCD_array@x+1
  2603  0F21  3001               	movlw	1
  2604  0F22  00A2               	movwf	LCD_array@y
  2605  0F23  3000               	movlw	0
  2606  0F24  00A3               	movwf	LCD_array@y+1
  2607  0F25  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2608  0F26  00A4               	movwf	LCD_array@date
  2609  0F27  3080               	movlw	128
  2610  0F28  00A5               	movwf	LCD_array@date+1
  2611  0F29  120A  158A  2361   	fcall	_LCD_array
  2612  0F2C  0008               	return
  2613  0F2D                     l3772:
  2614  0F2D  3004               	movlw	4
  2615  0F2E  066C               	xorwf	_Modo,w
  2616  0F2F  1D03               	btfss	3,2
  2617  0F30  0008               	return
  2618  0F31  3003               	movlw	3
  2619  0F32  00A0               	movwf	LCD_array@x
  2620  0F33  3000               	movlw	0
  2621  0F34  00A1               	movwf	LCD_array@x+1
  2622  0F35  3001               	movlw	1
  2623  0F36  00A2               	movwf	LCD_array@y
  2624  0F37  3000               	movlw	0
  2625  0F38  00A3               	movwf	LCD_array@y+1
  2626  0F39  301E               	movlw	(low (((STR_3+19)-__stringbase)| (0+32768)))& (0+255)
  2627  0F3A  00A4               	movwf	LCD_array@date
  2628  0F3B  3080               	movlw	128
  2629  0F3C  00A5               	movwf	LCD_array@date+1
  2630  0F3D  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2631  0F42  3004               	movlw	4
  2632  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0F45  00A0               	movwf	LCD_array@x
  2635  0F46  3000               	movlw	0
  2636  0F47  00A1               	movwf	LCD_array@x+1
  2637  0F48  3001               	movlw	1
  2638  0F49  00A2               	movwf	LCD_array@y
  2639  0F4A  3000               	movlw	0
  2640  0F4B  00A3               	movwf	LCD_array@y+1
  2641  0F4C  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2642  0F4D  00A4               	movwf	LCD_array@date
  2643  0F4E  3080               	movlw	128
  2644  0F4F  00A5               	movwf	LCD_array@date+1
  2645  0F50  120A  158A  2361   	fcall	_LCD_array
  2646  0F53  0008               	return
  2647  0F54                     __end_of_Pant_Selector:
  2648                           
  2649                           	psect	text7
  2650  0A5B                     __ptext7:	
  2651 ;; *************** function _Pant_Menu *****************
  2652 ;; Defined at:
  2653 ;;		line 54 in file "Display_Lcd.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2667 ;;      Params:         0       0       0       0       0
  2668 ;;      Locals:         0       0       0       0       0
  2669 ;;      Temps:          0       0       0       0       0
  2670 ;;      Totals:         0       0       0       0       0
  2671 ;;Total ram usage:        0 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    4
  2674 ;; This function calls:
  2675 ;;		_LCD_array
  2676 ;; This function is called by:
  2677 ;;		_Select_Modo
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           
  2682                           ;psect for function _Pant_Menu
  2683  0A5B                     _Pant_Menu:
  2684                           
  2685                           ;Display_Lcd.c: 56:     LCD_array(1,3,"PULVERIZACION");
  2686                           
  2687                           ;incstack = 0
  2688                           ; Regs used in _Pant_Menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2689  0A5B  3001               	movlw	1
  2690  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  2691  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  2692  0A5E  00A0               	movwf	LCD_array@x
  2693  0A5F  3000               	movlw	0
  2694  0A60  00A1               	movwf	LCD_array@x+1
  2695  0A61  3003               	movlw	3
  2696  0A62  00A2               	movwf	LCD_array@y
  2697  0A63  3000               	movlw	0
  2698  0A64  00A3               	movwf	LCD_array@y+1
  2699  0A65  305C               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2700  0A66  00A4               	movwf	LCD_array@date
  2701  0A67  3080               	movlw	128
  2702  0A68  00A5               	movwf	LCD_array@date+1
  2703  0A69  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2704                           
  2705                           ;Display_Lcd.c: 57:     LCD_array(2,3,"FUGA");
  2706  0A6E  3002               	movlw	2
  2707  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  2708  0A70  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0A71  00A0               	movwf	LCD_array@x
  2710  0A72  3000               	movlw	0
  2711  0A73  00A1               	movwf	LCD_array@x+1
  2712  0A74  3003               	movlw	3
  2713  0A75  00A2               	movwf	LCD_array@y
  2714  0A76  3000               	movlw	0
  2715  0A77  00A3               	movwf	LCD_array@y+1
  2716  0A78  308F               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2717  0A79  00A4               	movwf	LCD_array@date
  2718  0A7A  3080               	movlw	128
  2719  0A7B  00A5               	movwf	LCD_array@date+1
  2720  0A7C  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2721                           
  2722                           ;Display_Lcd.c: 58:     LCD_array(3,3,"FLUJO");
  2723  0A81  3003               	movlw	3
  2724  0A82  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0A83  1303               	bcf	3,6	;RP1=0, select bank0
  2726  0A84  00A0               	movwf	LCD_array@x
  2727  0A85  3000               	movlw	0
  2728  0A86  00A1               	movwf	LCD_array@x+1
  2729  0A87  3003               	movlw	3
  2730  0A88  00A2               	movwf	LCD_array@y
  2731  0A89  3000               	movlw	0
  2732  0A8A  00A3               	movwf	LCD_array@y+1
  2733  0A8B  307F               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2734  0A8C  00A4               	movwf	LCD_array@date
  2735  0A8D  3080               	movlw	128
  2736  0A8E  00A5               	movwf	LCD_array@date+1
  2737  0A8F  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2738                           
  2739                           ;Display_Lcd.c: 59:     LCD_array(4,3,"LIMP. ULTRASONIDO");
  2740  0A94  3004               	movlw	4
  2741  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  2742  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  2743  0A97  00A0               	movwf	LCD_array@x
  2744  0A98  3000               	movlw	0
  2745  0A99  00A1               	movwf	LCD_array@x+1
  2746  0A9A  3003               	movlw	3
  2747  0A9B  00A2               	movwf	LCD_array@y
  2748  0A9C  3000               	movlw	0
  2749  0A9D  00A3               	movwf	LCD_array@y+1
  2750  0A9E  304A               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2751  0A9F  00A4               	movwf	LCD_array@date
  2752  0AA0  3080               	movlw	128
  2753  0AA1  00A5               	movwf	LCD_array@date+1
  2754  0AA2  120A  158A  2361   	fcall	_LCD_array
  2755  0AA5  0008               	return
  2756  0AA6                     __end_of_Pant_Menu:
  2757                           
  2758                           	psect	text8
  2759  0815                     __ptext8:	
  2760 ;; *************** function _Antirrebote *****************
  2761 ;; Defined at:
  2762 ;;		line 71 in file "Main.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2776 ;;      Params:         0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0
  2778 ;;      Temps:          2       0       0       0       0
  2779 ;;      Totals:         2       0       0       0       0
  2780 ;;Total ram usage:        2 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    2
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_MEF_Actualizacion
  2787 ;;		_Select_Modo
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _Antirrebote
  2793  0815                     _Antirrebote:
  2794  0815                     l2784:	
  2795                           ;incstack = 0
  2796                           ; Regs used in _Antirrebote: [wreg]
  2797                           
  2798                           
  2799                           ;Main.c: 73:     _delay((unsigned long)((10)*(20000000/4000.0)));
  2800  0815  3041               	movlw	65
  2801  0816  00F3               	movwf	??_Antirrebote+1
  2802  0817  30EE               	movlw	238
  2803  0818  00F2               	movwf	??_Antirrebote
  2804  0819                     u4277:
  2805  0819  0BF2               	decfsz	??_Antirrebote,f
  2806  081A  2819               	goto	u4277
  2807  081B  0BF3               	decfsz	??_Antirrebote+1,f
  2808  081C  2819               	goto	u4277
  2809  081D  0000               	nop
  2810                           
  2811                           ;Main.c: 74:     while(PORTBbits.RB0 || PORTBbits.RB1 || PORTBbits.RB2 || PORTBbits.RB3)
      +                           _delay((unsigned long)((10)*(20000000/4000.0)));
  2812  081E  1283               	bcf	3,5	;RP0=0, select bank0
  2813  081F  1303               	bcf	3,6	;RP1=0, select bank0
  2814  0820  1C06               	btfss	6,0	;volatile
  2815  0821  1886               	btfsc	6,1	;volatile
  2816  0822  2815               	goto	l2784
  2817  0823  1906               	btfsc	6,2	;volatile
  2818  0824  2815               	goto	l2784
  2819  0825  1D86               	btfss	6,3	;volatile
  2820  0826  0008               	return
  2821  0827  2815               	goto	l2784
  2822  0828                     __end_of_Antirrebote:
  2823                           
  2824                           	psect	text9
  2825  0F54                     __ptext9:	
  2826 ;; *************** function _Pant_Inicio *****************
  2827 ;; Defined at:
  2828 ;;		line 8 in file "Display_Lcd.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  caracter        8   18[BANK0 ] unsigned char [8]
  2833 ;;  caracter1       8   10[BANK0 ] unsigned char [8]
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      void 
  2836 ;; Registers used:
  2837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2843 ;;      Params:         0       0       0       0       0
  2844 ;;      Locals:         0      16       0       0       0
  2845 ;;      Temps:          0       4       0       0       0
  2846 ;;      Totals:         0      20       0       0       0
  2847 ;;Total ram usage:       20 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    4
  2850 ;; This function calls:
  2851 ;;		_LCD_array
  2852 ;;		_LCD_character
  2853 ;;		_LCD_command
  2854 ;; This function is called by:
  2855 ;;		_MEF_Actualizacion
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           
  2860                           ;psect for function _Pant_Inicio
  2861  0F54                     _Pant_Inicio:
  2862                           
  2863                           ;Display_Lcd.c: 11:     char caracter1[8] =
  2864                           
  2865                           ;incstack = 0
  2866                           ; Regs used in _Pant_Inicio: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2867  0F54  302A               	movlw	Pant_Inicio@caracter1& (0+255)
  2868  0F55  0084               	movwf	4
  2869  0F56  30B5               	movlw	low Pant_Inicio@F1321
  2870  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  2871  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  2872  0F59  00A6               	movwf	??_Pant_Inicio
  2873  0F5A  0804               	movf	4,w
  2874  0F5B  00A7               	movwf	??_Pant_Inicio+1
  2875  0F5C  3008               	movlw	8
  2876  0F5D  00A8               	movwf	??_Pant_Inicio+2
  2877  0F5E                     u3850:
  2878  0F5E  0826               	movf	??_Pant_Inicio,w
  2879  0F5F  0084               	movwf	4
  2880  0F60  1383               	bcf	3,7	;select IRP bank1
  2881  0F61  0800               	movf	0,w
  2882  0F62  00A9               	movwf	??_Pant_Inicio+3
  2883  0F63  0AA6               	incf	??_Pant_Inicio,f
  2884  0F64  0827               	movf	??_Pant_Inicio+1,w
  2885  0F65  0084               	movwf	4
  2886  0F66  0829               	movf	??_Pant_Inicio+3,w
  2887  0F67  0080               	movwf	0
  2888  0F68  0AA7               	incf	??_Pant_Inicio+1,f
  2889  0F69  0BA8               	decfsz	??_Pant_Inicio+2,f
  2890  0F6A  2F5E               	goto	u3850
  2891                           
  2892                           ;Display_Lcd.c: 22:     LCD_character(0x01,caracter1);
  2893  0F6B  302A               	movlw	(low (Pant_Inicio@caracter1| 0))& (0+255)
  2894  0F6C  00FF               	movwf	127
  2895  0F6D  087F               	movf	127,w
  2896  0F6E  00F5               	movwf	LCD_character@caracter
  2897  0F6F  3001               	movlw	1
  2898  0F70  120A  158A  20C4  120A  158A  	fcall	_LCD_character
  2899                           
  2900                           ;Display_Lcd.c: 25:     char caracter[8] = {0,0,0,0,0,0,0,0};
  2901  0F75  3032               	movlw	Pant_Inicio@caracter& (0+255)
  2902  0F76  0084               	movwf	4
  2903  0F77  3008               	movlw	8
  2904  0F78  00FF               	movwf	127
  2905  0F79                     u3860:
  2906  0F79  1383               	bcf	3,7	;select IRP bank0
  2907  0F7A  0180               	clrf	0
  2908  0F7B  0A84               	incf	4,f
  2909  0F7C  0BFF               	decfsz	127,f
  2910  0F7D  2F79               	goto	u3860
  2911                           
  2912                           ;Display_Lcd.c: 26:     LCD_character(0x00,caracter);
  2913  0F7E  3032               	movlw	(low (Pant_Inicio@caracter| 0))& (0+255)
  2914  0F7F  00FF               	movwf	127
  2915  0F80  087F               	movf	127,w
  2916  0F81  00F5               	movwf	LCD_character@caracter
  2917  0F82  3000               	movlw	0
  2918  0F83  120A  158A  20C4  120A  158A  	fcall	_LCD_character
  2919                           
  2920                           ;Display_Lcd.c: 29:     LCD_command(0x01);
  2921  0F88  3001               	movlw	1
  2922  0F89  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  2923                           
  2924                           ;Display_Lcd.c: 30:     LCD_array(1,1,"====================");
  2925  0F8E  3001               	movlw	1
  2926  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  2927  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  2928  0F91  00A0               	movwf	LCD_array@x
  2929  0F92  3000               	movlw	0
  2930  0F93  00A1               	movwf	LCD_array@x+1
  2931  0F94  3001               	movlw	1
  2932  0F95  00A2               	movwf	LCD_array@y
  2933  0F96  3000               	movlw	0
  2934  0F97  00A3               	movwf	LCD_array@y+1
  2935  0F98  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2936  0F99  00A4               	movwf	LCD_array@date
  2937  0F9A  3080               	movlw	128
  2938  0F9B  00A5               	movwf	LCD_array@date+1
  2939  0F9C  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2940                           
  2941                           ;Display_Lcd.c: 31:     LCD_array(2,1,"PROBADOR AUTOMOTRIZ ");
  2942  0FA1  3002               	movlw	2
  2943  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  2944  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  2945  0FA4  00A0               	movwf	LCD_array@x
  2946  0FA5  3000               	movlw	0
  2947  0FA6  00A1               	movwf	LCD_array@x+1
  2948  0FA7  3001               	movlw	1
  2949  0FA8  00A2               	movwf	LCD_array@y
  2950  0FA9  3000               	movlw	0
  2951  0FAA  00A3               	movwf	LCD_array@y+1
  2952  0FAB  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2953  0FAC  00A4               	movwf	LCD_array@date
  2954  0FAD  3080               	movlw	128
  2955  0FAE  00A5               	movwf	LCD_array@date+1
  2956  0FAF  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2957                           
  2958                           ;Display_Lcd.c: 32:     LCD_array(3,1,"   DE INYECTORES    ");
  2959  0FB4  3003               	movlw	3
  2960  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2961  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2962  0FB7  00A0               	movwf	LCD_array@x
  2963  0FB8  3000               	movlw	0
  2964  0FB9  00A1               	movwf	LCD_array@x+1
  2965  0FBA  3001               	movlw	1
  2966  0FBB  00A2               	movwf	LCD_array@y
  2967  0FBC  3000               	movlw	0
  2968  0FBD  00A3               	movwf	LCD_array@y+1
  2969  0FBE  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2970  0FBF  00A4               	movwf	LCD_array@date
  2971  0FC0  3080               	movlw	128
  2972  0FC1  00A5               	movwf	LCD_array@date+1
  2973  0FC2  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2974                           
  2975                           ;Display_Lcd.c: 33:     LCD_array(4,1,"====================");
  2976  0FC7  3004               	movlw	4
  2977  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0FCA  00A0               	movwf	LCD_array@x
  2980  0FCB  3000               	movlw	0
  2981  0FCC  00A1               	movwf	LCD_array@x+1
  2982  0FCD  3001               	movlw	1
  2983  0FCE  00A2               	movwf	LCD_array@y
  2984  0FCF  3000               	movlw	0
  2985  0FD0  00A3               	movwf	LCD_array@y+1
  2986  0FD1  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2987  0FD2  00A4               	movwf	LCD_array@date
  2988  0FD3  3080               	movlw	128
  2989  0FD4  00A5               	movwf	LCD_array@date+1
  2990  0FD5  120A  158A  2361  120A  158A  	fcall	_LCD_array
  2991                           
  2992                           ;Display_Lcd.c: 34:     _delay((unsigned long)((2000)*(20000000/4000.0)));
  2993  0FDA  3033               	movlw	51
  2994  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  2995  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  2996  0FDD  00A8               	movwf	??_Pant_Inicio+2
  2997  0FDE  30BB               	movlw	187
  2998  0FDF  00A7               	movwf	??_Pant_Inicio+1
  2999  0FE0  30DF               	movlw	223
  3000  0FE1  00A6               	movwf	??_Pant_Inicio
  3001  0FE2                     u4287:
  3002  0FE2  0BA6               	decfsz	??_Pant_Inicio,f
  3003  0FE3  2FE2               	goto	u4287
  3004  0FE4  0BA7               	decfsz	??_Pant_Inicio+1,f
  3005  0FE5  2FE2               	goto	u4287
  3006  0FE6  0BA8               	decfsz	??_Pant_Inicio+2,f
  3007  0FE7  2FE2               	goto	u4287
  3008                           
  3009                           ;Display_Lcd.c: 37:     LCD_command(0x01);
  3010  0FE8  3001               	movlw	1
  3011  0FE9  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  3012                           
  3013                           ;Display_Lcd.c: 39:     LCD_array(1,1,">");
  3014  0FEE  3001               	movlw	1
  3015  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0FF1  00A0               	movwf	LCD_array@x
  3018  0FF2  3000               	movlw	0
  3019  0FF3  00A1               	movwf	LCD_array@x+1
  3020  0FF4  3001               	movlw	1
  3021  0FF5  00A2               	movwf	LCD_array@y
  3022  0FF6  3000               	movlw	0
  3023  0FF7  00A3               	movwf	LCD_array@y+1
  3024  0FF8  309E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  3025  0FF9  00A4               	movwf	LCD_array@date
  3026  0FFA  3080               	movlw	128
  3027  0FFB  00A5               	movwf	LCD_array@date+1
  3028  0FFC  120A  158A  2361   	fcall	_LCD_array
  3029  0FFF  0008               	return
  3030  1000                     __end_of_Pant_Inicio:
  3031                           
  3032                           	psect	text10
  3033  08C4                     __ptext10:	
  3034 ;; *************** function _LCD_character *****************
  3035 ;; Defined at:
  3036 ;;		line 197 in file "Lcd.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  adress          1    wreg     unsigned char 
  3039 ;;  caracter        1    5[COMMON] PTR unsigned char 
  3040 ;;		 -> Pant_Inicio@caracter(8), Pant_Inicio@caracter1(8), 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  adress          1    7[COMMON] unsigned char 
  3043 ;;  i               1    8[COMMON] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3053 ;;      Params:         1       0       0       0       0
  3054 ;;      Locals:         2       0       0       0       0
  3055 ;;      Temps:          1       0       0       0       0
  3056 ;;      Totals:         4       0       0       0       0
  3057 ;;Total ram usage:        4 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    3
  3060 ;; This function calls:
  3061 ;;		_LCD_command
  3062 ;;		_LCD_date
  3063 ;; This function is called by:
  3064 ;;		_Pant_Inicio
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function _LCD_character
  3070  08C4                     _LCD_character:
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _LCD_character: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3074                           ;LCD_character@adress stored from wreg
  3075  08C4  00F7               	movwf	LCD_character@adress
  3076                           
  3077                           ;Lcd.c: 197: void LCD_character(unsigned char adress,char caracter[]);Lcd.c: 198: {;Lcd.
      +                          c: 199:     LCD_command(0x40 + (adress * 8));
  3078  08C5  0877               	movf	LCD_character@adress,w
  3079  08C6  00F6               	movwf	??_LCD_character
  3080  08C7  3002               	movlw	2
  3081  08C8                     u2555:
  3082  08C8  1003               	clrc
  3083  08C9  0DF6               	rlf	??_LCD_character,f
  3084  08CA  3EFF               	addlw	-1
  3085  08CB  1D03               	skipz
  3086  08CC  28C8               	goto	u2555
  3087  08CD  1003               	clrc
  3088  08CE  0D76               	rlf	??_LCD_character,w
  3089  08CF  3E40               	addlw	64
  3090  08D0  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  3091                           
  3092                           ;Lcd.c: 200:     for(char i=0;i<8;i++)
  3093  08D5  01F8               	clrf	LCD_character@i
  3094  08D6                     l2858:
  3095                           
  3096                           ;Lcd.c: 201:     {;Lcd.c: 202:         LCD_date(caracter[i]);
  3097  08D6  0878               	movf	LCD_character@i,w
  3098  08D7  0775               	addwf	LCD_character@caracter,w
  3099  08D8  00F6               	movwf	??_LCD_character
  3100  08D9  0876               	movf	??_LCD_character,w
  3101  08DA  0084               	movwf	4
  3102  08DB  1383               	bcf	3,7	;select IRP bank0
  3103  08DC  0800               	movf	0,w
  3104  08DD  120A  118A  2570  120A  158A  	fcall	_LCD_date
  3105                           
  3106                           ;Lcd.c: 203:     }
  3107  08E2  3001               	movlw	1
  3108  08E3  00FF               	movwf	127
  3109  08E4  087F               	movf	127,w
  3110  08E5  07F8               	addwf	LCD_character@i,f
  3111  08E6  3008               	movlw	8
  3112  08E7  0278               	subwf	LCD_character@i,w
  3113  08E8  1803               	btfsc	3,0
  3114  08E9  0008               	return
  3115  08EA  28D6               	goto	l2858
  3116  08EB                     __end_of_LCD_character:
  3117                           
  3118                           	psect	text11
  3119  0AA6                     __ptext11:	
  3120 ;; *************** function _MEF_Subest_Actualizacion *****************
  3121 ;; Defined at:
  3122 ;;		line 83 in file "MEF.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3136 ;;      Params:         0       0       0       0       0
  3137 ;;      Locals:         0       0       0       0       0
  3138 ;;      Temps:          0       0       2       0       0
  3139 ;;      Totals:         0       0       2       0       0
  3140 ;;Total ram usage:        2 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    6
  3143 ;; This function calls:
  3144 ;;		_Lec_Adc_Modo_Flujo
  3145 ;;		_Lec_Adc_Modo_Fuga
  3146 ;;		_Lec_Adc_Modo_Pulv
  3147 ;;		_Pant_Modos
  3148 ;;		_Pant_Val_Act
  3149 ;; This function is called by:
  3150 ;;		_MEF_Actualizacion
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           
  3155                           ;psect for function _MEF_Subest_Actualizacion
  3156  0AA6                     _MEF_Subest_Actualizacion:
  3157                           
  3158                           ;MEF.c: 85:     switch(Subestado_Actual)
  3159                           
  3160                           ;incstack = 0
  3161                           ; Regs used in _MEF_Subest_Actualizacion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  3162  0AA6  2AE1               	goto	l3858
  3163  0AA7                     l3830:
  3164                           
  3165                           ;MEF.c: 88:         {;MEF.c: 89:             Pant_Modos();
  3166  0AA7  120A  158A  262D   	fcall	_Pant_Modos
  3167                           
  3168                           ;MEF.c: 91:             Subestado_Actual = SUBEST_DISPLAY;
  3169  0AAA  1283               	bcf	3,5	;RP0=0, select bank0
  3170  0AAB  1303               	bcf	3,6	;RP1=0, select bank0
  3171  0AAC  01E5               	clrf	_Subestado_Actual
  3172  0AAD  0AE5               	incf	_Subestado_Actual,f
  3173                           
  3174                           ;MEF.c: 92:         break;
  3175  0AAE  0008               	return
  3176  0AAF                     l3834:
  3177                           
  3178                           ;MEF.c: 95:         {;MEF.c: 96:             Pant_Val_Act();
  3179  0AAF  120A  118A  23FC   	fcall	_Pant_Val_Act
  3180                           
  3181                           ;MEF.c: 98:             Subestado_Actual = SUBEST_ADC;
  3182  0AB2  3002               	movlw	2
  3183  0AB3  00FF               	movwf	127
  3184  0AB4  087F               	movf	127,w
  3185  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  3186  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  3187  0AB7  00E5               	movwf	_Subestado_Actual
  3188                           
  3189                           ;MEF.c: 99:         break;
  3190  0AB8  0008               	return
  3191  0AB9                     l3838:
  3192                           
  3193                           ;MEF.c: 102:         {;MEF.c: 103:             if(Estado_Actual==ESTADO_MODO_PULV) Lec_A
      +                          dc_Modo_Pulv();
  3194  0AB9  3002               	movlw	2
  3195  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  3196  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  3197  0ABC  0666               	xorwf	_Estado_Actual,w
  3198  0ABD  1D03               	btfss	3,2
  3199  0ABE  2AC5               	goto	l3842
  3200  0ABF  120A  158A  2002  120A  158A  	fcall	_Lec_Adc_Modo_Pulv
  3201  0AC4  2AD8               	goto	l3850
  3202  0AC5                     l3842:
  3203  0AC5  3003               	movlw	3
  3204  0AC6  0666               	xorwf	_Estado_Actual,w
  3205  0AC7  1D03               	btfss	3,2
  3206  0AC8  2ACF               	goto	l3846
  3207  0AC9  120A  118A  26FF  120A  158A  	fcall	_Lec_Adc_Modo_Fuga
  3208  0ACE  2AD8               	goto	l3850
  3209  0ACF                     l3846:
  3210  0ACF  3004               	movlw	4
  3211  0AD0  0666               	xorwf	_Estado_Actual,w
  3212  0AD1  1D03               	btfss	3,2
  3213  0AD2  2AD8               	goto	l3850
  3214  0AD3  120A  118A  2003  120A  158A  	fcall	_Lec_Adc_Modo_Flujo
  3215  0AD8                     l3850:
  3216                           
  3217                           ;MEF.c: 107:             if(Act_Variables) Subestado_Actual = SUBEST_DISPLAY,Act_Variabl
      +                          es=0;
  3218  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  3219  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  3220  0ADA  0867               	movf	_Act_Variables,w
  3221  0ADB  1903               	btfsc	3,2
  3222  0ADC  0008               	return
  3223  0ADD  01E5               	clrf	_Subestado_Actual
  3224  0ADE  0AE5               	incf	_Subestado_Actual,f
  3225  0ADF  01E7               	clrf	_Act_Variables
  3226  0AE0  0008               	return
  3227  0AE1                     l3858:
  3228  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  3230  0AE3  0865               	movf	_Subestado_Actual,w
  3231  0AE4  1683               	bsf	3,5	;RP0=1, select bank1
  3232  0AE5  1303               	bcf	3,6	;RP1=0, select bank1
  3233  0AE6  00BD               	movwf	??_MEF_Subest_Actualizacion^(0+128)
  3234  0AE7  01BE               	clrf	(??_MEF_Subest_Actualizacion^(0+128)+1)
  3235                           
  3236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3237                           ; Switch size 1, requested type "simple"
  3238                           ; Number of cases is 1, Range of values is 0 to 0
  3239                           ; switch strategies available:
  3240                           ; Name         Instructions Cycles
  3241                           ; simple_byte            4     3 (average)
  3242                           ; direct_byte           11     8 (fixed)
  3243                           ; jumptable            260     6 (fixed)
  3244                           ;	Chosen strategy is simple_byte
  3245  0AE8  083E               	movf	(??_MEF_Subest_Actualizacion+1)^(0+128),w
  3246  0AE9  3A00               	xorlw	0	; case 0
  3247  0AEA  1903               	skipnz
  3248  0AEB  2AED               	goto	l4168
  3249  0AEC  2AFE               	goto	l189
  3250  0AED                     l4168:
  3251                           
  3252                           ; Switch size 1, requested type "simple"
  3253                           ; Number of cases is 5, Range of values is 0 to 4
  3254                           ; switch strategies available:
  3255                           ; Name         Instructions Cycles
  3256                           ; simple_byte           16     9 (average)
  3257                           ; direct_byte           23     8 (fixed)
  3258                           ; jumptable            260     6 (fixed)
  3259                           ;	Chosen strategy is simple_byte
  3260  0AED  083D               	movf	??_MEF_Subest_Actualizacion^(0+128),w
  3261  0AEE  3A00               	xorlw	0	; case 0
  3262  0AEF  1903               	skipnz
  3263  0AF0  2AA7               	goto	l3830
  3264  0AF1  3A01               	xorlw	1	; case 1
  3265  0AF2  1903               	skipnz
  3266  0AF3  2AAF               	goto	l3834
  3267  0AF4  3A03               	xorlw	3	; case 2
  3268  0AF5  1903               	skipnz
  3269  0AF6  2AB9               	goto	l3838
  3270  0AF7  3A01               	xorlw	1	; case 3
  3271  0AF8  1903               	skipnz
  3272  0AF9  2AFE               	goto	l189
  3273  0AFA  3A07               	xorlw	7	; case 4
  3274  0AFB  1903               	skipnz
  3275  0AFC  2AFE               	goto	l189
  3276  0AFD  2AFE               	goto	l189
  3277  0AFE                     l189:
  3278  0AFE  0008               	return
  3279  0AFF                     __end_of_MEF_Subest_Actualizacion:
  3280                           
  3281                           	psect	text12
  3282  03FC                     __ptext12:	
  3283 ;; *************** function _Pant_Val_Act *****************
  3284 ;; Defined at:
  3285 ;;		line 76 in file "Display_Lcd.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  buffer         20   23[BANK0 ] unsigned char [20]
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3299 ;;      Params:         0       0       0       0       0
  3300 ;;      Locals:         0      20       0       0       0
  3301 ;;      Temps:          0       2       0       0       0
  3302 ;;      Totals:         0      22       0       0       0
  3303 ;;Total ram usage:       22 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    4
  3306 ;; This function calls:
  3307 ;;		_LCD_array
  3308 ;;		_sprintf
  3309 ;; This function is called by:
  3310 ;;		_MEF_Subest_Actualizacion
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           
  3315                           ;psect for function _Pant_Val_Act
  3316  03FC                     _Pant_Val_Act:
  3317                           
  3318                           ;Display_Lcd.c: 78:     char buffer[20];;Display_Lcd.c: 80:     sprintf(buffer,"%05u",Rp
      +                          m);
  3319                           
  3320                           ;incstack = 0
  3321                           ; Regs used in _Pant_Val_Act: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3322  03FC  3099               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  3323  03FD  00FF               	movwf	127
  3324  03FE  087F               	movf	127,w
  3325  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0400  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0401  00A6               	movwf	sprintf@f
  3328  0402  0862               	movf	_Rpm+1,w
  3329  0403  00A8               	movwf	?_sprintf+2
  3330  0404  0861               	movf	_Rpm,w
  3331  0405  00A7               	movwf	?_sprintf+1
  3332  0406  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3333  0407  120A  118A  2048  120A  118A  	fcall	_sprintf
  3334                           
  3335                           ;Display_Lcd.c: 81:     LCD_array(1,5,buffer);
  3336  040C  3001               	movlw	1
  3337  040D  1283               	bcf	3,5	;RP0=0, select bank0
  3338  040E  1303               	bcf	3,6	;RP1=0, select bank0
  3339  040F  00A0               	movwf	LCD_array@x
  3340  0410  3000               	movlw	0
  3341  0411  00A1               	movwf	LCD_array@x+1
  3342  0412  3005               	movlw	5
  3343  0413  00A2               	movwf	LCD_array@y
  3344  0414  3000               	movlw	0
  3345  0415  00A3               	movwf	LCD_array@y+1
  3346  0416  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3347  0417  00A4               	movwf	LCD_array@date
  3348  0418  3000               	movlw	0
  3349  0419  00A5               	movwf	LCD_array@date+1
  3350  041A  120A  158A  2361  120A  118A  	fcall	_LCD_array
  3351                           
  3352                           ;Display_Lcd.c: 82:     sprintf(buffer,"%02d",Pwm);
  3353  041F  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3354  0420  00FF               	movwf	127
  3355  0421  087F               	movf	127,w
  3356  0422  1283               	bcf	3,5	;RP0=0, select bank0
  3357  0423  1303               	bcf	3,6	;RP1=0, select bank0
  3358  0424  00A6               	movwf	sprintf@f
  3359  0425  086B               	movf	_Pwm,w
  3360  0426  00B5               	movwf	??_Pant_Val_Act
  3361  0427  01B6               	clrf	??_Pant_Val_Act+1
  3362  0428  0835               	movf	??_Pant_Val_Act,w
  3363  0429  00A7               	movwf	?_sprintf+1
  3364  042A  0836               	movf	??_Pant_Val_Act+1,w
  3365  042B  00A8               	movwf	?_sprintf+2
  3366  042C  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3367  042D  120A  118A  2048  120A  118A  	fcall	_sprintf
  3368                           
  3369                           ;Display_Lcd.c: 83:     LCD_array(2,5,buffer);
  3370  0432  3002               	movlw	2
  3371  0433  1283               	bcf	3,5	;RP0=0, select bank0
  3372  0434  1303               	bcf	3,6	;RP1=0, select bank0
  3373  0435  00A0               	movwf	LCD_array@x
  3374  0436  3000               	movlw	0
  3375  0437  00A1               	movwf	LCD_array@x+1
  3376  0438  3005               	movlw	5
  3377  0439  00A2               	movwf	LCD_array@y
  3378  043A  3000               	movlw	0
  3379  043B  00A3               	movwf	LCD_array@y+1
  3380  043C  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3381  043D  00A4               	movwf	LCD_array@date
  3382  043E  3000               	movlw	0
  3383  043F  00A5               	movwf	LCD_array@date+1
  3384  0440  120A  158A  2361  120A  118A  	fcall	_LCD_array
  3385                           
  3386                           ;Display_Lcd.c: 84:     sprintf(buffer,"%02d",Min);
  3387  0445  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3388  0446  00FF               	movwf	127
  3389  0447  087F               	movf	127,w
  3390  0448  1283               	bcf	3,5	;RP0=0, select bank0
  3391  0449  1303               	bcf	3,6	;RP1=0, select bank0
  3392  044A  00A6               	movwf	sprintf@f
  3393  044B  086A               	movf	_Min,w
  3394  044C  00B5               	movwf	??_Pant_Val_Act
  3395  044D  01B6               	clrf	??_Pant_Val_Act+1
  3396  044E  0835               	movf	??_Pant_Val_Act,w
  3397  044F  00A7               	movwf	?_sprintf+1
  3398  0450  0836               	movf	??_Pant_Val_Act+1,w
  3399  0451  00A8               	movwf	?_sprintf+2
  3400  0452  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3401  0453  120A  118A  2048  120A  118A  	fcall	_sprintf
  3402                           
  3403                           ;Display_Lcd.c: 85:     LCD_array(3,8,buffer);
  3404  0458  3003               	movlw	3
  3405  0459  1283               	bcf	3,5	;RP0=0, select bank0
  3406  045A  1303               	bcf	3,6	;RP1=0, select bank0
  3407  045B  00A0               	movwf	LCD_array@x
  3408  045C  3000               	movlw	0
  3409  045D  00A1               	movwf	LCD_array@x+1
  3410  045E  3008               	movlw	8
  3411  045F  00A2               	movwf	LCD_array@y
  3412  0460  3000               	movlw	0
  3413  0461  00A3               	movwf	LCD_array@y+1
  3414  0462  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3415  0463  00A4               	movwf	LCD_array@date
  3416  0464  3000               	movlw	0
  3417  0465  00A5               	movwf	LCD_array@date+1
  3418  0466  120A  158A  2361  120A  118A  	fcall	_LCD_array
  3419                           
  3420                           ;Display_Lcd.c: 86:     sprintf(buffer,"%02d",Seg);
  3421  046B  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3422  046C  00FF               	movwf	127
  3423  046D  087F               	movf	127,w
  3424  046E  1283               	bcf	3,5	;RP0=0, select bank0
  3425  046F  1303               	bcf	3,6	;RP1=0, select bank0
  3426  0470  00A6               	movwf	sprintf@f
  3427  0471  0869               	movf	_Seg,w
  3428  0472  00B5               	movwf	??_Pant_Val_Act
  3429  0473  01B6               	clrf	??_Pant_Val_Act+1
  3430  0474  0835               	movf	??_Pant_Val_Act,w
  3431  0475  00A7               	movwf	?_sprintf+1
  3432  0476  0836               	movf	??_Pant_Val_Act+1,w
  3433  0477  00A8               	movwf	?_sprintf+2
  3434  0478  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3435  0479  120A  118A  2048  120A  118A  	fcall	_sprintf
  3436                           
  3437                           ;Display_Lcd.c: 87:     LCD_array(3,11,buffer);
  3438  047E  3003               	movlw	3
  3439  047F  1283               	bcf	3,5	;RP0=0, select bank0
  3440  0480  1303               	bcf	3,6	;RP1=0, select bank0
  3441  0481  00A0               	movwf	LCD_array@x
  3442  0482  3000               	movlw	0
  3443  0483  00A1               	movwf	LCD_array@x+1
  3444  0484  300B               	movlw	11
  3445  0485  00A2               	movwf	LCD_array@y
  3446  0486  3000               	movlw	0
  3447  0487  00A3               	movwf	LCD_array@y+1
  3448  0488  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3449  0489  00A4               	movwf	LCD_array@date
  3450  048A  3000               	movlw	0
  3451  048B  00A5               	movwf	LCD_array@date+1
  3452  048C  120A  158A  2361  120A  118A  	fcall	_LCD_array
  3453                           
  3454                           ;Display_Lcd.c: 88:     sprintf(buffer,"%02d",Temp);
  3455  0491  3094               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  3456  0492  00FF               	movwf	127
  3457  0493  087F               	movf	127,w
  3458  0494  1283               	bcf	3,5	;RP0=0, select bank0
  3459  0495  1303               	bcf	3,6	;RP1=0, select bank0
  3460  0496  00A6               	movwf	sprintf@f
  3461  0497  0868               	movf	_Temp,w
  3462  0498  00B5               	movwf	??_Pant_Val_Act
  3463  0499  01B6               	clrf	??_Pant_Val_Act+1
  3464  049A  0835               	movf	??_Pant_Val_Act,w
  3465  049B  00A7               	movwf	?_sprintf+1
  3466  049C  0836               	movf	??_Pant_Val_Act+1,w
  3467  049D  00A8               	movwf	?_sprintf+2
  3468  049E  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3469  049F  120A  118A  2048  120A  118A  	fcall	_sprintf
  3470                           
  3471                           ;Display_Lcd.c: 89:     LCD_array(4,13,buffer);
  3472  04A4  3004               	movlw	4
  3473  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  3474  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  3475  04A7  00A0               	movwf	LCD_array@x
  3476  04A8  3000               	movlw	0
  3477  04A9  00A1               	movwf	LCD_array@x+1
  3478  04AA  300D               	movlw	13
  3479  04AB  00A2               	movwf	LCD_array@y
  3480  04AC  3000               	movlw	0
  3481  04AD  00A3               	movwf	LCD_array@y+1
  3482  04AE  3037               	movlw	(low (Pant_Val_Act@buffer| 0))& (0+255)
  3483  04AF  00A4               	movwf	LCD_array@date
  3484  04B0  3000               	movlw	0
  3485  04B1  00A5               	movwf	LCD_array@date+1
  3486  04B2  120A  158A  2361   	fcall	_LCD_array
  3487  04B5  0008               	return
  3488  04B6                     __end_of_Pant_Val_Act:
  3489                           
  3490                           	psect	text13
  3491  0048                     __ptext13:	
  3492 ;; *************** function _sprintf *****************
  3493 ;; Defined at:
  3494 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  sp              1    wreg     PTR unsigned char 
  3497 ;;		 -> Pant_Val_Act@buffer(20), 
  3498 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  3499 ;;		 -> STR_28(5), STR_27(5), STR_26(5), STR_25(5), 
  3500 ;;		 -> STR_24(5), 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  sp              1   19[BANK0 ] PTR unsigned char 
  3503 ;;		 -> Pant_Val_Act@buffer(20), 
  3504 ;;  tmpval          4    0        struct .
  3505 ;;  width           2   17[BANK0 ] int 
  3506 ;;  val             2   14[BANK0 ] unsigned int 
  3507 ;;  cp              2    0        PTR const unsigned char 
  3508 ;;  len             2    0        unsigned int 
  3509 ;;  c               1   20[BANK0 ] unsigned char 
  3510 ;;  flag            1   16[BANK0 ] unsigned char 
  3511 ;;  ap              1   13[BANK0 ] PTR void [1]
  3512 ;;		 -> ?_sprintf(2), 
  3513 ;;  prec            1   12[BANK0 ] char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  2    6[BANK0 ] int 
  3516 ;; Registers used:
  3517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3523 ;;      Params:         0       3       0       0       0
  3524 ;;      Locals:         0       9       0       0       0
  3525 ;;      Temps:          0       3       0       0       0
  3526 ;;      Totals:         0      15       0       0       0
  3527 ;;Total ram usage:       15 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    3
  3530 ;; This function calls:
  3531 ;;		___lwdiv
  3532 ;;		___lwmod
  3533 ;;		___wmul
  3534 ;;		_isdigit
  3535 ;; This function is called by:
  3536 ;;		_Pant_Val_Act
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           
  3541                           ;psect for function _sprintf
  3542  0048                     _sprintf:
  3543                           
  3544                           ;incstack = 0
  3545                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3546                           ;sprintf@sp stored from wreg
  3547  0048  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0049  1303               	bcf	3,6	;RP1=0, select bank0
  3549  004A  00B3               	movwf	sprintf@sp
  3550                           
  3551                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  3552  004B  3027               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3553  004C  00FF               	movwf	127
  3554  004D  087F               	movf	127,w
  3555  004E  00AD               	movwf	sprintf@ap
  3556  004F                     l3714:	
  3557                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3558                           
  3559                           
  3560                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3561  004F  3001               	movlw	1
  3562  0050  07A6               	addwf	sprintf@f,f
  3563  0051  30FF               	movlw	-1
  3564  0052  0726               	addwf	sprintf@f,w
  3565  0053  0084               	movwf	4
  3566  0054  120A  118A  270A  120A  118A  	fcall	stringdir
  3567  0059  00FF               	movwf	127
  3568  005A  087F               	movf	127,w
  3569  005B  00B4               	movwf	sprintf@c
  3570  005C  0834               	movf	sprintf@c,w
  3571  005D  1903               	btfsc	3,2
  3572  005E  2A02               	goto	l3716
  3573                           
  3574                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  3575  005F  3025               	movlw	37
  3576  0060  0634               	xorwf	sprintf@c,w
  3577  0061  1903               	btfsc	3,2
  3578  0062  286F               	goto	l3612
  3579                           
  3580                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  3581  0063  0834               	movf	sprintf@c,w
  3582  0064  00FF               	movwf	127
  3583  0065  0833               	movf	sprintf@sp,w
  3584  0066  0084               	movwf	4
  3585  0067  087F               	movf	127,w
  3586  0068  1383               	bcf	3,7	;select IRP bank0
  3587  0069  0080               	movwf	0
  3588  006A  3001               	movlw	1
  3589  006B  00FF               	movwf	127
  3590  006C  087F               	movf	127,w
  3591  006D  07B3               	addwf	sprintf@sp,f
  3592                           
  3593                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 559:    continue;
  3594  006E  284F               	goto	l3714
  3595  006F                     l3612:
  3596                           
  3597                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  3598  006F  01B1               	clrf	sprintf@width
  3599  0070  01B2               	clrf	sprintf@width+1
  3600                           
  3601                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  3602  0071  01B0               	clrf	sprintf@flag
  3603  0072  2878               	goto	l3618
  3604  0073                     l576:	
  3605                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 596:    case '0':
  3606                           
  3607                           
  3608                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  3609  0073  1530               	bsf	sprintf@flag,2
  3610                           
  3611                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 598:     f++;
  3612  0074  3001               	movlw	1
  3613  0075  00FF               	movwf	127
  3614  0076  087F               	movf	127,w
  3615  0077  07A6               	addwf	sprintf@f,f
  3616  0078                     l3618:	
  3617                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  3618                           
  3619  0078  0826               	movf	sprintf@f,w
  3620  0079  0084               	movwf	4
  3621  007A  120A  118A  270A  120A  118A  	fcall	stringdir
  3622  007F  00A9               	movwf	??_sprintf
  3623  0080  01AA               	clrf	??_sprintf+1
  3624                           
  3625                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3626                           ; Switch size 1, requested type "simple"
  3627                           ; Number of cases is 1, Range of values is 0 to 0
  3628                           ; switch strategies available:
  3629                           ; Name         Instructions Cycles
  3630                           ; simple_byte            4     3 (average)
  3631                           ; direct_byte           11     8 (fixed)
  3632                           ; jumptable            260     6 (fixed)
  3633                           ;	Chosen strategy is simple_byte
  3634  0081  082A               	movf	??_sprintf+1,w
  3635  0082  3A00               	xorlw	0	; case 0
  3636  0083  1903               	skipnz
  3637  0084  2886               	goto	l4170
  3638  0085  288B               	goto	l3620
  3639  0086                     l4170:
  3640                           
  3641                           ; Switch size 1, requested type "simple"
  3642                           ; Number of cases is 1, Range of values is 48 to 48
  3643                           ; switch strategies available:
  3644                           ; Name         Instructions Cycles
  3645                           ; simple_byte            4     3 (average)
  3646                           ; direct_byte           14    11 (fixed)
  3647                           ; jumptable            263     9 (fixed)
  3648                           ;	Chosen strategy is simple_byte
  3649  0086  0829               	movf	??_sprintf,w
  3650  0087  3A30               	xorlw	48	; case 48
  3651  0088  1903               	skipnz
  3652  0089  2873               	goto	l576
  3653  008A  288B               	goto	l3620
  3654  008B                     l3620:
  3655                           
  3656                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  3657  008B  0826               	movf	sprintf@f,w
  3658  008C  0084               	movwf	4
  3659  008D  120A  118A  270A  120A  118A  	fcall	stringdir
  3660  0092  160A  118A  27E1  120A  118A  	fcall	_isdigit
  3661  0097  1C03               	btfss	3,0
  3662  0098  28DA               	goto	l3634
  3663                           
  3664                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  3665  0099  1283               	bcf	3,5	;RP0=0, select bank0
  3666  009A  1303               	bcf	3,6	;RP1=0, select bank0
  3667  009B  01B1               	clrf	sprintf@width
  3668  009C  01B2               	clrf	sprintf@width+1
  3669  009D                     l3624:
  3670                           
  3671                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  3672  009D  300A               	movlw	10
  3673  009E  1283               	bcf	3,5	;RP0=0, select bank0
  3674  009F  1303               	bcf	3,6	;RP1=0, select bank0
  3675  00A0  00A0               	movwf	___wmul@multiplier
  3676  00A1  3000               	movlw	0
  3677  00A2  00A1               	movwf	___wmul@multiplier+1
  3678  00A3  0832               	movf	sprintf@width+1,w
  3679  00A4  00A3               	movwf	___wmul@multiplicand+1
  3680  00A5  0831               	movf	sprintf@width,w
  3681  00A6  00A2               	movwf	___wmul@multiplicand
  3682  00A7  120A  158A  2058  120A  118A  	fcall	___wmul
  3683  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  3684  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  3685  00AE  0821               	movf	?___wmul+1,w
  3686  00AF  00B2               	movwf	sprintf@width+1
  3687  00B0  0820               	movf	?___wmul,w
  3688  00B1  00B1               	movwf	sprintf@width
  3689                           
  3690                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  3691  00B2  0826               	movf	sprintf@f,w
  3692  00B3  0084               	movwf	4
  3693  00B4  120A  118A  270A  120A  118A  	fcall	stringdir
  3694  00B9  3ED0               	addlw	208
  3695  00BA  00A9               	movwf	??_sprintf
  3696  00BB  30FF               	movlw	255
  3697  00BC  1803               	skipnc
  3698  00BD  3000               	movlw	0
  3699  00BE  00AA               	movwf	??_sprintf+1
  3700  00BF  0829               	movf	??_sprintf,w
  3701  00C0  07B1               	addwf	sprintf@width,f
  3702  00C1  1803               	skipnc
  3703  00C2  0AB2               	incf	sprintf@width+1,f
  3704  00C3  082A               	movf	??_sprintf+1,w
  3705  00C4  07B2               	addwf	sprintf@width+1,f
  3706  00C5  3001               	movlw	1
  3707  00C6  00FF               	movwf	127
  3708  00C7  087F               	movf	127,w
  3709  00C8  07A6               	addwf	sprintf@f,f
  3710                           
  3711                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  3712  00C9  0826               	movf	sprintf@f,w
  3713  00CA  0084               	movwf	4
  3714  00CB  120A  118A  270A  120A  118A  	fcall	stringdir
  3715  00D0  160A  118A  27E1  120A  118A  	fcall	_isdigit
  3716  00D5  1C03               	btfss	3,0
  3717  00D6  28DA               	goto	l3634
  3718  00D7  289D               	goto	l3624
  3719  00D8                     l590:	
  3720                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 843:   case 'u':
  3721                           
  3722                           
  3723                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          x40;
  3724  00D8  1730               	bsf	sprintf@flag,6
  3725                           
  3726                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 845:    break;
  3727  00D9  28FC               	goto	l588
  3728  00DA                     l3634:
  3729  00DA  3001               	movlw	1
  3730  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  3731  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  3732  00DD  07A6               	addwf	sprintf@f,f
  3733  00DE  30FF               	movlw	-1
  3734  00DF  0726               	addwf	sprintf@f,w
  3735  00E0  0084               	movwf	4
  3736  00E1  120A  118A  270A  120A  118A  	fcall	stringdir
  3737  00E6  00B4               	movwf	sprintf@c
  3738  00E7  00A9               	movwf	??_sprintf
  3739  00E8  01AA               	clrf	??_sprintf+1
  3740                           
  3741                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3742                           ; Switch size 1, requested type "simple"
  3743                           ; Number of cases is 1, Range of values is 0 to 0
  3744                           ; switch strategies available:
  3745                           ; Name         Instructions Cycles
  3746                           ; simple_byte            4     3 (average)
  3747                           ; direct_byte           11     8 (fixed)
  3748                           ; jumptable            260     6 (fixed)
  3749                           ;	Chosen strategy is simple_byte
  3750  00E9  082A               	movf	??_sprintf+1,w
  3751  00EA  3A00               	xorlw	0	; case 0
  3752  00EB  1903               	skipnz
  3753  00EC  28EE               	goto	l4172
  3754  00ED  284F               	goto	l3714
  3755  00EE                     l4172:
  3756                           
  3757                           ; Switch size 1, requested type "simple"
  3758                           ; Number of cases is 4, Range of values is 0 to 117
  3759                           ; switch strategies available:
  3760                           ; Name         Instructions Cycles
  3761                           ; simple_byte           13     7 (average)
  3762                           ; jumptable            260     6 (fixed)
  3763                           ;	Chosen strategy is simple_byte
  3764  00EE  0829               	movf	??_sprintf,w
  3765  00EF  3A00               	xorlw	0	; case 0
  3766  00F0  1903               	skipnz
  3767  00F1  2A02               	goto	l3716
  3768  00F2  3A64               	xorlw	100	; case 100
  3769  00F3  1903               	skipnz
  3770  00F4  28FC               	goto	l588
  3771  00F5  3A0D               	xorlw	13	; case 105
  3772  00F6  1903               	skipnz
  3773  00F7  28FC               	goto	l588
  3774  00F8  3A1C               	xorlw	28	; case 117
  3775  00F9  1903               	skipnz
  3776  00FA  28D8               	goto	l590
  3777  00FB  284F               	goto	l3714
  3778  00FC                     l588:
  3779                           
  3780                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1277:   if((flag 
      +                          & 0x40) == 0x00)
  3781  00FC  1B30               	btfsc	sprintf@flag,6
  3782  00FD  2916               	goto	l3646
  3783                           
  3784                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3785  00FE  082D               	movf	sprintf@ap,w
  3786  00FF  0084               	movwf	4
  3787  0100  1383               	bcf	3,7	;select IRP bank0
  3788  0101  0800               	movf	0,w
  3789  0102  00AE               	movwf	sprintf@val
  3790  0103  0A84               	incf	4,f
  3791  0104  0800               	movf	0,w
  3792  0105  00AF               	movwf	sprintf@val+1
  3793  0106  3002               	movlw	2
  3794  0107  00FF               	movwf	127
  3795  0108  087F               	movf	127,w
  3796  0109  07AD               	addwf	sprintf@ap,f
  3797                           
  3798                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  3799  010A  1FAF               	btfss	sprintf@val+1,7
  3800  010B  2922               	goto	l3650
  3801                           
  3802                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  3803  010C  3003               	movlw	3
  3804  010D  00FF               	movwf	127
  3805  010E  087F               	movf	127,w
  3806  010F  04B0               	iorwf	sprintf@flag,f
  3807                           
  3808                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  3809  0110  09AE               	comf	sprintf@val,f
  3810  0111  09AF               	comf	sprintf@val+1,f
  3811  0112  0AAE               	incf	sprintf@val,f
  3812  0113  1903               	skipnz
  3813  0114  0AAF               	incf	sprintf@val+1,f
  3814  0115  2922               	goto	l3650
  3815  0116                     l3646:
  3816                           
  3817                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3818  0116  082D               	movf	sprintf@ap,w
  3819  0117  0084               	movwf	4
  3820  0118  1383               	bcf	3,7	;select IRP bank0
  3821  0119  0800               	movf	0,w
  3822  011A  00AE               	movwf	sprintf@val
  3823  011B  0A84               	incf	4,f
  3824  011C  0800               	movf	0,w
  3825  011D  00AF               	movwf	sprintf@val+1
  3826  011E  3002               	movlw	2
  3827  011F  00FF               	movwf	127
  3828  0120  087F               	movf	127,w
  3829  0121  07AD               	addwf	sprintf@ap,f
  3830  0122                     l3650:
  3831                           
  3832                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3833  0122  01B4               	clrf	sprintf@c
  3834  0123  0AB4               	incf	sprintf@c,f
  3835  0124                     l3656:
  3836                           
  3837                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3838  0124  0834               	movf	sprintf@c,w
  3839  0125  00A9               	movwf	??_sprintf
  3840  0126  0729               	addwf	??_sprintf,w
  3841  0127  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3842  0128  0084               	movwf	4
  3843  0129  120A  118A  270A  120A  118A  	fcall	stringdir
  3844  012E  00AA               	movwf	??_sprintf+1
  3845  012F  120A  118A  270A  120A  118A  	fcall	stringdir
  3846  0134  00AB               	movwf	??_sprintf+2
  3847  0135  082B               	movf	??_sprintf+2,w
  3848  0136  022F               	subwf	sprintf@val+1,w
  3849  0137  1D03               	skipz
  3850  0138  293B               	goto	u3675
  3851  0139  082A               	movf	??_sprintf+1,w
  3852  013A  022E               	subwf	sprintf@val,w
  3853  013B                     u3675:
  3854  013B  1C03               	btfss	3,0
  3855  013C  2945               	goto	l3664
  3856  013D  3001               	movlw	1
  3857  013E  00FF               	movwf	127
  3858  013F  087F               	movf	127,w
  3859  0140  07B4               	addwf	sprintf@c,f
  3860  0141  3005               	movlw	5
  3861  0142  0634               	xorwf	sprintf@c,w
  3862  0143  1D03               	btfss	3,2
  3863  0144  2924               	goto	l3656
  3864  0145                     l3664:
  3865                           
  3866                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  3867  0145  0831               	movf	sprintf@width,w
  3868  0146  0432               	iorwf	sprintf@width+1,w
  3869  0147  1903               	btfsc	3,2
  3870  0148  2953               	goto	l597
  3871  0149  0830               	movf	sprintf@flag,w
  3872  014A  3903               	andlw	3
  3873  014B  1903               	btfsc	3,2
  3874  014C  2953               	goto	l597
  3875                           
  3876                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1372:    width--;
  3877  014D  30FF               	movlw	255
  3878  014E  07B1               	addwf	sprintf@width,f
  3879  014F  1803               	skipnc
  3880  0150  0AB2               	incf	sprintf@width+1,f
  3881  0151  30FF               	movlw	255
  3882  0152  07B2               	addwf	sprintf@width+1,f
  3883  0153                     l597:
  3884                           
  3885                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  3886  0153  0832               	movf	sprintf@width+1,w
  3887  0154  3A80               	xorlw	128
  3888  0155  3C80               	sublw	128
  3889  0156  1D03               	skipz
  3890  0157  295A               	goto	u3715
  3891  0158  0831               	movf	sprintf@width,w
  3892  0159  0234               	subwf	sprintf@c,w
  3893  015A                     u3715:
  3894  015A  1803               	skipnc
  3895  015B  2968               	goto	l3672
  3896                           
  3897                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  3898  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3899  015D  1303               	bcf	3,6	;RP1=0, select bank0
  3900  015E  0834               	movf	sprintf@c,w
  3901  015F  00A9               	movwf	??_sprintf
  3902  0160  01AA               	clrf	??_sprintf+1
  3903  0161  0829               	movf	??_sprintf,w
  3904  0162  02B1               	subwf	sprintf@width,f
  3905  0163  082A               	movf	??_sprintf+1,w
  3906  0164  1C03               	skipc
  3907  0165  03B2               	decf	sprintf@width+1,f
  3908  0166  02B2               	subwf	sprintf@width+1,f
  3909  0167  296C               	goto	l3674
  3910  0168                     l3672:
  3911                           
  3912                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  3913  0168  1283               	bcf	3,5	;RP0=0, select bank0
  3914  0169  1303               	bcf	3,6	;RP1=0, select bank0
  3915  016A  01B1               	clrf	sprintf@width
  3916  016B  01B2               	clrf	sprintf@width+1
  3917  016C                     l3674:
  3918                           
  3919                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  3920  016C  1D30               	btfss	sprintf@flag,2
  3921  016D  2993               	goto	l3690
  3922                           
  3923                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  3924  016E  0830               	movf	sprintf@flag,w
  3925  016F  3903               	andlw	3
  3926  0170  1903               	btfsc	3,2
  3927  0171  297D               	goto	l3682
  3928                           
  3929                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  3930  0172  302D               	movlw	45
  3931  0173  00FF               	movwf	127
  3932  0174  0833               	movf	sprintf@sp,w
  3933  0175  0084               	movwf	4
  3934  0176  087F               	movf	127,w
  3935  0177  1383               	bcf	3,7	;select IRP bank0
  3936  0178  0080               	movwf	0
  3937  0179  3001               	movlw	1
  3938  017A  00FF               	movwf	127
  3939  017B  087F               	movf	127,w
  3940  017C  07B3               	addwf	sprintf@sp,f
  3941  017D                     l3682:
  3942                           
  3943                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  3944  017D  0831               	movf	sprintf@width,w
  3945  017E  0432               	iorwf	sprintf@width+1,w
  3946  017F  1903               	btfsc	3,2
  3947  0180  29BB               	goto	l3704
  3948                           
  3949                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  3950  0181  3030               	movlw	48
  3951  0182  00FF               	movwf	127
  3952  0183  0833               	movf	sprintf@sp,w
  3953  0184  0084               	movwf	4
  3954  0185  087F               	movf	127,w
  3955  0186  1383               	bcf	3,7	;select IRP bank0
  3956  0187  0080               	movwf	0
  3957  0188  3001               	movlw	1
  3958  0189  00FF               	movwf	127
  3959  018A  087F               	movf	127,w
  3960  018B  07B3               	addwf	sprintf@sp,f
  3961  018C  30FF               	movlw	255
  3962  018D  07B1               	addwf	sprintf@width,f
  3963  018E  1803               	skipnc
  3964  018F  0AB2               	incf	sprintf@width+1,f
  3965  0190  30FF               	movlw	255
  3966  0191  07B2               	addwf	sprintf@width+1,f
  3967  0192  297D               	goto	l3682
  3968  0193                     l3690:
  3969                           
  3970                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1450:    if(width
  3971  0193  0831               	movf	sprintf@width,w
  3972  0194  0432               	iorwf	sprintf@width+1,w
  3973  0195  1903               	btfsc	3,2
  3974  0196  29AC               	goto	l3698
  3975  0197                     l3692:
  3976                           
  3977                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  3978  0197  3020               	movlw	32
  3979  0198  00FF               	movwf	127
  3980  0199  0833               	movf	sprintf@sp,w
  3981  019A  0084               	movwf	4
  3982  019B  087F               	movf	127,w
  3983  019C  1383               	bcf	3,7	;select IRP bank0
  3984  019D  0080               	movwf	0
  3985  019E  3001               	movlw	1
  3986  019F  00FF               	movwf	127
  3987  01A0  087F               	movf	127,w
  3988  01A1  07B3               	addwf	sprintf@sp,f
  3989  01A2  30FF               	movlw	255
  3990  01A3  07B1               	addwf	sprintf@width,f
  3991  01A4  1803               	skipnc
  3992  01A5  0AB2               	incf	sprintf@width+1,f
  3993  01A6  30FF               	movlw	255
  3994  01A7  07B2               	addwf	sprintf@width+1,f
  3995  01A8  0831               	movf	sprintf@width,w
  3996  01A9  0432               	iorwf	sprintf@width+1,w
  3997  01AA  1D03               	btfss	3,2
  3998  01AB  2997               	goto	l3692
  3999  01AC                     l3698:
  4000                           
  4001                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  4002  01AC  0830               	movf	sprintf@flag,w
  4003  01AD  3903               	andlw	3
  4004  01AE  1903               	btfsc	3,2
  4005  01AF  29BB               	goto	l3704
  4006                           
  4007                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4008  01B0  302D               	movlw	45
  4009  01B1  00FF               	movwf	127
  4010  01B2  0833               	movf	sprintf@sp,w
  4011  01B3  0084               	movwf	4
  4012  01B4  087F               	movf	127,w
  4013  01B5  1383               	bcf	3,7	;select IRP bank0
  4014  01B6  0080               	movwf	0
  4015  01B7  3001               	movlw	1
  4016  01B8  00FF               	movwf	127
  4017  01B9  087F               	movf	127,w
  4018  01BA  07B3               	addwf	sprintf@sp,f
  4019  01BB                     l3704:
  4020                           
  4021                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  4022  01BB  0834               	movf	sprintf@c,w
  4023  01BC  00FF               	movwf	127
  4024  01BD  087F               	movf	127,w
  4025  01BE  00AC               	movwf	sprintf@prec
  4026  01BF                     l3712:	
  4027                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4028                           
  4029                           
  4030                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4031  01BF  30FF               	movlw	255
  4032  01C0  00FF               	movwf	127
  4033  01C1  087F               	movf	127,w
  4034  01C2  07AC               	addwf	sprintf@prec,f
  4035  01C3  0A2C               	incf	sprintf@prec,w
  4036  01C4  1903               	btfsc	3,2
  4037  01C5  284F               	goto	l3714
  4038                           
  4039                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4040  01C6  300A               	movlw	10
  4041  01C7  00A0               	movwf	___lwmod@divisor
  4042  01C8  3000               	movlw	0
  4043  01C9  00A1               	movwf	___lwmod@divisor+1
  4044  01CA  082C               	movf	sprintf@prec,w
  4045  01CB  00A9               	movwf	??_sprintf
  4046  01CC  0729               	addwf	??_sprintf,w
  4047  01CD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4048  01CE  0084               	movwf	4
  4049  01CF  120A  118A  270A  120A  118A  	fcall	stringdir
  4050  01D4  00F2               	movwf	___lwdiv@divisor
  4051  01D5  120A  118A  270A  120A  118A  	fcall	stringdir
  4052  01DA  00F3               	movwf	___lwdiv@divisor+1
  4053  01DB  082F               	movf	sprintf@val+1,w
  4054  01DC  00F5               	movwf	___lwdiv@dividend+1
  4055  01DD  082E               	movf	sprintf@val,w
  4056  01DE  00F4               	movwf	___lwdiv@dividend
  4057  01DF  120A  158A  21D8  120A  118A  	fcall	___lwdiv
  4058  01E4  0873               	movf	?___lwdiv+1,w
  4059  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  4060  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  4061  01E7  00A3               	movwf	___lwmod@dividend+1
  4062  01E8  0872               	movf	?___lwdiv,w
  4063  01E9  00A2               	movwf	___lwmod@dividend
  4064  01EA  120A  158A  216F  120A  118A  	fcall	___lwmod
  4065  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  4066  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  4067  01F1  0820               	movf	?___lwmod,w
  4068  01F2  3E30               	addlw	48
  4069  01F3  00FF               	movwf	127
  4070  01F4  087F               	movf	127,w
  4071  01F5  00B4               	movwf	sprintf@c
  4072                           
  4073                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  4074  01F6  0834               	movf	sprintf@c,w
  4075  01F7  00FF               	movwf	127
  4076  01F8  0833               	movf	sprintf@sp,w
  4077  01F9  0084               	movwf	4
  4078  01FA  087F               	movf	127,w
  4079  01FB  1383               	bcf	3,7	;select IRP bank0
  4080  01FC  0080               	movwf	0
  4081  01FD  3001               	movlw	1
  4082  01FE  00FF               	movwf	127
  4083  01FF  087F               	movf	127,w
  4084  0200  07B3               	addwf	sprintf@sp,f
  4085  0201  29BF               	goto	l3712
  4086  0202                     l3716:
  4087                           
  4088                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4089  0202  0833               	movf	sprintf@sp,w
  4090  0203  0084               	movwf	4
  4091  0204  1383               	bcf	3,7	;select IRP bank0
  4092  0205  0180               	clrf	0
  4093  0206  0008               	return
  4094  0207                     __end_of_sprintf:
  4095                           
  4096                           	psect	text14
  4097  17E1                     __ptext14:	
  4098 ;; *************** function _isdigit *****************
  4099 ;; Defined at:
  4100 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\isdigit.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  c               1    wreg     unsigned char 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  c               1    3[COMMON] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;		None               void
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4114 ;;      Params:         0       0       0       0       0
  4115 ;;      Locals:         2       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0
  4117 ;;      Totals:         2       0       0       0       0
  4118 ;;Total ram usage:        2 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    2
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_sprintf
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function _isdigit
  4130  17E1                     _isdigit:
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4134                           ;isdigit@c stored from wreg
  4135  17E1  00F3               	movwf	isdigit@c
  4136  17E2  01F2               	clrf	_isdigit$1119
  4137  17E3  303A               	movlw	58
  4138  17E4  0273               	subwf	isdigit@c,w
  4139  17E5  1803               	skipnc
  4140  17E6  2FED               	goto	l2348
  4141  17E7  3030               	movlw	48
  4142  17E8  0273               	subwf	isdigit@c,w
  4143  17E9  1C03               	skipc
  4144  17EA  2FED               	goto	l2348
  4145  17EB  01F2               	clrf	_isdigit$1119
  4146  17EC  0AF2               	incf	_isdigit$1119,f
  4147  17ED                     l2348:
  4148  17ED  0C72               	rrf	_isdigit$1119,w
  4149  17EE  0008               	return
  4150  17EF                     __end_of_isdigit:
  4151                           
  4152                           	psect	text15
  4153  096F                     __ptext15:	
  4154 ;; *************** function ___lwmod *****************
  4155 ;; Defined at:
  4156 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwmod.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  divisor         2    0[BANK0 ] unsigned int 
  4159 ;;  dividend        2    2[BANK0 ] unsigned int 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  counter         1    4[BANK0 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  2    0[BANK0 ] unsigned int 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0, btemp+1
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4171 ;;      Params:         0       4       0       0       0
  4172 ;;      Locals:         0       1       0       0       0
  4173 ;;      Temps:          0       0       0       0       0
  4174 ;;      Totals:         0       5       0       0       0
  4175 ;;Total ram usage:        5 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    2
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_sprintf
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           
  4186                           ;psect for function ___lwmod
  4187  096F                     ___lwmod:
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  4191  096F  1283               	bcf	3,5	;RP0=0, select bank0
  4192  0970  1303               	bcf	3,6	;RP1=0, select bank0
  4193  0971  0820               	movf	___lwmod@divisor,w
  4194  0972  0421               	iorwf	___lwmod@divisor+1,w
  4195  0973  1903               	btfsc	3,2
  4196  0974  299E               	goto	l3524
  4197  0975  01A4               	clrf	___lwmod@counter
  4198  0976  0AA4               	incf	___lwmod@counter,f
  4199  0977                     l3514:
  4200  0977  1BA1               	btfsc	___lwmod@divisor+1,7
  4201  0978  2985               	goto	l3516
  4202  0979  3001               	movlw	1
  4203  097A                     u3515:
  4204  097A  1003               	clrc
  4205  097B  0DA0               	rlf	___lwmod@divisor,f
  4206  097C  0DA1               	rlf	___lwmod@divisor+1,f
  4207  097D  3EFF               	addlw	-1
  4208  097E  1D03               	skipz
  4209  097F  297A               	goto	u3515
  4210  0980  3001               	movlw	1
  4211  0981  00FF               	movwf	127
  4212  0982  087F               	movf	127,w
  4213  0983  07A4               	addwf	___lwmod@counter,f
  4214  0984  2977               	goto	l3514
  4215  0985                     l3516:
  4216  0985  0821               	movf	___lwmod@divisor+1,w
  4217  0986  0223               	subwf	___lwmod@dividend+1,w
  4218  0987  1D03               	skipz
  4219  0988  298B               	goto	u3535
  4220  0989  0820               	movf	___lwmod@divisor,w
  4221  098A  0222               	subwf	___lwmod@dividend,w
  4222  098B                     u3535:
  4223  098B  1C03               	skipc
  4224  098C  2993               	goto	l3520
  4225  098D  0820               	movf	___lwmod@divisor,w
  4226  098E  02A2               	subwf	___lwmod@dividend,f
  4227  098F  0821               	movf	___lwmod@divisor+1,w
  4228  0990  1C03               	skipc
  4229  0991  03A3               	decf	___lwmod@dividend+1,f
  4230  0992  02A3               	subwf	___lwmod@dividend+1,f
  4231  0993                     l3520:
  4232  0993  3001               	movlw	1
  4233  0994                     u3545:
  4234  0994  1003               	clrc
  4235  0995  0CA1               	rrf	___lwmod@divisor+1,f
  4236  0996  0CA0               	rrf	___lwmod@divisor,f
  4237  0997  3EFF               	addlw	-1
  4238  0998  1D03               	skipz
  4239  0999  2994               	goto	u3545
  4240  099A  3001               	movlw	1
  4241  099B  02A4               	subwf	___lwmod@counter,f
  4242  099C  1D03               	btfss	3,2
  4243  099D  2985               	goto	l3516
  4244  099E                     l3524:
  4245  099E  0823               	movf	___lwmod@dividend+1,w
  4246  099F  00A1               	movwf	?___lwmod+1
  4247  09A0  0822               	movf	___lwmod@dividend,w
  4248  09A1  00A0               	movwf	?___lwmod
  4249  09A2  0008               	return
  4250  09A3                     __end_of___lwmod:
  4251                           
  4252                           	psect	text16
  4253  0E2D                     __ptext16:	
  4254 ;; *************** function _Pant_Modos *****************
  4255 ;; Defined at:
  4256 ;;		line 64 in file "Display_Lcd.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4270 ;;      Params:         0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    4
  4277 ;; This function calls:
  4278 ;;		_LCD_array
  4279 ;;		_LCD_command
  4280 ;;		_LCD_date
  4281 ;;		_LCD_xy
  4282 ;; This function is called by:
  4283 ;;		_MEF_Subest_Actualizacion
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _Pant_Modos
  4289  0E2D                     _Pant_Modos:
  4290                           
  4291                           ;Display_Lcd.c: 66:     LCD_command(0x01);
  4292                           
  4293                           ;incstack = 0
  4294                           ; Regs used in _Pant_Modos: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4295  0E2D  3001               	movlw	1
  4296  0E2E  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  4297                           
  4298                           ;Display_Lcd.c: 67:     LCD_array(1,1,"RPM:");
  4299  0E33  3001               	movlw	1
  4300  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  4301  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  4302  0E36  00A0               	movwf	LCD_array@x
  4303  0E37  3000               	movlw	0
  4304  0E38  00A1               	movwf	LCD_array@x+1
  4305  0E39  3001               	movlw	1
  4306  0E3A  00A2               	movwf	LCD_array@y
  4307  0E3B  3000               	movlw	0
  4308  0E3C  00A3               	movwf	LCD_array@y+1
  4309  0E3D  3085               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  4310  0E3E  00A4               	movwf	LCD_array@date
  4311  0E3F  3080               	movlw	128
  4312  0E40  00A5               	movwf	LCD_array@date+1
  4313  0E41  120A  158A  2361  120A  158A  	fcall	_LCD_array
  4314                           
  4315                           ;Display_Lcd.c: 68:     LCD_array(2,1,"PWM:");
  4316  0E46  3002               	movlw	2
  4317  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  4318  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  4319  0E49  00A0               	movwf	LCD_array@x
  4320  0E4A  3000               	movlw	0
  4321  0E4B  00A1               	movwf	LCD_array@x+1
  4322  0E4C  3001               	movlw	1
  4323  0E4D  00A2               	movwf	LCD_array@y
  4324  0E4E  3000               	movlw	0
  4325  0E4F  00A3               	movwf	LCD_array@y+1
  4326  0E50  308A               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  4327  0E51  00A4               	movwf	LCD_array@date
  4328  0E52  3080               	movlw	128
  4329  0E53  00A5               	movwf	LCD_array@date+1
  4330  0E54  120A  158A  2361  120A  158A  	fcall	_LCD_array
  4331                           
  4332                           ;Display_Lcd.c: 69:     LCD_array(3,1,"TIEMPO:"),LCD_array(3,10,":");
  4333  0E59  3003               	movlw	3
  4334  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  4335  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  4336  0E5C  00A0               	movwf	LCD_array@x
  4337  0E5D  3000               	movlw	0
  4338  0E5E  00A1               	movwf	LCD_array@x+1
  4339  0E5F  3001               	movlw	1
  4340  0E60  00A2               	movwf	LCD_array@y
  4341  0E61  3000               	movlw	0
  4342  0E62  00A3               	movwf	LCD_array@y+1
  4343  0E63  3077               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  4344  0E64  00A4               	movwf	LCD_array@date
  4345  0E65  3080               	movlw	128
  4346  0E66  00A5               	movwf	LCD_array@date+1
  4347  0E67  120A  158A  2361  120A  158A  	fcall	_LCD_array
  4348  0E6C  3003               	movlw	3
  4349  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  4350  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  4351  0E6F  00A0               	movwf	LCD_array@x
  4352  0E70  3000               	movlw	0
  4353  0E71  00A1               	movwf	LCD_array@x+1
  4354  0E72  300A               	movlw	10
  4355  0E73  00A2               	movwf	LCD_array@y
  4356  0E74  3000               	movlw	0
  4357  0E75  00A3               	movwf	LCD_array@y+1
  4358  0E76  3075               	movlw	(low (((STR_22+11)-__stringbase)| (0+32768)))& (0+255)
  4359  0E77  00A4               	movwf	LCD_array@date
  4360  0E78  3080               	movlw	128
  4361  0E79  00A5               	movwf	LCD_array@date+1
  4362  0E7A  120A  158A  2361  120A  158A  	fcall	_LCD_array
  4363                           
  4364                           ;Display_Lcd.c: 70:     LCD_array(4,1,"TEMPERATURA:"),LCD_xy(4,16),LCD_date(0x01);
  4365  0E7F  3004               	movlw	4
  4366  0E80  1283               	bcf	3,5	;RP0=0, select bank0
  4367  0E81  1303               	bcf	3,6	;RP1=0, select bank0
  4368  0E82  00A0               	movwf	LCD_array@x
  4369  0E83  3000               	movlw	0
  4370  0E84  00A1               	movwf	LCD_array@x+1
  4371  0E85  3001               	movlw	1
  4372  0E86  00A2               	movwf	LCD_array@y
  4373  0E87  3000               	movlw	0
  4374  0E88  00A3               	movwf	LCD_array@y+1
  4375  0E89  306A               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  4376  0E8A  00A4               	movwf	LCD_array@date
  4377  0E8B  3080               	movlw	128
  4378  0E8C  00A5               	movwf	LCD_array@date+1
  4379  0E8D  120A  158A  2361  120A  158A  	fcall	_LCD_array
  4380  0E92  3004               	movlw	4
  4381  0E93  00F5               	movwf	LCD_xy@x
  4382  0E94  3000               	movlw	0
  4383  0E95  00F6               	movwf	LCD_xy@x+1
  4384  0E96  3010               	movlw	16
  4385  0E97  00F7               	movwf	LCD_xy@y
  4386  0E98  3000               	movlw	0
  4387  0E99  00F8               	movwf	LCD_xy@y+1
  4388  0E9A  120A  158A  213E  120A  158A  	fcall	_LCD_xy
  4389  0E9F  3001               	movlw	1
  4390  0EA0  120A  118A  2570  120A  158A  	fcall	_LCD_date
  4391                           
  4392                           ;Display_Lcd.c: 71:     LCD_array(4,17,"C");
  4393  0EA5  3004               	movlw	4
  4394  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  4395  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  4396  0EA8  00A0               	movwf	LCD_array@x
  4397  0EA9  3000               	movlw	0
  4398  0EAA  00A1               	movwf	LCD_array@x+1
  4399  0EAB  3011               	movlw	17
  4400  0EAC  00A2               	movwf	LCD_array@y
  4401  0EAD  3000               	movlw	0
  4402  0EAE  00A3               	movwf	LCD_array@y+1
  4403  0EAF  30A0               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  4404  0EB0  00A4               	movwf	LCD_array@date
  4405  0EB1  3080               	movlw	128
  4406  0EB2  00A5               	movwf	LCD_array@date+1
  4407  0EB3  120A  158A  2361   	fcall	_LCD_array
  4408  0EB6  0008               	return
  4409  0EB7                     __end_of_Pant_Modos:
  4410                           
  4411                           	psect	text17
  4412  093E                     __ptext17:	
  4413 ;; *************** function _LCD_xy *****************
  4414 ;; Defined at:
  4415 ;;		line 163 in file "Lcd.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  x               2    5[COMMON] int 
  4418 ;;  y               2    7[COMMON] int 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      void 
  4423 ;; Registers used:
  4424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4430 ;;      Params:         4       0       0       0       0
  4431 ;;      Locals:         0       0       0       0       0
  4432 ;;      Temps:          0       0       0       0       0
  4433 ;;      Totals:         4       0       0       0       0
  4434 ;;Total ram usage:        4 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    3
  4437 ;; This function calls:
  4438 ;;		_LCD_command
  4439 ;; This function is called by:
  4440 ;;		_Pant_Modos
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _LCD_xy
  4446  093E                     _LCD_xy:
  4447                           
  4448                           ;Lcd.c: 163: void LCD_xy(int x,int y);Lcd.c: 164: {;Lcd.c: 165:     switch(x)
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _LCD_xy: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4452  093E  295B               	goto	l2654
  4453  093F                     l2644:
  4454  093F  0877               	movf	LCD_xy@y,w
  4455  0940  3EFF               	addlw	255
  4456  0941  3880               	iorlw	128
  4457  0942  120A  118A  24B6   	fcall	_LCD_command
  4458                           
  4459                           ;Lcd.c: 168:         break;
  4460  0945  0008               	return
  4461  0946                     l2646:
  4462  0946  0877               	movf	LCD_xy@y,w
  4463  0947  3E3F               	addlw	63
  4464  0948  3880               	iorlw	128
  4465  0949  120A  118A  24B6   	fcall	_LCD_command
  4466                           
  4467                           ;Lcd.c: 170:         break;
  4468  094C  0008               	return
  4469  094D                     l2648:
  4470  094D  0877               	movf	LCD_xy@y,w
  4471  094E  3E13               	addlw	19
  4472  094F  3880               	iorlw	128
  4473  0950  120A  118A  24B6   	fcall	_LCD_command
  4474                           
  4475                           ;Lcd.c: 172:         break;
  4476  0953  0008               	return
  4477  0954                     l2650:
  4478  0954  0877               	movf	LCD_xy@y,w
  4479  0955  3E53               	addlw	83
  4480  0956  3880               	iorlw	128
  4481  0957  120A  118A  24B6   	fcall	_LCD_command
  4482                           
  4483                           ;Lcd.c: 174:         break;
  4484  095A  0008               	return
  4485  095B                     l2654:
  4486                           
  4487                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4488                           ; Switch size 1, requested type "simple"
  4489                           ; Number of cases is 1, Range of values is 0 to 0
  4490                           ; switch strategies available:
  4491                           ; Name         Instructions Cycles
  4492                           ; simple_byte            4     3 (average)
  4493                           ; direct_byte           11     8 (fixed)
  4494                           ; jumptable            260     6 (fixed)
  4495                           ;	Chosen strategy is simple_byte
  4496  095B  0876               	movf	LCD_xy@x+1,w
  4497  095C  3A00               	xorlw	0	; case 0
  4498  095D  1903               	skipnz
  4499  095E  2960               	goto	l4174
  4500  095F  296E               	goto	l354
  4501  0960                     l4174:
  4502                           
  4503                           ; Switch size 1, requested type "simple"
  4504                           ; Number of cases is 4, Range of values is 1 to 4
  4505                           ; switch strategies available:
  4506                           ; Name         Instructions Cycles
  4507                           ; simple_byte           13     7 (average)
  4508                           ; direct_byte           23    11 (fixed)
  4509                           ; jumptable            263     9 (fixed)
  4510                           ;	Chosen strategy is simple_byte
  4511  0960  0875               	movf	LCD_xy@x,w
  4512  0961  3A01               	xorlw	1	; case 1
  4513  0962  1903               	skipnz
  4514  0963  293F               	goto	l2644
  4515  0964  3A03               	xorlw	3	; case 2
  4516  0965  1903               	skipnz
  4517  0966  2946               	goto	l2646
  4518  0967  3A01               	xorlw	1	; case 3
  4519  0968  1903               	skipnz
  4520  0969  294D               	goto	l2648
  4521  096A  3A07               	xorlw	7	; case 4
  4522  096B  1903               	skipnz
  4523  096C  2954               	goto	l2650
  4524  096D  296E               	goto	l354
  4525  096E                     l354:
  4526  096E  0008               	return
  4527  096F                     __end_of_LCD_xy:
  4528                           
  4529                           	psect	text18
  4530  0B61                     __ptext18:	
  4531 ;; *************** function _LCD_array *****************
  4532 ;; Defined at:
  4533 ;;		line 137 in file "Lcd.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  x               2    0[BANK0 ] int 
  4536 ;;  y               2    2[BANK0 ] int 
  4537 ;;  date            2    4[BANK0 ] PTR unsigned char 
  4538 ;;		 -> Pant_Val_Act@buffer(20), STR_23(2), STR_22(13), STR_21(2), 
  4539 ;;		 -> STR_20(8), STR_19(5), STR_18(5), STR_17(18), 
  4540 ;;		 -> STR_16(6), STR_15(5), STR_14(14), STR_13(2), 
  4541 ;;		 -> STR_12(2), STR_11(2), STR_10(2), STR_9(2), 
  4542 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(2), 
  4543 ;;		 -> STR_4(21), STR_3(21), STR_2(21), STR_1(21), 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4555 ;;      Params:         0       6       0       0       0
  4556 ;;      Locals:         0       0       0       0       0
  4557 ;;      Temps:          2       0       0       0       0
  4558 ;;      Totals:         2       6       0       0       0
  4559 ;;Total ram usage:        8 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    3
  4562 ;; This function calls:
  4563 ;;		_LCD_command
  4564 ;;		_LCD_date
  4565 ;; This function is called by:
  4566 ;;		_Pant_Inicio
  4567 ;;		_Pant_Selector
  4568 ;;		_Pant_Menu
  4569 ;;		_Pant_Modos
  4570 ;;		_Pant_Val_Act
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _LCD_array
  4576  0B61                     _LCD_array:
  4577                           
  4578                           ;Lcd.c: 137: void LCD_array(int x,int y,char *date);Lcd.c: 138: {;Lcd.c: 140:     switch
      +                          (x)
  4579                           
  4580                           ;incstack = 0
  4581                           ; Regs used in _LCD_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4582  0B61  2B86               	goto	l3590
  4583  0B62                     l3580:
  4584  0B62  0822               	movf	LCD_array@y,w
  4585  0B63  3EFF               	addlw	255
  4586  0B64  3880               	iorlw	128
  4587  0B65  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  4588                           
  4589                           ;Lcd.c: 143:         break;
  4590  0B6A  2BB9               	goto	l3598
  4591  0B6B                     l3582:
  4592  0B6B  0822               	movf	LCD_array@y,w
  4593  0B6C  3E3F               	addlw	63
  4594  0B6D  3880               	iorlw	128
  4595  0B6E  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  4596                           
  4597                           ;Lcd.c: 145:         break;
  4598  0B73  2BB9               	goto	l3598
  4599  0B74                     l3584:
  4600  0B74  0822               	movf	LCD_array@y,w
  4601  0B75  3E13               	addlw	19
  4602  0B76  3880               	iorlw	128
  4603  0B77  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  4604                           
  4605                           ;Lcd.c: 147:         break;
  4606  0B7C  2BB9               	goto	l3598
  4607  0B7D                     l3586:
  4608  0B7D  0822               	movf	LCD_array@y,w
  4609  0B7E  3E53               	addlw	83
  4610  0B7F  3880               	iorlw	128
  4611  0B80  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  4612                           
  4613                           ;Lcd.c: 149:         break;
  4614  0B85  2BB9               	goto	l3598
  4615  0B86                     l3590:
  4616                           
  4617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4618                           ; Switch size 1, requested type "simple"
  4619                           ; Number of cases is 1, Range of values is 0 to 0
  4620                           ; switch strategies available:
  4621                           ; Name         Instructions Cycles
  4622                           ; simple_byte            4     3 (average)
  4623                           ; direct_byte           11     8 (fixed)
  4624                           ; jumptable            260     6 (fixed)
  4625                           ;	Chosen strategy is simple_byte
  4626  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0B88  0821               	movf	LCD_array@x+1,w
  4629  0B89  3A00               	xorlw	0	; case 0
  4630  0B8A  1903               	skipnz
  4631  0B8B  2B8D               	goto	l4176
  4632  0B8C  2BB9               	goto	l3598
  4633  0B8D                     l4176:
  4634                           
  4635                           ; Switch size 1, requested type "simple"
  4636                           ; Number of cases is 4, Range of values is 1 to 4
  4637                           ; switch strategies available:
  4638                           ; Name         Instructions Cycles
  4639                           ; simple_byte           13     7 (average)
  4640                           ; direct_byte           23    11 (fixed)
  4641                           ; jumptable            263     9 (fixed)
  4642                           ;	Chosen strategy is simple_byte
  4643  0B8D  0820               	movf	LCD_array@x,w
  4644  0B8E  3A01               	xorlw	1	; case 1
  4645  0B8F  1903               	skipnz
  4646  0B90  2B62               	goto	l3580
  4647  0B91  3A03               	xorlw	3	; case 2
  4648  0B92  1903               	skipnz
  4649  0B93  2B6B               	goto	l3582
  4650  0B94  3A01               	xorlw	1	; case 3
  4651  0B95  1903               	skipnz
  4652  0B96  2B74               	goto	l3584
  4653  0B97  3A07               	xorlw	7	; case 4
  4654  0B98  1903               	skipnz
  4655  0B99  2B7D               	goto	l3586
  4656  0B9A  2BB9               	goto	l3598
  4657  0B9B                     l3592:
  4658                           
  4659                           ;Lcd.c: 154:     {;Lcd.c: 155:         LCD_date(*date);
  4660  0B9B  0825               	movf	LCD_array@date+1,w
  4661  0B9C  00FF               	movwf	127
  4662  0B9D  0824               	movf	LCD_array@date,w
  4663  0B9E  0084               	movwf	4
  4664  0B9F  120A  118A  2700  120A  158A  	fcall	stringtab
  4665  0BA4  120A  118A  2570  120A  158A  	fcall	_LCD_date
  4666                           
  4667                           ;Lcd.c: 156:         _delay((unsigned long)((1)*(20000000/4000.0)));
  4668  0BA9  3007               	movlw	7
  4669  0BAA  00F6               	movwf	??_LCD_array+1
  4670  0BAB  307D               	movlw	125
  4671  0BAC  00F5               	movwf	??_LCD_array
  4672  0BAD                     u4297:
  4673  0BAD  0BF5               	decfsz	??_LCD_array,f
  4674  0BAE  2BAD               	goto	u4297
  4675  0BAF  0BF6               	decfsz	??_LCD_array+1,f
  4676  0BB0  2BAD               	goto	u4297
  4677                           
  4678                           ;Lcd.c: 157:         date++;
  4679  0BB1  3001               	movlw	1
  4680  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  4681  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  4682  0BB4  07A4               	addwf	LCD_array@date,f
  4683  0BB5  1803               	skipnc
  4684  0BB6  0AA5               	incf	LCD_array@date+1,f
  4685  0BB7  3000               	movlw	0
  4686  0BB8  07A5               	addwf	LCD_array@date+1,f
  4687  0BB9                     l3598:
  4688                           
  4689                           ;Lcd.c: 153:     while(*date)
  4690  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  4691  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  4692  0BBB  0825               	movf	LCD_array@date+1,w
  4693  0BBC  00FF               	movwf	127
  4694  0BBD  0824               	movf	LCD_array@date,w
  4695  0BBE  0084               	movwf	4
  4696  0BBF  120A  118A  2700  120A  158A  	fcall	stringtab
  4697  0BC4  3A00               	xorlw	0
  4698  0BC5  1903               	btfsc	3,2
  4699  0BC6  0008               	return
  4700  0BC7  2B9B               	goto	l3592
  4701  0BC8                     __end_of_LCD_array:
  4702                           
  4703                           	psect	text19
  4704  0570                     __ptext19:	
  4705 ;; *************** function _LCD_date *****************
  4706 ;; Defined at:
  4707 ;;		line 88 in file "Lcd.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  date            1    wreg     unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  date            1    4[COMMON] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4721 ;;      Params:         0       0       0       0       0
  4722 ;;      Locals:         1       0       0       0       0
  4723 ;;      Temps:          2       0       0       0       0
  4724 ;;      Totals:         3       0       0       0       0
  4725 ;;Total ram usage:        3 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    2
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_Pant_Modos
  4732 ;;		_LCD_array
  4733 ;;		_LCD_character
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           
  4738                           ;psect for function _LCD_date
  4739  0570                     _LCD_date:
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _LCD_date: [wreg+status,2+status,0]
  4743                           ;LCD_date@date stored from wreg
  4744  0570  00F4               	movwf	LCD_date@date
  4745                           
  4746                           ;Lcd.c: 88: void LCD_date(char date);Lcd.c: 89: {;Lcd.c: 91:     PORTCbits.RC4=0,PORTCbi
      +                          ts.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  4747  0571  1283               	bcf	3,5	;RP0=0, select bank0
  4748  0572  1303               	bcf	3,6	;RP1=0, select bank0
  4749  0573  1207               	bcf	7,4	;volatile
  4750  0574  1287               	bcf	7,5	;volatile
  4751  0575  1307               	bcf	7,6	;volatile
  4752  0576  1387               	bcf	7,7	;volatile
  4753                           
  4754                           ;Lcd.c: 94:     PORTCbits.RC4 = ((date >> 4) & 0x01);
  4755  0577  0874               	movf	LCD_date@date,w
  4756  0578  00F2               	movwf	??_LCD_date
  4757  0579  3004               	movlw	4
  4758  057A                     u1625:
  4759  057A  1003               	clrc
  4760  057B  0CF2               	rrf	??_LCD_date,f
  4761  057C  3EFF               	addlw	-1
  4762  057D  1D03               	skipz
  4763  057E  2D7A               	goto	u1625
  4764  057F  0872               	movf	??_LCD_date,w
  4765  0580  3901               	andlw	1
  4766  0581  00F3               	movwf	??_LCD_date+1
  4767  0582  0EF3               	swapf	??_LCD_date+1,f
  4768  0583  0807               	movf	7,w	;volatile
  4769  0584  0673               	xorwf	??_LCD_date+1,w
  4770  0585  39EF               	andlw	-17
  4771  0586  0673               	xorwf	??_LCD_date+1,w
  4772  0587  0087               	movwf	7	;volatile
  4773                           
  4774                           ;Lcd.c: 95:     PORTCbits.RC5 = ((date >> 5) & 0x01);
  4775  0588  0874               	movf	LCD_date@date,w
  4776  0589  00F2               	movwf	??_LCD_date
  4777  058A  3005               	movlw	5
  4778  058B                     u1635:
  4779  058B  1003               	clrc
  4780  058C  0CF2               	rrf	??_LCD_date,f
  4781  058D  3EFF               	addlw	-1
  4782  058E  1D03               	skipz
  4783  058F  2D8B               	goto	u1635
  4784  0590  0872               	movf	??_LCD_date,w
  4785  0591  3901               	andlw	1
  4786  0592  00F3               	movwf	??_LCD_date+1
  4787  0593  0EF3               	swapf	??_LCD_date+1,f
  4788  0594  0DF3               	rlf	??_LCD_date+1,f
  4789  0595  0807               	movf	7,w	;volatile
  4790  0596  0673               	xorwf	??_LCD_date+1,w
  4791  0597  39DF               	andlw	-33
  4792  0598  0673               	xorwf	??_LCD_date+1,w
  4793  0599  0087               	movwf	7	;volatile
  4794                           
  4795                           ;Lcd.c: 96:     PORTCbits.RC6 = ((date >> 6) & 0x01);
  4796  059A  0874               	movf	LCD_date@date,w
  4797  059B  00F2               	movwf	??_LCD_date
  4798  059C  3006               	movlw	6
  4799  059D                     u1645:
  4800  059D  1003               	clrc
  4801  059E  0CF2               	rrf	??_LCD_date,f
  4802  059F  3EFF               	addlw	-1
  4803  05A0  1D03               	skipz
  4804  05A1  2D9D               	goto	u1645
  4805  05A2  0872               	movf	??_LCD_date,w
  4806  05A3  3901               	andlw	1
  4807  05A4  00F3               	movwf	??_LCD_date+1
  4808  05A5  0EF3               	swapf	??_LCD_date+1,f
  4809  05A6  0DF3               	rlf	??_LCD_date+1,f
  4810  05A7  0DF3               	rlf	??_LCD_date+1,f
  4811  05A8  0807               	movf	7,w	;volatile
  4812  05A9  0673               	xorwf	??_LCD_date+1,w
  4813  05AA  39BF               	andlw	-65
  4814  05AB  0673               	xorwf	??_LCD_date+1,w
  4815  05AC  0087               	movwf	7	;volatile
  4816                           
  4817                           ;Lcd.c: 97:     PORTCbits.RC7 = ((date >> 7) & 0x01);
  4818  05AD  0874               	movf	LCD_date@date,w
  4819  05AE  00F2               	movwf	??_LCD_date
  4820  05AF  3007               	movlw	7
  4821  05B0                     u1655:
  4822  05B0  1003               	clrc
  4823  05B1  0CF2               	rrf	??_LCD_date,f
  4824  05B2  3EFF               	addlw	-1
  4825  05B3  1D03               	skipz
  4826  05B4  2DB0               	goto	u1655
  4827  05B5  0872               	movf	??_LCD_date,w
  4828  05B6  3901               	andlw	1
  4829  05B7  00F3               	movwf	??_LCD_date+1
  4830  05B8  0CF3               	rrf	??_LCD_date+1,f
  4831  05B9  0CF3               	rrf	??_LCD_date+1,f
  4832  05BA  0807               	movf	7,w	;volatile
  4833  05BB  0673               	xorwf	??_LCD_date+1,w
  4834  05BC  397F               	andlw	-129
  4835  05BD  0673               	xorwf	??_LCD_date+1,w
  4836  05BE  0087               	movwf	7	;volatile
  4837                           
  4838                           ;Lcd.c: 100:     PORTCbits.RC1 = 1;
  4839  05BF  1487               	bsf	7,1	;volatile
  4840                           
  4841                           ;Lcd.c: 101:     PORTCbits.RC3 = 0;
  4842  05C0  1187               	bcf	7,3	;volatile
  4843                           
  4844                           ;Lcd.c: 104:     PORTCbits.RC3 = 1;
  4845  05C1  1587               	bsf	7,3	;volatile
  4846                           
  4847                           ;Lcd.c: 105:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  4848  05C2  3018               	movlw	24
  4849  05C3  00F2               	movwf	??_LCD_date
  4850  05C4                     u4307:
  4851  05C4  0BF2               	decfsz	??_LCD_date,f
  4852  05C5  2DC4               	goto	u4307
  4853  05C6  2DC7               	nop2
  4854                           
  4855                           ;Lcd.c: 106:     PORTCbits.RC3 = 0;
  4856  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  4857  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  4858  05C9  1187               	bcf	7,3	;volatile
  4859                           
  4860                           ;Lcd.c: 107:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  4861  05CA  3018               	movlw	24
  4862  05CB  00F2               	movwf	??_LCD_date
  4863  05CC                     u4317:
  4864  05CC  0BF2               	decfsz	??_LCD_date,f
  4865  05CD  2DCC               	goto	u4317
  4866  05CE  2DCF               	nop2
  4867                           
  4868                           ;Lcd.c: 111:     PORTCbits.RC4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  4869  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  4870  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  4871  05D1  1207               	bcf	7,4	;volatile
  4872  05D2  1287               	bcf	7,5	;volatile
  4873  05D3  1307               	bcf	7,6	;volatile
  4874  05D4  1387               	bcf	7,7	;volatile
  4875                           
  4876                           ;Lcd.c: 114:     PORTCbits.RC4 = (date & 0x01);
  4877  05D5  0874               	movf	LCD_date@date,w
  4878  05D6  3901               	andlw	1
  4879  05D7  00F2               	movwf	??_LCD_date
  4880  05D8  0EF2               	swapf	??_LCD_date,f
  4881  05D9  0807               	movf	7,w	;volatile
  4882  05DA  0672               	xorwf	??_LCD_date,w
  4883  05DB  39EF               	andlw	-17
  4884  05DC  0672               	xorwf	??_LCD_date,w
  4885  05DD  0087               	movwf	7	;volatile
  4886                           
  4887                           ;Lcd.c: 115:     PORTCbits.RC5 = ((date >> 1) & 0x01);
  4888  05DE  0874               	movf	LCD_date@date,w
  4889  05DF  00F2               	movwf	??_LCD_date
  4890  05E0  1003               	clrc
  4891  05E1  0C72               	rrf	??_LCD_date,w
  4892  05E2  3901               	andlw	1
  4893  05E3  00F3               	movwf	??_LCD_date+1
  4894  05E4  0EF3               	swapf	??_LCD_date+1,f
  4895  05E5  0DF3               	rlf	??_LCD_date+1,f
  4896  05E6  0807               	movf	7,w	;volatile
  4897  05E7  0673               	xorwf	??_LCD_date+1,w
  4898  05E8  39DF               	andlw	-33
  4899  05E9  0673               	xorwf	??_LCD_date+1,w
  4900  05EA  0087               	movwf	7	;volatile
  4901                           
  4902                           ;Lcd.c: 116:     PORTCbits.RC6 = ((date >> 2) & 0x01);
  4903  05EB  0874               	movf	LCD_date@date,w
  4904  05EC  00F2               	movwf	??_LCD_date
  4905  05ED  3002               	movlw	2
  4906  05EE                     u1665:
  4907  05EE  1003               	clrc
  4908  05EF  0CF2               	rrf	??_LCD_date,f
  4909  05F0  3EFF               	addlw	-1
  4910  05F1  1D03               	skipz
  4911  05F2  2DEE               	goto	u1665
  4912  05F3  0872               	movf	??_LCD_date,w
  4913  05F4  3901               	andlw	1
  4914  05F5  00F3               	movwf	??_LCD_date+1
  4915  05F6  0EF3               	swapf	??_LCD_date+1,f
  4916  05F7  0DF3               	rlf	??_LCD_date+1,f
  4917  05F8  0DF3               	rlf	??_LCD_date+1,f
  4918  05F9  0807               	movf	7,w	;volatile
  4919  05FA  0673               	xorwf	??_LCD_date+1,w
  4920  05FB  39BF               	andlw	-65
  4921  05FC  0673               	xorwf	??_LCD_date+1,w
  4922  05FD  0087               	movwf	7	;volatile
  4923                           
  4924                           ;Lcd.c: 117:     PORTCbits.RC7 = ((date >> 3) & 0x01);
  4925  05FE  0874               	movf	LCD_date@date,w
  4926  05FF  00F2               	movwf	??_LCD_date
  4927  0600  3003               	movlw	3
  4928  0601                     u1675:
  4929  0601  1003               	clrc
  4930  0602  0CF2               	rrf	??_LCD_date,f
  4931  0603  3EFF               	addlw	-1
  4932  0604  1D03               	skipz
  4933  0605  2E01               	goto	u1675
  4934  0606  0872               	movf	??_LCD_date,w
  4935  0607  3901               	andlw	1
  4936  0608  00F3               	movwf	??_LCD_date+1
  4937  0609  0CF3               	rrf	??_LCD_date+1,f
  4938  060A  0CF3               	rrf	??_LCD_date+1,f
  4939  060B  0807               	movf	7,w	;volatile
  4940  060C  0673               	xorwf	??_LCD_date+1,w
  4941  060D  397F               	andlw	-129
  4942  060E  0673               	xorwf	??_LCD_date+1,w
  4943  060F  0087               	movwf	7	;volatile
  4944                           
  4945                           ;Lcd.c: 120:     PORTCbits.RC1 = 1;
  4946  0610  1487               	bsf	7,1	;volatile
  4947                           
  4948                           ;Lcd.c: 121:     PORTCbits.RC3 = 0;
  4949  0611  1187               	bcf	7,3	;volatile
  4950                           
  4951                           ;Lcd.c: 124:     PORTCbits.RC3 = 1;
  4952  0612  1587               	bsf	7,3	;volatile
  4953                           
  4954                           ;Lcd.c: 125:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  4955  0613  3053               	movlw	83
  4956  0614  00F2               	movwf	??_LCD_date
  4957  0615                     u4327:
  4958  0615  0BF2               	decfsz	??_LCD_date,f
  4959  0616  2E15               	goto	u4327
  4960                           
  4961                           ;Lcd.c: 126:     PORTCbits.RC3 = 0;
  4962  0617  1283               	bcf	3,5	;RP0=0, select bank0
  4963  0618  1303               	bcf	3,6	;RP1=0, select bank0
  4964  0619  1187               	bcf	7,3	;volatile
  4965                           
  4966                           ;Lcd.c: 127:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  4967  061A  3053               	movlw	83
  4968  061B  00F2               	movwf	??_LCD_date
  4969  061C                     u4337:
  4970  061C  0BF2               	decfsz	??_LCD_date,f
  4971  061D  2E1C               	goto	u4337
  4972                           
  4973                           ;Lcd.c: 130:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4974  061E  3014               	movlw	20
  4975  061F  00F3               	movwf	??_LCD_date+1
  4976  0620  3079               	movlw	121
  4977  0621  00F2               	movwf	??_LCD_date
  4978  0622                     u4347:
  4979  0622  0BF2               	decfsz	??_LCD_date,f
  4980  0623  2E22               	goto	u4347
  4981  0624  0BF3               	decfsz	??_LCD_date+1,f
  4982  0625  2E22               	goto	u4347
  4983  0626  2E27               	nop2
  4984  0627  0008               	return
  4985  0628                     __end_of_LCD_date:
  4986                           
  4987                           	psect	text20
  4988  0802                     __ptext20:	
  4989 ;; *************** function _Lec_Adc_Modo_Pulv *****************
  4990 ;; Defined at:
  4991 ;;		line 4 in file "Modo_Pulverizacion.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5005 ;;      Params:         0       0       0       0       0
  5006 ;;      Locals:         0       0       0       0       0
  5007 ;;      Temps:          0       0       0       0       0
  5008 ;;      Totals:         0       0       0       0       0
  5009 ;;Total ram usage:        0 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    5
  5012 ;; This function calls:
  5013 ;;		_Adc_Min_Read
  5014 ;;		_Adc_Pwm_Read
  5015 ;;		_Adc_Rpm_Read
  5016 ;;		_Adc_Temp_Read
  5017 ;; This function is called by:
  5018 ;;		_MEF_Subest_Actualizacion
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           
  5023                           ;psect for function _Lec_Adc_Modo_Pulv
  5024  0802                     _Lec_Adc_Modo_Pulv:
  5025                           
  5026                           ;Modo_Pulverizacion.c: 7:     Adc_Rpm_Read();
  5027                           
  5028                           ;incstack = 0
  5029                           ; Regs used in _Lec_Adc_Modo_Pulv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5030  0802  120A  118A  2207  120A  158A  	fcall	_Adc_Rpm_Read
  5031                           
  5032                           ;Modo_Pulverizacion.c: 10:     Adc_Pwm_Read();
  5033  0807  120A  158A  25A5  120A  158A  	fcall	_Adc_Pwm_Read
  5034                           
  5035                           ;Modo_Pulverizacion.c: 13:     Adc_Min_Read();
  5036  080C  120A  158A  24AC  120A  158A  	fcall	_Adc_Min_Read
  5037                           
  5038                           ;Modo_Pulverizacion.c: 16:     Adc_Temp_Read();
  5039  0811  120A  158A  22FF   	fcall	_Adc_Temp_Read
  5040  0814  0008               	return
  5041  0815                     __end_of_Lec_Adc_Modo_Pulv:
  5042                           
  5043                           	psect	text21
  5044  0AFF                     __ptext21:	
  5045 ;; *************** function _Adc_Temp_Read *****************
  5046 ;; Defined at:
  5047 ;;		line 47 in file "Adc_Read.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5061 ;;      Params:         0       0       0       0       0
  5062 ;;      Locals:         0       3       0       0       0
  5063 ;;      Temps:          0       0       0       0       0
  5064 ;;      Totals:         0       3       0       0       0
  5065 ;;Total ram usage:        3 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    4
  5068 ;; This function calls:
  5069 ;;		_Adc
  5070 ;;		___awtoft
  5071 ;;		___ftdiv
  5072 ;;		___ftmul
  5073 ;;		___fttol
  5074 ;; This function is called by:
  5075 ;;		_Lec_Adc_Modo_Pulv
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _Adc_Temp_Read
  5081  0AFF                     _Adc_Temp_Read:
  5082                           
  5083                           ;Adc_Read.c: 49:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _Adc_Temp_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5087  0AFF  3003               	movlw	3
  5088  0B00  120A  158A  2214  120A  158A  	fcall	_Adc
  5089  0B05  0873               	movf	?_Adc+1,w
  5090  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  5091  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  5092  0B08  00A4               	movwf	___awtoft@c+1
  5093  0B09  0872               	movf	?_Adc,w
  5094  0B0A  00A3               	movwf	___awtoft@c
  5095  0B0B  120A  158A  209F  120A  158A  	fcall	___awtoft
  5096  0B10  1283               	bcf	3,5	;RP0=0, select bank0
  5097  0B11  1303               	bcf	3,6	;RP1=0, select bank0
  5098  0B12  0823               	movf	?___awtoft,w
  5099  0B13  00AA               	movwf	___ftmul@f2
  5100  0B14  0824               	movf	?___awtoft+1,w
  5101  0B15  00AB               	movwf	___ftmul@f2+1
  5102  0B16  0825               	movf	?___awtoft+2,w
  5103  0B17  00AC               	movwf	___ftmul@f2+2
  5104  0B18  3000               	movlw	0
  5105  0B19  00A7               	movwf	___ftmul@f1
  5106  0B1A  30A0               	movlw	160
  5107  0B1B  00A8               	movwf	___ftmul@f1+1
  5108  0B1C  3040               	movlw	64
  5109  0B1D  00A9               	movwf	___ftmul@f1+2
  5110  0B1E  120A  118A  2329  120A  158A  	fcall	___ftmul
  5111  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  5112  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  5113  0B25  0827               	movf	?___ftmul,w
  5114  0B26  00B9               	movwf	___ftdiv@f1
  5115  0B27  0828               	movf	?___ftmul+1,w
  5116  0B28  00BA               	movwf	___ftdiv@f1+1
  5117  0B29  0829               	movf	?___ftmul+2,w
  5118  0B2A  00BB               	movwf	___ftdiv@f1+2
  5119  0B2B  30C0               	movlw	192
  5120  0B2C  00B6               	movwf	___ftdiv@f2
  5121  0B2D  307F               	movlw	127
  5122  0B2E  00B7               	movwf	___ftdiv@f2+1
  5123  0B2F  3044               	movlw	68
  5124  0B30  00B8               	movwf	___ftdiv@f2+2
  5125  0B31  120A  118A  2628  120A  158A  	fcall	___ftdiv
  5126  0B36  1283               	bcf	3,5	;RP0=0, select bank0
  5127  0B37  1303               	bcf	3,6	;RP1=0, select bank0
  5128  0B38  0836               	movf	?___ftdiv,w
  5129  0B39  00D2               	movwf	_Adc_Temp_Read$1325
  5130  0B3A  0837               	movf	?___ftdiv+1,w
  5131  0B3B  00D3               	movwf	_Adc_Temp_Read$1325+1
  5132  0B3C  0838               	movf	?___ftdiv+2,w
  5133  0B3D  00D4               	movwf	_Adc_Temp_Read$1325+2
  5134                           
  5135                           ;Adc_Read.c: 49:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  5136  0B3E  0852               	movf	_Adc_Temp_Read$1325,w
  5137  0B3F  00AA               	movwf	___ftmul@f2
  5138  0B40  0853               	movf	_Adc_Temp_Read$1325+1,w
  5139  0B41  00AB               	movwf	___ftmul@f2+1
  5140  0B42  0854               	movf	_Adc_Temp_Read$1325+2,w
  5141  0B43  00AC               	movwf	___ftmul@f2+2
  5142  0B44  3000               	movlw	0
  5143  0B45  00A7               	movwf	___ftmul@f1
  5144  0B46  30C8               	movlw	200
  5145  0B47  00A8               	movwf	___ftmul@f1+1
  5146  0B48  3042               	movlw	66
  5147  0B49  00A9               	movwf	___ftmul@f1+2
  5148  0B4A  120A  118A  2329  120A  158A  	fcall	___ftmul
  5149  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  5150  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  5151  0B51  0827               	movf	?___ftmul,w
  5152  0B52  00C5               	movwf	___fttol@f1
  5153  0B53  0828               	movf	?___ftmul+1,w
  5154  0B54  00C6               	movwf	___fttol@f1+1
  5155  0B55  0829               	movf	?___ftmul+2,w
  5156  0B56  00C7               	movwf	___fttol@f1+2
  5157  0B57  120A  158A  2528   	fcall	___fttol
  5158  0B5A  1283               	bcf	3,5	;RP0=0, select bank0
  5159  0B5B  1303               	bcf	3,6	;RP1=0, select bank0
  5160  0B5C  0845               	movf	?___fttol,w
  5161  0B5D  00FF               	movwf	127
  5162  0B5E  087F               	movf	127,w
  5163  0B5F  00E8               	movwf	_Temp
  5164  0B60  0008               	return
  5165  0B61                     __end_of_Adc_Temp_Read:
  5166                           
  5167                           	psect	text22
  5168  0207                     __ptext22:	
  5169 ;; *************** function _Adc_Rpm_Read *****************
  5170 ;; Defined at:
  5171 ;;		line 9 in file "Adc_Read.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  valor           2   63[BANK0 ] unsigned int 
  5176 ;;  dec_m           2   61[BANK0 ] unsigned int 
  5177 ;;  uni_m           2   59[BANK0 ] unsigned int 
  5178 ;;  cent            2   57[BANK0 ] unsigned int 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  1    wreg      void 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5188 ;;      Params:         0       0       0       0       0
  5189 ;;      Locals:         0      11       0       0       0
  5190 ;;      Temps:          0       4       0       0       0
  5191 ;;      Totals:         0      15       0       0       0
  5192 ;;Total ram usage:       15 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    4
  5195 ;; This function calls:
  5196 ;;		_Adc
  5197 ;;		___awtoft
  5198 ;;		___ftdiv
  5199 ;;		___ftmul
  5200 ;;		___fttol
  5201 ;;		___lwdiv
  5202 ;;		___wmul
  5203 ;; This function is called by:
  5204 ;;		_Lec_Adc_Modo_Pulv
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _Adc_Rpm_Read
  5210  0207                     _Adc_Rpm_Read:
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _Adc_Rpm_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5214  0207  1283               	bcf	3,5	;RP0=0, select bank0
  5215  0208  1303               	bcf	3,6	;RP1=0, select bank0
  5216  0209  01DD               	clrf	Adc_Rpm_Read@dec_m
  5217  020A  01DE               	clrf	Adc_Rpm_Read@dec_m+1
  5218  020B  01DB               	clrf	Adc_Rpm_Read@uni_m
  5219  020C  01DC               	clrf	Adc_Rpm_Read@uni_m+1
  5220                           
  5221                           ;Adc_Read.c: 13:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  5222  020D  3000               	movlw	0
  5223  020E  120A  158A  2214  120A  118A  	fcall	_Adc
  5224  0213  0873               	movf	?_Adc+1,w
  5225  0214  1283               	bcf	3,5	;RP0=0, select bank0
  5226  0215  1303               	bcf	3,6	;RP1=0, select bank0
  5227  0216  00A4               	movwf	___awtoft@c+1
  5228  0217  0872               	movf	?_Adc,w
  5229  0218  00A3               	movwf	___awtoft@c
  5230  0219  120A  158A  209F  120A  118A  	fcall	___awtoft
  5231  021E  1283               	bcf	3,5	;RP0=0, select bank0
  5232  021F  1303               	bcf	3,6	;RP1=0, select bank0
  5233  0220  0823               	movf	?___awtoft,w
  5234  0221  00AA               	movwf	___ftmul@f2
  5235  0222  0824               	movf	?___awtoft+1,w
  5236  0223  00AB               	movwf	___ftmul@f2+1
  5237  0224  0825               	movf	?___awtoft+2,w
  5238  0225  00AC               	movwf	___ftmul@f2+2
  5239  0226  3000               	movlw	0
  5240  0227  00A7               	movwf	___ftmul@f1
  5241  0228  30A0               	movlw	160
  5242  0229  00A8               	movwf	___ftmul@f1+1
  5243  022A  3040               	movlw	64
  5244  022B  00A9               	movwf	___ftmul@f1+2
  5245  022C  120A  118A  2329  120A  118A  	fcall	___ftmul
  5246  0231  1283               	bcf	3,5	;RP0=0, select bank0
  5247  0232  1303               	bcf	3,6	;RP1=0, select bank0
  5248  0233  0827               	movf	?___ftmul,w
  5249  0234  00B9               	movwf	___ftdiv@f1
  5250  0235  0828               	movf	?___ftmul+1,w
  5251  0236  00BA               	movwf	___ftdiv@f1+1
  5252  0237  0829               	movf	?___ftmul+2,w
  5253  0238  00BB               	movwf	___ftdiv@f1+2
  5254  0239  30C0               	movlw	192
  5255  023A  00B6               	movwf	___ftdiv@f2
  5256  023B  307F               	movlw	127
  5257  023C  00B7               	movwf	___ftdiv@f2+1
  5258  023D  3044               	movlw	68
  5259  023E  00B8               	movwf	___ftdiv@f2+2
  5260  023F  120A  118A  2628  120A  118A  	fcall	___ftdiv
  5261  0244  1283               	bcf	3,5	;RP0=0, select bank0
  5262  0245  1303               	bcf	3,6	;RP1=0, select bank0
  5263  0246  0836               	movf	?___ftdiv,w
  5264  0247  00D6               	movwf	_Adc_Rpm_Read$1322
  5265  0248  0837               	movf	?___ftdiv+1,w
  5266  0249  00D7               	movwf	_Adc_Rpm_Read$1322+1
  5267  024A  0838               	movf	?___ftdiv+2,w
  5268  024B  00D8               	movwf	_Adc_Rpm_Read$1322+2
  5269                           
  5270                           ;Adc_Read.c: 13:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  5271  024C  0856               	movf	_Adc_Rpm_Read$1322,w
  5272  024D  00AA               	movwf	___ftmul@f2
  5273  024E  0857               	movf	_Adc_Rpm_Read$1322+1,w
  5274  024F  00AB               	movwf	___ftmul@f2+1
  5275  0250  0858               	movf	_Adc_Rpm_Read$1322+2,w
  5276  0251  00AC               	movwf	___ftmul@f2+2
  5277  0252  3040               	movlw	64
  5278  0253  00A7               	movwf	___ftmul@f1
  5279  0254  301C               	movlw	28
  5280  0255  00A8               	movwf	___ftmul@f1+1
  5281  0256  3046               	movlw	70
  5282  0257  00A9               	movwf	___ftmul@f1+2
  5283  0258  120A  118A  2329  120A  118A  	fcall	___ftmul
  5284  025D  1283               	bcf	3,5	;RP0=0, select bank0
  5285  025E  1303               	bcf	3,6	;RP1=0, select bank0
  5286  025F  0827               	movf	?___ftmul,w
  5287  0260  00B9               	movwf	___ftdiv@f1
  5288  0261  0828               	movf	?___ftmul+1,w
  5289  0262  00BA               	movwf	___ftdiv@f1+1
  5290  0263  0829               	movf	?___ftmul+2,w
  5291  0264  00BB               	movwf	___ftdiv@f1+2
  5292  0265  3000               	movlw	0
  5293  0266  00B6               	movwf	___ftdiv@f2
  5294  0267  30A0               	movlw	160
  5295  0268  00B7               	movwf	___ftdiv@f2+1
  5296  0269  3040               	movlw	64
  5297  026A  00B8               	movwf	___ftdiv@f2+2
  5298  026B  120A  118A  2628  120A  118A  	fcall	___ftdiv
  5299  0270  1283               	bcf	3,5	;RP0=0, select bank0
  5300  0271  1303               	bcf	3,6	;RP1=0, select bank0
  5301  0272  0836               	movf	?___ftdiv,w
  5302  0273  00C5               	movwf	___fttol@f1
  5303  0274  0837               	movf	?___ftdiv+1,w
  5304  0275  00C6               	movwf	___fttol@f1+1
  5305  0276  0838               	movf	?___ftdiv+2,w
  5306  0277  00C7               	movwf	___fttol@f1+2
  5307  0278  120A  158A  2528  120A  118A  	fcall	___fttol
  5308  027D  1283               	bcf	3,5	;RP0=0, select bank0
  5309  027E  1303               	bcf	3,6	;RP1=0, select bank0
  5310  027F  0846               	movf	?___fttol+1,w
  5311  0280  00E0               	movwf	Adc_Rpm_Read@valor+1
  5312  0281  0845               	movf	?___fttol,w
  5313  0282  00DF               	movwf	Adc_Rpm_Read@valor
  5314                           
  5315                           ;Adc_Read.c: 15:     dec_m = (int)(valor/10000)*10000;
  5316  0283  3010               	movlw	16
  5317  0284  00F2               	movwf	___lwdiv@divisor
  5318  0285  3027               	movlw	39
  5319  0286  00F3               	movwf	___lwdiv@divisor+1
  5320  0287  0860               	movf	Adc_Rpm_Read@valor+1,w
  5321  0288  00F5               	movwf	___lwdiv@dividend+1
  5322  0289  085F               	movf	Adc_Rpm_Read@valor,w
  5323  028A  00F4               	movwf	___lwdiv@dividend
  5324  028B  120A  158A  21D8  120A  118A  	fcall	___lwdiv
  5325  0290  0873               	movf	?___lwdiv+1,w
  5326  0291  1283               	bcf	3,5	;RP0=0, select bank0
  5327  0292  1303               	bcf	3,6	;RP1=0, select bank0
  5328  0293  00A1               	movwf	___wmul@multiplier+1
  5329  0294  0872               	movf	?___lwdiv,w
  5330  0295  00A0               	movwf	___wmul@multiplier
  5331  0296  3010               	movlw	16
  5332  0297  00A2               	movwf	___wmul@multiplicand
  5333  0298  3027               	movlw	39
  5334  0299  00A3               	movwf	___wmul@multiplicand+1
  5335  029A  120A  158A  2058  120A  118A  	fcall	___wmul
  5336  029F  1283               	bcf	3,5	;RP0=0, select bank0
  5337  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  5338  02A1  0821               	movf	?___wmul+1,w
  5339  02A2  00DE               	movwf	Adc_Rpm_Read@dec_m+1
  5340  02A3  0820               	movf	?___wmul,w
  5341  02A4  00DD               	movwf	Adc_Rpm_Read@dec_m
  5342                           
  5343                           ;Adc_Read.c: 16:     uni_m = (int)((valor-dec_m)/1000)*1000;
  5344  02A5  30E8               	movlw	232
  5345  02A6  00F2               	movwf	___lwdiv@divisor
  5346  02A7  3003               	movlw	3
  5347  02A8  00F3               	movwf	___lwdiv@divisor+1
  5348  02A9  085D               	movf	Adc_Rpm_Read@dec_m,w
  5349  02AA  025F               	subwf	Adc_Rpm_Read@valor,w
  5350  02AB  00F4               	movwf	___lwdiv@dividend
  5351  02AC  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5352  02AD  1C03               	skipc
  5353  02AE  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5354  02AF  0260               	subwf	Adc_Rpm_Read@valor+1,w
  5355  02B0  00F5               	movwf	___lwdiv@dividend+1
  5356  02B1  120A  158A  21D8  120A  118A  	fcall	___lwdiv
  5357  02B6  0873               	movf	?___lwdiv+1,w
  5358  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  5359  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  5360  02B9  00A1               	movwf	___wmul@multiplier+1
  5361  02BA  0872               	movf	?___lwdiv,w
  5362  02BB  00A0               	movwf	___wmul@multiplier
  5363  02BC  30E8               	movlw	232
  5364  02BD  00A2               	movwf	___wmul@multiplicand
  5365  02BE  3003               	movlw	3
  5366  02BF  00A3               	movwf	___wmul@multiplicand+1
  5367  02C0  120A  158A  2058  120A  118A  	fcall	___wmul
  5368  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  5369  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  5370  02C7  0821               	movf	?___wmul+1,w
  5371  02C8  00DC               	movwf	Adc_Rpm_Read@uni_m+1
  5372  02C9  0820               	movf	?___wmul,w
  5373  02CA  00DB               	movwf	Adc_Rpm_Read@uni_m
  5374                           
  5375                           ;Adc_Read.c: 17:     cent = (int)((valor-(uni_m+dec_m))/100)*100;
  5376  02CB  3064               	movlw	100
  5377  02CC  00F2               	movwf	___lwdiv@divisor
  5378  02CD  3000               	movlw	0
  5379  02CE  00F3               	movwf	___lwdiv@divisor+1
  5380  02CF  095B               	comf	Adc_Rpm_Read@uni_m,w
  5381  02D0  00D2               	movwf	??_Adc_Rpm_Read
  5382  02D1  095C               	comf	Adc_Rpm_Read@uni_m+1,w
  5383  02D2  00D3               	movwf	??_Adc_Rpm_Read+1
  5384  02D3  0AD2               	incf	??_Adc_Rpm_Read,f
  5385  02D4  1903               	skipnz
  5386  02D5  0AD3               	incf	??_Adc_Rpm_Read+1,f
  5387  02D6  085D               	movf	Adc_Rpm_Read@dec_m,w
  5388  02D7  0252               	subwf	??_Adc_Rpm_Read,w
  5389  02D8  00D4               	movwf	??_Adc_Rpm_Read+2
  5390  02D9  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5391  02DA  1C03               	skipc
  5392  02DB  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5393  02DC  0253               	subwf	??_Adc_Rpm_Read+1,w
  5394  02DD  00D5               	movwf	??_Adc_Rpm_Read+3
  5395  02DE  085F               	movf	Adc_Rpm_Read@valor,w
  5396  02DF  0754               	addwf	??_Adc_Rpm_Read+2,w
  5397  02E0  00F4               	movwf	___lwdiv@dividend
  5398  02E1  0860               	movf	Adc_Rpm_Read@valor+1,w
  5399  02E2  1803               	skipnc
  5400  02E3  0A60               	incf	Adc_Rpm_Read@valor+1,w
  5401  02E4  0755               	addwf	??_Adc_Rpm_Read+3,w
  5402  02E5  00F5               	movwf	___lwdiv@dividend+1
  5403  02E6  120A  158A  21D8  120A  118A  	fcall	___lwdiv
  5404  02EB  0873               	movf	?___lwdiv+1,w
  5405  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  5406  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  5407  02EE  00A1               	movwf	___wmul@multiplier+1
  5408  02EF  0872               	movf	?___lwdiv,w
  5409  02F0  00A0               	movwf	___wmul@multiplier
  5410  02F1  3064               	movlw	100
  5411  02F2  00A2               	movwf	___wmul@multiplicand
  5412  02F3  3000               	movlw	0
  5413  02F4  00A3               	movwf	___wmul@multiplicand+1
  5414  02F5  120A  158A  2058  120A  118A  	fcall	___wmul
  5415  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  5416  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  5417  02FC  0821               	movf	?___wmul+1,w
  5418  02FD  00DA               	movwf	Adc_Rpm_Read@cent+1
  5419  02FE  0820               	movf	?___wmul,w
  5420  02FF  00D9               	movwf	Adc_Rpm_Read@cent
  5421                           
  5422                           ;Adc_Read.c: 19:     valor = cent+uni_m+dec_m;
  5423  0300  085B               	movf	Adc_Rpm_Read@uni_m,w
  5424  0301  0759               	addwf	Adc_Rpm_Read@cent,w
  5425  0302  00D2               	movwf	??_Adc_Rpm_Read
  5426  0303  085C               	movf	Adc_Rpm_Read@uni_m+1,w
  5427  0304  1803               	skipnc
  5428  0305  0A5C               	incf	Adc_Rpm_Read@uni_m+1,w
  5429  0306  075A               	addwf	Adc_Rpm_Read@cent+1,w
  5430  0307  00D3               	movwf	??_Adc_Rpm_Read+1
  5431  0308  085D               	movf	Adc_Rpm_Read@dec_m,w
  5432  0309  0752               	addwf	??_Adc_Rpm_Read,w
  5433  030A  00DF               	movwf	Adc_Rpm_Read@valor
  5434  030B  085E               	movf	Adc_Rpm_Read@dec_m+1,w
  5435  030C  1803               	skipnc
  5436  030D  0A5E               	incf	Adc_Rpm_Read@dec_m+1,w
  5437  030E  0753               	addwf	??_Adc_Rpm_Read+1,w
  5438  030F  00E0               	movwf	Adc_Rpm_Read@valor+1
  5439                           
  5440                           ;Adc_Read.c: 20:     Rpm = valor;
  5441  0310  0860               	movf	Adc_Rpm_Read@valor+1,w
  5442  0311  00E2               	movwf	_Rpm+1
  5443  0312  085F               	movf	Adc_Rpm_Read@valor,w
  5444  0313  00E1               	movwf	_Rpm
  5445                           
  5446                           ;Adc_Read.c: 22:     if(Rpm == 0) Rpm = 60;
  5447  0314  0861               	movf	_Rpm,w
  5448  0315  0462               	iorwf	_Rpm+1,w
  5449  0316  1D03               	btfss	3,2
  5450  0317  2B1D               	goto	l3548
  5451  0318  303C               	movlw	60
  5452  0319  00E1               	movwf	_Rpm
  5453  031A  3000               	movlw	0
  5454  031B  00E2               	movwf	_Rpm+1
  5455  031C  0008               	return
  5456  031D                     l3548:
  5457  031D  3027               	movlw	39
  5458  031E  0262               	subwf	_Rpm+1,w
  5459  031F  3011               	movlw	17
  5460  0320  1903               	skipnz
  5461  0321  0261               	subwf	_Rpm,w
  5462  0322  1C03               	skipc
  5463  0323  0008               	return
  5464  0324  3010               	movlw	16
  5465  0325  00E1               	movwf	_Rpm
  5466  0326  3027               	movlw	39
  5467  0327  00E2               	movwf	_Rpm+1
  5468  0328  0008               	return
  5469  0329                     __end_of_Adc_Rpm_Read:
  5470                           
  5471                           	psect	text23
  5472  0858                     __ptext23:	
  5473 ;; *************** function ___wmul *****************
  5474 ;; Defined at:
  5475 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\Umul16.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5478 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  product         2    4[BANK0 ] unsigned int 
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  2    0[BANK0 ] unsigned int 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, status,0
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5490 ;;      Params:         0       4       0       0       0
  5491 ;;      Locals:         0       2       0       0       0
  5492 ;;      Temps:          0       0       0       0       0
  5493 ;;      Totals:         0       6       0       0       0
  5494 ;;Total ram usage:        6 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    2
  5497 ;; This function calls:
  5498 ;;		Nothing
  5499 ;; This function is called by:
  5500 ;;		_Adc_Rpm_Read
  5501 ;;		_sprintf
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           
  5506                           ;psect for function ___wmul
  5507  0858                     ___wmul:
  5508                           
  5509                           ;incstack = 0
  5510                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5511  0858  1283               	bcf	3,5	;RP0=0, select bank0
  5512  0859  1303               	bcf	3,6	;RP1=0, select bank0
  5513  085A  01A4               	clrf	___wmul@product
  5514  085B  01A5               	clrf	___wmul@product+1
  5515  085C                     l3386:
  5516  085C  1C20               	btfss	___wmul@multiplier,0
  5517  085D  2864               	goto	l618
  5518  085E  0822               	movf	___wmul@multiplicand,w
  5519  085F  07A4               	addwf	___wmul@product,f
  5520  0860  1803               	skipnc
  5521  0861  0AA5               	incf	___wmul@product+1,f
  5522  0862  0823               	movf	___wmul@multiplicand+1,w
  5523  0863  07A5               	addwf	___wmul@product+1,f
  5524  0864                     l618:
  5525  0864  3001               	movlw	1
  5526  0865                     u3245:
  5527  0865  1003               	clrc
  5528  0866  0DA2               	rlf	___wmul@multiplicand,f
  5529  0867  0DA3               	rlf	___wmul@multiplicand+1,f
  5530  0868  3EFF               	addlw	-1
  5531  0869  1D03               	skipz
  5532  086A  2865               	goto	u3245
  5533  086B  3001               	movlw	1
  5534  086C                     u3255:
  5535  086C  1003               	clrc
  5536  086D  0CA1               	rrf	___wmul@multiplier+1,f
  5537  086E  0CA0               	rrf	___wmul@multiplier,f
  5538  086F  3EFF               	addlw	-1
  5539  0870  1D03               	skipz
  5540  0871  286C               	goto	u3255
  5541  0872  0820               	movf	___wmul@multiplier,w
  5542  0873  0421               	iorwf	___wmul@multiplier+1,w
  5543  0874  1D03               	btfss	3,2
  5544  0875  285C               	goto	l3386
  5545  0876  0825               	movf	___wmul@product+1,w
  5546  0877  00A1               	movwf	?___wmul+1
  5547  0878  0824               	movf	___wmul@product,w
  5548  0879  00A0               	movwf	?___wmul
  5549  087A  0008               	return
  5550  087B                     __end_of___wmul:
  5551                           
  5552                           	psect	text24
  5553  09D8                     __ptext24:	
  5554 ;; *************** function ___lwdiv *****************
  5555 ;; Defined at:
  5556 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwdiv.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  divisor         2    2[COMMON] unsigned int 
  5559 ;;  dividend        2    4[COMMON] unsigned int 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  quotient        2    6[COMMON] unsigned int 
  5562 ;;  counter         1    8[COMMON] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  2    2[COMMON] unsigned int 
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0, btemp+1
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5572 ;;      Params:         4       0       0       0       0
  5573 ;;      Locals:         3       0       0       0       0
  5574 ;;      Temps:          0       0       0       0       0
  5575 ;;      Totals:         7       0       0       0       0
  5576 ;;Total ram usage:        7 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    2
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_Adc_Rpm_Read
  5583 ;;		_sprintf
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function ___lwdiv
  5589  09D8                     ___lwdiv:
  5590                           
  5591                           ;incstack = 0
  5592                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  5593  09D8  01F6               	clrf	___lwdiv@quotient
  5594  09D9  01F7               	clrf	___lwdiv@quotient+1
  5595  09DA  0872               	movf	___lwdiv@divisor,w
  5596  09DB  0473               	iorwf	___lwdiv@divisor+1,w
  5597  09DC  1903               	btfsc	3,2
  5598  09DD  2A0F               	goto	l2540
  5599  09DE  01F8               	clrf	___lwdiv@counter
  5600  09DF  0AF8               	incf	___lwdiv@counter,f
  5601  09E0                     l2528:
  5602  09E0  1BF3               	btfsc	___lwdiv@divisor+1,7
  5603  09E1  29EE               	goto	l2530
  5604  09E2  3001               	movlw	1
  5605  09E3                     u2105:
  5606  09E3  1003               	clrc
  5607  09E4  0DF2               	rlf	___lwdiv@divisor,f
  5608  09E5  0DF3               	rlf	___lwdiv@divisor+1,f
  5609  09E6  3EFF               	addlw	-1
  5610  09E7  1D03               	skipz
  5611  09E8  29E3               	goto	u2105
  5612  09E9  3001               	movlw	1
  5613  09EA  00FF               	movwf	127
  5614  09EB  087F               	movf	127,w
  5615  09EC  07F8               	addwf	___lwdiv@counter,f
  5616  09ED  29E0               	goto	l2528
  5617  09EE                     l2530:
  5618  09EE  3001               	movlw	1
  5619  09EF                     u2125:
  5620  09EF  1003               	clrc
  5621  09F0  0DF6               	rlf	___lwdiv@quotient,f
  5622  09F1  0DF7               	rlf	___lwdiv@quotient+1,f
  5623  09F2  3EFF               	addlw	-1
  5624  09F3  1D03               	skipz
  5625  09F4  29EF               	goto	u2125
  5626  09F5  0873               	movf	___lwdiv@divisor+1,w
  5627  09F6  0275               	subwf	___lwdiv@dividend+1,w
  5628  09F7  1D03               	skipz
  5629  09F8  29FB               	goto	u2135
  5630  09F9  0872               	movf	___lwdiv@divisor,w
  5631  09FA  0274               	subwf	___lwdiv@dividend,w
  5632  09FB                     u2135:
  5633  09FB  1C03               	skipc
  5634  09FC  2A04               	goto	l2536
  5635  09FD  0872               	movf	___lwdiv@divisor,w
  5636  09FE  02F4               	subwf	___lwdiv@dividend,f
  5637  09FF  0873               	movf	___lwdiv@divisor+1,w
  5638  0A00  1C03               	skipc
  5639  0A01  03F5               	decf	___lwdiv@dividend+1,f
  5640  0A02  02F5               	subwf	___lwdiv@dividend+1,f
  5641  0A03  1476               	bsf	___lwdiv@quotient,0
  5642  0A04                     l2536:
  5643  0A04  3001               	movlw	1
  5644  0A05                     u2145:
  5645  0A05  1003               	clrc
  5646  0A06  0CF3               	rrf	___lwdiv@divisor+1,f
  5647  0A07  0CF2               	rrf	___lwdiv@divisor,f
  5648  0A08  3EFF               	addlw	-1
  5649  0A09  1D03               	skipz
  5650  0A0A  2A05               	goto	u2145
  5651  0A0B  3001               	movlw	1
  5652  0A0C  02F8               	subwf	___lwdiv@counter,f
  5653  0A0D  1D03               	btfss	3,2
  5654  0A0E  29EE               	goto	l2530
  5655  0A0F                     l2540:
  5656  0A0F  0877               	movf	___lwdiv@quotient+1,w
  5657  0A10  00F3               	movwf	?___lwdiv+1
  5658  0A11  0876               	movf	___lwdiv@quotient,w
  5659  0A12  00F2               	movwf	?___lwdiv
  5660  0A13  0008               	return
  5661  0A14                     __end_of___lwdiv:
  5662                           
  5663                           	psect	text25
  5664  0DA5                     __ptext25:	
  5665 ;; *************** function _Adc_Pwm_Read *****************
  5666 ;; Defined at:
  5667 ;;		line 28 in file "Adc_Read.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;		None
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;		None
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  1    wreg      void 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5681 ;;      Params:         0       0       0       0       0
  5682 ;;      Locals:         0       3       0       0       0
  5683 ;;      Temps:          0       0       0       0       0
  5684 ;;      Totals:         0       3       0       0       0
  5685 ;;Total ram usage:        3 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    4
  5688 ;; This function calls:
  5689 ;;		_Adc
  5690 ;;		___awtoft
  5691 ;;		___ftdiv
  5692 ;;		___ftmul
  5693 ;;		___fttol
  5694 ;; This function is called by:
  5695 ;;		_Lec_Adc_Modo_Pulv
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           
  5700                           ;psect for function _Adc_Pwm_Read
  5701  0DA5                     _Adc_Pwm_Read:
  5702                           
  5703                           ;Adc_Read.c: 30:     Pwm = (int)((Adc(1)*5.0/1023.0)*100.0/5.0);
  5704                           
  5705                           ;incstack = 0
  5706                           ; Regs used in _Adc_Pwm_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5707  0DA5  3001               	movlw	1
  5708  0DA6  120A  158A  2214  120A  158A  	fcall	_Adc
  5709  0DAB  0873               	movf	?_Adc+1,w
  5710  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  5711  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  5712  0DAE  00A4               	movwf	___awtoft@c+1
  5713  0DAF  0872               	movf	?_Adc,w
  5714  0DB0  00A3               	movwf	___awtoft@c
  5715  0DB1  120A  158A  209F  120A  158A  	fcall	___awtoft
  5716  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  5717  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  5718  0DB8  0823               	movf	?___awtoft,w
  5719  0DB9  00AA               	movwf	___ftmul@f2
  5720  0DBA  0824               	movf	?___awtoft+1,w
  5721  0DBB  00AB               	movwf	___ftmul@f2+1
  5722  0DBC  0825               	movf	?___awtoft+2,w
  5723  0DBD  00AC               	movwf	___ftmul@f2+2
  5724  0DBE  3000               	movlw	0
  5725  0DBF  00A7               	movwf	___ftmul@f1
  5726  0DC0  30A0               	movlw	160
  5727  0DC1  00A8               	movwf	___ftmul@f1+1
  5728  0DC2  3040               	movlw	64
  5729  0DC3  00A9               	movwf	___ftmul@f1+2
  5730  0DC4  120A  118A  2329  120A  158A  	fcall	___ftmul
  5731  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  5732  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  5733  0DCB  0827               	movf	?___ftmul,w
  5734  0DCC  00B9               	movwf	___ftdiv@f1
  5735  0DCD  0828               	movf	?___ftmul+1,w
  5736  0DCE  00BA               	movwf	___ftdiv@f1+1
  5737  0DCF  0829               	movf	?___ftmul+2,w
  5738  0DD0  00BB               	movwf	___ftdiv@f1+2
  5739  0DD1  30C0               	movlw	192
  5740  0DD2  00B6               	movwf	___ftdiv@f2
  5741  0DD3  307F               	movlw	127
  5742  0DD4  00B7               	movwf	___ftdiv@f2+1
  5743  0DD5  3044               	movlw	68
  5744  0DD6  00B8               	movwf	___ftdiv@f2+2
  5745  0DD7  120A  118A  2628  120A  158A  	fcall	___ftdiv
  5746  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  5747  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  5748  0DDE  0836               	movf	?___ftdiv,w
  5749  0DDF  00D2               	movwf	_Adc_Pwm_Read$1323
  5750  0DE0  0837               	movf	?___ftdiv+1,w
  5751  0DE1  00D3               	movwf	_Adc_Pwm_Read$1323+1
  5752  0DE2  0838               	movf	?___ftdiv+2,w
  5753  0DE3  00D4               	movwf	_Adc_Pwm_Read$1323+2
  5754                           
  5755                           ;Adc_Read.c: 30:     Pwm = (int)((Adc(1)*5.0/1023.0)*100.0/5.0);
  5756  0DE4  0852               	movf	_Adc_Pwm_Read$1323,w
  5757  0DE5  00AA               	movwf	___ftmul@f2
  5758  0DE6  0853               	movf	_Adc_Pwm_Read$1323+1,w
  5759  0DE7  00AB               	movwf	___ftmul@f2+1
  5760  0DE8  0854               	movf	_Adc_Pwm_Read$1323+2,w
  5761  0DE9  00AC               	movwf	___ftmul@f2+2
  5762  0DEA  3000               	movlw	0
  5763  0DEB  00A7               	movwf	___ftmul@f1
  5764  0DEC  30C8               	movlw	200
  5765  0DED  00A8               	movwf	___ftmul@f1+1
  5766  0DEE  3042               	movlw	66
  5767  0DEF  00A9               	movwf	___ftmul@f1+2
  5768  0DF0  120A  118A  2329  120A  158A  	fcall	___ftmul
  5769  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  5770  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  5771  0DF7  0827               	movf	?___ftmul,w
  5772  0DF8  00B9               	movwf	___ftdiv@f1
  5773  0DF9  0828               	movf	?___ftmul+1,w
  5774  0DFA  00BA               	movwf	___ftdiv@f1+1
  5775  0DFB  0829               	movf	?___ftmul+2,w
  5776  0DFC  00BB               	movwf	___ftdiv@f1+2
  5777  0DFD  3000               	movlw	0
  5778  0DFE  00B6               	movwf	___ftdiv@f2
  5779  0DFF  30A0               	movlw	160
  5780  0E00  00B7               	movwf	___ftdiv@f2+1
  5781  0E01  3040               	movlw	64
  5782  0E02  00B8               	movwf	___ftdiv@f2+2
  5783  0E03  120A  118A  2628  120A  158A  	fcall	___ftdiv
  5784  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  5785  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  5786  0E0A  0836               	movf	?___ftdiv,w
  5787  0E0B  00C5               	movwf	___fttol@f1
  5788  0E0C  0837               	movf	?___ftdiv+1,w
  5789  0E0D  00C6               	movwf	___fttol@f1+1
  5790  0E0E  0838               	movf	?___ftdiv+2,w
  5791  0E0F  00C7               	movwf	___fttol@f1+2
  5792  0E10  120A  158A  2528  120A  158A  	fcall	___fttol
  5793  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  5794  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  5795  0E17  0845               	movf	?___fttol,w
  5796  0E18  00FF               	movwf	127
  5797  0E19  087F               	movf	127,w
  5798  0E1A  00EB               	movwf	_Pwm
  5799                           
  5800                           ;Adc_Read.c: 31:     if(Pwm > 95) Pwm = 95;
  5801  0E1B  3060               	movlw	96
  5802  0E1C  026B               	subwf	_Pwm,w
  5803  0E1D  1C03               	skipc
  5804  0E1E  2E24               	goto	l3560
  5805  0E1F  305F               	movlw	95
  5806  0E20  00FF               	movwf	127
  5807  0E21  087F               	movf	127,w
  5808  0E22  00EB               	movwf	_Pwm
  5809  0E23  0008               	return
  5810  0E24                     l3560:
  5811  0E24  3005               	movlw	5
  5812  0E25  026B               	subwf	_Pwm,w
  5813  0E26  1803               	skipnc
  5814  0E27  0008               	return
  5815  0E28  3005               	movlw	5
  5816  0E29  00FF               	movwf	127
  5817  0E2A  087F               	movf	127,w
  5818  0E2B  00EB               	movwf	_Pwm
  5819  0E2C  0008               	return
  5820  0E2D                     __end_of_Adc_Pwm_Read:
  5821                           
  5822                           	psect	text26
  5823  0CAC                     __ptext26:	
  5824 ;; *************** function _Adc_Min_Read *****************
  5825 ;; Defined at:
  5826 ;;		line 37 in file "Adc_Read.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;		None
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;		None
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  1    wreg      void 
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5840 ;;      Params:         0       0       0       0       0
  5841 ;;      Locals:         0       3       0       0       0
  5842 ;;      Temps:          0       0       0       0       0
  5843 ;;      Totals:         0       3       0       0       0
  5844 ;;Total ram usage:        3 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    4
  5847 ;; This function calls:
  5848 ;;		_Adc
  5849 ;;		___awtoft
  5850 ;;		___ftdiv
  5851 ;;		___ftmul
  5852 ;;		___fttol
  5853 ;; This function is called by:
  5854 ;;		_Lec_Adc_Modo_Pulv
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           
  5859                           ;psect for function _Adc_Min_Read
  5860  0CAC                     _Adc_Min_Read:
  5861                           
  5862                           ;incstack = 0
  5863                           ; Regs used in _Adc_Min_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5864  0CAC  3002               	movlw	2
  5865  0CAD  120A  158A  2214  120A  158A  	fcall	_Adc
  5866  0CB2  0873               	movf	?_Adc+1,w
  5867  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
  5868  0CB4  1303               	bcf	3,6	;RP1=0, select bank0
  5869  0CB5  00A4               	movwf	___awtoft@c+1
  5870  0CB6  0872               	movf	?_Adc,w
  5871  0CB7  00A3               	movwf	___awtoft@c
  5872  0CB8  120A  158A  209F  120A  158A  	fcall	___awtoft
  5873  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  5874  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  5875  0CBF  0823               	movf	?___awtoft,w
  5876  0CC0  00AA               	movwf	___ftmul@f2
  5877  0CC1  0824               	movf	?___awtoft+1,w
  5878  0CC2  00AB               	movwf	___ftmul@f2+1
  5879  0CC3  0825               	movf	?___awtoft+2,w
  5880  0CC4  00AC               	movwf	___ftmul@f2+2
  5881  0CC5  3000               	movlw	0
  5882  0CC6  00A7               	movwf	___ftmul@f1
  5883  0CC7  30A0               	movlw	160
  5884  0CC8  00A8               	movwf	___ftmul@f1+1
  5885  0CC9  3040               	movlw	64
  5886  0CCA  00A9               	movwf	___ftmul@f1+2
  5887  0CCB  120A  118A  2329  120A  158A  	fcall	___ftmul
  5888  0CD0  1283               	bcf	3,5	;RP0=0, select bank0
  5889  0CD1  1303               	bcf	3,6	;RP1=0, select bank0
  5890  0CD2  0827               	movf	?___ftmul,w
  5891  0CD3  00B9               	movwf	___ftdiv@f1
  5892  0CD4  0828               	movf	?___ftmul+1,w
  5893  0CD5  00BA               	movwf	___ftdiv@f1+1
  5894  0CD6  0829               	movf	?___ftmul+2,w
  5895  0CD7  00BB               	movwf	___ftdiv@f1+2
  5896  0CD8  30C0               	movlw	192
  5897  0CD9  00B6               	movwf	___ftdiv@f2
  5898  0CDA  307F               	movlw	127
  5899  0CDB  00B7               	movwf	___ftdiv@f2+1
  5900  0CDC  3044               	movlw	68
  5901  0CDD  00B8               	movwf	___ftdiv@f2+2
  5902  0CDE  120A  118A  2628  120A  158A  	fcall	___ftdiv
  5903  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  5904  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  5905  0CE5  0836               	movf	?___ftdiv,w
  5906  0CE6  00D2               	movwf	_Adc_Min_Read$1324
  5907  0CE7  0837               	movf	?___ftdiv+1,w
  5908  0CE8  00D3               	movwf	_Adc_Min_Read$1324+1
  5909  0CE9  0838               	movf	?___ftdiv+2,w
  5910  0CEA  00D4               	movwf	_Adc_Min_Read$1324+2
  5911  0CEB  0852               	movf	_Adc_Min_Read$1324,w
  5912  0CEC  00AA               	movwf	___ftmul@f2
  5913  0CED  0853               	movf	_Adc_Min_Read$1324+1,w
  5914  0CEE  00AB               	movwf	___ftmul@f2+1
  5915  0CEF  0854               	movf	_Adc_Min_Read$1324+2,w
  5916  0CF0  00AC               	movwf	___ftmul@f2+2
  5917  0CF1  3000               	movlw	0
  5918  0CF2  00A7               	movwf	___ftmul@f1
  5919  0CF3  306C               	movlw	108
  5920  0CF4  00A8               	movwf	___ftmul@f1+1
  5921  0CF5  3042               	movlw	66
  5922  0CF6  00A9               	movwf	___ftmul@f1+2
  5923  0CF7  120A  118A  2329  120A  158A  	fcall	___ftmul
  5924  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  5925  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  5926  0CFE  0827               	movf	?___ftmul,w
  5927  0CFF  00B9               	movwf	___ftdiv@f1
  5928  0D00  0828               	movf	?___ftmul+1,w
  5929  0D01  00BA               	movwf	___ftdiv@f1+1
  5930  0D02  0829               	movf	?___ftmul+2,w
  5931  0D03  00BB               	movwf	___ftdiv@f1+2
  5932  0D04  3000               	movlw	0
  5933  0D05  00B6               	movwf	___ftdiv@f2
  5934  0D06  30A0               	movlw	160
  5935  0D07  00B7               	movwf	___ftdiv@f2+1
  5936  0D08  3040               	movlw	64
  5937  0D09  00B8               	movwf	___ftdiv@f2+2
  5938  0D0A  120A  118A  2628  120A  158A  	fcall	___ftdiv
  5939  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  5940  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  5941  0D11  0836               	movf	?___ftdiv,w
  5942  0D12  00C5               	movwf	___fttol@f1
  5943  0D13  0837               	movf	?___ftdiv+1,w
  5944  0D14  00C6               	movwf	___fttol@f1+1
  5945  0D15  0838               	movf	?___ftdiv+2,w
  5946  0D16  00C7               	movwf	___fttol@f1+2
  5947  0D17  120A  158A  2528  120A  158A  	fcall	___fttol
  5948  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  5949  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  5950  0D1E  0845               	movf	?___fttol,w
  5951  0D1F  00FF               	movwf	127
  5952  0D20  087F               	movf	127,w
  5953  0D21  00EA               	movwf	_Min
  5954                           
  5955                           ;Adc_Read.c: 42:     if(Seg == 0) Seg = 1;
  5956  0D22  0869               	movf	_Seg,w
  5957  0D23  1D03               	btfss	3,2
  5958  0D24  0008               	return
  5959  0D25  01E9               	clrf	_Seg
  5960  0D26  0AE9               	incf	_Seg,f
  5961  0D27  0008               	return
  5962  0D28                     __end_of_Adc_Min_Read:
  5963                           
  5964                           	psect	text27
  5965  0D28                     __ptext27:	
  5966 ;; *************** function ___fttol *****************
  5967 ;; Defined at:
  5968 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\fttol.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;  f1              3   37[BANK0 ] float 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  lval            4   45[BANK0 ] unsigned long 
  5973 ;;  exp1            1   49[BANK0 ] unsigned char 
  5974 ;;  sign1           1   44[BANK0 ] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  4   37[BANK0 ] long 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0, btemp+1
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5984 ;;      Params:         0       4       0       0       0
  5985 ;;      Locals:         0       6       0       0       0
  5986 ;;      Temps:          0       3       0       0       0
  5987 ;;      Totals:         0      13       0       0       0
  5988 ;;Total ram usage:       13 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    2
  5991 ;; This function calls:
  5992 ;;		Nothing
  5993 ;; This function is called by:
  5994 ;;		_Adc_Rpm_Read
  5995 ;;		_Adc_Pwm_Read
  5996 ;;		_Adc_Min_Read
  5997 ;;		_Adc_Temp_Read
  5998 ;;		_Pwm1_init
  5999 ;;		_Pwm1
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           
  6004                           ;psect for function ___fttol
  6005  0D28                     ___fttol:
  6006                           
  6007                           ;incstack = 0
  6008                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  6009  0D28  1283               	bcf	3,5	;RP0=0, select bank0
  6010  0D29  1303               	bcf	3,6	;RP1=0, select bank0
  6011  0D2A  0845               	movf	___fttol@f1,w
  6012  0D2B  00C9               	movwf	??___fttol
  6013  0D2C  0846               	movf	___fttol@f1+1,w
  6014  0D2D  00CA               	movwf	??___fttol+1
  6015  0D2E  0847               	movf	___fttol@f1+2,w
  6016  0D2F  00CB               	movwf	??___fttol+2
  6017  0D30  1003               	clrc
  6018  0D31  0D4A               	rlf	??___fttol+1,w
  6019  0D32  0D4B               	rlf	??___fttol+2,w
  6020  0D33  00FF               	movwf	127
  6021  0D34  087F               	movf	127,w
  6022  0D35  00D1               	movwf	___fttol@exp1
  6023  0D36  0851               	movf	___fttol@exp1,w
  6024  0D37  1D03               	btfss	3,2
  6025  0D38  2D42               	goto	l2480
  6026  0D39                     l2476:
  6027  0D39  3000               	movlw	0
  6028  0D3A  00C8               	movwf	?___fttol+3
  6029  0D3B  3000               	movlw	0
  6030  0D3C  00C7               	movwf	?___fttol+2
  6031  0D3D  3000               	movlw	0
  6032  0D3E  00C6               	movwf	?___fttol+1
  6033  0D3F  3000               	movlw	0
  6034  0D40  00C5               	movwf	?___fttol
  6035  0D41  0008               	return
  6036  0D42                     l2480:
  6037  0D42  0845               	movf	___fttol@f1,w
  6038  0D43  00C9               	movwf	??___fttol
  6039  0D44  0846               	movf	___fttol@f1+1,w
  6040  0D45  00CA               	movwf	??___fttol+1
  6041  0D46  0847               	movf	___fttol@f1+2,w
  6042  0D47  00CB               	movwf	??___fttol+2
  6043  0D48  3017               	movlw	23
  6044  0D49                     u2005:
  6045  0D49  1003               	clrc
  6046  0D4A  0CCB               	rrf	??___fttol+2,f
  6047  0D4B  0CCA               	rrf	??___fttol+1,f
  6048  0D4C  0CC9               	rrf	??___fttol,f
  6049  0D4D  3EFF               	addlw	-1
  6050  0D4E  1D03               	skipz
  6051  0D4F  2D49               	goto	u2005
  6052  0D50  0849               	movf	??___fttol,w
  6053  0D51  00FF               	movwf	127
  6054  0D52  087F               	movf	127,w
  6055  0D53  00CC               	movwf	___fttol@sign1
  6056  0D54  17C6               	bsf	___fttol@f1+1,7
  6057  0D55  30FF               	movlw	255
  6058  0D56  05C5               	andwf	___fttol@f1,f
  6059  0D57  30FF               	movlw	255
  6060  0D58  05C6               	andwf	___fttol@f1+1,f
  6061  0D59  3000               	movlw	0
  6062  0D5A  05C7               	andwf	___fttol@f1+2,f
  6063  0D5B  0845               	movf	___fttol@f1,w
  6064  0D5C  00CD               	movwf	___fttol@lval
  6065  0D5D  0846               	movf	___fttol@f1+1,w
  6066  0D5E  00CE               	movwf	___fttol@lval+1
  6067  0D5F  0847               	movf	___fttol@f1+2,w
  6068  0D60  00CF               	movwf	___fttol@lval+2
  6069  0D61  01D0               	clrf	___fttol@lval+3
  6070  0D62  308E               	movlw	142
  6071  0D63  02D1               	subwf	___fttol@exp1,f
  6072  0D64  1FD1               	btfss	___fttol@exp1,7
  6073  0D65  2D7B               	goto	l2502
  6074  0D66  0851               	movf	___fttol@exp1,w
  6075  0D67  3A80               	xorlw	128
  6076  0D68  3E8F               	addlw	143
  6077  0D69  1C03               	btfss	3,0
  6078  0D6A  2D39               	goto	l2476
  6079  0D6B                     l2498:
  6080  0D6B  3001               	movlw	1
  6081  0D6C                     u2035:
  6082  0D6C  1003               	clrc
  6083  0D6D  0CD0               	rrf	___fttol@lval+3,f
  6084  0D6E  0CCF               	rrf	___fttol@lval+2,f
  6085  0D6F  0CCE               	rrf	___fttol@lval+1,f
  6086  0D70  0CCD               	rrf	___fttol@lval,f
  6087  0D71  3EFF               	addlw	-1
  6088  0D72  1D03               	skipz
  6089  0D73  2D6C               	goto	u2035
  6090  0D74  3001               	movlw	1
  6091  0D75  00FF               	movwf	127
  6092  0D76  087F               	movf	127,w
  6093  0D77  07D1               	addwf	___fttol@exp1,f
  6094  0D78  1903               	btfsc	3,2
  6095  0D79  2D8E               	goto	l2510
  6096  0D7A  2D6B               	goto	l2498
  6097  0D7B                     l2502:
  6098  0D7B  3018               	movlw	24
  6099  0D7C  0251               	subwf	___fttol@exp1,w
  6100  0D7D  1803               	btfsc	3,0
  6101  0D7E  2D39               	goto	l2476
  6102  0D7F                     l921:
  6103  0D7F  0851               	movf	___fttol@exp1,w
  6104  0D80  1903               	btfsc	3,2
  6105  0D81  2D8E               	goto	l2510
  6106  0D82  3001               	movlw	1
  6107  0D83  00C9               	movwf	??___fttol
  6108  0D84                     u2065:
  6109  0D84  1003               	clrc
  6110  0D85  0DCD               	rlf	___fttol@lval,f
  6111  0D86  0DCE               	rlf	___fttol@lval+1,f
  6112  0D87  0DCF               	rlf	___fttol@lval+2,f
  6113  0D88  0DD0               	rlf	___fttol@lval+3,f
  6114  0D89  0BC9               	decfsz	??___fttol,f
  6115  0D8A  2D84               	goto	u2065
  6116  0D8B  3001               	movlw	1
  6117  0D8C  02D1               	subwf	___fttol@exp1,f
  6118  0D8D  2D7F               	goto	l921
  6119  0D8E                     l2510:
  6120  0D8E  084C               	movf	___fttol@sign1,w
  6121  0D8F  1903               	btfsc	3,2
  6122  0D90  2D9C               	goto	l2514
  6123  0D91  09CD               	comf	___fttol@lval,f
  6124  0D92  09CE               	comf	___fttol@lval+1,f
  6125  0D93  09CF               	comf	___fttol@lval+2,f
  6126  0D94  09D0               	comf	___fttol@lval+3,f
  6127  0D95  0ACD               	incf	___fttol@lval,f
  6128  0D96  1903               	skipnz
  6129  0D97  0ACE               	incf	___fttol@lval+1,f
  6130  0D98  1903               	skipnz
  6131  0D99  0ACF               	incf	___fttol@lval+2,f
  6132  0D9A  1903               	skipnz
  6133  0D9B  0AD0               	incf	___fttol@lval+3,f
  6134  0D9C                     l2514:
  6135  0D9C  0850               	movf	___fttol@lval+3,w
  6136  0D9D  00C8               	movwf	?___fttol+3
  6137  0D9E  084F               	movf	___fttol@lval+2,w
  6138  0D9F  00C7               	movwf	?___fttol+2
  6139  0DA0  084E               	movf	___fttol@lval+1,w
  6140  0DA1  00C6               	movwf	?___fttol+1
  6141  0DA2  084D               	movf	___fttol@lval,w
  6142  0DA3  00C5               	movwf	?___fttol
  6143  0DA4  0008               	return
  6144  0DA5                     __end_of___fttol:
  6145                           
  6146                           	psect	text28
  6147  0329                     __ptext28:	
  6148 ;; *************** function ___ftmul *****************
  6149 ;; Defined at:
  6150 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftmul.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  f1              3    7[BANK0 ] float 
  6153 ;;  f2              3   10[BANK0 ] float 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
  6156 ;;  sign            1   21[BANK0 ] unsigned char 
  6157 ;;  cntr            1   20[BANK0 ] unsigned char 
  6158 ;;  exp             1   16[BANK0 ] unsigned char 
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  3    7[BANK0 ] float 
  6161 ;; Registers used:
  6162 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6168 ;;      Params:         0       6       0       0       0
  6169 ;;      Locals:         0       6       0       0       0
  6170 ;;      Temps:          0       3       0       0       0
  6171 ;;      Totals:         0      15       0       0       0
  6172 ;;Total ram usage:       15 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; Hardware stack levels required when called:    3
  6175 ;; This function calls:
  6176 ;;		___ftpack
  6177 ;; This function is called by:
  6178 ;;		_Adc_Rpm_Read
  6179 ;;		_Adc_Pwm_Read
  6180 ;;		_Adc_Min_Read
  6181 ;;		_Adc_Temp_Read
  6182 ;;		_Pwm1
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           
  6187                           ;psect for function ___ftmul
  6188  0329                     ___ftmul:
  6189                           
  6190                           ;incstack = 0
  6191                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6192  0329  1283               	bcf	3,5	;RP0=0, select bank0
  6193  032A  1303               	bcf	3,6	;RP1=0, select bank0
  6194  032B  0827               	movf	___ftmul@f1,w
  6195  032C  00AD               	movwf	??___ftmul
  6196  032D  0828               	movf	___ftmul@f1+1,w
  6197  032E  00AE               	movwf	??___ftmul+1
  6198  032F  0829               	movf	___ftmul@f1+2,w
  6199  0330  00AF               	movwf	??___ftmul+2
  6200  0331  1003               	clrc
  6201  0332  0D2E               	rlf	??___ftmul+1,w
  6202  0333  0D2F               	rlf	??___ftmul+2,w
  6203  0334  00FF               	movwf	127
  6204  0335  087F               	movf	127,w
  6205  0336  00B0               	movwf	___ftmul@exp
  6206  0337  0830               	movf	___ftmul@exp,w
  6207  0338  1D03               	btfss	3,2
  6208  0339  2B41               	goto	l3462
  6209  033A  3000               	movlw	0
  6210  033B  00A7               	movwf	?___ftmul
  6211  033C  3000               	movlw	0
  6212  033D  00A8               	movwf	?___ftmul+1
  6213  033E  3000               	movlw	0
  6214  033F  00A9               	movwf	?___ftmul+2
  6215  0340  0008               	return
  6216  0341                     l3462:
  6217  0341  082A               	movf	___ftmul@f2,w
  6218  0342  00AD               	movwf	??___ftmul
  6219  0343  082B               	movf	___ftmul@f2+1,w
  6220  0344  00AE               	movwf	??___ftmul+1
  6221  0345  082C               	movf	___ftmul@f2+2,w
  6222  0346  00AF               	movwf	??___ftmul+2
  6223  0347  1003               	clrc
  6224  0348  0D2E               	rlf	??___ftmul+1,w
  6225  0349  0D2F               	rlf	??___ftmul+2,w
  6226  034A  00FF               	movwf	127
  6227  034B  087F               	movf	127,w
  6228  034C  00B5               	movwf	___ftmul@sign
  6229  034D  0835               	movf	___ftmul@sign,w
  6230  034E  1D03               	btfss	3,2
  6231  034F  2B57               	goto	l3468
  6232  0350  3000               	movlw	0
  6233  0351  00A7               	movwf	?___ftmul
  6234  0352  3000               	movlw	0
  6235  0353  00A8               	movwf	?___ftmul+1
  6236  0354  3000               	movlw	0
  6237  0355  00A9               	movwf	?___ftmul+2
  6238  0356  0008               	return
  6239  0357                     l3468:
  6240  0357  0835               	movf	___ftmul@sign,w
  6241  0358  3E7B               	addlw	123
  6242  0359  00FF               	movwf	127
  6243  035A  087F               	movf	127,w
  6244  035B  07B0               	addwf	___ftmul@exp,f
  6245  035C  0827               	movf	___ftmul@f1,w
  6246  035D  00AD               	movwf	??___ftmul
  6247  035E  0828               	movf	___ftmul@f1+1,w
  6248  035F  00AE               	movwf	??___ftmul+1
  6249  0360  0829               	movf	___ftmul@f1+2,w
  6250  0361  00AF               	movwf	??___ftmul+2
  6251  0362  3010               	movlw	16
  6252  0363                     u3385:
  6253  0363  1003               	clrc
  6254  0364  0CAF               	rrf	??___ftmul+2,f
  6255  0365  0CAE               	rrf	??___ftmul+1,f
  6256  0366  0CAD               	rrf	??___ftmul,f
  6257  0367  3EFF               	addlw	-1
  6258  0368  1D03               	skipz
  6259  0369  2B63               	goto	u3385
  6260  036A  082D               	movf	??___ftmul,w
  6261  036B  00FF               	movwf	127
  6262  036C  087F               	movf	127,w
  6263  036D  00B5               	movwf	___ftmul@sign
  6264  036E  082A               	movf	___ftmul@f2,w
  6265  036F  00AD               	movwf	??___ftmul
  6266  0370  082B               	movf	___ftmul@f2+1,w
  6267  0371  00AE               	movwf	??___ftmul+1
  6268  0372  082C               	movf	___ftmul@f2+2,w
  6269  0373  00AF               	movwf	??___ftmul+2
  6270  0374  3010               	movlw	16
  6271  0375                     u3395:
  6272  0375  1003               	clrc
  6273  0376  0CAF               	rrf	??___ftmul+2,f
  6274  0377  0CAE               	rrf	??___ftmul+1,f
  6275  0378  0CAD               	rrf	??___ftmul,f
  6276  0379  3EFF               	addlw	-1
  6277  037A  1D03               	skipz
  6278  037B  2B75               	goto	u3395
  6279  037C  082D               	movf	??___ftmul,w
  6280  037D  00FF               	movwf	127
  6281  037E  087F               	movf	127,w
  6282  037F  06B5               	xorwf	___ftmul@sign,f
  6283  0380  3080               	movlw	128
  6284  0381  00FF               	movwf	127
  6285  0382  087F               	movf	127,w
  6286  0383  05B5               	andwf	___ftmul@sign,f
  6287  0384  17A8               	bsf	___ftmul@f1+1,7
  6288  0385  17AB               	bsf	___ftmul@f2+1,7
  6289  0386  30FF               	movlw	255
  6290  0387  05AA               	andwf	___ftmul@f2,f
  6291  0388  30FF               	movlw	255
  6292  0389  05AB               	andwf	___ftmul@f2+1,f
  6293  038A  3000               	movlw	0
  6294  038B  05AC               	andwf	___ftmul@f2+2,f
  6295  038C  3000               	movlw	0
  6296  038D  00B1               	movwf	___ftmul@f3_as_product
  6297  038E  3000               	movlw	0
  6298  038F  00B2               	movwf	___ftmul@f3_as_product+1
  6299  0390  3000               	movlw	0
  6300  0391  00B3               	movwf	___ftmul@f3_as_product+2
  6301  0392  3007               	movlw	7
  6302  0393  00FF               	movwf	127
  6303  0394  087F               	movf	127,w
  6304  0395  00B4               	movwf	___ftmul@cntr
  6305  0396                     l3480:
  6306  0396  1C27               	btfss	___ftmul@f1,0
  6307  0397  2BA6               	goto	l3484
  6308  0398  082A               	movf	___ftmul@f2,w
  6309  0399  07B1               	addwf	___ftmul@f3_as_product,f
  6310  039A  082B               	movf	___ftmul@f2+1,w
  6311  039B  1103               	clrz
  6312  039C  1803               	skipnc
  6313  039D  0A2B               	incf	___ftmul@f2+1,w
  6314  039E  1D03               	btfss	3,2
  6315  039F  07B2               	addwf	___ftmul@f3_as_product+1,f
  6316  03A0  082C               	movf	___ftmul@f2+2,w
  6317  03A1  1103               	clrz
  6318  03A2  1803               	skipnc
  6319  03A3  0A2C               	incf	___ftmul@f2+2,w
  6320  03A4  1D03               	btfss	3,2
  6321  03A5  07B3               	addwf	___ftmul@f3_as_product+2,f
  6322  03A6                     l3484:
  6323  03A6  3001               	movlw	1
  6324  03A7                     u3425:
  6325  03A7  1003               	clrc
  6326  03A8  0CA9               	rrf	___ftmul@f1+2,f
  6327  03A9  0CA8               	rrf	___ftmul@f1+1,f
  6328  03AA  0CA7               	rrf	___ftmul@f1,f
  6329  03AB  3EFF               	addlw	-1
  6330  03AC  1D03               	skipz
  6331  03AD  2BA7               	goto	u3425
  6332  03AE  3001               	movlw	1
  6333  03AF                     u3435:
  6334  03AF  1003               	clrc
  6335  03B0  0DAA               	rlf	___ftmul@f2,f
  6336  03B1  0DAB               	rlf	___ftmul@f2+1,f
  6337  03B2  0DAC               	rlf	___ftmul@f2+2,f
  6338  03B3  3EFF               	addlw	-1
  6339  03B4  1D03               	skipz
  6340  03B5  2BAF               	goto	u3435
  6341  03B6  3001               	movlw	1
  6342  03B7  02B4               	subwf	___ftmul@cntr,f
  6343  03B8  1D03               	btfss	3,2
  6344  03B9  2B96               	goto	l3480
  6345  03BA  3009               	movlw	9
  6346  03BB  00FF               	movwf	127
  6347  03BC  087F               	movf	127,w
  6348  03BD  00B4               	movwf	___ftmul@cntr
  6349  03BE                     l3492:
  6350  03BE  1C27               	btfss	___ftmul@f1,0
  6351  03BF  2BCE               	goto	l3496
  6352  03C0  082A               	movf	___ftmul@f2,w
  6353  03C1  07B1               	addwf	___ftmul@f3_as_product,f
  6354  03C2  082B               	movf	___ftmul@f2+1,w
  6355  03C3  1103               	clrz
  6356  03C4  1803               	skipnc
  6357  03C5  0A2B               	incf	___ftmul@f2+1,w
  6358  03C6  1D03               	btfss	3,2
  6359  03C7  07B2               	addwf	___ftmul@f3_as_product+1,f
  6360  03C8  082C               	movf	___ftmul@f2+2,w
  6361  03C9  1103               	clrz
  6362  03CA  1803               	skipnc
  6363  03CB  0A2C               	incf	___ftmul@f2+2,w
  6364  03CC  1D03               	btfss	3,2
  6365  03CD  07B3               	addwf	___ftmul@f3_as_product+2,f
  6366  03CE                     l3496:
  6367  03CE  3001               	movlw	1
  6368  03CF                     u3475:
  6369  03CF  1003               	clrc
  6370  03D0  0CA9               	rrf	___ftmul@f1+2,f
  6371  03D1  0CA8               	rrf	___ftmul@f1+1,f
  6372  03D2  0CA7               	rrf	___ftmul@f1,f
  6373  03D3  3EFF               	addlw	-1
  6374  03D4  1D03               	skipz
  6375  03D5  2BCF               	goto	u3475
  6376  03D6  3001               	movlw	1
  6377  03D7                     u3485:
  6378  03D7  1003               	clrc
  6379  03D8  0CB3               	rrf	___ftmul@f3_as_product+2,f
  6380  03D9  0CB2               	rrf	___ftmul@f3_as_product+1,f
  6381  03DA  0CB1               	rrf	___ftmul@f3_as_product,f
  6382  03DB  3EFF               	addlw	-1
  6383  03DC  1D03               	skipz
  6384  03DD  2BD7               	goto	u3485
  6385  03DE  3001               	movlw	1
  6386  03DF  02B4               	subwf	___ftmul@cntr,f
  6387  03E0  1D03               	btfss	3,2
  6388  03E1  2BBE               	goto	l3492
  6389  03E2  0831               	movf	___ftmul@f3_as_product,w
  6390  03E3  00F2               	movwf	___ftpack@arg
  6391  03E4  0832               	movf	___ftmul@f3_as_product+1,w
  6392  03E5  00F3               	movwf	___ftpack@arg+1
  6393  03E6  0833               	movf	___ftmul@f3_as_product+2,w
  6394  03E7  00F4               	movwf	___ftpack@arg+2
  6395  03E8  0830               	movf	___ftmul@exp,w
  6396  03E9  00FF               	movwf	127
  6397  03EA  087F               	movf	127,w
  6398  03EB  00F5               	movwf	___ftpack@exp
  6399  03EC  0835               	movf	___ftmul@sign,w
  6400  03ED  00FF               	movwf	127
  6401  03EE  087F               	movf	127,w
  6402  03EF  00F6               	movwf	___ftpack@sign
  6403  03F0  120A  158A  23C8   	fcall	___ftpack
  6404  03F3  0872               	movf	?___ftpack,w
  6405  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  6406  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  6407  03F6  00A7               	movwf	?___ftmul
  6408  03F7  0873               	movf	?___ftpack+1,w
  6409  03F8  00A8               	movwf	?___ftmul+1
  6410  03F9  0874               	movf	?___ftpack+2,w
  6411  03FA  00A9               	movwf	?___ftmul+2
  6412  03FB  0008               	return
  6413  03FC                     __end_of___ftmul:
  6414                           
  6415                           	psect	text29
  6416  0628                     __ptext29:	
  6417 ;; *************** function ___ftdiv *****************
  6418 ;; Defined at:
  6419 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftdiv.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  f2              3   22[BANK0 ] float 
  6422 ;;  f1              3   25[BANK0 ] float 
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;  f3              3   32[BANK0 ] float 
  6425 ;;  sign            1   36[BANK0 ] unsigned char 
  6426 ;;  exp             1   35[BANK0 ] unsigned char 
  6427 ;;  cntr            1   31[BANK0 ] unsigned char 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  3   22[BANK0 ] float 
  6430 ;; Registers used:
  6431 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6437 ;;      Params:         0       6       0       0       0
  6438 ;;      Locals:         0       6       0       0       0
  6439 ;;      Temps:          0       3       0       0       0
  6440 ;;      Totals:         0      15       0       0       0
  6441 ;;Total ram usage:       15 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    3
  6444 ;; This function calls:
  6445 ;;		___ftpack
  6446 ;; This function is called by:
  6447 ;;		_Adc_Rpm_Read
  6448 ;;		_Adc_Pwm_Read
  6449 ;;		_Adc_Min_Read
  6450 ;;		_Adc_Temp_Read
  6451 ;;		_Pwm1_init
  6452 ;;		_Pwm1
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           
  6457                           ;psect for function ___ftdiv
  6458  0628                     ___ftdiv:
  6459                           
  6460                           ;incstack = 0
  6461                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6462  0628  1283               	bcf	3,5	;RP0=0, select bank0
  6463  0629  1303               	bcf	3,6	;RP1=0, select bank0
  6464  062A  0839               	movf	___ftdiv@f1,w
  6465  062B  00BC               	movwf	??___ftdiv
  6466  062C  083A               	movf	___ftdiv@f1+1,w
  6467  062D  00BD               	movwf	??___ftdiv+1
  6468  062E  083B               	movf	___ftdiv@f1+2,w
  6469  062F  00BE               	movwf	??___ftdiv+2
  6470  0630  1003               	clrc
  6471  0631  0D3D               	rlf	??___ftdiv+1,w
  6472  0632  0D3E               	rlf	??___ftdiv+2,w
  6473  0633  00FF               	movwf	127
  6474  0634  087F               	movf	127,w
  6475  0635  00C3               	movwf	___ftdiv@exp
  6476  0636  0843               	movf	___ftdiv@exp,w
  6477  0637  1D03               	btfss	3,2
  6478  0638  2E40               	goto	l3416
  6479  0639  3000               	movlw	0
  6480  063A  00B6               	movwf	?___ftdiv
  6481  063B  3000               	movlw	0
  6482  063C  00B7               	movwf	?___ftdiv+1
  6483  063D  3000               	movlw	0
  6484  063E  00B8               	movwf	?___ftdiv+2
  6485  063F  0008               	return
  6486  0640                     l3416:
  6487  0640  0836               	movf	___ftdiv@f2,w
  6488  0641  00BC               	movwf	??___ftdiv
  6489  0642  0837               	movf	___ftdiv@f2+1,w
  6490  0643  00BD               	movwf	??___ftdiv+1
  6491  0644  0838               	movf	___ftdiv@f2+2,w
  6492  0645  00BE               	movwf	??___ftdiv+2
  6493  0646  1003               	clrc
  6494  0647  0D3D               	rlf	??___ftdiv+1,w
  6495  0648  0D3E               	rlf	??___ftdiv+2,w
  6496  0649  00FF               	movwf	127
  6497  064A  087F               	movf	127,w
  6498  064B  00C4               	movwf	___ftdiv@sign
  6499  064C  0844               	movf	___ftdiv@sign,w
  6500  064D  1D03               	btfss	3,2
  6501  064E  2E56               	goto	l3422
  6502  064F  3000               	movlw	0
  6503  0650  00B6               	movwf	?___ftdiv
  6504  0651  3000               	movlw	0
  6505  0652  00B7               	movwf	?___ftdiv+1
  6506  0653  3000               	movlw	0
  6507  0654  00B8               	movwf	?___ftdiv+2
  6508  0655  0008               	return
  6509  0656                     l3422:
  6510  0656  3000               	movlw	0
  6511  0657  00C0               	movwf	___ftdiv@f3
  6512  0658  3000               	movlw	0
  6513  0659  00C1               	movwf	___ftdiv@f3+1
  6514  065A  3000               	movlw	0
  6515  065B  00C2               	movwf	___ftdiv@f3+2
  6516  065C  3089               	movlw	137
  6517  065D  0744               	addwf	___ftdiv@sign,w
  6518  065E  00BC               	movwf	??___ftdiv
  6519  065F  083C               	movf	??___ftdiv,w
  6520  0660  02C3               	subwf	___ftdiv@exp,f
  6521  0661  0839               	movf	___ftdiv@f1,w
  6522  0662  00BC               	movwf	??___ftdiv
  6523  0663  083A               	movf	___ftdiv@f1+1,w
  6524  0664  00BD               	movwf	??___ftdiv+1
  6525  0665  083B               	movf	___ftdiv@f1+2,w
  6526  0666  00BE               	movwf	??___ftdiv+2
  6527  0667  3010               	movlw	16
  6528  0668                     u3305:
  6529  0668  1003               	clrc
  6530  0669  0CBE               	rrf	??___ftdiv+2,f
  6531  066A  0CBD               	rrf	??___ftdiv+1,f
  6532  066B  0CBC               	rrf	??___ftdiv,f
  6533  066C  3EFF               	addlw	-1
  6534  066D  1D03               	skipz
  6535  066E  2E68               	goto	u3305
  6536  066F  083C               	movf	??___ftdiv,w
  6537  0670  00FF               	movwf	127
  6538  0671  087F               	movf	127,w
  6539  0672  00C4               	movwf	___ftdiv@sign
  6540  0673  0836               	movf	___ftdiv@f2,w
  6541  0674  00BC               	movwf	??___ftdiv
  6542  0675  0837               	movf	___ftdiv@f2+1,w
  6543  0676  00BD               	movwf	??___ftdiv+1
  6544  0677  0838               	movf	___ftdiv@f2+2,w
  6545  0678  00BE               	movwf	??___ftdiv+2
  6546  0679  3010               	movlw	16
  6547  067A                     u3315:
  6548  067A  1003               	clrc
  6549  067B  0CBE               	rrf	??___ftdiv+2,f
  6550  067C  0CBD               	rrf	??___ftdiv+1,f
  6551  067D  0CBC               	rrf	??___ftdiv,f
  6552  067E  3EFF               	addlw	-1
  6553  067F  1D03               	skipz
  6554  0680  2E7A               	goto	u3315
  6555  0681  083C               	movf	??___ftdiv,w
  6556  0682  00FF               	movwf	127
  6557  0683  087F               	movf	127,w
  6558  0684  06C4               	xorwf	___ftdiv@sign,f
  6559  0685  3080               	movlw	128
  6560  0686  00FF               	movwf	127
  6561  0687  087F               	movf	127,w
  6562  0688  05C4               	andwf	___ftdiv@sign,f
  6563  0689  17BA               	bsf	___ftdiv@f1+1,7
  6564  068A  30FF               	movlw	255
  6565  068B  05B9               	andwf	___ftdiv@f1,f
  6566  068C  30FF               	movlw	255
  6567  068D  05BA               	andwf	___ftdiv@f1+1,f
  6568  068E  3000               	movlw	0
  6569  068F  05BB               	andwf	___ftdiv@f1+2,f
  6570  0690  17B7               	bsf	___ftdiv@f2+1,7
  6571  0691  30FF               	movlw	255
  6572  0692  05B6               	andwf	___ftdiv@f2,f
  6573  0693  30FF               	movlw	255
  6574  0694  05B7               	andwf	___ftdiv@f2+1,f
  6575  0695  3000               	movlw	0
  6576  0696  05B8               	andwf	___ftdiv@f2+2,f
  6577  0697  3018               	movlw	24
  6578  0698  00FF               	movwf	127
  6579  0699  087F               	movf	127,w
  6580  069A  00BF               	movwf	___ftdiv@cntr
  6581  069B                     l3440:
  6582  069B  3001               	movlw	1
  6583  069C                     u3325:
  6584  069C  1003               	clrc
  6585  069D  0DC0               	rlf	___ftdiv@f3,f
  6586  069E  0DC1               	rlf	___ftdiv@f3+1,f
  6587  069F  0DC2               	rlf	___ftdiv@f3+2,f
  6588  06A0  3EFF               	addlw	-1
  6589  06A1  1D03               	skipz
  6590  06A2  2E9C               	goto	u3325
  6591  06A3  0838               	movf	___ftdiv@f2+2,w
  6592  06A4  023B               	subwf	___ftdiv@f1+2,w
  6593  06A5  1D03               	skipz
  6594  06A6  2EAD               	goto	u3335
  6595  06A7  0837               	movf	___ftdiv@f2+1,w
  6596  06A8  023A               	subwf	___ftdiv@f1+1,w
  6597  06A9  1D03               	skipz
  6598  06AA  2EAD               	goto	u3335
  6599  06AB  0836               	movf	___ftdiv@f2,w
  6600  06AC  0239               	subwf	___ftdiv@f1,w
  6601  06AD                     u3335:
  6602  06AD  1C03               	skipc
  6603  06AE  2EBA               	goto	l3448
  6604  06AF  0836               	movf	___ftdiv@f2,w
  6605  06B0  02B9               	subwf	___ftdiv@f1,f
  6606  06B1  0837               	movf	___ftdiv@f2+1,w
  6607  06B2  1C03               	skipc
  6608  06B3  0F37               	incfsz	___ftdiv@f2+1,w
  6609  06B4  02BA               	subwf	___ftdiv@f1+1,f
  6610  06B5  0838               	movf	___ftdiv@f2+2,w
  6611  06B6  1C03               	skipc
  6612  06B7  0A38               	incf	___ftdiv@f2+2,w
  6613  06B8  02BB               	subwf	___ftdiv@f1+2,f
  6614  06B9  1440               	bsf	___ftdiv@f3,0
  6615  06BA                     l3448:
  6616  06BA  3001               	movlw	1
  6617  06BB                     u3345:
  6618  06BB  1003               	clrc
  6619  06BC  0DB9               	rlf	___ftdiv@f1,f
  6620  06BD  0DBA               	rlf	___ftdiv@f1+1,f
  6621  06BE  0DBB               	rlf	___ftdiv@f1+2,f
  6622  06BF  3EFF               	addlw	-1
  6623  06C0  1D03               	skipz
  6624  06C1  2EBB               	goto	u3345
  6625  06C2  3001               	movlw	1
  6626  06C3  02BF               	subwf	___ftdiv@cntr,f
  6627  06C4  1D03               	btfss	3,2
  6628  06C5  2E9B               	goto	l3440
  6629  06C6  0840               	movf	___ftdiv@f3,w
  6630  06C7  00F2               	movwf	___ftpack@arg
  6631  06C8  0841               	movf	___ftdiv@f3+1,w
  6632  06C9  00F3               	movwf	___ftpack@arg+1
  6633  06CA  0842               	movf	___ftdiv@f3+2,w
  6634  06CB  00F4               	movwf	___ftpack@arg+2
  6635  06CC  0843               	movf	___ftdiv@exp,w
  6636  06CD  00FF               	movwf	127
  6637  06CE  087F               	movf	127,w
  6638  06CF  00F5               	movwf	___ftpack@exp
  6639  06D0  0844               	movf	___ftdiv@sign,w
  6640  06D1  00FF               	movwf	127
  6641  06D2  087F               	movf	127,w
  6642  06D3  00F6               	movwf	___ftpack@sign
  6643  06D4  120A  158A  23C8   	fcall	___ftpack
  6644  06D7  0872               	movf	?___ftpack,w
  6645  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  6646  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  6647  06DA  00B6               	movwf	?___ftdiv
  6648  06DB  0873               	movf	?___ftpack+1,w
  6649  06DC  00B7               	movwf	?___ftdiv+1
  6650  06DD  0874               	movf	?___ftpack+2,w
  6651  06DE  00B8               	movwf	?___ftdiv+2
  6652  06DF  0008               	return
  6653  06E0                     __end_of___ftdiv:
  6654                           
  6655                           	psect	text30
  6656  089F                     __ptext30:	
  6657 ;; *************** function ___awtoft *****************
  6658 ;; Defined at:
  6659 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\awtoft.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  c               2    3[BANK0 ] int 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  sign            1    6[BANK0 ] unsigned char 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  3    3[BANK0 ] float 
  6666 ;; Registers used:
  6667 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6673 ;;      Params:         0       3       0       0       0
  6674 ;;      Locals:         0       1       0       0       0
  6675 ;;      Temps:          0       0       0       0       0
  6676 ;;      Totals:         0       4       0       0       0
  6677 ;;Total ram usage:        4 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    3
  6680 ;; This function calls:
  6681 ;;		___ftpack
  6682 ;; This function is called by:
  6683 ;;		_Adc_Rpm_Read
  6684 ;;		_Adc_Pwm_Read
  6685 ;;		_Adc_Min_Read
  6686 ;;		_Adc_Temp_Read
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function ___awtoft
  6692  089F                     ___awtoft:
  6693                           
  6694                           ;incstack = 0
  6695                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6696  089F  1283               	bcf	3,5	;RP0=0, select bank0
  6697  08A0  1303               	bcf	3,6	;RP1=0, select bank0
  6698  08A1  01A6               	clrf	___awtoft@sign
  6699  08A2  1FA4               	btfss	___awtoft@c+1,7
  6700  08A3  28AB               	goto	l3406
  6701  08A4  09A3               	comf	___awtoft@c,f
  6702  08A5  09A4               	comf	___awtoft@c+1,f
  6703  08A6  0AA3               	incf	___awtoft@c,f
  6704  08A7  1903               	skipnz
  6705  08A8  0AA4               	incf	___awtoft@c+1,f
  6706  08A9  01A6               	clrf	___awtoft@sign
  6707  08AA  0AA6               	incf	___awtoft@sign,f
  6708  08AB                     l3406:
  6709  08AB  0823               	movf	___awtoft@c,w
  6710  08AC  00F2               	movwf	___ftpack@arg
  6711  08AD  0824               	movf	___awtoft@c+1,w
  6712  08AE  00F3               	movwf	___ftpack@arg+1
  6713  08AF  01F4               	clrf	___ftpack@arg+2
  6714  08B0  308E               	movlw	142
  6715  08B1  00FF               	movwf	127
  6716  08B2  087F               	movf	127,w
  6717  08B3  00F5               	movwf	___ftpack@exp
  6718  08B4  0826               	movf	___awtoft@sign,w
  6719  08B5  00FF               	movwf	127
  6720  08B6  087F               	movf	127,w
  6721  08B7  00F6               	movwf	___ftpack@sign
  6722  08B8  120A  158A  23C8   	fcall	___ftpack
  6723  08BB  0872               	movf	?___ftpack,w
  6724  08BC  1283               	bcf	3,5	;RP0=0, select bank0
  6725  08BD  1303               	bcf	3,6	;RP1=0, select bank0
  6726  08BE  00A3               	movwf	?___awtoft
  6727  08BF  0873               	movf	?___ftpack+1,w
  6728  08C0  00A4               	movwf	?___awtoft+1
  6729  08C1  0874               	movf	?___ftpack+2,w
  6730  08C2  00A5               	movwf	?___awtoft+2
  6731  08C3  0008               	return
  6732  08C4                     __end_of___awtoft:
  6733                           
  6734                           	psect	text31
  6735  0BC8                     __ptext31:	
  6736 ;; *************** function ___ftpack *****************
  6737 ;; Defined at:
  6738 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\float.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;  arg             3    2[COMMON] unsigned um
  6741 ;;  exp             1    5[COMMON] unsigned char 
  6742 ;;  sign            1    6[COMMON] unsigned char 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;		None
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  3    2[COMMON] float 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2, status,0, btemp+1
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6754 ;;      Params:         5       0       0       0       0
  6755 ;;      Locals:         0       0       0       0       0
  6756 ;;      Temps:          0       3       0       0       0
  6757 ;;      Totals:         5       3       0       0       0
  6758 ;;Total ram usage:        8 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    2
  6761 ;; This function calls:
  6762 ;;		Nothing
  6763 ;; This function is called by:
  6764 ;;		___awtoft
  6765 ;;		___ftdiv
  6766 ;;		___ftmul
  6767 ;;		___lwtoft
  6768 ;;		___ftadd
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772                           
  6773                           ;psect for function ___ftpack
  6774  0BC8                     ___ftpack:
  6775                           
  6776                           ;incstack = 0
  6777                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  6778  0BC8  0875               	movf	___ftpack@exp,w
  6779  0BC9  1903               	btfsc	3,2
  6780  0BCA  2BD0               	goto	l3352
  6781  0BCB  0874               	movf	___ftpack@arg+2,w
  6782  0BCC  0473               	iorwf	___ftpack@arg+1,w
  6783  0BCD  0472               	iorwf	___ftpack@arg,w
  6784  0BCE  1D03               	skipz
  6785  0BCF  2BE3               	goto	l3360
  6786  0BD0                     l3352:
  6787  0BD0  3000               	movlw	0
  6788  0BD1  00F2               	movwf	?___ftpack
  6789  0BD2  3000               	movlw	0
  6790  0BD3  00F3               	movwf	?___ftpack+1
  6791  0BD4  3000               	movlw	0
  6792  0BD5  00F4               	movwf	?___ftpack+2
  6793  0BD6  0008               	return
  6794  0BD7                     l3356:
  6795  0BD7  3001               	movlw	1
  6796  0BD8  00FF               	movwf	127
  6797  0BD9  087F               	movf	127,w
  6798  0BDA  07F5               	addwf	___ftpack@exp,f
  6799  0BDB  3001               	movlw	1
  6800  0BDC                     u3135:
  6801  0BDC  1003               	clrc
  6802  0BDD  0CF4               	rrf	___ftpack@arg+2,f
  6803  0BDE  0CF3               	rrf	___ftpack@arg+1,f
  6804  0BDF  0CF2               	rrf	___ftpack@arg,f
  6805  0BE0  3EFF               	addlw	-1
  6806  0BE1  1D03               	skipz
  6807  0BE2  2BDC               	goto	u3135
  6808  0BE3                     l3360:
  6809  0BE3  30FE               	movlw	254
  6810  0BE4  0574               	andwf	___ftpack@arg+2,w
  6811  0BE5  1903               	btfsc	3,2
  6812  0BE6  2BFE               	goto	l3368
  6813  0BE7  2BD7               	goto	l3356
  6814  0BE8                     l3362:
  6815  0BE8  3001               	movlw	1
  6816  0BE9  00FF               	movwf	127
  6817  0BEA  087F               	movf	127,w
  6818  0BEB  07F5               	addwf	___ftpack@exp,f
  6819  0BEC  3001               	movlw	1
  6820  0BED  07F2               	addwf	___ftpack@arg,f
  6821  0BEE  3000               	movlw	0
  6822  0BEF  1803               	skipnc
  6823  0BF0  3001               	movlw	1
  6824  0BF1  07F3               	addwf	___ftpack@arg+1,f
  6825  0BF2  3000               	movlw	0
  6826  0BF3  1803               	skipnc
  6827  0BF4  3001               	movlw	1
  6828  0BF5  07F4               	addwf	___ftpack@arg+2,f
  6829  0BF6  3001               	movlw	1
  6830  0BF7                     u3155:
  6831  0BF7  1003               	clrc
  6832  0BF8  0CF4               	rrf	___ftpack@arg+2,f
  6833  0BF9  0CF3               	rrf	___ftpack@arg+1,f
  6834  0BFA  0CF2               	rrf	___ftpack@arg,f
  6835  0BFB  3EFF               	addlw	-1
  6836  0BFC  1D03               	skipz
  6837  0BFD  2BF7               	goto	u3155
  6838  0BFE                     l3368:
  6839  0BFE  30FF               	movlw	255
  6840  0BFF  0574               	andwf	___ftpack@arg+2,w
  6841  0C00  1903               	btfsc	3,2
  6842  0C01  2C11               	goto	l3372
  6843  0C02  2BE8               	goto	l3362
  6844  0C03                     l3374:
  6845  0C03  3002               	movlw	2
  6846  0C04  0275               	subwf	___ftpack@exp,w
  6847  0C05  1C03               	btfss	3,0
  6848  0C06  2C13               	goto	l837
  6849  0C07  3001               	movlw	1
  6850  0C08  02F5               	subwf	___ftpack@exp,f
  6851  0C09  3001               	movlw	1
  6852  0C0A                     u3175:
  6853  0C0A  1003               	clrc
  6854  0C0B  0DF2               	rlf	___ftpack@arg,f
  6855  0C0C  0DF3               	rlf	___ftpack@arg+1,f
  6856  0C0D  0DF4               	rlf	___ftpack@arg+2,f
  6857  0C0E  3EFF               	addlw	-1
  6858  0C0F  1D03               	skipz
  6859  0C10  2C0A               	goto	u3175
  6860  0C11                     l3372:
  6861  0C11  1FF3               	btfss	___ftpack@arg+1,7
  6862  0C12  2C03               	goto	l3374
  6863  0C13                     l837:
  6864  0C13  1875               	btfsc	___ftpack@exp,0
  6865  0C14  2C1B               	goto	l838
  6866  0C15  30FF               	movlw	255
  6867  0C16  05F2               	andwf	___ftpack@arg,f
  6868  0C17  307F               	movlw	127
  6869  0C18  05F3               	andwf	___ftpack@arg+1,f
  6870  0C19  30FF               	movlw	255
  6871  0C1A  05F4               	andwf	___ftpack@arg+2,f
  6872  0C1B                     l838:
  6873  0C1B  1003               	clrc
  6874  0C1C  0CF5               	rrf	___ftpack@exp,f
  6875  0C1D  0875               	movf	___ftpack@exp,w
  6876  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  6877  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  6878  0C20  00A0               	movwf	??___ftpack
  6879  0C21  01A1               	clrf	??___ftpack+1
  6880  0C22  01A2               	clrf	??___ftpack+2
  6881  0C23  3010               	movlw	16
  6882  0C24                     u3215:
  6883  0C24  1003               	clrc
  6884  0C25  0DA0               	rlf	??___ftpack,f
  6885  0C26  0DA1               	rlf	??___ftpack+1,f
  6886  0C27  0DA2               	rlf	??___ftpack+2,f
  6887  0C28  3EFF               	addlw	-1
  6888  0C29  1D03               	skipz
  6889  0C2A  2C24               	goto	u3215
  6890  0C2B  0820               	movf	??___ftpack,w
  6891  0C2C  04F2               	iorwf	___ftpack@arg,f
  6892  0C2D  0821               	movf	??___ftpack+1,w
  6893  0C2E  04F3               	iorwf	___ftpack@arg+1,f
  6894  0C2F  0822               	movf	??___ftpack+2,w
  6895  0C30  04F4               	iorwf	___ftpack@arg+2,f
  6896  0C31  0876               	movf	___ftpack@sign,w
  6897  0C32  1903               	btfsc	3,2
  6898  0C33  0008               	return
  6899  0C34  17F4               	bsf	___ftpack@arg+2,7
  6900  0C35  0008               	return
  6901  0C36                     __end_of___ftpack:
  6902                           
  6903                           	psect	text32
  6904  0A14                     __ptext32:	
  6905 ;; *************** function _Adc *****************
  6906 ;; Defined at:
  6907 ;;		line 25 in file "ADC.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;  channel         1    wreg     unsigned char 
  6910 ;; Auto vars:     Size  Location     Type
  6911 ;;  channel         1    6[COMMON] unsigned char 
  6912 ;;  convertion      2    7[COMMON] int 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  2    2[COMMON] int 
  6915 ;; Registers used:
  6916 ;;		wreg, status,2, status,0, btemp+1
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6922 ;;      Params:         2       0       0       0       0
  6923 ;;      Locals:         3       0       0       0       0
  6924 ;;      Temps:          2       0       0       0       0
  6925 ;;      Totals:         7       0       0       0       0
  6926 ;;Total ram usage:        7 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    2
  6929 ;; This function calls:
  6930 ;;		Nothing
  6931 ;; This function is called by:
  6932 ;;		_Adc_Rpm_Read
  6933 ;;		_Adc_Pwm_Read
  6934 ;;		_Adc_Min_Read
  6935 ;;		_Adc_Temp_Read
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           
  6940                           ;psect for function _Adc
  6941  0A14                     _Adc:
  6942                           
  6943                           ;incstack = 0
  6944                           ; Regs used in _Adc: [wreg+status,2+status,0+btemp+1]
  6945                           ;Adc@channel stored from wreg
  6946  0A14  00F6               	movwf	Adc@channel
  6947                           
  6948                           ;ADC.c: 32:     ADCON0 &= 0xC3;
  6949  0A15  30C3               	movlw	195
  6950  0A16  00FF               	movwf	127
  6951  0A17  087F               	movf	127,w
  6952  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  6953  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  6954  0A1A  059F               	andwf	31,f	;volatile
  6955                           
  6956                           ;ADC.c: 33:     ADCON0 |= channel<<2;
  6957  0A1B  0876               	movf	Adc@channel,w	;volatile
  6958  0A1C  00F4               	movwf	??_Adc
  6959  0A1D  3001               	movlw	1
  6960  0A1E                     u1685:
  6961  0A1E  1003               	clrc
  6962  0A1F  0DF4               	rlf	??_Adc,f
  6963  0A20  3EFF               	addlw	-1
  6964  0A21  1D03               	skipz
  6965  0A22  2A1E               	goto	u1685
  6966  0A23  1003               	clrc
  6967  0A24  0D74               	rlf	??_Adc,w
  6968  0A25  00FF               	movwf	127
  6969  0A26  087F               	movf	127,w
  6970  0A27  049F               	iorwf	31,f	;volatile
  6971                           
  6972                           ;ADC.c: 36:     ADCON0bits.ADON = 1;
  6973  0A28  141F               	bsf	31,0	;volatile
  6974                           
  6975                           ;ADC.c: 37:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  6976  0A29  3074               	movlw	116
  6977  0A2A  00F4               	movwf	??_Adc
  6978  0A2B                     u4357:
  6979  0A2B  0BF4               	decfsz	??_Adc,f
  6980  0A2C  2A2B               	goto	u4357
  6981  0A2D  0000               	nop
  6982                           
  6983                           ;ADC.c: 41:     ADCON0bits.GO_nDONE = 1;
  6984  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  6985  0A2F  1303               	bcf	3,6	;RP1=0, select bank0
  6986  0A30  149F               	bsf	31,1	;volatile
  6987  0A31                     l439:	
  6988                           ;ADC.c: 42:     while(ADCON0bits.GO_nDONE == 1);
  6989                           
  6990  0A31  189F               	btfsc	31,1	;volatile
  6991  0A32  2A31               	goto	l439
  6992                           
  6993                           ;ADC.c: 43:     convertion = ADRESH, convertion = convertion<<8;
  6994  0A33  081E               	movf	30,w	;volatile
  6995  0A34  00F4               	movwf	??_Adc
  6996  0A35  01F5               	clrf	??_Adc+1
  6997  0A36  0874               	movf	??_Adc,w
  6998  0A37  00F7               	movwf	Adc@convertion
  6999  0A38  0875               	movf	??_Adc+1,w
  7000  0A39  00F8               	movwf	Adc@convertion+1
  7001  0A3A  0878               	movf	Adc@convertion+1,w
  7002  0A3B  00F5               	movwf	??_Adc+1
  7003  0A3C  0877               	movf	Adc@convertion,w
  7004  0A3D  00F4               	movwf	??_Adc
  7005  0A3E  0874               	movf	??_Adc,w
  7006  0A3F  00F5               	movwf	??_Adc+1
  7007  0A40  01F4               	clrf	??_Adc
  7008  0A41  0874               	movf	??_Adc,w
  7009  0A42  00F7               	movwf	Adc@convertion
  7010  0A43  0875               	movf	??_Adc+1,w
  7011  0A44  00F8               	movwf	Adc@convertion+1
  7012                           
  7013                           ;ADC.c: 44:     convertion |= ADRESL;
  7014  0A45  1683               	bsf	3,5	;RP0=1, select bank1
  7015  0A46  1303               	bcf	3,6	;RP1=0, select bank1
  7016  0A47  081E               	movf	30,w	;volatile
  7017  0A48  00F4               	movwf	??_Adc
  7018  0A49  01F5               	clrf	??_Adc+1
  7019  0A4A  0874               	movf	??_Adc,w
  7020  0A4B  04F7               	iorwf	Adc@convertion,f
  7021  0A4C  0875               	movf	??_Adc+1,w
  7022  0A4D  04F8               	iorwf	Adc@convertion+1,f
  7023                           
  7024                           ;ADC.c: 48:     ADCON0bits.ADON = 0;
  7025  0A4E  1283               	bcf	3,5	;RP0=0, select bank0
  7026  0A4F  1303               	bcf	3,6	;RP1=0, select bank0
  7027  0A50  101F               	bcf	31,0	;volatile
  7028                           
  7029                           ;ADC.c: 49:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  7030  0A51  3074               	movlw	116
  7031  0A52  00F4               	movwf	??_Adc
  7032  0A53                     u4367:
  7033  0A53  0BF4               	decfsz	??_Adc,f
  7034  0A54  2A53               	goto	u4367
  7035  0A55  0000               	nop
  7036                           
  7037                           ;ADC.c: 51:     return convertion;
  7038  0A56  0878               	movf	Adc@convertion+1,w
  7039  0A57  00F3               	movwf	?_Adc+1
  7040  0A58  0877               	movf	Adc@convertion,w
  7041  0A59  00F2               	movwf	?_Adc
  7042  0A5A  0008               	return
  7043  0A5B                     __end_of_Adc:
  7044                           
  7045                           	psect	text33
  7046  06FF                     __ptext33:	
  7047 ;; *************** function _Lec_Adc_Modo_Fuga *****************
  7048 ;; Defined at:
  7049 ;;		line 4 in file "Modo_Fuga.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;		None
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		None
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7063 ;;      Params:         0       0       0       0       0
  7064 ;;      Locals:         0       0       0       0       0
  7065 ;;      Temps:          0       0       0       0       0
  7066 ;;      Totals:         0       0       0       0       0
  7067 ;;Total ram usage:        0 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    2
  7070 ;; This function calls:
  7071 ;;		Nothing
  7072 ;; This function is called by:
  7073 ;;		_MEF_Subest_Actualizacion
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           
  7078                           ;psect for function _Lec_Adc_Modo_Fuga
  7079  06FF                     _Lec_Adc_Modo_Fuga:
  7080                           
  7081                           ;Modo_Fuga.c: 12:     return;
  7082                           
  7083                           ;incstack = 0
  7084                           ; Regs used in _Lec_Adc_Modo_Fuga: []
  7085  06FF  0008               	return
  7086  0700                     __end_of_Lec_Adc_Modo_Fuga:
  7087                           
  7088                           	psect	text34
  7089  0003                     __ptext34:	
  7090 ;; *************** function _Lec_Adc_Modo_Flujo *****************
  7091 ;; Defined at:
  7092 ;;		line 4 in file "Modo_Flujo.c"
  7093 ;; Parameters:    Size  Location     Type
  7094 ;;		None
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;		None
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  1    wreg      void 
  7099 ;; Registers used:
  7100 ;;		None
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7106 ;;      Params:         0       0       0       0       0
  7107 ;;      Locals:         0       0       0       0       0
  7108 ;;      Temps:          0       0       0       0       0
  7109 ;;      Totals:         0       0       0       0       0
  7110 ;;Total ram usage:        0 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:    2
  7113 ;; This function calls:
  7114 ;;		Nothing
  7115 ;; This function is called by:
  7116 ;;		_MEF_Subest_Actualizacion
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           
  7121                           ;psect for function _Lec_Adc_Modo_Flujo
  7122  0003                     _Lec_Adc_Modo_Flujo:
  7123                           
  7124                           ;Modo_Flujo.c: 8:     return;
  7125                           
  7126                           ;incstack = 0
  7127                           ; Regs used in _Lec_Adc_Modo_Flujo: []
  7128  0003  0008               	return
  7129  0004                     __end_of_Lec_Adc_Modo_Flujo:
  7130                           
  7131                           	psect	text35
  7132  0C36                     __ptext35:	
  7133 ;; *************** function _LCD_init *****************
  7134 ;; Defined at:
  7135 ;;		line 4 in file "Lcd.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;  i               1    7[COMMON] unsigned char 
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      void 
  7142 ;; Registers used:
  7143 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7149 ;;      Params:         0       0       0       0       0
  7150 ;;      Locals:         1       0       0       0       0
  7151 ;;      Temps:          2       0       0       0       0
  7152 ;;      Totals:         3       0       0       0       0
  7153 ;;Total ram usage:        3 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    3
  7156 ;; This function calls:
  7157 ;;		_LCD_command
  7158 ;; This function is called by:
  7159 ;;		_main
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           
  7164                           ;psect for function _LCD_init
  7165  0C36                     _LCD_init:
  7166                           
  7167                           ;Lcd.c: 7:     TRISCbits.TRISC4=0,TRISCbits.TRISC5=0,TRISCbits.TRISC6=0,TRISCbits.TRISC7
      +                          =0;
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7171  0C36  1683               	bsf	3,5	;RP0=1, select bank1
  7172  0C37  1303               	bcf	3,6	;RP1=0, select bank1
  7173  0C38  1207               	bcf	7,4	;volatile
  7174  0C39  1287               	bcf	7,5	;volatile
  7175  0C3A  1307               	bcf	7,6	;volatile
  7176  0C3B  1387               	bcf	7,7	;volatile
  7177                           
  7178                           ;Lcd.c: 8:     TRISCbits.TRISC1=0,TRISCbits.TRISC3=0;
  7179  0C3C  1087               	bcf	7,1	;volatile
  7180  0C3D  1187               	bcf	7,3	;volatile
  7181                           
  7182                           ;Lcd.c: 9:     TRISCbits.TRISC2=0,PORTCbits.RC2=0;
  7183  0C3E  1107               	bcf	7,2	;volatile
  7184  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  7185  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  7186  0C41  1107               	bcf	7,2	;volatile
  7187                           
  7188                           ;Lcd.c: 12:     _delay((unsigned long)((30)*(20000000/4000.0)));
  7189  0C42  30C3               	movlw	195
  7190  0C43  00F6               	movwf	??_LCD_init+1
  7191  0C44  30CD               	movlw	205
  7192  0C45  00F5               	movwf	??_LCD_init
  7193  0C46                     u4377:
  7194  0C46  0BF5               	decfsz	??_LCD_init,f
  7195  0C47  2C46               	goto	u4377
  7196  0C48  0BF6               	decfsz	??_LCD_init+1,f
  7197  0C49  2C46               	goto	u4377
  7198                           
  7199                           ;Lcd.c: 14:     for(char i=0;i<3;i++)
  7200  0C4A  01F7               	clrf	LCD_init@i
  7201  0C4B                     l2964:
  7202                           
  7203                           ;Lcd.c: 15:     {;Lcd.c: 16:         LCD_command(0x03);
  7204  0C4B  3003               	movlw	3
  7205  0C4C  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  7206                           
  7207                           ;Lcd.c: 17:         _delay((unsigned long)((7)*(20000000/4000.0)));
  7208  0C51  302E               	movlw	46
  7209  0C52  00F6               	movwf	??_LCD_init+1
  7210  0C53  3073               	movlw	115
  7211  0C54  00F5               	movwf	??_LCD_init
  7212  0C55                     u4387:
  7213  0C55  0BF5               	decfsz	??_LCD_init,f
  7214  0C56  2C55               	goto	u4387
  7215  0C57  0BF6               	decfsz	??_LCD_init+1,f
  7216  0C58  2C55               	goto	u4387
  7217                           
  7218                           ;Lcd.c: 18:     }
  7219  0C59  3001               	movlw	1
  7220  0C5A  00FF               	movwf	127
  7221  0C5B  087F               	movf	127,w
  7222  0C5C  07F7               	addwf	LCD_init@i,f
  7223  0C5D  3003               	movlw	3
  7224  0C5E  0277               	subwf	LCD_init@i,w
  7225  0C5F  1C03               	skipc
  7226  0C60  2C4B               	goto	l2964
  7227                           
  7228                           ;Lcd.c: 21:  LCD_command(0x33);
  7229  0C61  3033               	movlw	51
  7230  0C62  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  7231                           
  7232                           ;Lcd.c: 22:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7233  0C67  30A6               	movlw	166
  7234  0C68  00F5               	movwf	??_LCD_init
  7235  0C69                     u4397:
  7236  0C69  0BF5               	decfsz	??_LCD_init,f
  7237  0C6A  2C69               	goto	u4397
  7238  0C6B  0000               	nop
  7239                           
  7240                           ;Lcd.c: 23:     LCD_command(0x32);
  7241  0C6C  3032               	movlw	50
  7242  0C6D  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  7243                           
  7244                           ;Lcd.c: 24:     _delay((unsigned long)((5)*(20000000/4000.0)));
  7245  0C72  3021               	movlw	33
  7246  0C73  00F6               	movwf	??_LCD_init+1
  7247  0C74  3076               	movlw	118
  7248  0C75  00F5               	movwf	??_LCD_init
  7249  0C76                     u4407:
  7250  0C76  0BF5               	decfsz	??_LCD_init,f
  7251  0C77  2C76               	goto	u4407
  7252  0C78  0BF6               	decfsz	??_LCD_init+1,f
  7253  0C79  2C76               	goto	u4407
  7254  0C7A  0000               	nop
  7255                           
  7256                           ;Lcd.c: 25:  LCD_command(0x28);
  7257  0C7B  3028               	movlw	40
  7258  0C7C  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  7259                           
  7260                           ;Lcd.c: 26:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7261  0C81  30A6               	movlw	166
  7262  0C82  00F5               	movwf	??_LCD_init
  7263  0C83                     u4417:
  7264  0C83  0BF5               	decfsz	??_LCD_init,f
  7265  0C84  2C83               	goto	u4417
  7266  0C85  0000               	nop
  7267                           
  7268                           ;Lcd.c: 27:  LCD_command(0x0C);
  7269  0C86  300C               	movlw	12
  7270  0C87  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  7271                           
  7272                           ;Lcd.c: 28:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7273  0C8C  30A6               	movlw	166
  7274  0C8D  00F5               	movwf	??_LCD_init
  7275  0C8E                     u4427:
  7276  0C8E  0BF5               	decfsz	??_LCD_init,f
  7277  0C8F  2C8E               	goto	u4427
  7278  0C90  0000               	nop
  7279                           
  7280                           ;Lcd.c: 29:  LCD_command(0x06);
  7281  0C91  3006               	movlw	6
  7282  0C92  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  7283                           
  7284                           ;Lcd.c: 30:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7285  0C97  30A6               	movlw	166
  7286  0C98  00F5               	movwf	??_LCD_init
  7287  0C99                     u4437:
  7288  0C99  0BF5               	decfsz	??_LCD_init,f
  7289  0C9A  2C99               	goto	u4437
  7290  0C9B  0000               	nop
  7291                           
  7292                           ;Lcd.c: 31:     LCD_command(0x01);
  7293  0C9C  3001               	movlw	1
  7294  0C9D  120A  118A  24B6  120A  158A  	fcall	_LCD_command
  7295                           
  7296                           ;Lcd.c: 32:     _delay((unsigned long)((10)*(20000000/4000.0)));
  7297  0CA2  3041               	movlw	65
  7298  0CA3  00F6               	movwf	??_LCD_init+1
  7299  0CA4  30EE               	movlw	238
  7300  0CA5  00F5               	movwf	??_LCD_init
  7301  0CA6                     u4447:
  7302  0CA6  0BF5               	decfsz	??_LCD_init,f
  7303  0CA7  2CA6               	goto	u4447
  7304  0CA8  0BF6               	decfsz	??_LCD_init+1,f
  7305  0CA9  2CA6               	goto	u4447
  7306  0CAA  0000               	nop
  7307  0CAB  0008               	return
  7308  0CAC                     __end_of_LCD_init:
  7309                           
  7310                           	psect	text36
  7311  04B6                     __ptext36:	
  7312 ;; *************** function _LCD_command *****************
  7313 ;; Defined at:
  7314 ;;		line 39 in file "Lcd.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  cmd             1    wreg     unsigned char 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  cmd             1    4[COMMON] unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      void 
  7321 ;; Registers used:
  7322 ;;		wreg, status,2, status,0
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7328 ;;      Params:         0       0       0       0       0
  7329 ;;      Locals:         1       0       0       0       0
  7330 ;;      Temps:          2       0       0       0       0
  7331 ;;      Totals:         3       0       0       0       0
  7332 ;;Total ram usage:        3 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    2
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		_Pant_Inicio
  7339 ;;		_Pant_Modos
  7340 ;;		_LCD_init
  7341 ;;		_LCD_array
  7342 ;;		_LCD_xy
  7343 ;;		_LCD_character
  7344 ;;		_LCD_shift
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function _LCD_command
  7350  04B6                     _LCD_command:
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _LCD_command: [wreg+status,2+status,0]
  7354                           ;LCD_command@cmd stored from wreg
  7355  04B6  00F4               	movwf	LCD_command@cmd
  7356                           
  7357                           ;Lcd.c: 39: void LCD_command(unsigned char cmd);Lcd.c: 40: {;Lcd.c: 42:     PORTCbits.RC
      +                          4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  7358  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  7359  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  7360  04B9  1207               	bcf	7,4	;volatile
  7361  04BA  1287               	bcf	7,5	;volatile
  7362  04BB  1307               	bcf	7,6	;volatile
  7363  04BC  1387               	bcf	7,7	;volatile
  7364                           
  7365                           ;Lcd.c: 45:     PORTCbits.RC4 = ((cmd >> 4) & 0x01);
  7366  04BD  0874               	movf	LCD_command@cmd,w
  7367  04BE  00F2               	movwf	??_LCD_command
  7368  04BF  3004               	movlw	4
  7369  04C0                     u1565:
  7370  04C0  1003               	clrc
  7371  04C1  0CF2               	rrf	??_LCD_command,f
  7372  04C2  3EFF               	addlw	-1
  7373  04C3  1D03               	skipz
  7374  04C4  2CC0               	goto	u1565
  7375  04C5  0872               	movf	??_LCD_command,w
  7376  04C6  3901               	andlw	1
  7377  04C7  00F3               	movwf	??_LCD_command+1
  7378  04C8  0EF3               	swapf	??_LCD_command+1,f
  7379  04C9  0807               	movf	7,w	;volatile
  7380  04CA  0673               	xorwf	??_LCD_command+1,w
  7381  04CB  39EF               	andlw	-17
  7382  04CC  0673               	xorwf	??_LCD_command+1,w
  7383  04CD  0087               	movwf	7	;volatile
  7384                           
  7385                           ;Lcd.c: 46:     PORTCbits.RC5 = ((cmd >> 5) & 0x01);
  7386  04CE  0874               	movf	LCD_command@cmd,w
  7387  04CF  00F2               	movwf	??_LCD_command
  7388  04D0  3005               	movlw	5
  7389  04D1                     u1575:
  7390  04D1  1003               	clrc
  7391  04D2  0CF2               	rrf	??_LCD_command,f
  7392  04D3  3EFF               	addlw	-1
  7393  04D4  1D03               	skipz
  7394  04D5  2CD1               	goto	u1575
  7395  04D6  0872               	movf	??_LCD_command,w
  7396  04D7  3901               	andlw	1
  7397  04D8  00F3               	movwf	??_LCD_command+1
  7398  04D9  0EF3               	swapf	??_LCD_command+1,f
  7399  04DA  0DF3               	rlf	??_LCD_command+1,f
  7400  04DB  0807               	movf	7,w	;volatile
  7401  04DC  0673               	xorwf	??_LCD_command+1,w
  7402  04DD  39DF               	andlw	-33
  7403  04DE  0673               	xorwf	??_LCD_command+1,w
  7404  04DF  0087               	movwf	7	;volatile
  7405                           
  7406                           ;Lcd.c: 47:     PORTCbits.RC6 = ((cmd >> 6) & 0x01);
  7407  04E0  0874               	movf	LCD_command@cmd,w
  7408  04E1  00F2               	movwf	??_LCD_command
  7409  04E2  3006               	movlw	6
  7410  04E3                     u1585:
  7411  04E3  1003               	clrc
  7412  04E4  0CF2               	rrf	??_LCD_command,f
  7413  04E5  3EFF               	addlw	-1
  7414  04E6  1D03               	skipz
  7415  04E7  2CE3               	goto	u1585
  7416  04E8  0872               	movf	??_LCD_command,w
  7417  04E9  3901               	andlw	1
  7418  04EA  00F3               	movwf	??_LCD_command+1
  7419  04EB  0EF3               	swapf	??_LCD_command+1,f
  7420  04EC  0DF3               	rlf	??_LCD_command+1,f
  7421  04ED  0DF3               	rlf	??_LCD_command+1,f
  7422  04EE  0807               	movf	7,w	;volatile
  7423  04EF  0673               	xorwf	??_LCD_command+1,w
  7424  04F0  39BF               	andlw	-65
  7425  04F1  0673               	xorwf	??_LCD_command+1,w
  7426  04F2  0087               	movwf	7	;volatile
  7427                           
  7428                           ;Lcd.c: 48:     PORTCbits.RC7 = ((cmd >> 7) & 0x01);
  7429  04F3  0874               	movf	LCD_command@cmd,w
  7430  04F4  00F2               	movwf	??_LCD_command
  7431  04F5  3007               	movlw	7
  7432  04F6                     u1595:
  7433  04F6  1003               	clrc
  7434  04F7  0CF2               	rrf	??_LCD_command,f
  7435  04F8  3EFF               	addlw	-1
  7436  04F9  1D03               	skipz
  7437  04FA  2CF6               	goto	u1595
  7438  04FB  0872               	movf	??_LCD_command,w
  7439  04FC  3901               	andlw	1
  7440  04FD  00F3               	movwf	??_LCD_command+1
  7441  04FE  0CF3               	rrf	??_LCD_command+1,f
  7442  04FF  0CF3               	rrf	??_LCD_command+1,f
  7443  0500  0807               	movf	7,w	;volatile
  7444  0501  0673               	xorwf	??_LCD_command+1,w
  7445  0502  397F               	andlw	-129
  7446  0503  0673               	xorwf	??_LCD_command+1,w
  7447  0504  0087               	movwf	7	;volatile
  7448                           
  7449                           ;Lcd.c: 51:     PORTCbits.RC1 = 0;
  7450  0505  1087               	bcf	7,1	;volatile
  7451                           
  7452                           ;Lcd.c: 52:     PORTCbits.RC3 = 0;
  7453  0506  1187               	bcf	7,3	;volatile
  7454                           
  7455                           ;Lcd.c: 55:     PORTCbits.RC3 = 1;
  7456  0507  1587               	bsf	7,3	;volatile
  7457                           
  7458                           ;Lcd.c: 56:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  7459  0508  3018               	movlw	24
  7460  0509  00F2               	movwf	??_LCD_command
  7461  050A                     u4457:
  7462  050A  0BF2               	decfsz	??_LCD_command,f
  7463  050B  2D0A               	goto	u4457
  7464  050C  2D0D               	nop2
  7465                           
  7466                           ;Lcd.c: 57:     PORTCbits.RC3 = 0;
  7467  050D  1283               	bcf	3,5	;RP0=0, select bank0
  7468  050E  1303               	bcf	3,6	;RP1=0, select bank0
  7469  050F  1187               	bcf	7,3	;volatile
  7470                           
  7471                           ;Lcd.c: 58:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  7472  0510  3018               	movlw	24
  7473  0511  00F2               	movwf	??_LCD_command
  7474  0512                     u4467:
  7475  0512  0BF2               	decfsz	??_LCD_command,f
  7476  0513  2D12               	goto	u4467
  7477  0514  2D15               	nop2
  7478                           
  7479                           ;Lcd.c: 62:     PORTCbits.RC4=0,PORTCbits.RC5=0,PORTCbits.RC6=0,PORTCbits.RC7=0;
  7480  0515  1283               	bcf	3,5	;RP0=0, select bank0
  7481  0516  1303               	bcf	3,6	;RP1=0, select bank0
  7482  0517  1207               	bcf	7,4	;volatile
  7483  0518  1287               	bcf	7,5	;volatile
  7484  0519  1307               	bcf	7,6	;volatile
  7485  051A  1387               	bcf	7,7	;volatile
  7486                           
  7487                           ;Lcd.c: 65:     PORTCbits.RC4 = (cmd & 0x01);
  7488  051B  0874               	movf	LCD_command@cmd,w
  7489  051C  3901               	andlw	1
  7490  051D  00F2               	movwf	??_LCD_command
  7491  051E  0EF2               	swapf	??_LCD_command,f
  7492  051F  0807               	movf	7,w	;volatile
  7493  0520  0672               	xorwf	??_LCD_command,w
  7494  0521  39EF               	andlw	-17
  7495  0522  0672               	xorwf	??_LCD_command,w
  7496  0523  0087               	movwf	7	;volatile
  7497                           
  7498                           ;Lcd.c: 66:     PORTCbits.RC5 = ((cmd >> 1) & 0x01);
  7499  0524  0874               	movf	LCD_command@cmd,w
  7500  0525  00F2               	movwf	??_LCD_command
  7501  0526  1003               	clrc
  7502  0527  0C72               	rrf	??_LCD_command,w
  7503  0528  3901               	andlw	1
  7504  0529  00F3               	movwf	??_LCD_command+1
  7505  052A  0EF3               	swapf	??_LCD_command+1,f
  7506  052B  0DF3               	rlf	??_LCD_command+1,f
  7507  052C  0807               	movf	7,w	;volatile
  7508  052D  0673               	xorwf	??_LCD_command+1,w
  7509  052E  39DF               	andlw	-33
  7510  052F  0673               	xorwf	??_LCD_command+1,w
  7511  0530  0087               	movwf	7	;volatile
  7512                           
  7513                           ;Lcd.c: 67:     PORTCbits.RC6 = ((cmd >> 2) & 0x01);
  7514  0531  0874               	movf	LCD_command@cmd,w
  7515  0532  00F2               	movwf	??_LCD_command
  7516  0533  3002               	movlw	2
  7517  0534                     u1605:
  7518  0534  1003               	clrc
  7519  0535  0CF2               	rrf	??_LCD_command,f
  7520  0536  3EFF               	addlw	-1
  7521  0537  1D03               	skipz
  7522  0538  2D34               	goto	u1605
  7523  0539  0872               	movf	??_LCD_command,w
  7524  053A  3901               	andlw	1
  7525  053B  00F3               	movwf	??_LCD_command+1
  7526  053C  0EF3               	swapf	??_LCD_command+1,f
  7527  053D  0DF3               	rlf	??_LCD_command+1,f
  7528  053E  0DF3               	rlf	??_LCD_command+1,f
  7529  053F  0807               	movf	7,w	;volatile
  7530  0540  0673               	xorwf	??_LCD_command+1,w
  7531  0541  39BF               	andlw	-65
  7532  0542  0673               	xorwf	??_LCD_command+1,w
  7533  0543  0087               	movwf	7	;volatile
  7534                           
  7535                           ;Lcd.c: 68:     PORTCbits.RC7 = ((cmd >> 3) & 0x01);
  7536  0544  0874               	movf	LCD_command@cmd,w
  7537  0545  00F2               	movwf	??_LCD_command
  7538  0546  3003               	movlw	3
  7539  0547                     u1615:
  7540  0547  1003               	clrc
  7541  0548  0CF2               	rrf	??_LCD_command,f
  7542  0549  3EFF               	addlw	-1
  7543  054A  1D03               	skipz
  7544  054B  2D47               	goto	u1615
  7545  054C  0872               	movf	??_LCD_command,w
  7546  054D  3901               	andlw	1
  7547  054E  00F3               	movwf	??_LCD_command+1
  7548  054F  0CF3               	rrf	??_LCD_command+1,f
  7549  0550  0CF3               	rrf	??_LCD_command+1,f
  7550  0551  0807               	movf	7,w	;volatile
  7551  0552  0673               	xorwf	??_LCD_command+1,w
  7552  0553  397F               	andlw	-129
  7553  0554  0673               	xorwf	??_LCD_command+1,w
  7554  0555  0087               	movwf	7	;volatile
  7555                           
  7556                           ;Lcd.c: 71:     PORTCbits.RC1 = 0;
  7557  0556  1087               	bcf	7,1	;volatile
  7558                           
  7559                           ;Lcd.c: 72:     PORTCbits.RC3 = 0;
  7560  0557  1187               	bcf	7,3	;volatile
  7561                           
  7562                           ;Lcd.c: 75:     PORTCbits.RC3 = 1;
  7563  0558  1587               	bsf	7,3	;volatile
  7564                           
  7565                           ;Lcd.c: 76:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  7566  0559  3018               	movlw	24
  7567  055A  00F2               	movwf	??_LCD_command
  7568  055B                     u4477:
  7569  055B  0BF2               	decfsz	??_LCD_command,f
  7570  055C  2D5B               	goto	u4477
  7571  055D  2D5E               	nop2
  7572                           
  7573                           ;Lcd.c: 77:     PORTCbits.RC3 = 0;
  7574  055E  1283               	bcf	3,5	;RP0=0, select bank0
  7575  055F  1303               	bcf	3,6	;RP1=0, select bank0
  7576  0560  1187               	bcf	7,3	;volatile
  7577                           
  7578                           ;Lcd.c: 78:     _delay((unsigned long)((15)*(20000000/4000000.0)));
  7579  0561  3018               	movlw	24
  7580  0562  00F2               	movwf	??_LCD_command
  7581  0563                     u4487:
  7582  0563  0BF2               	decfsz	??_LCD_command,f
  7583  0564  2D63               	goto	u4487
  7584  0565  2D66               	nop2
  7585                           
  7586                           ;Lcd.c: 81:     _delay((unsigned long)((3)*(20000000/4000.0)));
  7587  0566  3014               	movlw	20
  7588  0567  00F3               	movwf	??_LCD_command+1
  7589  0568  3079               	movlw	121
  7590  0569  00F2               	movwf	??_LCD_command
  7591  056A                     u4497:
  7592  056A  0BF2               	decfsz	??_LCD_command,f
  7593  056B  2D6A               	goto	u4497
  7594  056C  0BF3               	decfsz	??_LCD_command+1,f
  7595  056D  2D6A               	goto	u4497
  7596  056E  2D6F               	nop2
  7597  056F  0008               	return
  7598  0570                     __end_of_LCD_command:
  7599                           
  7600                           	psect	text37
  7601  087B                     __ptext37:	
  7602 ;; *************** function _Adc_init *****************
  7603 ;; Defined at:
  7604 ;;		line 5 in file "ADC.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;		None
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7618 ;;      Params:         0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0
  7621 ;;      Totals:         0       0       0       0       0
  7622 ;;Total ram usage:        0 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    2
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function _Adc_init
  7634  087B                     _Adc_init:
  7635                           
  7636                           ;ADC.c: 8:     TRISAbits.TRISA0 = 1,ANSELbits.ANS0 = 1;
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in _Adc_init: [wreg+status,2+status,0]
  7640  087B  1683               	bsf	3,5	;RP0=1, select bank1
  7641  087C  1303               	bcf	3,6	;RP1=0, select bank1
  7642  087D  1405               	bsf	5,0	;volatile
  7643  087E  1683               	bsf	3,5	;RP0=1, select bank3
  7644  087F  1703               	bsf	3,6	;RP1=1, select bank3
  7645  0880  1408               	bsf	8,0	;volatile
  7646                           
  7647                           ;ADC.c: 9:     TRISAbits.TRISA1 = 1;ANSELbits.ANS1 = 1;
  7648  0881  1683               	bsf	3,5	;RP0=1, select bank1
  7649  0882  1303               	bcf	3,6	;RP1=0, select bank1
  7650  0883  1485               	bsf	5,1	;volatile
  7651  0884  1683               	bsf	3,5	;RP0=1, select bank3
  7652  0885  1703               	bsf	3,6	;RP1=1, select bank3
  7653  0886  1488               	bsf	8,1	;volatile
  7654                           
  7655                           ;ADC.c: 10:     TRISAbits.TRISA2 = 1,ANSELbits.ANS2 = 1;
  7656  0887  1683               	bsf	3,5	;RP0=1, select bank1
  7657  0888  1303               	bcf	3,6	;RP1=0, select bank1
  7658  0889  1505               	bsf	5,2	;volatile
  7659  088A  1683               	bsf	3,5	;RP0=1, select bank3
  7660  088B  1703               	bsf	3,6	;RP1=1, select bank3
  7661  088C  1508               	bsf	8,2	;volatile
  7662                           
  7663                           ;ADC.c: 11:     TRISAbits.TRISA3 = 1,ANSELbits.ANS3 = 1;
  7664  088D  1683               	bsf	3,5	;RP0=1, select bank1
  7665  088E  1303               	bcf	3,6	;RP1=0, select bank1
  7666  088F  1585               	bsf	5,3	;volatile
  7667  0890  1683               	bsf	3,5	;RP0=1, select bank3
  7668  0891  1703               	bsf	3,6	;RP1=1, select bank3
  7669  0892  1588               	bsf	8,3	;volatile
  7670                           
  7671                           ;ADC.c: 14:     ADCON0bits.ADCS = 0b10;
  7672  0893  1283               	bcf	3,5	;RP0=0, select bank0
  7673  0894  1303               	bcf	3,6	;RP1=0, select bank0
  7674  0895  081F               	movf	31,w	;volatile
  7675  0896  393F               	andlw	-193
  7676  0897  3880               	iorlw	128
  7677  0898  009F               	movwf	31	;volatile
  7678                           
  7679                           ;ADC.c: 17:     ADCON1bits.ADFM = 1;
  7680  0899  1683               	bsf	3,5	;RP0=1, select bank1
  7681  089A  1303               	bcf	3,6	;RP1=0, select bank1
  7682  089B  179F               	bsf	31,7	;volatile
  7683                           
  7684                           ;ADC.c: 19:     ADCON1bits.VCFG0 = 0;
  7685  089C  121F               	bcf	31,4	;volatile
  7686                           
  7687                           ;ADC.c: 20:     ADCON1bits.VCFG1 = 0;
  7688  089D  129F               	bcf	31,5	;volatile
  7689  089E  0008               	return
  7690  089F                     __end_of_Adc_init:
  7691                           
  7692                           	psect	text38
  7693  09A3                     __ptext38:	
  7694 ;; *************** function _ISR *****************
  7695 ;; Defined at:
  7696 ;;		line 79 in file "Main.c"
  7697 ;; Parameters:    Size  Location     Type
  7698 ;;		None
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;		None
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  1    wreg      void 
  7703 ;; Registers used:
  7704 ;;		wreg, status,2, status,0, pclath, cstack
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7710 ;;      Params:         0       0       0       0       0
  7711 ;;      Locals:         0       0       0       0       0
  7712 ;;      Temps:          2       0       0       0       0
  7713 ;;      Totals:         2       0       0       0       0
  7714 ;;Total ram usage:        2 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    1
  7717 ;; This function calls:
  7718 ;;		_Task_Ready
  7719 ;; This function is called by:
  7720 ;;		Interrupt level 1
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           
  7725                           ;psect for function _ISR
  7726  09A3                     _ISR:
  7727                           
  7728                           ;Main.c: 82:     if(TMR1IF == 1)
  7729  09A3  1283               	bcf	3,5	;RP0=0, select bank0
  7730  09A4  1303               	bcf	3,6	;RP1=0, select bank0
  7731  09A5  1C0C               	btfss	12,0	;volatile
  7732  09A6  29C4               	goto	i1l3158
  7733                           
  7734                           ;Main.c: 83:     {;Main.c: 84:         if(Delay100ms!=0 && !Mostrar) Delay100ms--;
  7735  09A7  0879               	movf	_Delay100ms,w	;volatile
  7736  09A8  047A               	iorwf	_Delay100ms+1,w	;volatile
  7737  09A9  1903               	btfsc	3,2
  7738  09AA  29B4               	goto	i1l3148
  7739  09AB  087B               	movf	_Mostrar,w
  7740  09AC  1D03               	btfss	3,2
  7741  09AD  29B4               	goto	i1l3148
  7742  09AE  3001               	movlw	1
  7743  09AF  02F9               	subwf	_Delay100ms,f	;volatile
  7744  09B0  3000               	movlw	0
  7745  09B1  1C03               	skipc
  7746  09B2  03FA               	decf	_Delay100ms+1,f	;volatile
  7747  09B3  02FA               	subwf	_Delay100ms+1,f	;volatile
  7748  09B4                     i1l3148:
  7749                           
  7750                           ;Main.c: 85:         if(Delay500ms!=0) Delay500ms--;
  7751  09B4  086E               	movf	_Delay500ms,w	;volatile
  7752  09B5  046F               	iorwf	_Delay500ms+1,w	;volatile
  7753  09B6  1903               	btfsc	3,2
  7754  09B7  29BE               	goto	i1l3152
  7755  09B8  3001               	movlw	1
  7756  09B9  02EE               	subwf	_Delay500ms,f	;volatile
  7757  09BA  3000               	movlw	0
  7758  09BB  1C03               	skipc
  7759  09BC  03EF               	decf	_Delay500ms+1,f	;volatile
  7760  09BD  02EF               	subwf	_Delay500ms+1,f	;volatile
  7761  09BE                     i1l3152:
  7762                           
  7763                           ;Main.c: 88:         TMR1 = 65285;
  7764  09BE  30FF               	movlw	255
  7765  09BF  008F               	movwf	15	;volatile
  7766  09C0  3005               	movlw	5
  7767  09C1  008E               	movwf	14	;volatile
  7768                           
  7769                           ;Main.c: 89:         TMR1ON = 1;
  7770  09C2  1410               	bsf	16,0	;volatile
  7771                           
  7772                           ;Main.c: 90:         TMR1IF = 0;
  7773  09C3  100C               	bcf	12,0	;volatile
  7774  09C4                     i1l3158:
  7775                           
  7776                           ;Main.c: 93:     if(!Delay100ms || !Delay500ms) Task_Ready();
  7777  09C4  0879               	movf	_Delay100ms,w	;volatile
  7778  09C5  047A               	iorwf	_Delay100ms+1,w	;volatile
  7779  09C6  1903               	btfsc	3,2
  7780  09C7  29CC               	goto	i1l3162
  7781  09C8  086E               	movf	_Delay500ms,w	;volatile
  7782  09C9  046F               	iorwf	_Delay500ms+1,w	;volatile
  7783  09CA  1D03               	btfss	3,2
  7784  09CB  29D1               	goto	i1l108
  7785  09CC                     i1l3162:
  7786  09CC  120A  158A  203E  120A  158A  	fcall	_Task_Ready
  7787  09D1                     i1l108:
  7788  09D1  0871               	movf	??_ISR+1,w
  7789  09D2  008A               	movwf	10
  7790  09D3  0E70               	swapf	??_ISR^(0+4294967168),w
  7791  09D4  0083               	movwf	3
  7792  09D5  0EFE               	swapf	126,f
  7793  09D6  0E7E               	swapf	126,w
  7794  09D7  0009               	retfie
  7795  09D8                     __end_of_ISR:
  7796                           
  7797                           	psect	intentry
  7798  0004                     __pintentry:	
  7799                           ;incstack = 0
  7800                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  7801                           
  7802  0004                     interrupt_function:
  7803  007E                     saved_w	set	btemp
  7804  0004  00FE               	movwf	btemp
  7805  0005  0E03               	swapf	3,w
  7806  0006  00F0               	movwf	??_ISR
  7807  0007  080A               	movf	10,w
  7808  0008  00F1               	movwf	??_ISR+1
  7809  0009  120A  158A  29A3   	ljmp	_ISR
  7810                           
  7811                           	psect	text39
  7812  083E                     __ptext39:	
  7813 ;; *************** function _Task_Ready *****************
  7814 ;; Defined at:
  7815 ;;		line 98 in file "Main.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;		None
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;		None
  7820 ;; Return value:  Size  Location     Type
  7821 ;;                  1    wreg      void 
  7822 ;; Registers used:
  7823 ;;		wreg, status,2, status,0
  7824 ;; Tracked objects:
  7825 ;;		On entry : 0/0
  7826 ;;		On exit  : 0/0
  7827 ;;		Unchanged: 0/0
  7828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7829 ;;      Params:         0       0       0       0       0
  7830 ;;      Locals:         0       0       0       0       0
  7831 ;;      Temps:          0       0       0       0       0
  7832 ;;      Totals:         0       0       0       0       0
  7833 ;;Total ram usage:        0 bytes
  7834 ;; Hardware stack levels used:    1
  7835 ;; This function calls:
  7836 ;;		Nothing
  7837 ;; This function is called by:
  7838 ;;		_ISR
  7839 ;; This function uses a non-reentrant model
  7840 ;;
  7841                           
  7842                           
  7843                           ;psect for function _Task_Ready
  7844  083E                     _Task_Ready:
  7845                           
  7846                           ;Main.c: 100:     if(!Delay100ms)
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _Task_Ready: [wreg+status,2+status,0]
  7850  083E  0879               	movf	_Delay100ms,w	;volatile
  7851  083F  047A               	iorwf	_Delay100ms+1,w	;volatile
  7852  0840  1D03               	btfss	3,2
  7853  0841  2848               	goto	i1l3036
  7854                           
  7855                           ;Main.c: 101:     {;Main.c: 102:         Mostrar = 1;
  7856  0842  01FB               	clrf	_Mostrar
  7857  0843  0AFB               	incf	_Mostrar,f
  7858                           
  7859                           ;Main.c: 103:         Delay100ms = 1000;
  7860  0844  30E8               	movlw	232
  7861  0845  00F9               	movwf	_Delay100ms	;volatile
  7862  0846  3003               	movlw	3
  7863  0847  00FA               	movwf	_Delay100ms+1	;volatile
  7864  0848                     i1l3036:
  7865                           
  7866                           ;Main.c: 105:     if(!Delay500ms)
  7867  0848  1283               	bcf	3,5	;RP0=0, select bank0
  7868  0849  1303               	bcf	3,6	;RP1=0, select bank0
  7869  084A  086E               	movf	_Delay500ms,w	;volatile
  7870  084B  046F               	iorwf	_Delay500ms+1,w	;volatile
  7871  084C  1D03               	btfss	3,2
  7872  084D  0008               	return
  7873  084E  0064               	clrwdt	;# 
  7874                           
  7875                           ;Main.c: 108:         Act_Variables = 1;
  7876  084F  1283               	bcf	3,5	;RP0=0, select bank0
  7877  0850  1303               	bcf	3,6	;RP1=0, select bank0
  7878  0851  01E7               	clrf	_Act_Variables
  7879  0852  0AE7               	incf	_Act_Variables,f
  7880                           
  7881                           ;Main.c: 109:         Delay500ms = 2000;
  7882  0853  30D0               	movlw	208
  7883  0854  00EE               	movwf	_Delay500ms	;volatile
  7884  0855  3007               	movlw	7
  7885  0856  00EF               	movwf	_Delay500ms+1	;volatile
  7886  0857  0008               	return
  7887  0858                     __end_of_Task_Ready:
  7888  007E                     btemp	set	126	;btemp
  7889  007E                     wtemp0	set	126
  7890                           
  7891                           	psect	config
  7892                           
  7893                           ;Config register CONFIG1 @ 0x2007
  7894                           ;	Oscillator Selection bits
  7895                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  7896                           ;	Watchdog Timer Enable bit
  7897                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  7898                           ;	Power-up Timer Enable bit
  7899                           ;	PWRTE = ON, PWRT enabled
  7900                           ;	RE3/MCLR pin function select bit
  7901                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  7902                           ;	Code Protection bit
  7903                           ;	CP = OFF, Program memory code protection is disabled
  7904                           ;	Data Code Protection bit
  7905                           ;	CPD = OFF, Data memory code protection is disabled
  7906                           ;	Brown Out Reset Selection bits
  7907                           ;	BOREN = OFF, BOR disabled
  7908                           ;	Internal External Switchover bit
  7909                           ;	IESO = ON, Internal/External Switchover mode is enabled
  7910                           ;	Fail-Safe Clock Monitor Enabled bit
  7911                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  7912                           ;	Low Voltage Programming Enable bit
  7913                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  7914                           ;	In-Circuit Debugger Mode bit
  7915                           ;	DEBUG = 0x1, unprogrammed default
  7916  2007                     	org	8199
  7917  2007  2CE2               	dw	11490
  7918                           
  7919                           ;Config register CONFIG2 @ 0x2008
  7920                           ;	Brown-out Reset Selection bit
  7921                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  7922                           ;	Flash Program Memory Self Write Enable bits
  7923                           ;	WRT = OFF, Write protection off
  7924  2008                     	org	8200
  7925  2008  3FFF               	dw	16383

Data Sizes:
    Strings     151
    Constant    10
    Data        12
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80     65      80
    BANK1            80      4      33
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_28(CODE[5]), STR_27(CODE[5]), STR_26(CODE[5]), STR_25(CODE[5]), 
		 -> STR_24(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> Pant_Val_Act@buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_character@caracter	PTR unsigned char  size(1) Largest target is 8
		 -> Pant_Inicio@caracter(BANK0[8]), Pant_Inicio@caracter1(BANK0[8]), 

    LCD_array@date	PTR unsigned char  size(2) Largest target is 21
		 -> Pant_Val_Act@buffer(BANK0[20]), STR_23(CODE[2]), STR_22(CODE[13]), STR_21(CODE[2]), 
		 -> STR_20(CODE[8]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[18]), 
		 -> STR_16(CODE[6]), STR_15(CODE[5]), STR_14(CODE[14]), STR_13(CODE[2]), 
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), 
		 -> STR_4(CODE[21]), STR_3(CODE[21]), STR_2(CODE[21]), STR_1(CODE[21]), 


Critical Paths under _main in COMMON

    _Pant_Selector->_LCD_array
    _Pant_Menu->_LCD_array
    _Pant_Inicio->_LCD_character
    _LCD_character->_LCD_command
    _LCD_character->_LCD_date
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _Pant_Modos->_LCD_xy
    _LCD_xy->_LCD_command
    _LCD_array->_LCD_command
    _LCD_array->_LCD_date
    _Adc_Temp_Read->_Adc
    _Adc_Rpm_Read->_Adc
    _Adc_Rpm_Read->___lwdiv
    ___wmul->___lwdiv
    _Adc_Pwm_Read->_Adc
    _Adc_Min_Read->_Adc
    ___fttol->_Adc
    ___ftmul->_Adc
    ___ftdiv->_Adc
    ___awtoft->_Adc
    _LCD_init->_LCD_command

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _Pant_Selector->_LCD_array
    _Pant_Menu->_LCD_array
    _Pant_Inicio->_LCD_array
    _Pant_Val_Act->_sprintf
    _sprintf->___wmul
    _Pant_Modos->_LCD_array
    _Lec_Adc_Modo_Pulv->_Adc_Rpm_Read
    _Adc_Temp_Read->___fttol
    _Adc_Rpm_Read->___fttol
    _Adc_Pwm_Read->___fttol
    _Adc_Min_Read->___fttol
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_MEF_Actualizacion
    _MEF_Actualizacion->_MEF_Subest_Actualizacion

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   99951
                           _Adc_init
                           _LCD_init
                  _MEF_Actualizacion
                           _MEF_Init
                         _Pines_Init
                           _Pwm_init
 ---------------------------------------------------------------------------------
 (1) _Pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Pines_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MEF_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MEF_Actualizacion                                    2     2      0   99729
                                              2 BANK1      2     2      0
                        _Antirrebote
           _MEF_Subest_Actualizacion
                        _Pant_Inicio
                        _Select_Modo
 ---------------------------------------------------------------------------------
 (2) _Select_Modo                                          0     0      0   14080
                        _Antirrebote
                          _Pant_Menu
                      _Pant_Selector
 ---------------------------------------------------------------------------------
 (3) _Pant_Selector                                        0     0      0    7040
                          _LCD_array
 ---------------------------------------------------------------------------------
 (3) _Pant_Menu                                            0     0      0    7040
                          _LCD_array
 ---------------------------------------------------------------------------------
 (3) _Antirrebote                                          2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Pant_Inicio                                         20    20      0    7882
                                              6 BANK0     20    20      0
                          _LCD_array
                      _LCD_character
                        _LCD_command
 ---------------------------------------------------------------------------------
 (3) _LCD_character                                        4     3      1     592
                                              5 COMMON     4     3      1
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (2) _MEF_Subest_Actualizacion                             2     2      0   77767
                                              0 BANK1      2     2      0
                 _Lec_Adc_Modo_Flujo
                  _Lec_Adc_Modo_Fuga
                  _Lec_Adc_Modo_Pulv
                         _Pant_Modos
                       _Pant_Val_Act
 ---------------------------------------------------------------------------------
 (3) _Pant_Val_Act                                        22    22      0   11223
                                             21 BANK0     22    22      0
                          _LCD_array
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             23    20      3    3825
                                              6 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     386
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Pant_Modos                                           0     0      0    7806
                          _LCD_array
                        _LCD_command
                           _LCD_date
                             _LCD_xy
 ---------------------------------------------------------------------------------
 (4) _LCD_xy                                               4     0      4     414
                                              5 COMMON     4     0      4
                        _LCD_command
 ---------------------------------------------------------------------------------
 (4) _LCD_array                                            8     2      6    7040
                                              5 COMMON     2     2      0
                                              0 BANK0      6     0      6
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (5) _LCD_date                                             3     3      0     176
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Pulv                                    0     0      0   58738
                       _Adc_Min_Read
                       _Adc_Pwm_Read
                       _Adc_Rpm_Read
                      _Adc_Temp_Read
 ---------------------------------------------------------------------------------
 (4) _Adc_Temp_Read                                        3     3      0   14236
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) _Adc_Rpm_Read                                        15    15      0   15996
                                             50 BANK0     15    15      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     752
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     674
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) _Adc_Pwm_Read                                         3     3      0   14236
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) _Adc_Min_Read                                         3     3      0   14270
                                             50 BANK0      3     3      0
                                _Adc
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             13     9      4     700
                                             37 BANK0     13     9      4
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4952
                                              7 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    5192
                                             22 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    3288
                                              3 BANK0      4     1      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2770
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _Adc                                                  7     5      2      70
                                              2 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Fuga                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Lec_Adc_Modo_Flujo                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0     222
                                              5 COMMON     3     3      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (5) _LCD_command                                          3     3      0     176
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
                         _Task_Ready
 ---------------------------------------------------------------------------------
 (8) _Task_Ready                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adc_init
   _LCD_init
     _LCD_command
   _MEF_Actualizacion
     _Antirrebote
     _MEF_Subest_Actualizacion
       _Lec_Adc_Modo_Flujo
       _Lec_Adc_Modo_Fuga
       _Lec_Adc_Modo_Pulv
         _Adc_Min_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Pwm_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
         _Adc_Rpm_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
           ___lwdiv
           ___wmul
             ___lwdiv (ARG)
         _Adc_Temp_Read
           _Adc
           ___awtoft
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___fttol
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 _Adc (ARG)
                 ___awtoft (ARG)
                   _Adc (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
       _Pant_Modos
         _LCD_array
           _LCD_command
           _LCD_date
         _LCD_command
         _LCD_date
         _LCD_xy
           _LCD_command
       _Pant_Val_Act
         _LCD_array
           _LCD_command
           _LCD_date
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
     _Pant_Inicio
       _LCD_array
         _LCD_command
         _LCD_date
       _LCD_character
         _LCD_command
         _LCD_date
       _LCD_command
     _Select_Modo
       _Antirrebote
       _Pant_Menu
         _LCD_array
           _LCD_command
           _LCD_date
       _Pant_Selector
         _LCD_array
           _LCD_command
           _LCD_date
   _MEF_Init
   _Pines_Init
   _Pwm_init

 _ISR (ROOT)
   _Task_Ready

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      21       7       41.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     41      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7D      12        0.0%
ABS                  0      0      7D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Dec 18 12:10:19 2020

                                pc 0002                                 fsr 0004  
              ___wmul@multiplicand 0022                   Adc_Rpm_Read@cent 0059  
                              l224 0907                                l165 07D4  
                              l173 07FF                                l167 07D6  
                              l354 096E                                l189 0AFE  
                              l439 0A31                                l618 0864  
                              l590 00D8                                l576 0073  
                              l921 0D7F                                l588 00FC  
                              l837 0C13                                l597 0153  
                              l838 0C1B                                _GIE 005F  
                              _RB4 0034                                _ISR 09A3  
                              _Adc 0A14                                _Min 006A  
                              _Seg 0069                                _Rpm 0061  
                              _Pwm 006B                                fsr0 0004  
                              indf 0000                  _MEF_Actualizacion 07B1  
                       _Delay100ms 0079                  Adc_Rpm_Read@dec_m 005D  
                       _Delay500ms 006E                               ?_ISR 0070  
                             ?_Adc 0072                 ?_MEF_Actualizacion 0070  
                     ___ftdiv@cntr 003F                  Adc_Rpm_Read@valor 005F  
                     ___ftdiv@sign 0044                  Adc_Rpm_Read@uni_m 005B  
                             l4000 0938                               l2510 0D8E  
                             l2502 0D7B                               l2514 0D9C  
                             l2530 09EE                               l2540 0A0F  
                             l2348 17ED                               l3406 08AB  
                             l3422 0656                               l3360 0BE3  
                             l3352 0BD0                               l3440 069B  
                             l3416 0640                               l2480 0D42  
                             l2536 0A04                               l2528 09E0  
                             l3520 0993                               l3362 0BE8  
                             l2650 0954                               l3514 0977  
                             l4170 0086                               l3372 0C11  
                             l3356 0BD7                               l2476 0D39  
                             l2644 093F                               l3516 0985  
                             l3524 099E                               l4172 00EE  
                             l3620 008B                               l3612 006F  
                             l3374 0C03                               l3462 0341  
                             l4174 0960                               l2646 0946  
                             l2654 095B                               l4166 07EE  
                             l3368 0BFE                               l3448 06BA  
                             l3480 0396                               l3560 0E24  
                             l4176 0B8D                               l2648 094D  
                             l3712 01BF                               l3704 01BB  
                             l3624 009D                               l4168 0AED  
                             l2498 0D6B                               l3386 085C  
                             l3650 0122                               l3634 00DA  
                             l3618 0078                               l3714 004F  
                             l3492 03BE                               l3484 03A6  
                             l3468 0357                               l3548 031D  
                             l3580 0B62                               l3716 0202  
                             l3812 08F5                               l3582 0B6B  
                             l3590 0B86                               l3646 0116  
                             l3830 0AA7                               l3822 0909  
                             l3496 03CE                               l3592 0B9B  
                             l3584 0B74                               l3672 0168  
                             l3664 0145                               l3656 0124  
                             l2784 0815                               l3816 08FC  
                             l3586 0B7D                               l3682 017D  
                             l3690 0193                               l3674 016C  
                             l3850 0AD8                               l3842 0AC5  
                             l3834 0AAF                               l2858 08D6  
                             l2964 0C4B                               l3692 0197  
                             l3772 0F2D                               l3764 0EDF  
                             l3598 0BB9                               l3846 0ACF  
                             l3838 0AB9                               l3768 0F06  
                             l3872 07BA                               l3698 01AC  
                             l3858 0AE1                               l3882 07C8  
                             l3868 07B2                               l3894 07DE  
                             l3898 07E2                               STR_1 0744  
                             STR_2 072F                               STR_3 071A  
                             STR_4 0744                               STR_5 07AD  
                             STR_6 072D                               STR_7 07AD  
                             STR_8 072D                               STR_9 07AD  
                     ?_LCD_command 0070                               u2005 0D49  
                             u2105 09E3                               u2035 0D6C  
                             u2125 09EF                               u2135 09FB  
                             u2065 0D84                               u2145 0A05  
                             u1605 0534                               u1615 0547  
                             u3215 0C24                               u3135 0BDC  
                             u3305 0668                               u1625 057A  
                             u3155 0BF7                               u3315 067A  
                             u1635 058B                               u1565 04C0  
                             u3325 069C                               u3245 0865  
                             u1645 059D                               u1575 04D1  
                             u3175 0C0A                               u3335 06AD  
                             u3255 086C                               u1655 05B0  
                             u1585 04E3                               u3345 06BB  
                             u3425 03A7                               u1665 05EE  
                             u1595 04F6                               u3435 03AF  
                             u1675 0601                               u4307 05C4  
                             u3515 097A                               u2555 08C8  
                             u1685 0A1E                               u4317 05CC  
                             u4407 0C76                               u4327 0615  
                             u3535 098B                               u4417 0C83  
                             u3385 0363                               u4337 061C  
                             u3545 0994                               u4427 0C8E  
                             u3475 03CF                               u3395 0375  
                             u4347 0622                               u3715 015A  
                             _PEIE 005E                               u4437 0C99  
                             u4357 0A2B                               u3485 03D7  
                             u4277 0819                               u4447 0CA6  
                             u4367 0A53                               u4287 0FE2  
                             u4457 050A                               u4377 0C46  
                             u4297 0BAD                               u3850 0F5E  
                             u4467 0512                               u4387 0C55  
                             u3675 013B                               u3860 0F79  
                             u4477 055B                               u4397 0C69  
                             u4487 0563                               u4497 056A  
                             _TMR1 000E                               _Modo 006C  
                             _Temp 0068                               _main 0912  
                     ___ftpack@arg 0072                       ___ftpack@exp 0075  
                             btemp 007E                ??_MEF_Actualizacion 00BF  
                             start 000C                 __size_of_LCD_array 0067  
                    _Estado_Actual 0066                       ___ftmul@cntr 0034  
                     ___ftmul@sign 0035                              ??_ISR 0070  
                            ??_Adc 0074                       ___fttol@exp1 0051  
                     ___fttol@lval 004D                __end_of_Antirrebote 0828  
                 __end_of_LCD_date 0628                   __end_of_LCD_init 0CAC  
                 __end_of_MEF_Init 06FF                              ?_main 0070  
                            STR_10 072D                              STR_11 07AD  
                            STR_12 072D                              STR_20 0786  
                            STR_21 0784                              STR_13 07AD  
                            STR_22 0779                              STR_14 076B  
                            STR_23 07AF                              STR_15 079E  
                            STR_24 07A8                              STR_16 078E  
                            STR_25 07A3                              STR_17 0759  
                            STR_26 07A3                              STR_18 0794  
                            STR_27 07A3                              STR_19 0799  
                            STR_28 07A3                    __end_of___ftdiv 06E0  
                  __end_of___ftmul 03FC                    __end_of___fttol 0DA5  
                    _LCD_character 08C4                    __end_of___lwdiv 0A14  
                            i1l108 09D1                    __end_of___lwmod 09A3  
        __end_of_MEF_Actualizacion 0800                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
                            _TRISB 0086                              _TRISC 0087  
                    ??_Pant_Inicio 0026                              _PwmS1 0063  
                    ___awtoft@sign 0026                    __end_of_dpowers 071A  
           __size_of_Pant_Selector 009D                    __end_of_isdigit 17EF  
                    ___ftpack@sign 0076                   __end_of_Adc_init 089F  
                            pclath 000A                    ??_Adc_Temp_Read 0079  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 0207                      ?_Pant_Val_Act 0070  
                  __initialization 000F                       __end_of_main 093E  
                       _Pant_Modos 0E2D                     ?_LCD_character 0075  
                           ??_main 0079                      ___fttol@sign1 004C  
                    ??_Select_Modo 0077                  __end_of_LCD_array 0BC8  
                 __end_of_Pwm_init 06FA                             _ADCON0 001F  
                           _ADRESH 001E                             _ADRESL 009E  
                 __end_of___awtoft 08C4                   __end_of___ftpack 0C36  
                       _Pines_Init 0828                             i1l3036 0848  
                           i1l3152 09BE                             i1l3162 09CC  
                           i1l3148 09B4                             i1l3158 09C4  
              __end_of_Pant_Inicio 1000                             _LCD_xy 093E  
                    _Act_Variables 0067                             _TMR1IE 0460  
                           _TMR1IF 0060                         _Task_Ready 083E  
                           _TMR1ON 0080                             _TRISB4 0434  
                 Pant_Inicio@F1321 00B5                   Pant_Inicio@F1323 00A0  
               __size_of_Pant_Menu 004B                     ??_Pant_Val_Act 0035  
                      _Antirrebote 0815         ??_MEF_Subest_Actualizacion 00BD  
                 _Subestado_Actual 0065                      _Pant_Selector 0EB7  
                           ___wmul 0858                          ??___ftdiv 003C  
               _Lec_Adc_Modo_Flujo 0003                          ??___ftmul 002D  
                        ??___fttol 0049                          ??___lwdiv 0076  
                        ??___lwmod 0079                       LCD_date@date 0074  
            ___ftmul@f3_as_product 0031                ?_Lec_Adc_Modo_Flujo 0070  
       __size_of_MEF_Actualizacion 004F                       __pdataCOMMON 0079  
                        ??_isdigit 0072                             saved_w 007E  
                        ??_sprintf 0029                __end_of_Select_Modo 0912  
          __end_of__initialization 0044               __size_of_LCD_command 00BA  
                        ?_LCD_date 0070               ??_Lec_Adc_Modo_Flujo 0072  
                        ?_LCD_init 0070                          ?_MEF_Init 0070  
                       ___ftdiv@f1 0039                         ___ftdiv@f2 0036  
                       ___ftdiv@f3 0040                         ___awtoft@c 0023  
                       ___ftmul@f1 0027                         ___ftmul@f2 002A  
                       ___fttol@f1 0045                     ?_Pant_Selector 0070  
                   __pcstackCOMMON 0070                       __pidataBANK0 17CF  
                     __pidataBANK1 17D9                    ??_LCD_character 0076  
                _Adc_Min_Read$1324 0052                          LCD_init@i 0077  
                      ?_Pant_Modos 0070                          ?_Adc_init 0070  
                __end_of_Pant_Menu 0AA6                        _Pant_Inicio 0F54  
                     sprintf@width 0031                        ?_Pines_Init 0070  
                       __pbssBANK0 0061                         __pbssBANK1 00A0  
                          ?_LCD_xy 0075                        ?_Task_Ready 0070  
                       ??_LCD_date 0072                            LCD_xy@x 0075  
                          LCD_xy@y 0077                         ??_LCD_init 0075  
                       ??_MEF_Init 0072                         __pmaintext 0912  
                          ?___wmul 0020                          ?_Pwm_init 0070  
                       __pintentry 0004                          ?___awtoft 0023  
                        ?___ftpack 0072                         ??_Adc_init 0072  
                      _Select_Modo 08EB               __end_of_Pant_Val_Act 04B6  
                       __stringtab 0700                    __size_of_LCD_xy 0031  
              __size_of_Pant_Modos 008A                    ??_Pant_Selector 0077  
                          _Mostrar 007B                            ___ftdiv 0628  
                       ??_Pwm_init 0072                    __size_of___wmul 0023  
                          ___ftmul 0329                            ___fttol 0D28  
                          ___lwdiv 09D8                            ___lwmod 096F  
                       ??___awtoft 0079                         ??___ftpack 0020  
                        _ANSELbits 0188                __size_of_Pines_Init 0016  
                          __ptext1 06E0                            __ptext2 0828  
                          __ptext3 06FA                            __ptext4 07B1  
                          __ptext5 08EB                            __ptext6 0EB7  
                          __ptext7 0A5B                            __ptext8 0815  
                          __ptext9 0F54                __size_of_Task_Ready 001A  
             Pant_Inicio@caracter1 002A                       __size_of_ISR 0035  
                     __size_of_Adc 0047                          _T1CONbits 0010  
                          _dpowers 0710                            _isdigit 17E1  
                       _mod_tiempo 00B4                            _sprintf 0048  
                          clrloop0 17D2               end_of_initialization 0044  
                        _LCD_array 0B61              __end_of_Adc_Temp_Read 0B61  
               Pant_Val_Act@buffer 0037                       ?_Antirrebote 0070  
                    ?_Adc_Min_Read 0070                          _PORTBbits 0006  
                        _PORTCbits 0007                      LCD_array@date 0024  
                    ?_Adc_Rpm_Read 0070                          _TRISAbits 0085  
                        _TRISCbits 0087                      ?_Adc_Pwm_Read 0070  
                        _Act_PwmS1 006D                         ?_LCD_array 0020  
                      ___ftdiv@exp 0043                     __end_of_LCD_xy 096F  
                __size_of_LCD_date 00B8                  __size_of_LCD_init 0076  
                __size_of_MEF_Init 0005                        ___ftmul@exp 0030  
                   ??_Adc_Min_Read 0079                     __end_of___wmul 087B  
                    __pidataCOMMON 0800                       ??_Pant_Modos 0079  
            __size_of_Pant_Val_Act 00BA                 _Adc_Temp_Read$1325 0052  
                   ??_Adc_Rpm_Read 0052                  __size_of_Adc_init 0024  
                       LCD_array@x 0020                         LCD_array@y 0022  
                   ??_Adc_Pwm_Read 0079                start_initialization 000F  
                     ?_Pant_Inicio 0070  __size_of_MEF_Subest_Actualizacion 0059  
                      __end_of_ISR 09D8                        __end_of_Adc 0A5B  
        ?_MEF_Subest_Actualizacion 0070                          _Pant_Menu 0A5B  
                    ??_LCD_command 0072                          _Per_PwmS1 00AB  
                     ??_Pines_Init 0072                           ??_LCD_xy 0079  
                     ??_Task_Ready 0070        __size_of_Lec_Adc_Modo_Flujo 0001  
               __end_of_Pant_Modos 0EB7                       _Pant_Val_Act 03FC  
                _Lec_Adc_Modo_Fuga 06FF                  _Lec_Adc_Modo_Pulv 0802  
                         ??___wmul 0079                         init_fetch0 17EF  
                      __pdataBANK0 006E                        __pdataBANK1 00B5  
               ?_Lec_Adc_Modo_Fuga 0070                 ?_Lec_Adc_Modo_Pulv 0070  
                __size_of_Pwm_init 001A              __end_of_LCD_character 08EB  
               __end_of_Pines_Init 083E                  __size_of___awtoft 0025  
                __size_of___ftpack 006E                 __end_of_Task_Ready 0858  
              ??_Lec_Adc_Modo_Fuga 0072                       ?_Select_Modo 0070  
                      __pbssCOMMON 007B                ??_Lec_Adc_Modo_Pulv 0079  
                        ___latbits 0002                      __pcstackBANK0 0020  
                    __pcstackBANK1 00BD                       _isdigit$1119 0072  
                       ?_Pant_Menu 0070                        ??_LCD_array 0075  
                      sprintf@flag 0030                        sprintf@prec 002C  
              __end_of_LCD_command 0570          __end_of_Lec_Adc_Modo_Fuga 0700  
        __end_of_Lec_Adc_Modo_Pulv 0815                   ___lwdiv@dividend 0074  
             __size_of_Antirrebote 0013                           ?___ftdiv 0036  
                         ?___ftmul 0027                           ?___fttol 0045  
                         ?___lwdiv 0072                           ?___lwmod 0020  
                        __pstrings 0700                          _freqPwmS1 00B2  
                         ?_isdigit 0070                   ___lwdiv@quotient 0076  
                         ?_sprintf 0026               __end_of_Adc_Min_Read 0D28  
              Pant_Inicio@caracter 0032                         Adc@channel 0076  
                interrupt_function 0004                LCD_character@adress 0077  
                   ___wmul@product 0024                           _LCD_date 0570  
                         _LCD_init 0C36                           _MEF_Init 06FA  
                        clear_ram0 17D1               __end_of_Adc_Rpm_Read 0329  
             __end_of_Adc_Pwm_Read 0E2D              __end_of_Pant_Selector 0F54  
                         _PER_T_S1 00AE                           _Adc_init 087B  
                       _ADCON0bits 001F                        __stringbase 070F  
                       _ADCON1bits 009F                  ___wmul@multiplier 0020  
                         _P_W_T_S1 00B0               __size_of_Pant_Inicio 00AC  
                      ??_Pant_Menu 0077                        _LCD_command 04B6  
                    Adc@convertion 0077         __size_of_Lec_Adc_Modo_Fuga 0001  
                         _Pw_PwmS1 00A8         __size_of_Lec_Adc_Modo_Pulv 0013  
 __end_of_MEF_Subest_Actualizacion 0AFF                           _Pwm_init 06E0  
                 __size_of___ftdiv 00B8                   __size_of___ftmul 00D3  
                 __size_of___fttol 007D                   __size_of___lwdiv 003C  
                 __size_of___lwmod 0034                           ___awtoft 089F  
                         ___ftpack 0BC8                 __end_of__stringtab 0710  
                       _ANSELHbits 0189             __size_of_Adc_Temp_Read 0062  
                       sprintf@val 002E                   __size_of_isdigit 000E  
                  ___lwdiv@divisor 0072                    ___lwdiv@counter 0078  
                         __ptext10 08C4                           __ptext11 0AA6  
                         __ptext20 0802                           __ptext12 03FC  
                         __ptext21 0AFF                           __ptext13 0048  
                         __ptext30 089F                           __ptext22 0207  
                         __ptext14 17E1                           __ptext31 0BC8  
                         __ptext23 0858                           __ptext15 096F  
                         __ptext32 0A14                           __ptext24 09D8  
                         __ptext16 0E2D                           __ptext33 06FF  
                         __ptext25 0DA5                           __ptext17 093E  
                         __ptext34 0003                           __ptext26 0CAC  
                         __ptext18 0B61                           __ptext35 0C36  
                         __ptext27 0D28                           __ptext19 0570  
                         __ptext36 04B6                           __ptext28 0329  
                         __ptext37 087B                           __ptext29 0628  
                         __ptext38 09A3                           __ptext39 083E  
                _Adc_Rpm_Read$1322 0056               __size_of_Select_Modo 0027  
                 __size_of_sprintf 01BF                      __size_of_main 002C  
            LCD_character@caracter 0075                     LCD_character@i 0078  
            __size_of_Adc_Min_Read 007C                           init_ram0 17F3  
                         isdigit@c 0073                           intlevel1 0000  
                        sprintf@ap 002D                          sprintf@sp 0033  
       __end_of_Lec_Adc_Modo_Flujo 0004              __size_of_Adc_Rpm_Read 0122  
            __size_of_Adc_Pwm_Read 0088                   ___lwmod@dividend 0022  
                    _Adc_Temp_Read 0AFF                          stringcode 070A  
                _Adc_Pwm_Read$1323 0052                       _Adc_Min_Read 0CAC  
         _MEF_Subest_Actualizacion 0AA6                           sprintf@c 0034  
                         sprintf@f 0026                    ___lwmod@divisor 0020  
                  ___lwmod@counter 0024                       _Adc_Rpm_Read 0207  
                         stringdir 070A                           stringtab 0700  
                     _Adc_Pwm_Read 0DA5                         _WDTCONbits 0105  
                   ?_Adc_Temp_Read 0070             __size_of_LCD_character 0027  
                    ??_Antirrebote 0072                     LCD_command@cmd 0074  

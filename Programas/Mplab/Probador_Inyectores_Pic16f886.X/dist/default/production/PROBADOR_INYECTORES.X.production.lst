

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat Nov 28 13:48:14 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16F886
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text19,local,class=CODE,merge=1,delta=2,group=3
    36                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    60                           	dabs	1,0x7E,2
    61  0000                     
    62                           ; Version 2.20
    63                           ; Generated 09/04/2020 GMT
    64                           ; 
    65                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC16F886 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0007                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001D                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  0081                     	;# 
   131  0085                     	;# 
   132  0086                     	;# 
   133  0087                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  008F                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0093                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  0105                     	;# 
   158  0107                     	;# 
   159  0108                     	;# 
   160  0109                     	;# 
   161  010C                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0185                     	;# 
   167  0187                     	;# 
   168  0188                     	;# 
   169  0189                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000D                     	;# 
   185  000E                     	;# 
   186  000E                     	;# 
   187  000F                     	;# 
   188  0010                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0013                     	;# 
   192  0014                     	;# 
   193  0015                     	;# 
   194  0015                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001B                     	;# 
   202  001C                     	;# 
   203  001D                     	;# 
   204  001E                     	;# 
   205  001F                     	;# 
   206  0081                     	;# 
   207  0085                     	;# 
   208  0086                     	;# 
   209  0087                     	;# 
   210  0089                     	;# 
   211  008C                     	;# 
   212  008D                     	;# 
   213  008E                     	;# 
   214  008F                     	;# 
   215  0090                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0093                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0095                     	;# 
   223  0096                     	;# 
   224  0097                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009A                     	;# 
   228  009B                     	;# 
   229  009C                     	;# 
   230  009D                     	;# 
   231  009E                     	;# 
   232  009F                     	;# 
   233  0105                     	;# 
   234  0107                     	;# 
   235  0108                     	;# 
   236  0109                     	;# 
   237  010C                     	;# 
   238  010C                     	;# 
   239  010D                     	;# 
   240  010E                     	;# 
   241  010F                     	;# 
   242  0185                     	;# 
   243  0187                     	;# 
   244  0188                     	;# 
   245  0189                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  0000                     	;# 
   249  0001                     	;# 
   250  0002                     	;# 
   251  0003                     	;# 
   252  0004                     	;# 
   253  0005                     	;# 
   254  0006                     	;# 
   255  0007                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000D                     	;# 
   261  000E                     	;# 
   262  000E                     	;# 
   263  000F                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0013                     	;# 
   268  0014                     	;# 
   269  0015                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0017                     	;# 
   273  0018                     	;# 
   274  0019                     	;# 
   275  001A                     	;# 
   276  001B                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  001D                     	;# 
   280  001E                     	;# 
   281  001F                     	;# 
   282  0081                     	;# 
   283  0085                     	;# 
   284  0086                     	;# 
   285  0087                     	;# 
   286  0089                     	;# 
   287  008C                     	;# 
   288  008D                     	;# 
   289  008E                     	;# 
   290  008F                     	;# 
   291  0090                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0093                     	;# 
   296  0093                     	;# 
   297  0094                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0098                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  009F                     	;# 
   309  0105                     	;# 
   310  0107                     	;# 
   311  0108                     	;# 
   312  0109                     	;# 
   313  010C                     	;# 
   314  010C                     	;# 
   315  010D                     	;# 
   316  010E                     	;# 
   317  010F                     	;# 
   318  0185                     	;# 
   319  0187                     	;# 
   320  0188                     	;# 
   321  0189                     	;# 
   322  018C                     	;# 
   323  018D                     	;# 
   324  0000                     	;# 
   325  0001                     	;# 
   326  0002                     	;# 
   327  0003                     	;# 
   328  0004                     	;# 
   329  0005                     	;# 
   330  0006                     	;# 
   331  0007                     	;# 
   332  0009                     	;# 
   333  000A                     	;# 
   334  000B                     	;# 
   335  000C                     	;# 
   336  000D                     	;# 
   337  000E                     	;# 
   338  000E                     	;# 
   339  000F                     	;# 
   340  0010                     	;# 
   341  0011                     	;# 
   342  0012                     	;# 
   343  0013                     	;# 
   344  0014                     	;# 
   345  0015                     	;# 
   346  0015                     	;# 
   347  0016                     	;# 
   348  0017                     	;# 
   349  0018                     	;# 
   350  0019                     	;# 
   351  001A                     	;# 
   352  001B                     	;# 
   353  001B                     	;# 
   354  001C                     	;# 
   355  001D                     	;# 
   356  001E                     	;# 
   357  001F                     	;# 
   358  0081                     	;# 
   359  0085                     	;# 
   360  0086                     	;# 
   361  0087                     	;# 
   362  0089                     	;# 
   363  008C                     	;# 
   364  008D                     	;# 
   365  008E                     	;# 
   366  008F                     	;# 
   367  0090                     	;# 
   368  0091                     	;# 
   369  0092                     	;# 
   370  0093                     	;# 
   371  0093                     	;# 
   372  0093                     	;# 
   373  0094                     	;# 
   374  0095                     	;# 
   375  0096                     	;# 
   376  0097                     	;# 
   377  0098                     	;# 
   378  0099                     	;# 
   379  009A                     	;# 
   380  009B                     	;# 
   381  009C                     	;# 
   382  009D                     	;# 
   383  009E                     	;# 
   384  009F                     	;# 
   385  0105                     	;# 
   386  0107                     	;# 
   387  0108                     	;# 
   388  0109                     	;# 
   389  010C                     	;# 
   390  010C                     	;# 
   391  010D                     	;# 
   392  010E                     	;# 
   393  010F                     	;# 
   394  0185                     	;# 
   395  0187                     	;# 
   396  0188                     	;# 
   397  0189                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400  0000                     	;# 
   401  0001                     	;# 
   402  0002                     	;# 
   403  0003                     	;# 
   404  0004                     	;# 
   405  0005                     	;# 
   406  0006                     	;# 
   407  0007                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  000E                     	;# 
   415  000F                     	;# 
   416  0010                     	;# 
   417  0011                     	;# 
   418  0012                     	;# 
   419  0013                     	;# 
   420  0014                     	;# 
   421  0015                     	;# 
   422  0015                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001B                     	;# 
   430  001C                     	;# 
   431  001D                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  0081                     	;# 
   435  0085                     	;# 
   436  0086                     	;# 
   437  0087                     	;# 
   438  0089                     	;# 
   439  008C                     	;# 
   440  008D                     	;# 
   441  008E                     	;# 
   442  008F                     	;# 
   443  0090                     	;# 
   444  0091                     	;# 
   445  0092                     	;# 
   446  0093                     	;# 
   447  0093                     	;# 
   448  0093                     	;# 
   449  0094                     	;# 
   450  0095                     	;# 
   451  0096                     	;# 
   452  0097                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009A                     	;# 
   456  009B                     	;# 
   457  009C                     	;# 
   458  009D                     	;# 
   459  009E                     	;# 
   460  009F                     	;# 
   461  0105                     	;# 
   462  0107                     	;# 
   463  0108                     	;# 
   464  0109                     	;# 
   465  010C                     	;# 
   466  010C                     	;# 
   467  010D                     	;# 
   468  010E                     	;# 
   469  010F                     	;# 
   470  0185                     	;# 
   471  0187                     	;# 
   472  0188                     	;# 
   473  0189                     	;# 
   474  018C                     	;# 
   475  018D                     	;# 
   476  0000                     	;# 
   477  0001                     	;# 
   478  0002                     	;# 
   479  0003                     	;# 
   480  0004                     	;# 
   481  0005                     	;# 
   482  0006                     	;# 
   483  0007                     	;# 
   484  0009                     	;# 
   485  000A                     	;# 
   486  000B                     	;# 
   487  000C                     	;# 
   488  000D                     	;# 
   489  000E                     	;# 
   490  000E                     	;# 
   491  000F                     	;# 
   492  0010                     	;# 
   493  0011                     	;# 
   494  0012                     	;# 
   495  0013                     	;# 
   496  0014                     	;# 
   497  0015                     	;# 
   498  0015                     	;# 
   499  0016                     	;# 
   500  0017                     	;# 
   501  0018                     	;# 
   502  0019                     	;# 
   503  001A                     	;# 
   504  001B                     	;# 
   505  001B                     	;# 
   506  001C                     	;# 
   507  001D                     	;# 
   508  001E                     	;# 
   509  001F                     	;# 
   510  0081                     	;# 
   511  0085                     	;# 
   512  0086                     	;# 
   513  0087                     	;# 
   514  0089                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  008F                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0093                     	;# 
   523  0093                     	;# 
   524  0093                     	;# 
   525  0094                     	;# 
   526  0095                     	;# 
   527  0096                     	;# 
   528  0097                     	;# 
   529  0098                     	;# 
   530  0099                     	;# 
   531  009A                     	;# 
   532  009B                     	;# 
   533  009C                     	;# 
   534  009D                     	;# 
   535  009E                     	;# 
   536  009F                     	;# 
   537  0105                     	;# 
   538  0107                     	;# 
   539  0108                     	;# 
   540  0109                     	;# 
   541  010C                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  010F                     	;# 
   546  0185                     	;# 
   547  0187                     	;# 
   548  0188                     	;# 
   549  0189                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552                           
   553                           	psect	idataBANK1
   554  136C                     __pidataBANK1:
   555                           
   556                           ;initializer for main@F1361
   557  136C  3406               	retlw	6
   558  136D  3409               	retlw	9
   559  136E  3409               	retlw	9
   560  136F  3406               	retlw	6
   561  1370  3400               	retlw	0
   562  1371  3400               	retlw	0
   563  1372  3400               	retlw	0
   564  1373  3400               	retlw	0
   565                           
   566                           ;initializer for _T_Lcd
   567  1374  34BC               	retlw	188
   568  1375  3402               	retlw	2
   569                           
   570                           ;initializer for _T_Task3
   571  1376  3490               	retlw	144
   572  1377  3401               	retlw	1
   573                           
   574                           ;initializer for _T_Task2
   575  1378  34C8               	retlw	200
   576  1379  3400               	retlw	0
   577                           
   578                           ;initializer for _T_Task1
   579  137A  34C8               	retlw	200
   580  137B  3400               	retlw	0
   581                           
   582                           ;initializer for _T_Tiempo
   583  137C  3410               	retlw	16
   584  137D  3427               	retlw	39
   585                           
   586                           	psect	strings
   587  0700                     __pstrings:
   588  0700                     stringtab:
   589  0700                     __stringtab:
   590                           
   591                           ;	String table - string pointers are 1 byte each
   592  0700  1BFF               	btfsc	btemp+1,7
   593  0701  2F0A               	ljmp	stringcode
   594  0702  1383               	bcf	3,7
   595  0703  187F               	btfsc	btemp+1,0
   596  0704  1783               	bsf	3,7
   597  0705  0800               	movf	0,w
   598  0706  0A84               	incf	4,f
   599  0707  1903               	skipnz
   600  0708  0AFF               	incf	btemp+1,f
   601  0709  0008               	return
   602  070A                     stringcode:
   603  070A                     stringdir:
   604  070A  3007               	movlw	high stringdir
   605  070B  008A               	movwf	10
   606  070C  0804               	movf	4,w
   607  070D  0A84               	incf	4,f
   608  070E  0782               	addwf	2,f
   609  070F                     __stringbase:
   610  070F  3400               	retlw	0
   611  0710                     __end_of__stringtab:
   612  0710                     _dpowers:
   613  0710  3401               	retlw	1
   614  0711  3400               	retlw	0
   615  0712  340A               	retlw	10
   616  0713  3400               	retlw	0
   617  0714  3464               	retlw	100
   618  0715  3400               	retlw	0
   619  0716  34E8               	retlw	232
   620  0717  3403               	retlw	3
   621  0718  3410               	retlw	16
   622  0719  3427               	retlw	39
   623  071A                     __end_of_dpowers:
   624  000E                     _TMR1	set	14
   625  0010                     _T1CONbits	set	16
   626  0007                     _PORTCbits	set	7
   627  001E                     _ADRESH	set	30
   628  001F                     _ADCON0	set	31
   629  001F                     _ADCON0bits	set	31
   630  0005                     _PORTAbits	set	5
   631  0006                     _PORTBbits	set	6
   632  0007                     _PORTC	set	7
   633  0006                     _PORTB	set	6
   634  0005                     _PORTA	set	5
   635  0034                     _RB4	set	52
   636  005F                     _GIE	set	95
   637  005E                     _PEIE	set	94
   638  0080                     _TMR1ON	set	128
   639  0060                     _TMR1IF	set	96
   640  0035                     _RB5	set	53
   641  009E                     _ADRESL	set	158
   642  009F                     _ADCON1bits	set	159
   643  0087                     _TRISC	set	135
   644  0086                     _TRISB	set	134
   645  0085                     _TRISAbits	set	133
   646  0434                     _TRISB4	set	1076
   647  0460                     _TMR1IE	set	1120
   648  0435                     _TRISB5	set	1077
   649  0105                     _WDTCONbits	set	261
   650  0188                     _ANSELbits	set	392
   651  0189                     _ANSELHbits	set	393
   652  0C4D                     _ANS13	set	3149
   653  071A                     STR_3:
   654  071A  3420               	retlw	32	;' '
   655  071B  3420               	retlw	32	;' '
   656  071C  3420               	retlw	32	;' '
   657  071D  3444               	retlw	68	;'D'
   658  071E  3445               	retlw	69	;'E'
   659  071F  3420               	retlw	32	;' '
   660  0720  3449               	retlw	73	;'I'
   661  0721  344E               	retlw	78	;'N'
   662  0722  3459               	retlw	89	;'Y'
   663  0723  3445               	retlw	69	;'E'
   664  0724  3443               	retlw	67	;'C'
   665  0725  3454               	retlw	84	;'T'
   666  0726  344F               	retlw	79	;'O'
   667  0727  3452               	retlw	82	;'R'
   668  0728  3445               	retlw	69	;'E'
   669  0729  3453               	retlw	83	;'S'
   670  072A  3420               	retlw	32	;' '
   671  072B  3420               	retlw	32	;' '
   672  072C  3420               	retlw	32	;' '
   673  072D  3420               	retlw	32	;' '
   674  072E  3400               	retlw	0
   675  072F                     STR_2:
   676  072F  3450               	retlw	80	;'P'
   677  0730  3452               	retlw	82	;'R'
   678  0731  344F               	retlw	79	;'O'
   679  0732  3442               	retlw	66	;'B'
   680  0733  3441               	retlw	65	;'A'
   681  0734  3444               	retlw	68	;'D'
   682  0735  344F               	retlw	79	;'O'
   683  0736  3452               	retlw	82	;'R'
   684  0737  3420               	retlw	32	;' '
   685  0738  3441               	retlw	65	;'A'
   686  0739  3455               	retlw	85	;'U'
   687  073A  3454               	retlw	84	;'T'
   688  073B  344F               	retlw	79	;'O'
   689  073C  344D               	retlw	77	;'M'
   690  073D  344F               	retlw	79	;'O'
   691  073E  3454               	retlw	84	;'T'
   692  073F  3452               	retlw	82	;'R'
   693  0740  3449               	retlw	73	;'I'
   694  0741  345A               	retlw	90	;'Z'
   695  0742  3420               	retlw	32	;' '
   696  0743  3400               	retlw	0
   697  0744                     STR_1:
   698  0744  343D               	retlw	61	;'='
   699  0745  343D               	retlw	61	;'='
   700  0746  343D               	retlw	61	;'='
   701  0747  343D               	retlw	61	;'='
   702  0748  343D               	retlw	61	;'='
   703  0749  343D               	retlw	61	;'='
   704  074A  343D               	retlw	61	;'='
   705  074B  343D               	retlw	61	;'='
   706  074C  343D               	retlw	61	;'='
   707  074D  343D               	retlw	61	;'='
   708  074E  343D               	retlw	61	;'='
   709  074F  343D               	retlw	61	;'='
   710  0750  343D               	retlw	61	;'='
   711  0751  343D               	retlw	61	;'='
   712  0752  343D               	retlw	61	;'='
   713  0753  343D               	retlw	61	;'='
   714  0754  343D               	retlw	61	;'='
   715  0755  343D               	retlw	61	;'='
   716  0756  343D               	retlw	61	;'='
   717  0757  343D               	retlw	61	;'='
   718  0758  3400               	retlw	0
   719  0759                     STR_7:
   720  0759  3450               	retlw	80	;'P'
   721  075A  3452               	retlw	82	;'R'
   722  075B  3455               	retlw	85	;'U'
   723  075C  3445               	retlw	69	;'E'
   724  075D  3442               	retlw	66	;'B'
   725  075E  3441               	retlw	65	;'A'
   726  075F  3420               	retlw	32	;' '
   727  0760  3446               	retlw	70	;'F'
   728  0761  344C               	retlw	76	;'L'
   729  0762  3455               	retlw	85	;'U'
   730  0763  344A               	retlw	74	;'J'
   731  0764  344F               	retlw	79	;'O'
   732  0765  3420               	retlw	32	;' '
   733  0766  3449               	retlw	73	;'I'
   734  0767  344E               	retlw	78	;'N'
   735  0768  3459               	retlw	89	;'Y'
   736  0769  342E               	retlw	46	;'.'
   737  076A  3400               	retlw	0
   738  076B                     STR_8:
   739  076B  344C               	retlw	76	;'L'
   740  076C  3449               	retlw	73	;'I'
   741  076D  344D               	retlw	77	;'M'
   742  076E  3450               	retlw	80	;'P'
   743  076F  342E               	retlw	46	;'.'
   744  0770  3420               	retlw	32	;' '
   745  0771  3455               	retlw	85	;'U'
   746  0772  344C               	retlw	76	;'L'
   747  0773  3454               	retlw	84	;'T'
   748  0774  3452               	retlw	82	;'R'
   749  0775  3441               	retlw	65	;'A'
   750  0776  3453               	retlw	83	;'S'
   751  0777  344F               	retlw	79	;'O'
   752  0778  344E               	retlw	78	;'N'
   753  0779  3449               	retlw	73	;'I'
   754  077A  3444               	retlw	68	;'D'
   755  077B  344F               	retlw	79	;'O'
   756  077C  3400               	retlw	0
   757  077D                     STR_9:
   758  077D  344D               	retlw	77	;'M'
   759  077E  344F               	retlw	79	;'O'
   760  077F  3444               	retlw	68	;'D'
   761  0780  344F               	retlw	79	;'O'
   762  0781  3420               	retlw	32	;' '
   763  0782  3441               	retlw	65	;'A'
   764  0783  3455               	retlw	85	;'U'
   765  0784  3454               	retlw	84	;'T'
   766  0785  344F               	retlw	79	;'O'
   767  0786  344D               	retlw	77	;'M'
   768  0787  3441               	retlw	65	;'A'
   769  0788  3454               	retlw	84	;'T'
   770  0789  3449               	retlw	73	;'I'
   771  078A  3443               	retlw	67	;'C'
   772  078B  344F               	retlw	79	;'O'
   773  078C  3400               	retlw	0
   774  078D                     STR_5:
   775  078D  3450               	retlw	80	;'P'
   776  078E  3452               	retlw	82	;'R'
   777  078F  3455               	retlw	85	;'U'
   778  0790  3445               	retlw	69	;'E'
   779  0791  3442               	retlw	66	;'B'
   780  0792  3441               	retlw	65	;'A'
   781  0793  3420               	retlw	32	;' '
   782  0794  3450               	retlw	80	;'P'
   783  0795  3455               	retlw	85	;'U'
   784  0796  344C               	retlw	76	;'L'
   785  0797  3456               	retlw	86	;'V'
   786  0798  3445               	retlw	69	;'E'
   787  0799  3452               	retlw	82	;'R'
   788  079A  342E               	retlw	46	;'.'
   789  079B  3400               	retlw	0
   790  079C                     STR_19:
   791  079C  3454               	retlw	84	;'T'
   792  079D  3445               	retlw	69	;'E'
   793  079E  344D               	retlw	77	;'M'
   794  079F  3450               	retlw	80	;'P'
   795  07A0  3445               	retlw	69	;'E'
   796  07A1  3452               	retlw	82	;'R'
   797  07A2  3441               	retlw	65	;'A'
   798  07A3  3454               	retlw	84	;'T'
   799  07A4  3455               	retlw	85	;'U'
   800  07A5  3452               	retlw	82	;'R'
   801  07A6  3441               	retlw	65	;'A'
   802  07A7  343A               	retlw	58	;':'
   803  07A8  3400               	retlw	0
   804  07A9                     STR_6:
   805  07A9  3450               	retlw	80	;'P'
   806  07AA  3452               	retlw	82	;'R'
   807  07AB  3455               	retlw	85	;'U'
   808  07AC  3445               	retlw	69	;'E'
   809  07AD  3442               	retlw	66	;'B'
   810  07AE  3441               	retlw	65	;'A'
   811  07AF  3420               	retlw	32	;' '
   812  07B0  3446               	retlw	70	;'F'
   813  07B1  3455               	retlw	85	;'U'
   814  07B2  3447               	retlw	71	;'G'
   815  07B3  3441               	retlw	65	;'A'
   816  07B4  3400               	retlw	0
   817  07B5                     STR_17:
   818  07B5  3454               	retlw	84	;'T'
   819  07B6  3449               	retlw	73	;'I'
   820  07B7  3445               	retlw	69	;'E'
   821  07B8  344D               	retlw	77	;'M'
   822  07B9  3450               	retlw	80	;'P'
   823  07BA  344F               	retlw	79	;'O'
   824  07BB  343A               	retlw	58	;':'
   825  07BC  3400               	retlw	0
   826  07BD                     STR_22:
   827  07BD  3425               	retlw	37	;'%'
   828  07BE  3430               	retlw	48	;'0'
   829  07BF  3432               	retlw	50	;'2'
   830  07C0  3464               	retlw	100	;'d'
   831  07C1  3400               	retlw	0
   832  07C2                     STR_21:
   833  07C2  3425               	retlw	37	;'%'
   834  07C3  3430               	retlw	48	;'0'
   835  07C4  3435               	retlw	53	;'5'
   836  07C5  3475               	retlw	117	;'u'
   837  07C6  3400               	retlw	0
   838  07C7                     STR_15:
   839  07C7  3452               	retlw	82	;'R'
   840  07C8  3450               	retlw	80	;'P'
   841  07C9  344D               	retlw	77	;'M'
   842  07CA  343A               	retlw	58	;':'
   843  07CB  3400               	retlw	0
   844  07CC                     STR_16:
   845  07CC  3450               	retlw	80	;'P'
   846  07CD  3457               	retlw	87	;'W'
   847  07CE  344D               	retlw	77	;'M'
   848  07CF  343A               	retlw	58	;':'
   849  07D0  3400               	retlw	0
   850  07D1                     STR_10:
   851  07D1  343E               	retlw	62	;'>'
   852  07D2  3400               	retlw	0
   853  07D3                     STR_20:
   854  07D3  3443               	retlw	67	;'C'
   855  07D4  3400               	retlw	0
   856  07A7                     
   857                           	psect	cinit
   858  0013                     start_initialization:	
   859                           ; #config settings
   860                           
   861  0013                     __initialization:
   862                           
   863                           ; Initialize objects allocated to BANK1
   864  0013  1383               	bcf	3,7	;select IRP bank0
   865  0014  30EE               	movlw	low (__pdataBANK1+18)
   866  0015  00FD               	movwf	btemp+-1
   867  0016  3013               	movlw	high __pidataBANK1
   868  0017  00FE               	movwf	btemp
   869  0018  306C               	movlw	low __pidataBANK1
   870  0019  00FF               	movwf	btemp+1
   871  001A  30DC               	movlw	low __pdataBANK1
   872  001B  0084               	movwf	4
   873  001C  160A  118A  235F  120A  118A  	fcall	init_ram0
   874                           
   875                           ; Clear objects allocated to BANK1
   876  0021  30A0               	movlw	low __pbssBANK1
   877  0022  0084               	movwf	4
   878  0023  30C5               	movlw	low (__pbssBANK1+37)
   879  0024  120A  158A  2001   	fcall	clear_ram0
   880                           
   881                           ; Clear objects allocated to COMMON
   882  0027  01F6               	clrf	__pbssCOMMON& (0+127)
   883  0028  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   884  0029  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   885  002A  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   886  002B                     end_of_initialization:	
   887                           ;End of C runtime variable initialization code
   888                           
   889  002B                     __end_of__initialization:
   890  002B  0183               	clrf	3
   891  002C  120A  118A  2DF2   	ljmp	_main	;jump to C main() function
   892                           
   893                           	psect	bssCOMMON
   894  0076                     __pbssCOMMON:
   895  0076                     _Out_E:
   896  0076                     	ds	1
   897  0077                     _Modo:
   898  0077                     	ds	1
   899  0078                     _Seg:
   900  0078                     	ds	1
   901  0079                     _Pwm:
   902  0079                     	ds	1
   903                           
   904                           	psect	bssBANK1
   905  00A0                     __pbssBANK1:
   906  00A0                     main@F1363:
   907  00A0                     	ds	8
   908  00A8                     _Pw_PwmS1:
   909  00A8                     	ds	3
   910  00AB                     _Per_PwmS1:
   911  00AB                     	ds	3
   912  00AE                     _PER_T_S1:
   913  00AE                     	ds	2
   914  00B0                     _P_W_T_S1:
   915  00B0                     	ds	2
   916  00B2                     _PwmS1:
   917  00B2                     	ds	2
   918  00B4                     _freqPwmS1:
   919  00B4                     	ds	2
   920  00B6                     _Rpm:
   921  00B6                     	ds	2
   922  00B8                     _clock100us:
   923  00B8                     	ds	1
   924  00B9                     _mostrar:
   925  00B9                     	ds	1
   926  00BA                     _T_running:
   927  00BA                     	ds	1
   928  00BB                     _Est_Task3:
   929  00BB                     	ds	1
   930  00BC                     _Est_Task2:
   931  00BC                     	ds	1
   932  00BD                     _Est_Task1:
   933  00BD                     	ds	1
   934  00BE                     _Act_PwmS1:
   935  00BE                     	ds	1
   936  00BF                     _mod_seg:
   937  00BF                     	ds	1
   938  00C0                     _mod_min:
   939  00C0                     	ds	1
   940  00C1                     _Temporizador:
   941  00C1                     	ds	1
   942  00C2                     _Fin:
   943  00C2                     	ds	1
   944  00C3                     _Temp:
   945  00C3                     	ds	1
   946  00C4                     _Min:
   947  00C4                     	ds	1
   948                           
   949                           	psect	dataBANK1
   950  00DC                     __pdataBANK1:
   951  00DC                     main@F1361:
   952  00DC                     	ds	8
   953  00E4                     _T_Lcd:
   954  00E4                     	ds	2
   955  00E6                     _T_Task3:
   956  00E6                     	ds	2
   957  00E8                     _T_Task2:
   958  00E8                     	ds	2
   959  00EA                     _T_Task1:
   960  00EA                     	ds	2
   961  00EC                     _T_Tiempo:
   962  00EC                     	ds	2
   963                           
   964                           	psect	inittext
   965  135B                     init_fetch0:	
   966                           ;	Called with low address in FSR and high address in W
   967                           
   968  135B  087E               	movf	126,w
   969  135C  008A               	movwf	10
   970  135D  087F               	movf	127,w
   971  135E  0082               	movwf	2
   972  135F                     init_ram0:	
   973                           ;Called with:
   974                           ;	high address of idata address in btemp 
   975                           ;	low address of idata address in btemp+1 
   976                           ;	low address of data in FSR
   977                           ;	high address + 1 of data in btemp-1
   978                           
   979  135F  235B  160A  118A   	fcall	init_fetch0
   980  1362  0080               	movwf	0
   981  1363  0A84               	incf	4,f
   982  1364  0804               	movf	4,w
   983  1365  067D               	xorwf	125,w
   984  1366  1903               	btfsc	3,2
   985  1367  3400               	retlw	0
   986  1368  0AFF               	incf	127,f
   987  1369  1903               	btfsc	3,2
   988  136A  0AFE               	incf	126,f
   989  136B  2B5F               	goto	init_ram0
   990                           
   991                           	psect	clrtext
   992  0801                     clear_ram0:	
   993                           ;	Called with FSR containing the base address, and
   994                           ;	W with the last address+1
   995                           
   996  0801  0064               	clrwdt	;clear the watchdog before getting into this loop
   997  0802                     clrloop0:
   998  0802  0180               	clrf	0	;clear RAM location pointed to by FSR
   999  0803  0A84               	incf	4,f	;increment pointer
  1000  0804  0604               	xorwf	4,w	;XOR with final address
  1001  0805  1903               	btfsc	3,2	;have we reached the end yet?
  1002  0806  3400               	retlw	0	;all done for this memory range, return
  1003  0807  0604               	xorwf	4,w	;XOR again to restore value
  1004  0808  2802               	goto	clrloop0	;do the next byte
  1005                           
  1006                           	psect	cstackBANK3
  1007  0190                     __pcstackBANK3:
  1008  0190                     main@caracter1:
  1009                           
  1010                           ; 8 bytes @ 0x0
  1011  0190                     	ds	8
  1012  0198                     main@caracter:
  1013                           
  1014                           ; 8 bytes @ 0x8
  1015  0198                     	ds	8
  1016  01A0                     main@opcion:
  1017                           
  1018                           ; 1 bytes @ 0x10
  1019  01A0                     	ds	1
  1020                           
  1021                           	psect	cstackBANK1
  1022  00C5                     __pcstackBANK1:
  1023  00C5                     E_Task1_Rpm@buffer:
  1024                           
  1025                           ; 10 bytes @ 0x0
  1026  00C5                     	ds	10
  1027  00CF                     _E_Task1_Rpm$1286:
  1028                           
  1029                           ; 3 bytes @ 0xA
  1030  00CF                     	ds	3
  1031  00D2                     E_Task1_Rpm@aux:
  1032                           
  1033                           ; 2 bytes @ 0xD
  1034  00D2                     	ds	2
  1035  00D4                     E_Task1_Rpm@cent:
  1036                           
  1037                           ; 2 bytes @ 0xF
  1038  00D4                     	ds	2
  1039  00D6                     E_Task1_Rpm@uni_m:
  1040                           
  1041                           ; 2 bytes @ 0x11
  1042  00D6                     	ds	2
  1043  00D8                     E_Task1_Rpm@dec_m:
  1044                           
  1045                           ; 2 bytes @ 0x13
  1046  00D8                     	ds	2
  1047  00DA                     E_Task1_Rpm@valor:
  1048                           
  1049                           ; 2 bytes @ 0x15
  1050  00DA                     	ds	2
  1051                           
  1052                           	psect	cstackCOMMON
  1053  0070                     __pcstackCOMMON:
  1054  0070                     ?_isdigit:
  1055  0070                     ?_LCD_init:	
  1056                           ; 1 bit 
  1057                           
  1058  0070                     ?_Adc_init:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?_Pwm_init:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?_LCD_command:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ?_Seleccion_Modo:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?_antirrebote:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ?_Lcd_PPAR:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?_MP_Pulv:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ?_Lcd_PTM:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     ?_Pwm1_stop:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ?_Task1:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ?_Task2:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ?_Task3:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?_LCD_date:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ?_Task_Ready:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ??_Task_Ready:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0070                     ?_Pwm_Signal:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0070                     ??_Pwm_Signal:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  0070                     ?_E_Task1_Rpm:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  0070                     ?_E_Task1_Pwm:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0070                     ?_E_Task1_Min:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  0070                     ?_E_Task1_Temp:	
  1119                           ; 1 bytes @ 0x0
  1120                           
  1121  0070                     ?_LCD_E:	
  1122                           ; 1 bytes @ 0x0
  1123                           
  1124  0070                     ?_main:	
  1125                           ; 1 bytes @ 0x0
  1126                           
  1127  0070                     ?_ISR:	
  1128                           ; 1 bytes @ 0x0
  1129                           
  1130  0070                     ??_ISR:	
  1131                           ; 1 bytes @ 0x0
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x0
  1135  0070                     	ds	3
  1136  0073                     ISR@f_pwmS1:
  1137                           
  1138                           ; 1 bytes @ 0x3
  1139  0073                     	ds	1
  1140  0074                     ??_Adc_init:
  1141  0074                     ??_Pwm_init:	
  1142                           ; 1 bytes @ 0x4
  1143                           
  1144  0074                     ??_Pwm1_stop:	
  1145                           ; 1 bytes @ 0x4
  1146                           
  1147  0074                     ??_LCD_E:	
  1148                           ; 1 bytes @ 0x4
  1149                           
  1150  0074                     ??_isdigit:	
  1151                           ; 1 bytes @ 0x4
  1152                           
  1153  0074                     ??___wmul:	
  1154                           ; 1 bytes @ 0x4
  1155                           
  1156  0074                     ??___lwdiv:	
  1157                           ; 1 bytes @ 0x4
  1158                           
  1159  0074                     ??___lwmod:	
  1160                           ; 1 bytes @ 0x4
  1161                           
  1162  0074                     ??___lwtoft:	
  1163                           ; 1 bytes @ 0x4
  1164                           
  1165  0074                     ?_Adc:	
  1166                           ; 1 bytes @ 0x4
  1167                           
  1168  0074                     ___lbtoft@c:	
  1169                           ; 2 bytes @ 0x4
  1170                           
  1171  0074                     ___lwmod@counter:	
  1172                           ; 1 bytes @ 0x4
  1173                           
  1174  0074                     _isdigit$1103:	
  1175                           ; 1 bytes @ 0x4
  1176                           
  1177  0074                     ___wmul@product:	
  1178                           ; 1 bytes @ 0x4
  1179                           
  1180                           
  1181                           ; 2 bytes @ 0x4
  1182  0074                     	ds	1
  1183  0075                     LCD_command@cmd:
  1184  0075                     LCD_date@date:	
  1185                           ; 1 bytes @ 0x5
  1186                           
  1187  0075                     isdigit@c:	
  1188                           ; 1 bytes @ 0x5
  1189                           
  1190                           
  1191                           ; 1 bytes @ 0x5
  1192  0075                     	ds	1
  1193  0076                     ??_Lcd_PPAR:
  1194  0076                     ??_Lcd_PTM:	
  1195                           ; 1 bytes @ 0x6
  1196                           
  1197  0076                     ??_Task1:	
  1198                           ; 1 bytes @ 0x6
  1199                           
  1200  0076                     ??_Task2:	
  1201                           ; 1 bytes @ 0x6
  1202                           
  1203  0076                     ??_LCD_xy:	
  1204                           ; 1 bytes @ 0x6
  1205                           
  1206  0076                     ??_Pwm1_init:	
  1207                           ; 1 bytes @ 0x6
  1208                           
  1209  0076                     ??_Pwm1:	
  1210                           ; 1 bytes @ 0x6
  1211                           
  1212  0076                     ??___awtoft:	
  1213                           ; 1 bytes @ 0x6
  1214                           
  1215                           
  1216                           	psect	cstackBANK0
  1217  0020                     __pcstackBANK0:	
  1218                           ; 1 bytes @ 0x6
  1219                           
  1220  0020                     ??_LCD_command:
  1221  0020                     ??_antirrebote:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224  0020                     ??_LCD_date:	
  1225                           ; 1 bytes @ 0x0
  1226                           
  1227  0020                     ??_Adc:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230  0020                     ?___lwdiv:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233  0020                     ?___ftpack:	
  1234                           ; 2 bytes @ 0x0
  1235                           
  1236  0020                     ___lwdiv@divisor:	
  1237                           ; 3 bytes @ 0x0
  1238                           
  1239  0020                     ___ftpack@arg:	
  1240                           ; 2 bytes @ 0x0
  1241                           
  1242                           
  1243                           ; 3 bytes @ 0x0
  1244  0020                     	ds	2
  1245  0022                     ??_LCD_init:
  1246  0022                     ?_LCD_character:	
  1247                           ; 1 bytes @ 0x2
  1248                           
  1249  0022                     ?_LCD_array:	
  1250                           ; 1 bytes @ 0x2
  1251                           
  1252  0022                     ?_LCD_xy:	
  1253                           ; 1 bytes @ 0x2
  1254                           
  1255  0022                     Adc@channel:	
  1256                           ; 1 bytes @ 0x2
  1257                           
  1258  0022                     LCD_character@caracter:	
  1259                           ; 1 bytes @ 0x2
  1260                           
  1261  0022                     LCD_array@x:	
  1262                           ; 1 bytes @ 0x2
  1263                           
  1264  0022                     LCD_xy@x:	
  1265                           ; 2 bytes @ 0x2
  1266                           
  1267  0022                     ___lwdiv@dividend:	
  1268                           ; 2 bytes @ 0x2
  1269                           
  1270                           
  1271                           ; 2 bytes @ 0x2
  1272  0022                     	ds	1
  1273  0023                     ??_LCD_character:
  1274  0023                     ___ftpack@exp:	
  1275                           ; 1 bytes @ 0x3
  1276                           
  1277  0023                     Adc@convertion:	
  1278                           ; 1 bytes @ 0x3
  1279                           
  1280                           
  1281                           ; 2 bytes @ 0x3
  1282  0023                     	ds	1
  1283  0024                     LCD_init@i:
  1284  0024                     LCD_character@adress:	
  1285                           ; 1 bytes @ 0x4
  1286                           
  1287  0024                     ___ftpack@sign:	
  1288                           ; 1 bytes @ 0x4
  1289                           
  1290  0024                     ___lwdiv@counter:	
  1291                           ; 1 bytes @ 0x4
  1292                           
  1293  0024                     LCD_array@y:	
  1294                           ; 1 bytes @ 0x4
  1295                           
  1296  0024                     LCD_xy@y:	
  1297                           ; 2 bytes @ 0x4
  1298                           
  1299                           
  1300                           ; 2 bytes @ 0x4
  1301  0024                     	ds	1
  1302  0025                     ??___ftpack:
  1303  0025                     LCD_character@i:	
  1304                           ; 1 bytes @ 0x5
  1305                           
  1306  0025                     ___lwdiv@quotient:	
  1307                           ; 1 bytes @ 0x5
  1308                           
  1309                           
  1310                           ; 2 bytes @ 0x5
  1311  0025                     	ds	1
  1312  0026                     LCD_array@date:
  1313                           
  1314                           ; 2 bytes @ 0x6
  1315  0026                     	ds	1
  1316  0027                     ?___wmul:
  1317  0027                     ?___lwmod:	
  1318                           ; 2 bytes @ 0x7
  1319                           
  1320  0027                     ___wmul@multiplier:	
  1321                           ; 2 bytes @ 0x7
  1322                           
  1323  0027                     ___lwmod@divisor:	
  1324                           ; 2 bytes @ 0x7
  1325                           
  1326                           
  1327                           ; 2 bytes @ 0x7
  1328  0027                     	ds	1
  1329  0028                     ??_LCD_array:
  1330  0028                     ?___awtoft:	
  1331                           ; 1 bytes @ 0x8
  1332                           
  1333  0028                     ?___lbtoft:	
  1334                           ; 3 bytes @ 0x8
  1335                           
  1336  0028                     ?___lwtoft:	
  1337                           ; 3 bytes @ 0x8
  1338                           
  1339  0028                     ___awtoft@c:	
  1340                           ; 3 bytes @ 0x8
  1341                           
  1342  0028                     ___lwtoft@c:	
  1343                           ; 2 bytes @ 0x8
  1344                           
  1345                           
  1346                           ; 2 bytes @ 0x8
  1347  0028                     	ds	1
  1348  0029                     ___wmul@multiplicand:
  1349  0029                     ___lwmod@dividend:	
  1350                           ; 2 bytes @ 0x9
  1351                           
  1352                           
  1353                           ; 2 bytes @ 0x9
  1354  0029                     	ds	1
  1355  002A                     Lcd_PTM@opcion:
  1356                           
  1357                           ; 1 bytes @ 0xA
  1358  002A                     	ds	1
  1359  002B                     ??_Seleccion_Modo:
  1360  002B                     ??___lbtoft:	
  1361                           ; 1 bytes @ 0xB
  1362                           
  1363  002B                     ?_sprintf:	
  1364                           ; 1 bytes @ 0xB
  1365                           
  1366  002B                     sprintf@f:	
  1367                           ; 2 bytes @ 0xB
  1368                           
  1369  002B                     ___awtoft@sign:	
  1370                           ; 1 bytes @ 0xB
  1371                           
  1372                           
  1373                           ; 1 bytes @ 0xB
  1374  002B                     	ds	1
  1375  002C                     ?___ftmul:
  1376  002C                     ___ftmul@f1:	
  1377                           ; 3 bytes @ 0xC
  1378                           
  1379                           
  1380                           ; 3 bytes @ 0xC
  1381  002C                     	ds	2
  1382  002E                     ??_sprintf:
  1383  002E                     Seleccion_Modo@opc_ant:	
  1384                           ; 1 bytes @ 0xE
  1385                           
  1386                           
  1387                           ; 1 bytes @ 0xE
  1388  002E                     	ds	1
  1389  002F                     Seleccion_Modo@opcion:
  1390  002F                     ___ftmul@f2:	
  1391                           ; 1 bytes @ 0xF
  1392                           
  1393                           
  1394                           ; 3 bytes @ 0xF
  1395  002F                     	ds	2
  1396  0031                     sprintf@prec:
  1397                           
  1398                           ; 1 bytes @ 0x11
  1399  0031                     	ds	1
  1400  0032                     ??___ftmul:
  1401  0032                     sprintf@ap:	
  1402                           ; 1 bytes @ 0x12
  1403                           
  1404                           
  1405                           ; 1 bytes @ 0x12
  1406  0032                     	ds	1
  1407  0033                     sprintf@val:
  1408                           
  1409                           ; 2 bytes @ 0x13
  1410  0033                     	ds	2
  1411  0035                     sprintf@flag:
  1412  0035                     ___ftmul@exp:	
  1413                           ; 1 bytes @ 0x15
  1414                           
  1415                           
  1416                           ; 1 bytes @ 0x15
  1417  0035                     	ds	1
  1418  0036                     sprintf@width:
  1419  0036                     ___ftmul@f3_as_product:	
  1420                           ; 2 bytes @ 0x16
  1421                           
  1422                           
  1423                           ; 3 bytes @ 0x16
  1424  0036                     	ds	2
  1425  0038                     sprintf@c:
  1426                           
  1427                           ; 1 bytes @ 0x18
  1428  0038                     	ds	1
  1429  0039                     sprintf@sp:
  1430  0039                     ___ftmul@cntr:	
  1431                           ; 1 bytes @ 0x19
  1432                           
  1433                           
  1434                           ; 1 bytes @ 0x19
  1435  0039                     	ds	1
  1436  003A                     ??_Task3:
  1437  003A                     ___ftmul@sign:	
  1438                           ; 1 bytes @ 0x1A
  1439                           
  1440                           
  1441                           ; 1 bytes @ 0x1A
  1442  003A                     	ds	1
  1443  003B                     ?___ftdiv:
  1444  003B                     ___ftdiv@f2:	
  1445                           ; 3 bytes @ 0x1B
  1446                           
  1447                           
  1448                           ; 3 bytes @ 0x1B
  1449  003B                     	ds	2
  1450  003D                     Task3@buffer:
  1451                           
  1452                           ; 10 bytes @ 0x1D
  1453  003D                     	ds	1
  1454  003E                     ___ftdiv@f1:
  1455                           
  1456                           ; 3 bytes @ 0x1E
  1457  003E                     	ds	3
  1458  0041                     ??___ftdiv:
  1459                           
  1460                           ; 1 bytes @ 0x21
  1461  0041                     	ds	3
  1462  0044                     ___ftdiv@cntr:
  1463                           
  1464                           ; 1 bytes @ 0x24
  1465  0044                     	ds	1
  1466  0045                     ___ftdiv@f3:
  1467                           
  1468                           ; 3 bytes @ 0x25
  1469  0045                     	ds	2
  1470  0047                     Task3@i:
  1471                           
  1472                           ; 1 bytes @ 0x27
  1473  0047                     	ds	1
  1474  0048                     ___ftdiv@exp:
  1475                           
  1476                           ; 1 bytes @ 0x28
  1477  0048                     	ds	1
  1478  0049                     ___ftdiv@sign:
  1479                           
  1480                           ; 1 bytes @ 0x29
  1481  0049                     	ds	1
  1482  004A                     ?___ftadd:
  1483  004A                     ?___fttol:	
  1484                           ; 3 bytes @ 0x2A
  1485                           
  1486  004A                     ___ftadd@f1:	
  1487                           ; 4 bytes @ 0x2A
  1488                           
  1489  004A                     ___fttol@f1:	
  1490                           ; 3 bytes @ 0x2A
  1491                           
  1492                           
  1493                           ; 3 bytes @ 0x2A
  1494  004A                     	ds	3
  1495  004D                     ___ftadd@f2:
  1496                           
  1497                           ; 3 bytes @ 0x2D
  1498  004D                     	ds	1
  1499  004E                     ??___fttol:
  1500                           
  1501                           ; 1 bytes @ 0x2E
  1502  004E                     	ds	2
  1503  0050                     ??___ftadd:
  1504                           
  1505                           ; 1 bytes @ 0x30
  1506  0050                     	ds	1
  1507  0051                     ___fttol@sign1:
  1508                           
  1509                           ; 1 bytes @ 0x31
  1510  0051                     	ds	1
  1511  0052                     ___fttol@lval:
  1512                           
  1513                           ; 4 bytes @ 0x32
  1514  0052                     	ds	1
  1515  0053                     ___ftadd@sign:
  1516                           
  1517                           ; 1 bytes @ 0x33
  1518  0053                     	ds	1
  1519  0054                     ___ftadd@exp2:
  1520                           
  1521                           ; 1 bytes @ 0x34
  1522  0054                     	ds	1
  1523  0055                     ___ftadd@exp1:
  1524                           
  1525                           ; 1 bytes @ 0x35
  1526  0055                     	ds	1
  1527  0056                     ___fttol@exp1:
  1528                           
  1529                           ; 1 bytes @ 0x36
  1530  0056                     	ds	1
  1531  0057                     ??_E_Task1_Rpm:
  1532  0057                     ??_E_Task1_Pwm:	
  1533                           ; 1 bytes @ 0x37
  1534                           
  1535  0057                     ??_E_Task1_Min:	
  1536                           ; 1 bytes @ 0x37
  1537                           
  1538  0057                     ??_E_Task1_Temp:	
  1539                           ; 1 bytes @ 0x37
  1540                           
  1541  0057                     ?_Pwm1_init:	
  1542                           ; 1 bytes @ 0x37
  1543                           
  1544  0057                     ?_Pwm1:	
  1545                           ; 1 bytes @ 0x37
  1546                           
  1547  0057                     Pwm1_init@frecuencia:	
  1548                           ; 1 bytes @ 0x37
  1549                           
  1550  0057                     Pwm1@duty:	
  1551                           ; 2 bytes @ 0x37
  1552                           
  1553                           
  1554                           ; 3 bytes @ 0x37
  1555  0057                     	ds	2
  1556  0059                     E_Task1_Pwm@buffer:
  1557  0059                     E_Task1_Min@buffer:	
  1558                           ; 10 bytes @ 0x39
  1559                           
  1560  0059                     E_Task1_Temp@buffer:	
  1561                           ; 10 bytes @ 0x39
  1562                           
  1563                           
  1564                           ; 10 bytes @ 0x39
  1565  0059                     	ds	1
  1566  005A                     _Task2$1290:
  1567                           
  1568                           ; 2 bytes @ 0x3A
  1569  005A                     	ds	9
  1570  0063                     E_Task1_Min@aux_min:
  1571  0063                     _E_Task1_Pwm$1287:	
  1572                           ; 1 bytes @ 0x43
  1573                           
  1574  0063                     _E_Task1_Temp$1289:	
  1575                           ; 3 bytes @ 0x43
  1576                           
  1577                           
  1578                           ; 3 bytes @ 0x43
  1579  0063                     	ds	1
  1580  0064                     E_Task1_Min@aux_seg:
  1581                           
  1582                           ; 1 bytes @ 0x44
  1583  0064                     	ds	1
  1584  0065                     _E_Task1_Min$1288:
  1585                           
  1586                           ; 3 bytes @ 0x45
  1587  0065                     	ds	1
  1588  0066                     E_Task1_Pwm@aux:
  1589  0066                     E_Task1_Temp@aux:	
  1590                           ; 1 bytes @ 0x46
  1591                           
  1592                           
  1593                           ; 1 bytes @ 0x46
  1594  0066                     	ds	2
  1595  0068                     Task1@Estado:
  1596                           
  1597                           ; 1 bytes @ 0x48
  1598  0068                     	ds	1
  1599  0069                     ??_MP_Pulv:
  1600                           
  1601                           ; 1 bytes @ 0x49
  1602  0069                     	ds	2
  1603  006B                     MP_Pulv@Maq_task1:
  1604                           
  1605                           ; 1 bytes @ 0x4B
  1606  006B                     	ds	1
  1607  006C                     ??_main:
  1608                           
  1609                           ; 1 bytes @ 0x4C
  1610  006C                     	ds	4
  1611                           
  1612                           	psect	maintext
  1613  05F2                     __pmaintext:	
  1614 ;;
  1615 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1616 ;;
  1617 ;; *************** function _main *****************
  1618 ;; Defined at:
  1619 ;;		line 96 in file "Main.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  caracter        8    8[BANK3 ] unsigned char [8]
  1624 ;;  caracter1       8    0[BANK3 ] unsigned char [8]
  1625 ;;  opcion          1   16[BANK3 ] unsigned char 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : B00/0
  1632 ;;		On exit  : 300/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1635 ;;      Params:         0       0       0       0       0
  1636 ;;      Locals:         0       0       0      17       0
  1637 ;;      Temps:          0       4       0       0       0
  1638 ;;      Totals:         0       4       0      17       0
  1639 ;;Total ram usage:       21 bytes
  1640 ;; Hardware stack levels required when called:    8
  1641 ;; This function calls:
  1642 ;;		_Adc_init
  1643 ;;		_LCD_array
  1644 ;;		_LCD_character
  1645 ;;		_LCD_command
  1646 ;;		_LCD_init
  1647 ;;		_Lcd_PPAR
  1648 ;;		_MP_Pulv
  1649 ;;		_Pwm_init
  1650 ;;		_Seleccion_Modo
  1651 ;;		_antirrebote
  1652 ;; This function is called by:
  1653 ;;		Startup code after reset
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           
  1658                           ;psect for function _main
  1659  05F2                     _main:
  1660                           
  1661                           ;Main.c: 101:     TRISAbits.TRISA5 = 0;
  1662                           
  1663                           ;incstack = 0
  1664                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1665  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  1666  05F3  1285               	bcf	5,5	;volatile
  1667                           
  1668                           ;Main.c: 102:     PORTA = 0;
  1669  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  1670  05F5  0185               	clrf	5	;volatile
  1671                           
  1672                           ;Main.c: 103:     PORTB = 0;
  1673  05F6  0186               	clrf	6	;volatile
  1674                           
  1675                           ;Main.c: 104:     PORTC = 0;
  1676  05F7  0187               	clrf	7	;volatile
  1677                           
  1678                           ;Main.c: 105:     TRISB = 0xFF;
  1679  05F8  30FF               	movlw	255
  1680  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  1681  05FA  0086               	movwf	6	;volatile
  1682                           
  1683                           ;Main.c: 106:     TRISC = 0x00;
  1684  05FB  0187               	clrf	7	;volatile
  1685                           
  1686                           ;Main.c: 107:     ANSELHbits.ANS12 = 0;
  1687  05FC  1703               	bsf	3,6	;RP1=1, select bank3
  1688  05FD  1209               	bcf	9,4	;volatile
  1689                           
  1690                           ;Main.c: 108:     ANSELHbits.ANS11 = 0;
  1691  05FE  1189               	bcf	9,3	;volatile
  1692                           
  1693                           ;Main.c: 109:     ANSELHbits.ANS10 = 0;
  1694  05FF  1109               	bcf	9,2	;volatile
  1695                           
  1696                           ;Main.c: 110:     ANSELHbits.ANS8 = 0;
  1697  0600  1009               	bcf	9,0	;volatile
  1698                           
  1699                           ;Main.c: 111:     ANSELHbits.ANS9 = 0;
  1700  0601  1089               	bcf	9,1	;volatile
  1701                           
  1702                           ;Main.c: 112:     ANSELbits.ANS4 = 0;
  1703  0602  1208               	bcf	8,4	;volatile
  1704                           
  1705                           ;Main.c: 114:     ANS13 = 0;
  1706  0603  1289               	bcf	9,5	;volatile
  1707                           
  1708                           ;Main.c: 115:     TRISB5 = 0;
  1709  0604  1303               	bcf	3,6	;RP1=0, select bank1
  1710  0605  1286               	bcf	6,5	;volatile
  1711                           
  1712                           ;Main.c: 116:     RB5 = 0;
  1713  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0607  1286               	bcf	6,5	;volatile
  1715                           
  1716                           ;Main.c: 119:     LCD_init();
  1717  0608  120A  158A  2158  120A  118A  	fcall	_LCD_init
  1718                           
  1719                           ;Main.c: 120:     Adc_init();
  1720  060D  160A  118A  23DB  120A  118A  	fcall	_Adc_init
  1721                           
  1722                           ;Main.c: 121:     Pwm_init();
  1723  0612  160A  118A  23A9  120A  118A  	fcall	_Pwm_init
  1724                           
  1725                           ;Main.c: 124:     char caracter1[8] =
  1726  0617  3090               	movlw	main@caracter1& (0+255)
  1727  0618  0084               	movwf	4
  1728  0619  30DC               	movlw	low main@F1361
  1729  061A  00EC               	movwf	??_main
  1730  061B  0804               	movf	4,w
  1731  061C  00ED               	movwf	??_main+1
  1732  061D  3008               	movlw	8
  1733  061E  00EE               	movwf	??_main+2
  1734  061F                     u5950:
  1735  061F  086C               	movf	??_main,w
  1736  0620  0084               	movwf	4
  1737  0621  1383               	bcf	3,7	;select IRP bank1
  1738  0622  0800               	movf	0,w
  1739  0623  00EF               	movwf	??_main+3
  1740  0624  0AEC               	incf	??_main,f
  1741  0625  086D               	movf	??_main+1,w
  1742  0626  0084               	movwf	4
  1743  0627  1783               	bsf	3,7	;select IRP bank3
  1744  0628  086F               	movf	??_main+3,w
  1745  0629  0080               	movwf	0
  1746  062A  0AED               	incf	??_main+1,f
  1747  062B  0BEE               	decfsz	??_main+2,f
  1748  062C  2E1F               	goto	u5950
  1749                           
  1750                           ;Main.c: 135:     LCD_character(0x01,caracter1);
  1751  062D  3090               	movlw	(low (main@caracter1| (0+256)))& (0+255)
  1752  062E  00FF               	movwf	127
  1753  062F  087F               	movf	127,w
  1754  0630  00A2               	movwf	LCD_character@caracter
  1755  0631  3001               	movlw	1
  1756  0632  120A  118A  27D5  120A  118A  	fcall	_LCD_character
  1757                           
  1758                           ;Main.c: 138:     char caracter[8] = {0,0,0,0,0,0,0,0};
  1759  0637  3098               	movlw	main@caracter& (0+255)
  1760  0638  0084               	movwf	4
  1761  0639  3008               	movlw	8
  1762  063A  00FF               	movwf	127
  1763  063B                     u5960:
  1764  063B  1783               	bsf	3,7	;select IRP bank3
  1765  063C  0180               	clrf	0
  1766  063D  0A84               	incf	4,f
  1767  063E  0BFF               	decfsz	127,f
  1768  063F  2E3B               	goto	u5960
  1769                           
  1770                           ;Main.c: 139:     LCD_character(0x00,caracter);
  1771  0640  3098               	movlw	(low (main@caracter| (0+256)))& (0+255)
  1772  0641  00FF               	movwf	127
  1773  0642  087F               	movf	127,w
  1774  0643  00A2               	movwf	LCD_character@caracter
  1775  0644  3000               	movlw	0
  1776  0645  120A  118A  27D5  120A  118A  	fcall	_LCD_character
  1777                           
  1778                           ;Main.c: 142:     LCD_command(0x01);
  1779  064A  3001               	movlw	1
  1780  064B  160A  118A  2538  120A  118A  	fcall	_LCD_command
  1781                           
  1782                           ;Main.c: 143:     LCD_array(1,1,"====================");
  1783  0650  3001               	movlw	1
  1784  0651  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0652  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0653  00A2               	movwf	LCD_array@x
  1787  0654  3000               	movlw	0
  1788  0655  00A3               	movwf	LCD_array@x+1
  1789  0656  3001               	movlw	1
  1790  0657  00A4               	movwf	LCD_array@y
  1791  0658  3000               	movlw	0
  1792  0659  00A5               	movwf	LCD_array@y+1
  1793  065A  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1794  065B  00A6               	movwf	LCD_array@date
  1795  065C  3080               	movlw	128
  1796  065D  00A7               	movwf	LCD_array@date+1
  1797  065E  160A  118A  26BB  120A  118A  	fcall	_LCD_array
  1798                           
  1799                           ;Main.c: 144:     LCD_array(2,1,"PROBADOR AUTOMOTRIZ ");
  1800  0663  3002               	movlw	2
  1801  0664  00A2               	movwf	LCD_array@x
  1802  0665  3000               	movlw	0
  1803  0666  00A3               	movwf	LCD_array@x+1
  1804  0667  3001               	movlw	1
  1805  0668  00A4               	movwf	LCD_array@y
  1806  0669  3000               	movlw	0
  1807  066A  00A5               	movwf	LCD_array@y+1
  1808  066B  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1809  066C  00A6               	movwf	LCD_array@date
  1810  066D  3080               	movlw	128
  1811  066E  00A7               	movwf	LCD_array@date+1
  1812  066F  160A  118A  26BB  120A  118A  	fcall	_LCD_array
  1813                           
  1814                           ;Main.c: 145:     LCD_array(3,1,"   DE INYECTORES    ");
  1815  0674  3003               	movlw	3
  1816  0675  00A2               	movwf	LCD_array@x
  1817  0676  3000               	movlw	0
  1818  0677  00A3               	movwf	LCD_array@x+1
  1819  0678  3001               	movlw	1
  1820  0679  00A4               	movwf	LCD_array@y
  1821  067A  3000               	movlw	0
  1822  067B  00A5               	movwf	LCD_array@y+1
  1823  067C  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1824  067D  00A6               	movwf	LCD_array@date
  1825  067E  3080               	movlw	128
  1826  067F  00A7               	movwf	LCD_array@date+1
  1827  0680  160A  118A  26BB  120A  118A  	fcall	_LCD_array
  1828                           
  1829                           ;Main.c: 146:     LCD_array(4,1,"====================");
  1830  0685  3004               	movlw	4
  1831  0686  00A2               	movwf	LCD_array@x
  1832  0687  3000               	movlw	0
  1833  0688  00A3               	movwf	LCD_array@x+1
  1834  0689  3001               	movlw	1
  1835  068A  00A4               	movwf	LCD_array@y
  1836  068B  3000               	movlw	0
  1837  068C  00A5               	movwf	LCD_array@y+1
  1838  068D  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1839  068E  00A6               	movwf	LCD_array@date
  1840  068F  3080               	movlw	128
  1841  0690  00A7               	movwf	LCD_array@date+1
  1842  0691  160A  118A  26BB  120A  118A  	fcall	_LCD_array
  1843                           
  1844                           ;Main.c: 147:     _delay((unsigned long)((2000)*(20000000/4000.0)));
  1845  0696  3033               	movlw	51
  1846  0697  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0698  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0699  00EE               	movwf	??_main+2
  1849  069A  30BB               	movlw	187
  1850  069B  00ED               	movwf	??_main+1
  1851  069C  30DF               	movlw	223
  1852  069D  00EC               	movwf	??_main
  1853  069E                     u5987:
  1854  069E  0BEC               	decfsz	??_main,f
  1855  069F  2E9E               	goto	u5987
  1856  06A0  0BED               	decfsz	??_main+1,f
  1857  06A1  2E9E               	goto	u5987
  1858  06A2  0BEE               	decfsz	??_main+2,f
  1859  06A3  2E9E               	goto	u5987
  1860                           
  1861                           ;Main.c: 150:     LCD_command(0x01);
  1862  06A4  3001               	movlw	1
  1863  06A5  160A  118A  2538  120A  118A  	fcall	_LCD_command
  1864                           
  1865                           ;Main.c: 153:     WDTCONbits.SWDTEN = 1;
  1866  06AA  1283               	bcf	3,5	;RP0=0, select bank2
  1867  06AB  1703               	bsf	3,6	;RP1=1, select bank2
  1868  06AC  1405               	bsf	5,0	;volatile
  1869                           
  1870                           ;Main.c: 154:     WDTCONbits.WDTPS = 0b1010;
  1871  06AD  0805               	movf	5,w	;volatile
  1872  06AE  39E1               	andlw	-31
  1873  06AF  3814               	iorlw	20
  1874  06B0  0085               	movwf	5	;volatile
  1875  06B1  0064               	clrwdt	;# 
  1876                           
  1877                           ;Main.c: 161:     TMR1IE=1,TMR1IF=1;
  1878  06B2  1683               	bsf	3,5	;RP0=1, select bank1
  1879  06B3  1303               	bcf	3,6	;RP1=0, select bank1
  1880  06B4  140C               	bsf	12,0	;volatile
  1881  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  1882  06B6  140C               	bsf	12,0	;volatile
  1883  06B7                     l5006:
  1884                           
  1885                           ;Main.c: 164:     {;Main.c: 166:         Out_E = 0;
  1886  06B7  01F6               	clrf	_Out_E
  1887                           
  1888                           ;Main.c: 167:         Modo = 0;
  1889  06B8  01F7               	clrf	_Modo
  1890                           
  1891                           ;Main.c: 168:         opcion = 1;
  1892  06B9  1683               	bsf	3,5	;RP0=1, select bank3
  1893  06BA  1703               	bsf	3,6	;RP1=1, select bank3
  1894  06BB  01A0               	clrf	main@opcion^(0+384)
  1895  06BC  0AA0               	incf	main@opcion^(0+384),f
  1896  06BD                     l5014:	
  1897                           ;Main.c: 178:         while(PORTBbits.RB1==0) Seleccion_Modo(&opcion);
  1898                           
  1899  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1900  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1901  06BF  1886               	btfsc	6,1	;volatile
  1902  06C0  2EC8               	goto	l5016
  1903  06C1  30A0               	movlw	(low (main@opcion| (0+256)))& (0+255)
  1904  06C2  120A  158A  2633  120A  118A  	fcall	_Seleccion_Modo
  1905  06C7  2EBD               	goto	l5014
  1906  06C8                     l5016:
  1907                           
  1908                           ;Main.c: 180:         antirrebote(),LCD_command(0x01);
  1909  06C8  160A  118A  2439  120A  118A  	fcall	_antirrebote
  1910  06CD  3001               	movlw	1
  1911  06CE  160A  118A  2538  120A  118A  	fcall	_LCD_command
  1912                           
  1913                           ;Main.c: 181:         Modo = opcion;
  1914  06D3  1683               	bsf	3,5	;RP0=1, select bank3
  1915  06D4  1703               	bsf	3,6	;RP1=1, select bank3
  1916  06D5  0820               	movf	main@opcion^(0+384),w
  1917  06D6  00FF               	movwf	127
  1918  06D7  087F               	movf	127,w
  1919  06D8  00F7               	movwf	_Modo
  1920                           
  1921                           ;Main.c: 182:         Lcd_PPAR();
  1922  06D9  120A  158A  20DC  120A  118A  	fcall	_Lcd_PPAR
  1923                           
  1924                           ;Main.c: 184:         switch(opcion)
  1925  06DE  2EE5               	goto	l5028
  1926  06DF                     l5024:
  1927                           
  1928                           ;Main.c: 188:             {;Main.c: 189:                 MP_Pulv();
  1929  06DF  120A  158A  2378  120A  118A  	fcall	_MP_Pulv
  1930                           
  1931                           ;Main.c: 190:             break;
  1932  06E4  2EB7               	goto	l5006
  1933  06E5                     l5028:
  1934  06E5  1683               	bsf	3,5	;RP0=1, select bank3
  1935  06E6  1703               	bsf	3,6	;RP1=1, select bank3
  1936  06E7  0820               	movf	main@opcion^(0+384),w
  1937  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  1938  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  1939  06EA  00EC               	movwf	??_main
  1940  06EB  01ED               	clrf	??_main+1
  1941                           
  1942                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1943                           ; Switch size 1, requested type "simple"
  1944                           ; Number of cases is 1, Range of values is 0 to 0
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte            4     3 (average)
  1948                           ; direct_byte           11     8 (fixed)
  1949                           ; jumptable            260     6 (fixed)
  1950                           ;	Chosen strategy is simple_byte
  1951  06EC  086D               	movf	??_main+1,w
  1952  06ED  3A00               	xorlw	0	; case 0
  1953  06EE  1903               	skipnz
  1954  06EF  2EF1               	goto	l5178
  1955  06F0  2EB7               	goto	l5006
  1956  06F1                     l5178:
  1957                           
  1958                           ; Switch size 1, requested type "simple"
  1959                           ; Number of cases is 3, Range of values is 1 to 3
  1960                           ; switch strategies available:
  1961                           ; Name         Instructions Cycles
  1962                           ; simple_byte           10     6 (average)
  1963                           ; direct_byte           20    11 (fixed)
  1964                           ; jumptable            263     9 (fixed)
  1965                           ;	Chosen strategy is simple_byte
  1966  06F1  086C               	movf	??_main,w
  1967  06F2  3A01               	xorlw	1	; case 1
  1968  06F3  1903               	skipnz
  1969  06F4  2EDF               	goto	l5024
  1970  06F5  3A03               	xorlw	3	; case 2
  1971  06F6  1903               	skipnz
  1972  06F7  2EB7               	goto	l5006
  1973  06F8  3A01               	xorlw	1	; case 3
  1974  06F9  1903               	skipnz
  1975  06FA  2EB7               	goto	l5006
  1976  06FB  2EB7               	goto	l5006
  1977  06FC  120A  118A  2810   	ljmp	start
  1978  06FF                     __end_of_main:
  1979                           
  1980                           	psect	text1
  1981  0E33                     __ptext1:	
  1982 ;; *************** function _Seleccion_Modo *****************
  1983 ;; Defined at:
  1984 ;;		line 212 in file "Main.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  opcion          1    wreg     PTR unsigned char 
  1987 ;;		 -> main@opcion(1), 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  opcion          1   15[BANK0 ] PTR unsigned char 
  1990 ;;		 -> main@opcion(1), 
  1991 ;;  opc_ant         1   14[BANK0 ] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 300/800
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2001 ;;      Params:         0       0       0       0       0
  2002 ;;      Locals:         0       2       0       0       0
  2003 ;;      Temps:          0       3       0       0       0
  2004 ;;      Totals:         0       5       0       0       0
  2005 ;;Total ram usage:        5 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    6
  2008 ;; This function calls:
  2009 ;;		_LCD_array
  2010 ;;		_LCD_command
  2011 ;;		_Lcd_PTM
  2012 ;;		_antirrebote
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           
  2019                           ;psect for function _Seleccion_Modo
  2020  0E33                     _Seleccion_Modo:
  2021                           
  2022                           ;incstack = 0
  2023                           ; Regs used in _Seleccion_Modo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2024                           ;Seleccion_Modo@opcion stored from wreg
  2025  0E33  00AF               	movwf	Seleccion_Modo@opcion
  2026  0E34  0064               	clrwdt	;# 
  2027                           
  2028                           ;Main.c: 218:     opc_ant = *opcion;
  2029  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0E37  082F               	movf	Seleccion_Modo@opcion,w
  2032  0E38  0084               	movwf	4
  2033  0E39  1783               	bsf	3,7	;select IRP bank2
  2034  0E3A  0800               	movf	0,w
  2035  0E3B  00FF               	movwf	127
  2036  0E3C  087F               	movf	127,w
  2037  0E3D  00AE               	movwf	Seleccion_Modo@opc_ant
  2038                           
  2039                           ;Main.c: 221:     if(*opcion == 1 && mostrar)
  2040  0E3E  082F               	movf	Seleccion_Modo@opcion,w
  2041  0E3F  0084               	movwf	4
  2042  0E40  0300               	decf	0,w
  2043  0E41  1D03               	btfss	3,2
  2044  0E42  2E8E               	goto	l4844
  2045  0E43  1683               	bsf	3,5	;RP0=1, select bank1
  2046  0E44  0839               	movf	_mostrar^(0+128),w
  2047  0E45  1903               	btfsc	3,2
  2048  0E46  2E8E               	goto	l4844
  2049                           
  2050                           ;Main.c: 222:     {;Main.c: 223:         LCD_array(1,3,"PRUEBA PULVER.");
  2051  0E47  3001               	movlw	1
  2052  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0E49  00A2               	movwf	LCD_array@x
  2054  0E4A  3000               	movlw	0
  2055  0E4B  00A3               	movwf	LCD_array@x+1
  2056  0E4C  3003               	movlw	3
  2057  0E4D  00A4               	movwf	LCD_array@y
  2058  0E4E  3000               	movlw	0
  2059  0E4F  00A5               	movwf	LCD_array@y+1
  2060  0E50  307E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2061  0E51  00A6               	movwf	LCD_array@date
  2062  0E52  3080               	movlw	128
  2063  0E53  00A7               	movwf	LCD_array@date+1
  2064  0E54  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  2065                           
  2066                           ;Main.c: 224:         LCD_array(2,3,"PRUEBA FUGA");
  2067  0E59  3002               	movlw	2
  2068  0E5A  00A2               	movwf	LCD_array@x
  2069  0E5B  3000               	movlw	0
  2070  0E5C  00A3               	movwf	LCD_array@x+1
  2071  0E5D  3003               	movlw	3
  2072  0E5E  00A4               	movwf	LCD_array@y
  2073  0E5F  3000               	movlw	0
  2074  0E60  00A5               	movwf	LCD_array@y+1
  2075  0E61  309A               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2076  0E62  00A6               	movwf	LCD_array@date
  2077  0E63  3080               	movlw	128
  2078  0E64  00A7               	movwf	LCD_array@date+1
  2079  0E65  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  2080                           
  2081                           ;Main.c: 225:         LCD_array(3,3,"PRUEBA FLUJO INY.");
  2082  0E6A  3003               	movlw	3
  2083  0E6B  00A2               	movwf	LCD_array@x
  2084  0E6C  3000               	movlw	0
  2085  0E6D  00A3               	movwf	LCD_array@x+1
  2086  0E6E  3003               	movlw	3
  2087  0E6F  00A4               	movwf	LCD_array@y
  2088  0E70  3000               	movlw	0
  2089  0E71  00A5               	movwf	LCD_array@y+1
  2090  0E72  304A               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2091  0E73  00A6               	movwf	LCD_array@date
  2092  0E74  3080               	movlw	128
  2093  0E75  00A7               	movwf	LCD_array@date+1
  2094  0E76  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  2095                           
  2096                           ;Main.c: 226:         LCD_array(4,3,"LIMP. ULTRASONIDO");
  2097  0E7B  3004               	movlw	4
  2098  0E7C  00A2               	movwf	LCD_array@x
  2099  0E7D  3000               	movlw	0
  2100  0E7E  00A3               	movwf	LCD_array@x+1
  2101  0E7F  3003               	movlw	3
  2102  0E80  00A4               	movwf	LCD_array@y
  2103  0E81  3000               	movlw	0
  2104  0E82  00A5               	movwf	LCD_array@y+1
  2105  0E83  305C               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2106  0E84  00A6               	movwf	LCD_array@date
  2107  0E85  3080               	movlw	128
  2108  0E86  00A7               	movwf	LCD_array@date+1
  2109  0E87  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  2110                           
  2111                           ;Main.c: 227:         mostrar = 0;
  2112  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
  2113  0E8D  01B9               	clrf	_mostrar^(0+128)
  2114  0E8E                     l4844:
  2115                           
  2116                           ;Main.c: 230:     if(*opcion == 5 && mostrar) LCD_array(1,3,"MODO AUTOMATICO"),mostrar=0
      +                          ;
  2117  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0E8F  082F               	movf	Seleccion_Modo@opcion,w
  2119  0E90  0084               	movwf	4
  2120  0E91  3005               	movlw	5
  2121  0E92  1783               	bsf	3,7	;select IRP bank2
  2122  0E93  0600               	xorwf	0,w
  2123  0E94  1D03               	btfss	3,2
  2124  0E95  2EAF               	goto	l4852
  2125  0E96  1683               	bsf	3,5	;RP0=1, select bank1
  2126  0E97  0839               	movf	_mostrar^(0+128),w
  2127  0E98  1903               	btfsc	3,2
  2128  0E99  2EAF               	goto	l4852
  2129  0E9A  3001               	movlw	1
  2130  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  2131  0E9C  00A2               	movwf	LCD_array@x
  2132  0E9D  3000               	movlw	0
  2133  0E9E  00A3               	movwf	LCD_array@x+1
  2134  0E9F  3003               	movlw	3
  2135  0EA0  00A4               	movwf	LCD_array@y
  2136  0EA1  3000               	movlw	0
  2137  0EA2  00A5               	movwf	LCD_array@y+1
  2138  0EA3  306E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2139  0EA4  00A6               	movwf	LCD_array@date
  2140  0EA5  3080               	movlw	128
  2141  0EA6  00A7               	movwf	LCD_array@date+1
  2142  0EA7  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  2143  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  2144  0EAD  01B9               	clrf	_mostrar^(0+128)
  2145  0EAE  2EBC               	goto	l4856
  2146  0EAF                     l4852:
  2147  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  2148  0EB0  082F               	movf	Seleccion_Modo@opcion,w
  2149  0EB1  0084               	movwf	4
  2150  0EB2  3006               	movlw	6
  2151  0EB3  0600               	xorwf	0,w
  2152  0EB4  1D03               	btfss	3,2
  2153  0EB5  2EBC               	goto	l4856
  2154  0EB6  3001               	movlw	1
  2155  0EB7  160A  118A  2538  120A  158A  	fcall	_LCD_command
  2156  0EBC                     l4856:
  2157                           
  2158                           ;Main.c: 233:     if(PORTBbits.RB3 == 1) antirrebote(),*opcion+=1;
  2159  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0EBE  1D86               	btfss	6,3	;volatile
  2162  0EBF  2ECE               	goto	l4862
  2163  0EC0  160A  118A  2439  120A  158A  	fcall	_antirrebote
  2164  0EC5  3001               	movlw	1
  2165  0EC6  00FF               	movwf	127
  2166  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  2167  0EC8  082F               	movf	Seleccion_Modo@opcion,w
  2168  0EC9  0084               	movwf	4
  2169  0ECA  087F               	movf	127,w
  2170  0ECB  1783               	bsf	3,7	;select IRP bank2
  2171  0ECC  0780               	addwf	0,f
  2172  0ECD  2ED9               	goto	l162
  2173  0ECE                     l4862:
  2174  0ECE  082F               	movf	Seleccion_Modo@opcion,w
  2175  0ECF  0084               	movwf	4
  2176  0ED0  3006               	movlw	6
  2177  0ED1  1783               	bsf	3,7	;select IRP bank2
  2178  0ED2  0600               	xorwf	0,w
  2179  0ED3  1D03               	btfss	3,2
  2180  0ED4  2ED9               	goto	l162
  2181  0ED5  082F               	movf	Seleccion_Modo@opcion,w
  2182  0ED6  0084               	movwf	4
  2183  0ED7  0180               	clrf	0
  2184  0ED8  0A80               	incf	0,f
  2185  0ED9                     l162:
  2186                           
  2187                           ;Main.c: 237:     if((*opcion != opc_ant)|| *opcion == 1) Lcd_PTM(*opcion),_delay((unsig
      +                          ned long)((100)*(20000000/4000.0)));
  2188  0ED9  082F               	movf	Seleccion_Modo@opcion,w
  2189  0EDA  0084               	movwf	4
  2190  0EDB  0800               	movf	0,w
  2191  0EDC  062E               	xorwf	Seleccion_Modo@opc_ant,w
  2192  0EDD  1D03               	skipz
  2193  0EDE  2EE4               	goto	l4868
  2194  0EDF  082F               	movf	Seleccion_Modo@opcion,w
  2195  0EE0  0084               	movwf	4
  2196  0EE1  0300               	decf	0,w
  2197  0EE2  1D03               	btfss	3,2
  2198  0EE3  0008               	return
  2199  0EE4                     l4868:
  2200  0EE4  082F               	movf	Seleccion_Modo@opcion,w
  2201  0EE5  0084               	movwf	4
  2202  0EE6  0800               	movf	0,w
  2203  0EE7  120A  118A  2349  120A  158A  	fcall	_Lcd_PTM
  2204  0EEC  3003               	movlw	3
  2205  0EED  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0EEE  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0EEF  00AD               	movwf	??_Seleccion_Modo+2
  2208  0EF0  308A               	movlw	138
  2209  0EF1  00AC               	movwf	??_Seleccion_Modo+1
  2210  0EF2  3055               	movlw	85
  2211  0EF3  00AB               	movwf	??_Seleccion_Modo
  2212  0EF4                     u5997:
  2213  0EF4  0BAB               	decfsz	??_Seleccion_Modo,f
  2214  0EF5  2EF4               	goto	u5997
  2215  0EF6  0BAC               	decfsz	??_Seleccion_Modo+1,f
  2216  0EF7  2EF4               	goto	u5997
  2217  0EF8  0BAD               	decfsz	??_Seleccion_Modo+2,f
  2218  0EF9  2EF4               	goto	u5997
  2219  0EFA  0008               	return
  2220  0EFB                     __end_of_Seleccion_Modo:
  2221                           
  2222                           	psect	text2
  2223  0349                     __ptext2:	
  2224 ;; *************** function _Lcd_PTM *****************
  2225 ;; Defined at:
  2226 ;;		line 310 in file "Main.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  opcion          1    wreg     unsigned char 
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;  opcion          1   10[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : B00/800
  2237 ;;		On exit  : 300/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2240 ;;      Params:         0       0       0       0       0
  2241 ;;      Locals:         0       1       0       0       0
  2242 ;;      Temps:          0       0       0       0       0
  2243 ;;      Totals:         0       1       0       0       0
  2244 ;;Total ram usage:        1 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    5
  2247 ;; This function calls:
  2248 ;;		_LCD_array
  2249 ;;		_LCD_command
  2250 ;;		_LCD_date
  2251 ;;		_LCD_xy
  2252 ;; This function is called by:
  2253 ;;		_Seleccion_Modo
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           
  2258                           ;psect for function _Lcd_PTM
  2259  0349                     _Lcd_PTM:
  2260                           
  2261                           ;incstack = 0
  2262                           ; Regs used in _Lcd_PTM: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2263                           ;Lcd_PTM@opcion stored from wreg
  2264  0349  00AA               	movwf	Lcd_PTM@opcion
  2265                           
  2266                           ;Main.c: 310: void Lcd_PTM(unsigned char opcion);Main.c: 311: {;Main.c: 312:     if(opci
      +                          on == 1)
  2267  034A  032A               	decf	Lcd_PTM@opcion,w
  2268  034B  1D03               	btfss	3,2
  2269  034C  2B9C               	goto	l4632
  2270                           
  2271                           ;Main.c: 313:     {;Main.c: 314:         LCD_xy(2,1),LCD_date(0x00);
  2272  034D  3002               	movlw	2
  2273  034E  00A2               	movwf	LCD_xy@x
  2274  034F  3000               	movlw	0
  2275  0350  00A3               	movwf	LCD_xy@x+1
  2276  0351  3001               	movlw	1
  2277  0352  00A4               	movwf	LCD_xy@y
  2278  0353  3000               	movlw	0
  2279  0354  00A5               	movwf	LCD_xy@y+1
  2280  0355  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2281  035A  3000               	movlw	0
  2282  035B  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2283                           
  2284                           ;Main.c: 315:         LCD_xy(3,1),LCD_date(0x00);
  2285  0360  3003               	movlw	3
  2286  0361  1283               	bcf	3,5	;RP0=0, select bank0
  2287  0362  1303               	bcf	3,6	;RP1=0, select bank0
  2288  0363  00A2               	movwf	LCD_xy@x
  2289  0364  3000               	movlw	0
  2290  0365  00A3               	movwf	LCD_xy@x+1
  2291  0366  3001               	movlw	1
  2292  0367  00A4               	movwf	LCD_xy@y
  2293  0368  3000               	movlw	0
  2294  0369  00A5               	movwf	LCD_xy@y+1
  2295  036A  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2296  036F  3000               	movlw	0
  2297  0370  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2298                           
  2299                           ;Main.c: 316:         LCD_xy(4,1),LCD_date(0x00);
  2300  0375  3004               	movlw	4
  2301  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2302  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2303  0378  00A2               	movwf	LCD_xy@x
  2304  0379  3000               	movlw	0
  2305  037A  00A3               	movwf	LCD_xy@x+1
  2306  037B  3001               	movlw	1
  2307  037C  00A4               	movwf	LCD_xy@y
  2308  037D  3000               	movlw	0
  2309  037E  00A5               	movwf	LCD_xy@y+1
  2310  037F  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2311  0384  3000               	movlw	0
  2312  0385  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2313                           
  2314                           ;Main.c: 317:         LCD_array(1,1,">");
  2315  038A  3001               	movlw	1
  2316  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2317  038C  1303               	bcf	3,6	;RP1=0, select bank0
  2318  038D  00A2               	movwf	LCD_array@x
  2319  038E  3000               	movlw	0
  2320  038F  00A3               	movwf	LCD_array@x+1
  2321  0390  3001               	movlw	1
  2322  0391  00A4               	movwf	LCD_array@y
  2323  0392  3000               	movlw	0
  2324  0393  00A5               	movwf	LCD_array@y+1
  2325  0394  30C2               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2326  0395  00A6               	movwf	LCD_array@date
  2327  0396  3080               	movlw	128
  2328  0397  00A7               	movwf	LCD_array@date+1
  2329  0398  160A  118A  26BB   	fcall	_LCD_array
  2330                           
  2331                           ;Main.c: 318:     }
  2332  039B  0008               	return
  2333  039C                     l4632:
  2334  039C  3002               	movlw	2
  2335  039D  062A               	xorwf	Lcd_PTM@opcion,w
  2336  039E  1D03               	btfss	3,2
  2337  039F  2BEF               	goto	l4644
  2338                           
  2339                           ;Main.c: 320:     {;Main.c: 321:         LCD_xy(1,1),LCD_date(0);
  2340  03A0  3001               	movlw	1
  2341  03A1  00A2               	movwf	LCD_xy@x
  2342  03A2  3000               	movlw	0
  2343  03A3  00A3               	movwf	LCD_xy@x+1
  2344  03A4  3001               	movlw	1
  2345  03A5  00A4               	movwf	LCD_xy@y
  2346  03A6  3000               	movlw	0
  2347  03A7  00A5               	movwf	LCD_xy@y+1
  2348  03A8  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2349  03AD  3000               	movlw	0
  2350  03AE  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2351                           
  2352                           ;Main.c: 322:         LCD_xy(3,1),LCD_date(0);
  2353  03B3  3003               	movlw	3
  2354  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2355  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2356  03B6  00A2               	movwf	LCD_xy@x
  2357  03B7  3000               	movlw	0
  2358  03B8  00A3               	movwf	LCD_xy@x+1
  2359  03B9  3001               	movlw	1
  2360  03BA  00A4               	movwf	LCD_xy@y
  2361  03BB  3000               	movlw	0
  2362  03BC  00A5               	movwf	LCD_xy@y+1
  2363  03BD  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2364  03C2  3000               	movlw	0
  2365  03C3  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2366                           
  2367                           ;Main.c: 323:         LCD_xy(4,1),LCD_date(0);
  2368  03C8  3004               	movlw	4
  2369  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2370  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2371  03CB  00A2               	movwf	LCD_xy@x
  2372  03CC  3000               	movlw	0
  2373  03CD  00A3               	movwf	LCD_xy@x+1
  2374  03CE  3001               	movlw	1
  2375  03CF  00A4               	movwf	LCD_xy@y
  2376  03D0  3000               	movlw	0
  2377  03D1  00A5               	movwf	LCD_xy@y+1
  2378  03D2  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2379  03D7  3000               	movlw	0
  2380  03D8  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2381                           
  2382                           ;Main.c: 324:         LCD_array(2,1,">");
  2383  03DD  3002               	movlw	2
  2384  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2385  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2386  03E0  00A2               	movwf	LCD_array@x
  2387  03E1  3000               	movlw	0
  2388  03E2  00A3               	movwf	LCD_array@x+1
  2389  03E3  3001               	movlw	1
  2390  03E4  00A4               	movwf	LCD_array@y
  2391  03E5  3000               	movlw	0
  2392  03E6  00A5               	movwf	LCD_array@y+1
  2393  03E7  30C2               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2394  03E8  00A6               	movwf	LCD_array@date
  2395  03E9  3080               	movlw	128
  2396  03EA  00A7               	movwf	LCD_array@date+1
  2397  03EB  160A  118A  26BB   	fcall	_LCD_array
  2398                           
  2399                           ;Main.c: 325:     }
  2400  03EE  0008               	return
  2401  03EF                     l4644:
  2402  03EF  3003               	movlw	3
  2403  03F0  062A               	xorwf	Lcd_PTM@opcion,w
  2404  03F1  1D03               	btfss	3,2
  2405  03F2  2C42               	goto	l4656
  2406                           
  2407                           ;Main.c: 327:     {;Main.c: 328:         LCD_xy(1,1),LCD_date(0);
  2408  03F3  3001               	movlw	1
  2409  03F4  00A2               	movwf	LCD_xy@x
  2410  03F5  3000               	movlw	0
  2411  03F6  00A3               	movwf	LCD_xy@x+1
  2412  03F7  3001               	movlw	1
  2413  03F8  00A4               	movwf	LCD_xy@y
  2414  03F9  3000               	movlw	0
  2415  03FA  00A5               	movwf	LCD_xy@y+1
  2416  03FB  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2417  0400  3000               	movlw	0
  2418  0401  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2419                           
  2420                           ;Main.c: 329:         LCD_xy(2,1),LCD_date(0);
  2421  0406  3002               	movlw	2
  2422  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2424  0409  00A2               	movwf	LCD_xy@x
  2425  040A  3000               	movlw	0
  2426  040B  00A3               	movwf	LCD_xy@x+1
  2427  040C  3001               	movlw	1
  2428  040D  00A4               	movwf	LCD_xy@y
  2429  040E  3000               	movlw	0
  2430  040F  00A5               	movwf	LCD_xy@y+1
  2431  0410  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2432  0415  3000               	movlw	0
  2433  0416  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2434                           
  2435                           ;Main.c: 330:         LCD_xy(4,1),LCD_date(0);
  2436  041B  3004               	movlw	4
  2437  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2438  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2439  041E  00A2               	movwf	LCD_xy@x
  2440  041F  3000               	movlw	0
  2441  0420  00A3               	movwf	LCD_xy@x+1
  2442  0421  3001               	movlw	1
  2443  0422  00A4               	movwf	LCD_xy@y
  2444  0423  3000               	movlw	0
  2445  0424  00A5               	movwf	LCD_xy@y+1
  2446  0425  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2447  042A  3000               	movlw	0
  2448  042B  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2449                           
  2450                           ;Main.c: 331:         LCD_array(3,1,">");
  2451  0430  3003               	movlw	3
  2452  0431  1283               	bcf	3,5	;RP0=0, select bank0
  2453  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2454  0433  00A2               	movwf	LCD_array@x
  2455  0434  3000               	movlw	0
  2456  0435  00A3               	movwf	LCD_array@x+1
  2457  0436  3001               	movlw	1
  2458  0437  00A4               	movwf	LCD_array@y
  2459  0438  3000               	movlw	0
  2460  0439  00A5               	movwf	LCD_array@y+1
  2461  043A  30C2               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2462  043B  00A6               	movwf	LCD_array@date
  2463  043C  3080               	movlw	128
  2464  043D  00A7               	movwf	LCD_array@date+1
  2465  043E  160A  118A  26BB   	fcall	_LCD_array
  2466                           
  2467                           ;Main.c: 332:     }
  2468  0441  0008               	return
  2469  0442                     l4656:
  2470  0442  3004               	movlw	4
  2471  0443  062A               	xorwf	Lcd_PTM@opcion,w
  2472  0444  1D03               	btfss	3,2
  2473  0445  2C95               	goto	l4668
  2474                           
  2475                           ;Main.c: 334:     {;Main.c: 335:         LCD_xy(1,1),LCD_date(0);
  2476  0446  3001               	movlw	1
  2477  0447  00A2               	movwf	LCD_xy@x
  2478  0448  3000               	movlw	0
  2479  0449  00A3               	movwf	LCD_xy@x+1
  2480  044A  3001               	movlw	1
  2481  044B  00A4               	movwf	LCD_xy@y
  2482  044C  3000               	movlw	0
  2483  044D  00A5               	movwf	LCD_xy@y+1
  2484  044E  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2485  0453  3000               	movlw	0
  2486  0454  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2487                           
  2488                           ;Main.c: 336:         LCD_xy(3,1),LCD_date(0);
  2489  0459  3003               	movlw	3
  2490  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2491  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2492  045C  00A2               	movwf	LCD_xy@x
  2493  045D  3000               	movlw	0
  2494  045E  00A3               	movwf	LCD_xy@x+1
  2495  045F  3001               	movlw	1
  2496  0460  00A4               	movwf	LCD_xy@y
  2497  0461  3000               	movlw	0
  2498  0462  00A5               	movwf	LCD_xy@y+1
  2499  0463  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2500  0468  3000               	movlw	0
  2501  0469  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2502                           
  2503                           ;Main.c: 337:         LCD_xy(2,1),LCD_date(0);
  2504  046E  3002               	movlw	2
  2505  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2506  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2507  0471  00A2               	movwf	LCD_xy@x
  2508  0472  3000               	movlw	0
  2509  0473  00A3               	movwf	LCD_xy@x+1
  2510  0474  3001               	movlw	1
  2511  0475  00A4               	movwf	LCD_xy@y
  2512  0476  3000               	movlw	0
  2513  0477  00A5               	movwf	LCD_xy@y+1
  2514  0478  160A  118A  2466  120A  118A  	fcall	_LCD_xy
  2515  047D  3000               	movlw	0
  2516  047E  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  2517                           
  2518                           ;Main.c: 338:         LCD_array(4,1,">");
  2519  0483  3004               	movlw	4
  2520  0484  1283               	bcf	3,5	;RP0=0, select bank0
  2521  0485  1303               	bcf	3,6	;RP1=0, select bank0
  2522  0486  00A2               	movwf	LCD_array@x
  2523  0487  3000               	movlw	0
  2524  0488  00A3               	movwf	LCD_array@x+1
  2525  0489  3001               	movlw	1
  2526  048A  00A4               	movwf	LCD_array@y
  2527  048B  3000               	movlw	0
  2528  048C  00A5               	movwf	LCD_array@y+1
  2529  048D  30C2               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2530  048E  00A6               	movwf	LCD_array@date
  2531  048F  3080               	movlw	128
  2532  0490  00A7               	movwf	LCD_array@date+1
  2533  0491  160A  118A  26BB   	fcall	_LCD_array
  2534                           
  2535                           ;Main.c: 339:     }
  2536  0494  0008               	return
  2537  0495                     l4668:
  2538  0495  3005               	movlw	5
  2539  0496  062A               	xorwf	Lcd_PTM@opcion,w
  2540  0497  1D03               	btfss	3,2
  2541  0498  0008               	return
  2542                           
  2543                           ;Main.c: 341:     {;Main.c: 342:         LCD_command(0x01);
  2544  0499  3001               	movlw	1
  2545  049A  160A  118A  2538  120A  118A  	fcall	_LCD_command
  2546                           
  2547                           ;Main.c: 343:         LCD_array(1,1,">");
  2548  049F  3001               	movlw	1
  2549  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  2550  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  2551  04A2  00A2               	movwf	LCD_array@x
  2552  04A3  3000               	movlw	0
  2553  04A4  00A3               	movwf	LCD_array@x+1
  2554  04A5  3001               	movlw	1
  2555  04A6  00A4               	movwf	LCD_array@y
  2556  04A7  3000               	movlw	0
  2557  04A8  00A5               	movwf	LCD_array@y+1
  2558  04A9  30C2               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2559  04AA  00A6               	movwf	LCD_array@date
  2560  04AB  3080               	movlw	128
  2561  04AC  00A7               	movwf	LCD_array@date+1
  2562  04AD  160A  118A  26BB   	fcall	_LCD_array
  2563  04B0  0008               	return
  2564  04B1                     __end_of_Lcd_PTM:
  2565                           
  2566                           	psect	text3
  2567  13A9                     __ptext3:	
  2568 ;; *************** function _Pwm_init *****************
  2569 ;; Defined at:
  2570 ;;		line 5 in file "Pwm_Soft.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, status,2, status,0
  2579 ;; Tracked objects:
  2580 ;;		On entry : 300/100
  2581 ;;		On exit  : 300/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2584 ;;      Params:         0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0
  2587 ;;      Totals:         0       0       0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    2
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_main
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _Pwm_init
  2600  13A9                     _Pwm_init:
  2601                           
  2602                           ;Pwm_Soft.c: 7:     ANSELHbits.ANS11 = 0;
  2603                           
  2604                           ;incstack = 0
  2605                           ; Regs used in _Pwm_init: [wreg+status,2+status,0]
  2606  13A9  1703               	bsf	3,6	;RP1=1, select bank3
  2607  13AA  1189               	bcf	9,3	;volatile
  2608                           
  2609                           ;Pwm_Soft.c: 10:     T1CONbits.TMR1GE = 0;
  2610  13AB  1283               	bcf	3,5	;RP0=0, select bank0
  2611  13AC  1303               	bcf	3,6	;RP1=0, select bank0
  2612  13AD  1310               	bcf	16,6	;volatile
  2613                           
  2614                           ;Pwm_Soft.c: 11:     T1CONbits.T1SYNC = 1;
  2615  13AE  1510               	bsf	16,2	;volatile
  2616                           
  2617                           ;Pwm_Soft.c: 12:     T1CONbits.TMR1CS = 0;
  2618  13AF  1090               	bcf	16,1	;volatile
  2619                           
  2620                           ;Pwm_Soft.c: 13:     T1CONbits.T1CKPS = 0b01;
  2621  13B0  0810               	movf	16,w	;volatile
  2622  13B1  39CF               	andlw	-49
  2623  13B2  3810               	iorlw	16
  2624  13B3  0090               	movwf	16	;volatile
  2625                           
  2626                           ;Pwm_Soft.c: 14:     T1CONbits.TMR1ON = 1;
  2627  13B4  1410               	bsf	16,0	;volatile
  2628                           
  2629                           ;Pwm_Soft.c: 16:     TMR1 = 65285;
  2630  13B5  30FF               	movlw	255
  2631  13B6  008F               	movwf	15	;volatile
  2632  13B7  3005               	movlw	5
  2633  13B8  008E               	movwf	14	;volatile
  2634                           
  2635                           ;Pwm_Soft.c: 20:     PEIE = 1;
  2636  13B9  170B               	bsf	11,6	;volatile
  2637                           
  2638                           ;Pwm_Soft.c: 21:     GIE = 1;
  2639  13BA  178B               	bsf	11,7	;volatile
  2640                           
  2641                           ;Pwm_Soft.c: 22:     TMR1IE = 0;
  2642  13BB  1683               	bsf	3,5	;RP0=1, select bank1
  2643  13BC  100C               	bcf	12,0	;volatile
  2644                           
  2645                           ;Pwm_Soft.c: 23:     TMR1IF = 1;
  2646  13BD  1283               	bcf	3,5	;RP0=0, select bank0
  2647  13BE  140C               	bsf	12,0	;volatile
  2648  13BF  0008               	return
  2649  13C0                     __end_of_Pwm_init:
  2650                           
  2651                           	psect	text4
  2652  0B78                     __ptext4:	
  2653 ;; *************** function _MP_Pulv *****************
  2654 ;; Defined at:
  2655 ;;		line 244 in file "Main.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  Maq_task1       1   75[BANK0 ] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 300/800
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2669 ;;      Params:         0       0       0       0       0
  2670 ;;      Locals:         0       1       0       0       0
  2671 ;;      Temps:          0       2       0       0       0
  2672 ;;      Totals:         0       3       0       0       0
  2673 ;;Total ram usage:        3 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    7
  2676 ;; This function calls:
  2677 ;;		_LCD_command
  2678 ;;		_Pwm1_stop
  2679 ;;		_Task1
  2680 ;;		_Task2
  2681 ;;		_Task3
  2682 ;;		_antirrebote
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _MP_Pulv
  2690  0B78                     _MP_Pulv:
  2691                           
  2692                           ;Main.c: 246:     unsigned char Maq_task1=1;
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _MP_Pulv: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2696  0B78  01EB               	clrf	MP_Pulv@Maq_task1
  2697  0B79  0AEB               	incf	MP_Pulv@Maq_task1,f
  2698                           
  2699                           ;Main.c: 249:     Out_E = 0;
  2700  0B7A  01F6               	clrf	_Out_E
  2701                           
  2702                           ;Main.c: 250:     Seg = 0;
  2703  0B7B  01F8               	clrf	_Seg
  2704                           
  2705                           ;Main.c: 251:     mod_seg = 1;
  2706  0B7C  1683               	bsf	3,5	;RP0=1, select bank1
  2707  0B7D  01BF               	clrf	_mod_seg^(0+128)
  2708  0B7E  0ABF               	incf	_mod_seg^(0+128),f
  2709                           
  2710                           ;Main.c: 252:     mod_min = 0;
  2711  0B7F  01C0               	clrf	_mod_min^(0+128)
  2712  0B80                     l4888:
  2713                           
  2714                           ;Main.c: 256:     {;Main.c: 259:         if(PORTBbits.RB0 == 1) antirrebote(),Out_E=!Out
      +                          _E;
  2715  0B80  1283               	bcf	3,5	;RP0=0, select bank0
  2716  0B81  1C06               	btfss	6,0	;volatile
  2717  0B82  2B92               	goto	l171
  2718  0B83  160A  118A  2439  120A  158A  	fcall	_antirrebote
  2719  0B88  0876               	movf	_Out_E,w
  2720  0B89  1D03               	btfss	3,2
  2721  0B8A  2B8D               	goto	u5830
  2722  0B8B  3001               	movlw	1
  2723  0B8C  2B8E               	goto	u5840
  2724  0B8D                     u5830:
  2725  0B8D  3000               	movlw	0
  2726  0B8E                     u5840:
  2727  0B8E  00FF               	movwf	127
  2728  0B8F  087F               	movf	127,w
  2729  0B90  00F6               	movwf	_Out_E
  2730  0B91  2BC6               	goto	l4920
  2731  0B92                     l171:	
  2732                           ;Main.c: 260:         else if(PORTBbits.RB2 == 1) antirrebote(),Pwm1_stop(),Out_E=!Out_E
      +                          ,Seg=1;
  2733                           
  2734  0B92  1D06               	btfss	6,2	;volatile
  2735  0B93  2BC6               	goto	l4920
  2736  0B94  160A  118A  2439  120A  158A  	fcall	_antirrebote
  2737  0B99  160A  118A  2330  120A  158A  	fcall	_Pwm1_stop
  2738  0B9E  0876               	movf	_Out_E,w
  2739  0B9F  1D03               	btfss	3,2
  2740  0BA0  2BA3               	goto	u5860
  2741  0BA1  3001               	movlw	1
  2742  0BA2  2BA4               	goto	u5870
  2743  0BA3                     u5860:
  2744  0BA3  3000               	movlw	0
  2745  0BA4                     u5870:
  2746  0BA4  00FF               	movwf	127
  2747  0BA5  087F               	movf	127,w
  2748  0BA6  00F6               	movwf	_Out_E
  2749  0BA7  01F8               	clrf	_Seg
  2750  0BA8  0AF8               	incf	_Seg,f
  2751  0BA9  2BC6               	goto	l4920
  2752  0BAA                     l175:	
  2753                           ;Main.c: 266:         {;Main.c: 268:             case 0:
  2754                           
  2755  0BAA  0064               	clrwdt	;# 
  2756                           
  2757                           ;Main.c: 271:             break;
  2758  0BAB  2BDF               	goto	l4922
  2759  0BAC                     l4900:
  2760                           
  2761                           ;Main.c: 275:             {;Main.c: 276:                 Task1(&Maq_task1),Est_Task1=0,T
      +                          _running=0;
  2762  0BAC  306B               	movlw	(low (MP_Pulv@Maq_task1| 0))& (0+255)
  2763  0BAD  120A  158A  2009  120A  158A  	fcall	_Task1
  2764  0BB2  1683               	bsf	3,5	;RP0=1, select bank1
  2765  0BB3  01BD               	clrf	_Est_Task1^(0+128)
  2766  0BB4                     l4904:
  2767  0BB4  01BA               	clrf	_T_running^(0+128)
  2768                           
  2769                           ;Main.c: 277:             break;
  2770  0BB5  2BDF               	goto	l4922
  2771  0BB6                     l4906:
  2772                           
  2773                           ;Main.c: 280:             {;Main.c: 281:                 Task2(),Est_Task2=0,T_running=0
      +                          ;
  2774  0BB6  160A  118A  257E  120A  158A  	fcall	_Task2
  2775  0BBB  1683               	bsf	3,5	;RP0=1, select bank1
  2776  0BBC  01BC               	clrf	_Est_Task2^(0+128)
  2777  0BBD  2BB4               	goto	l4904
  2778  0BBE                     l4912:
  2779                           
  2780                           ;Main.c: 285:             {;Main.c: 286:                 Task3(),Est_Task3=0,T_running=0
      +                          ;
  2781  0BBE  120A  158A  21D8  120A  158A  	fcall	_Task3
  2782  0BC3  1683               	bsf	3,5	;RP0=1, select bank1
  2783  0BC4  01BB               	clrf	_Est_Task3^(0+128)
  2784  0BC5  2BB4               	goto	l4904
  2785  0BC6                     l4920:
  2786  0BC6  1683               	bsf	3,5	;RP0=1, select bank1
  2787  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  2788  0BC8  083A               	movf	_T_running^(0+128),w
  2789  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  2790  0BCA  00E9               	movwf	??_MP_Pulv
  2791  0BCB  01EA               	clrf	??_MP_Pulv+1
  2792                           
  2793                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2794                           ; Switch size 1, requested type "simple"
  2795                           ; Number of cases is 1, Range of values is 0 to 0
  2796                           ; switch strategies available:
  2797                           ; Name         Instructions Cycles
  2798                           ; simple_byte            4     3 (average)
  2799                           ; direct_byte           11     8 (fixed)
  2800                           ; jumptable            260     6 (fixed)
  2801                           ;	Chosen strategy is simple_byte
  2802  0BCC  086A               	movf	??_MP_Pulv+1,w
  2803  0BCD  3A00               	xorlw	0	; case 0
  2804  0BCE  1903               	skipnz
  2805  0BCF  2BD1               	goto	l5180
  2806  0BD0  2BDF               	goto	l4922
  2807  0BD1                     l5180:
  2808                           
  2809                           ; Switch size 1, requested type "simple"
  2810                           ; Number of cases is 4, Range of values is 0 to 3
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte           13     7 (average)
  2814                           ; direct_byte           20     8 (fixed)
  2815                           ; jumptable            260     6 (fixed)
  2816                           ;	Chosen strategy is simple_byte
  2817  0BD1  0869               	movf	??_MP_Pulv,w
  2818  0BD2  3A00               	xorlw	0	; case 0
  2819  0BD3  1903               	skipnz
  2820  0BD4  2BAA               	goto	l175
  2821  0BD5  3A01               	xorlw	1	; case 1
  2822  0BD6  1903               	skipnz
  2823  0BD7  2BAC               	goto	l4900
  2824  0BD8  3A03               	xorlw	3	; case 2
  2825  0BD9  1903               	skipnz
  2826  0BDA  2BB6               	goto	l4906
  2827  0BDB  3A01               	xorlw	1	; case 3
  2828  0BDC  1903               	skipnz
  2829  0BDD  2BBE               	goto	l4912
  2830  0BDE  2BDF               	goto	l4922
  2831  0BDF                     l4922:
  2832                           
  2833                           ;Main.c: 293:         if(Fin == 1 && Out_E == 1)
  2834  0BDF  1683               	bsf	3,5	;RP0=1, select bank1
  2835  0BE0  1303               	bcf	3,6	;RP1=0, select bank1
  2836  0BE1  0342               	decf	_Fin^(0+128),w
  2837  0BE2  1D03               	btfss	3,2
  2838  0BE3  2BED               	goto	l180
  2839  0BE4  0376               	decf	_Out_E,w
  2840  0BE5  1D03               	btfss	3,2
  2841  0BE6  2BED               	goto	l180
  2842                           
  2843                           ;Main.c: 294:         {;Main.c: 295:             Pwm1_stop();
  2844  0BE7  160A  118A  2330  120A  158A  	fcall	_Pwm1_stop
  2845                           
  2846                           ;Main.c: 296:             break;
  2847  0BEC  2C0A               	goto	l4934
  2848  0BED                     l180:	
  2849                           ;Main.c: 297:         }
  2850                           
  2851                           
  2852                           ;Main.c: 299:         if(PORTBbits.RB3 == 1) antirrebote(),mod_min=!mod_min,mod_seg=!mod
      +                          _seg;
  2853  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  2854  0BEE  1D86               	btfss	6,3	;volatile
  2855  0BEF  2B80               	goto	l4888
  2856  0BF0  160A  118A  2439  120A  158A  	fcall	_antirrebote
  2857  0BF5  1683               	bsf	3,5	;RP0=1, select bank1
  2858  0BF6  1303               	bcf	3,6	;RP1=0, select bank1
  2859  0BF7  0840               	movf	_mod_min^(0+128),w
  2860  0BF8  1D03               	btfss	3,2
  2861  0BF9  2BFC               	goto	u5910
  2862  0BFA  3001               	movlw	1
  2863  0BFB  2BFD               	goto	u5920
  2864  0BFC                     u5910:
  2865  0BFC  3000               	movlw	0
  2866  0BFD                     u5920:
  2867  0BFD  00FF               	movwf	127
  2868  0BFE  087F               	movf	127,w
  2869  0BFF  00C0               	movwf	_mod_min^(0+128)
  2870  0C00  083F               	movf	_mod_seg^(0+128),w
  2871  0C01  1D03               	btfss	3,2
  2872  0C02  2C05               	goto	u5930
  2873  0C03  3001               	movlw	1
  2874  0C04  2C06               	goto	u5940
  2875  0C05                     u5930:
  2876  0C05  3000               	movlw	0
  2877  0C06                     u5940:
  2878  0C06  00FF               	movwf	127
  2879  0C07  087F               	movf	127,w
  2880  0C08  00BF               	movwf	_mod_seg^(0+128)
  2881  0C09  2B80               	goto	l4888
  2882  0C0A                     l4934:
  2883                           
  2884                           ;Main.c: 303:     Fin=0,Out_E=0,LCD_command(0x01);
  2885  0C0A  1683               	bsf	3,5	;RP0=1, select bank1
  2886  0C0B  01C2               	clrf	_Fin^(0+128)
  2887  0C0C  01F6               	clrf	_Out_E
  2888  0C0D  3001               	movlw	1
  2889  0C0E  160A  118A  2538   	fcall	_LCD_command
  2890  0C11  0008               	return
  2891  0C12                     __end_of_MP_Pulv:
  2892                           
  2893                           	psect	text5
  2894  1439                     __ptext5:	
  2895 ;; *************** function _antirrebote *****************
  2896 ;; Defined at:
  2897 ;;		line 446 in file "Main.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;		None
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;		None
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  1    wreg      void 
  2904 ;; Registers used:
  2905 ;;		wreg
  2906 ;; Tracked objects:
  2907 ;;		On entry : 300/800
  2908 ;;		On exit  : 300/200
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2911 ;;      Params:         0       0       0       0       0
  2912 ;;      Locals:         0       0       0       0       0
  2913 ;;      Temps:          0       3       0       0       0
  2914 ;;      Totals:         0       3       0       0       0
  2915 ;;Total ram usage:        3 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:    2
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_main
  2922 ;;		_Seleccion_Modo
  2923 ;;		_MP_Pulv
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           
  2928                           ;psect for function _antirrebote
  2929  1439                     _antirrebote:
  2930                           
  2931                           ;Main.c: 448:     WDTCONbits.SWDTEN = 0;
  2932                           
  2933                           ;incstack = 0
  2934                           ; Regs used in _antirrebote: [wreg]
  2935  1439  1703               	bsf	3,6	;RP1=1, select bank2
  2936  143A  1005               	bcf	5,0	;volatile
  2937                           
  2938                           ;Main.c: 450:     PORTAbits.RA5 = 1;
  2939  143B  1303               	bcf	3,6	;RP1=0, select bank0
  2940  143C  1685               	bsf	5,5	;volatile
  2941                           
  2942                           ;Main.c: 451:     _delay((unsigned long)((50)*(20000000/4000.0)));
  2943  143D  3002               	movlw	2
  2944  143E  1283               	bcf	3,5	;RP0=0, select bank0
  2945  143F  1303               	bcf	3,6	;RP1=0, select bank0
  2946  1440  00A2               	movwf	??_antirrebote+2
  2947  1441  3045               	movlw	69
  2948  1442  00A1               	movwf	??_antirrebote+1
  2949  1443  30A9               	movlw	169
  2950  1444  00A0               	movwf	??_antirrebote
  2951  1445                     u6007:
  2952  1445  0BA0               	decfsz	??_antirrebote,f
  2953  1446  2C45               	goto	u6007
  2954  1447  0BA1               	decfsz	??_antirrebote+1,f
  2955  1448  2C45               	goto	u6007
  2956  1449  0BA2               	decfsz	??_antirrebote+2,f
  2957  144A  2C45               	goto	u6007
  2958                           
  2959                           ;Main.c: 452:     PORTAbits.RA5 = 0;
  2960  144B  1283               	bcf	3,5	;RP0=0, select bank0
  2961  144C  1303               	bcf	3,6	;RP1=0, select bank0
  2962  144D  1285               	bcf	5,5	;volatile
  2963  144E                     l4612:	
  2964                           ;Main.c: 454:     while(PORTBbits.RB0 == 1 || PORTBbits.RB1 == 1 || PORTBbits.RB3 == 1 |
      +                          | PORTBbits.RB2 == 1) _delay((unsigned long)((30)*(20000000/4000.0)));
  2965                           
  2966  144E  1283               	bcf	3,5	;RP0=0, select bank0
  2967  144F  1303               	bcf	3,6	;RP1=0, select bank0
  2968  1450  1C06               	btfss	6,0	;volatile
  2969  1451  2C5E               	goto	l4614
  2970  1452                     l4610:
  2971  1452  30C3               	movlw	195
  2972  1453  1283               	bcf	3,5	;RP0=0, select bank0
  2973  1454  1303               	bcf	3,6	;RP1=0, select bank0
  2974  1455  00A1               	movwf	??_antirrebote+1
  2975  1456  30CC               	movlw	204
  2976  1457  00A0               	movwf	??_antirrebote
  2977  1458                     u6017:
  2978  1458  0BA0               	decfsz	??_antirrebote,f
  2979  1459  2C58               	goto	u6017
  2980  145A  0BA1               	decfsz	??_antirrebote+1,f
  2981  145B  2C58               	goto	u6017
  2982  145C  0000               	nop
  2983  145D  2C4E               	goto	l4612
  2984  145E                     l4614:
  2985  145E  1C86               	btfss	6,1	;volatile
  2986  145F  1986               	btfsc	6,3	;volatile
  2987  1460  2C52               	goto	l4610
  2988  1461  1906               	btfsc	6,2	;volatile
  2989  1462  2C52               	goto	l4610
  2990                           
  2991                           ;Main.c: 456:     WDTCONbits.SWDTEN = 1;
  2992  1463  1703               	bsf	3,6	;RP1=1, select bank2
  2993  1464  1405               	bsf	5,0	;volatile
  2994                           
  2995                           ;Main.c: 458:     return;
  2996  1465  0008               	return
  2997  1466                     __end_of_antirrebote:
  2998                           
  2999                           	psect	text6
  3000  09D8                     __ptext6:	
  3001 ;; *************** function _Task3 *****************
  3002 ;; Defined at:
  3003 ;;		line 128 in file "Task_Control.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  i               1   39[BANK0 ] unsigned char 
  3008 ;;  buffer         10   29[BANK0 ] unsigned char [10]
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      void 
  3011 ;; Registers used:
  3012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : 300/800
  3015 ;;		On exit  : 200/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3018 ;;      Params:         0       0       0       0       0
  3019 ;;      Locals:         0      11       0       0       0
  3020 ;;      Temps:          0       3       0       0       0
  3021 ;;      Totals:         0      14       0       0       0
  3022 ;;Total ram usage:       14 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    5
  3025 ;; This function calls:
  3026 ;;		_LCD_array
  3027 ;;		_sprintf
  3028 ;; This function is called by:
  3029 ;;		_MP_Pulv
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           
  3034                           ;psect for function _Task3
  3035  09D8                     _Task3:
  3036                           
  3037                           ;Task_Control.c: 130:     char buffer[10];;Task_Control.c: 133:     if(Temporizador == 1
      +                          )
  3038                           
  3039                           ;incstack = 0
  3040                           ; Regs used in _Task3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3041  09D8  1683               	bsf	3,5	;RP0=1, select bank1
  3042  09D9  0341               	decf	_Temporizador^(0+128),w
  3043  09DA  1D03               	btfss	3,2
  3044  09DB  2A25               	goto	l4732
  3045                           
  3046                           ;Task_Control.c: 134:     {;Task_Control.c: 135:         sprintf(buffer,"%02d",Min);
  3047  09DC  30AE               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  3048  09DD  00FF               	movwf	127
  3049  09DE  087F               	movf	127,w
  3050  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  3051  09E0  00AB               	movwf	sprintf@f
  3052  09E1  1683               	bsf	3,5	;RP0=1, select bank1
  3053  09E2  0844               	movf	_Min^(0+128),w
  3054  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  3055  09E4  00BA               	movwf	??_Task3
  3056  09E5  01BB               	clrf	??_Task3+1
  3057  09E6  083A               	movf	??_Task3,w
  3058  09E7  00AC               	movwf	?_sprintf+1
  3059  09E8  083B               	movf	??_Task3+1,w
  3060  09E9  00AD               	movwf	?_sprintf+2
  3061  09EA  303D               	movlw	(low (Task3@buffer| 0))& (0+255)
  3062  09EB  120A  118A  202F  120A  158A  	fcall	_sprintf
  3063                           
  3064                           ;Task_Control.c: 136:         LCD_array(3,8,buffer);
  3065  09F0  3003               	movlw	3
  3066  09F1  00A2               	movwf	LCD_array@x
  3067  09F2  3000               	movlw	0
  3068  09F3  00A3               	movwf	LCD_array@x+1
  3069  09F4  3008               	movlw	8
  3070  09F5  00A4               	movwf	LCD_array@y
  3071  09F6  3000               	movlw	0
  3072  09F7  00A5               	movwf	LCD_array@y+1
  3073  09F8  303D               	movlw	(low (Task3@buffer| 0))& (0+255)
  3074  09F9  00A6               	movwf	LCD_array@date
  3075  09FA  3000               	movlw	0
  3076  09FB  00A7               	movwf	LCD_array@date+1
  3077  09FC  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  3078                           
  3079                           ;Task_Control.c: 137:         sprintf(buffer,"%02d",Seg);
  3080  0A01  30AE               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  3081  0A02  00FF               	movwf	127
  3082  0A03  087F               	movf	127,w
  3083  0A04  00AB               	movwf	sprintf@f
  3084  0A05  0878               	movf	_Seg,w
  3085  0A06  00BA               	movwf	??_Task3
  3086  0A07  01BB               	clrf	??_Task3+1
  3087  0A08  083A               	movf	??_Task3,w
  3088  0A09  00AC               	movwf	?_sprintf+1
  3089  0A0A  083B               	movf	??_Task3+1,w
  3090  0A0B  00AD               	movwf	?_sprintf+2
  3091  0A0C  303D               	movlw	(low (Task3@buffer| 0))& (0+255)
  3092  0A0D  120A  118A  202F  120A  158A  	fcall	_sprintf
  3093                           
  3094                           ;Task_Control.c: 138:         LCD_array(3,11,buffer);
  3095  0A12  3003               	movlw	3
  3096  0A13  00A2               	movwf	LCD_array@x
  3097  0A14  3000               	movlw	0
  3098  0A15  00A3               	movwf	LCD_array@x+1
  3099  0A16  300B               	movlw	11
  3100  0A17  00A4               	movwf	LCD_array@y
  3101  0A18  3000               	movlw	0
  3102  0A19  00A5               	movwf	LCD_array@y+1
  3103  0A1A  303D               	movlw	(low (Task3@buffer| 0))& (0+255)
  3104  0A1B  00A6               	movwf	LCD_array@date
  3105  0A1C  3000               	movlw	0
  3106  0A1D  00A7               	movwf	LCD_array@date+1
  3107  0A1E  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  3108                           
  3109                           ;Task_Control.c: 140:         Temporizador = 0;
  3110  0A23  1683               	bsf	3,5	;RP0=1, select bank1
  3111  0A24  01C1               	clrf	_Temporizador^(0+128)
  3112  0A25                     l4732:
  3113                           
  3114                           ;Task_Control.c: 142:     if(Min == 0 && Seg == 0)
  3115  0A25  0844               	movf	_Min^(0+128),w
  3116  0A26  1D03               	btfss	3,2
  3117  0A27  0008               	return
  3118  0A28  0878               	movf	_Seg,w
  3119  0A29  1D03               	btfss	3,2
  3120  0A2A  0008               	return
  3121                           
  3122                           ;Task_Control.c: 143:     {;Task_Control.c: 144:         Fin = 1;
  3123  0A2B  01C2               	clrf	_Fin^(0+128)
  3124  0A2C  0AC2               	incf	_Fin^(0+128),f
  3125                           
  3126                           ;Task_Control.c: 146:         for(char i=0;i<3;i++)
  3127  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  3128  0A2E  01C7               	clrf	Task3@i
  3129  0A2F                     l375:
  3130                           
  3131                           ;Task_Control.c: 147:         {;Task_Control.c: 148:             PORTAbits.RA5 = 1;
  3132  0A2F  1685               	bsf	5,5	;volatile
  3133                           
  3134                           ;Task_Control.c: 149:             _delay((unsigned long)((100)*(20000000/4000.0)));
  3135  0A30  3003               	movlw	3
  3136  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  3138  0A33  00BC               	movwf	??_Task3+2
  3139  0A34  308A               	movlw	138
  3140  0A35  00BB               	movwf	??_Task3+1
  3141  0A36  3055               	movlw	85
  3142  0A37  00BA               	movwf	??_Task3
  3143  0A38                     u6027:
  3144  0A38  0BBA               	decfsz	??_Task3,f
  3145  0A39  2A38               	goto	u6027
  3146  0A3A  0BBB               	decfsz	??_Task3+1,f
  3147  0A3B  2A38               	goto	u6027
  3148  0A3C  0BBC               	decfsz	??_Task3+2,f
  3149  0A3D  2A38               	goto	u6027
  3150                           
  3151                           ;Task_Control.c: 150:             PORTAbits.RA5 = 0;
  3152  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0A40  1285               	bcf	5,5	;volatile
  3155                           
  3156                           ;Task_Control.c: 151:             _delay((unsigned long)((100)*(20000000/4000.0)));
  3157  0A41  3003               	movlw	3
  3158  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  3159  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  3160  0A44  00BC               	movwf	??_Task3+2
  3161  0A45  308A               	movlw	138
  3162  0A46  00BB               	movwf	??_Task3+1
  3163  0A47  3055               	movlw	85
  3164  0A48  00BA               	movwf	??_Task3
  3165  0A49                     u6037:
  3166  0A49  0BBA               	decfsz	??_Task3,f
  3167  0A4A  2A49               	goto	u6037
  3168  0A4B  0BBB               	decfsz	??_Task3+1,f
  3169  0A4C  2A49               	goto	u6037
  3170  0A4D  0BBC               	decfsz	??_Task3+2,f
  3171  0A4E  2A49               	goto	u6037
  3172                           
  3173                           ;Task_Control.c: 152:         }
  3174  0A4F  3001               	movlw	1
  3175  0A50  00FF               	movwf	127
  3176  0A51  087F               	movf	127,w
  3177  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  3178  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  3179  0A54  07C7               	addwf	Task3@i,f
  3180  0A55  3003               	movlw	3
  3181  0A56  0247               	subwf	Task3@i,w
  3182  0A57  1803               	btfsc	3,0
  3183  0A58  0008               	return
  3184  0A59  2A2F               	goto	l375
  3185  0A5A                     __end_of_Task3:
  3186                           
  3187                           	psect	text7
  3188  157E                     __ptext7:	
  3189 ;; *************** function _Task2 *****************
  3190 ;; Defined at:
  3191 ;;		line 160 in file "Task_Control.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;		None
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3200 ;; Tracked objects:
  3201 ;;		On entry : 300/800
  3202 ;;		On exit  : 300/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3205 ;;      Params:         0       0       0       0       0
  3206 ;;      Locals:         0       2       0       0       0
  3207 ;;      Temps:          0       0       0       0       0
  3208 ;;      Totals:         0       2       0       0       0
  3209 ;;Total ram usage:        2 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:    5
  3212 ;; This function calls:
  3213 ;;		_Pwm1
  3214 ;;		_Pwm1_init
  3215 ;;		___ftdiv
  3216 ;;		___fttol
  3217 ;;		___lbtoft
  3218 ;;		___lwtoft
  3219 ;; This function is called by:
  3220 ;;		_MP_Pulv
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _Task2
  3226  157E                     _Task2:
  3227                           
  3228                           ;Task_Control.c: 162:     Pwm1_init((int)(Rpm/60.0));
  3229                           
  3230                           ;incstack = 0
  3231                           ; Regs used in _Task2: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3232  157E  1683               	bsf	3,5	;RP0=1, select bank1
  3233  157F  0837               	movf	(_Rpm+1)^(0+128),w
  3234  1580  1283               	bcf	3,5	;RP0=0, select bank0
  3235  1581  00A9               	movwf	___lwtoft@c+1
  3236  1582  1683               	bsf	3,5	;RP0=1, select bank1
  3237  1583  0836               	movf	_Rpm^(0+128),w
  3238  1584  1283               	bcf	3,5	;RP0=0, select bank0
  3239  1585  00A8               	movwf	___lwtoft@c
  3240  1586  160A  118A  237E  160A  118A  	fcall	___lwtoft
  3241  158B  0828               	movf	?___lwtoft,w
  3242  158C  00BE               	movwf	___ftdiv@f1
  3243  158D  0829               	movf	?___lwtoft+1,w
  3244  158E  00BF               	movwf	___ftdiv@f1+1
  3245  158F  082A               	movf	?___lwtoft+2,w
  3246  1590  00C0               	movwf	___ftdiv@f1+2
  3247  1591  3000               	movlw	0
  3248  1592  00BB               	movwf	___ftdiv@f2
  3249  1593  3070               	movlw	112
  3250  1594  00BC               	movwf	___ftdiv@f2+1
  3251  1595  3042               	movlw	66
  3252  1596  00BD               	movwf	___ftdiv@f2+2
  3253  1597  120A  158A  22E0  160A  118A  	fcall	___ftdiv
  3254  159C  083B               	movf	?___ftdiv,w
  3255  159D  00CA               	movwf	___fttol@f1
  3256  159E  083C               	movf	?___ftdiv+1,w
  3257  159F  00CB               	movwf	___fttol@f1+1
  3258  15A0  083D               	movf	?___ftdiv+2,w
  3259  15A1  00CC               	movwf	___fttol@f1+2
  3260  15A2  120A  158A  2061  160A  118A  	fcall	___fttol
  3261  15A7  084B               	movf	?___fttol+1,w
  3262  15A8  00DB               	movwf	_Task2$1290+1
  3263  15A9  084A               	movf	?___fttol,w
  3264  15AA  00DA               	movwf	_Task2$1290
  3265                           
  3266                           ;Task_Control.c: 162:     Pwm1_init((int)(Rpm/60.0));
  3267  15AB  085B               	movf	_Task2$1290+1,w
  3268  15AC  00D8               	movwf	Pwm1_init@frecuencia+1
  3269  15AD  085A               	movf	_Task2$1290,w
  3270  15AE  00D7               	movwf	Pwm1_init@frecuencia
  3271  15AF  160A  118A  278F  160A  118A  	fcall	_Pwm1_init
  3272                           
  3273                           ;Task_Control.c: 163:     Pwm1(Pwm);
  3274  15B4  0879               	movf	_Pwm,w
  3275  15B5  160A  118A  23C0  160A  118A  	fcall	___lbtoft
  3276  15BA  0828               	movf	?___lbtoft,w
  3277  15BB  00D7               	movwf	Pwm1@duty
  3278  15BC  0829               	movf	?___lbtoft+1,w
  3279  15BD  00D8               	movwf	Pwm1@duty+1
  3280  15BE  082A               	movf	?___lbtoft+2,w
  3281  15BF  00D9               	movwf	Pwm1@duty+2
  3282  15C0  160A  118A  2656   	fcall	_Pwm1
  3283  15C3  0008               	return
  3284  15C4                     __end_of_Task2:
  3285                           
  3286                           	psect	text8
  3287  13C0                     __ptext8:	
  3288 ;; *************** function ___lbtoft *****************
  3289 ;; Defined at:
  3290 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lbtoft.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  c               1    wreg     unsigned char 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  c               1    4[COMMON] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  3    8[BANK0 ] float 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 300/900
  3301 ;;		On exit  : 300/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3304 ;;      Params:         0       3       0       0       0
  3305 ;;      Locals:         1       0       0       0       0
  3306 ;;      Temps:          0       3       0       0       0
  3307 ;;      Totals:         1       6       0       0       0
  3308 ;;Total ram usage:        7 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		___ftpack
  3313 ;; This function is called by:
  3314 ;;		_Task2
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           
  3319                           ;psect for function ___lbtoft
  3320  13C0                     ___lbtoft:
  3321                           
  3322                           ;incstack = 0
  3323                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3324                           ;___lbtoft@c stored from wreg
  3325  13C0  00F4               	movwf	___lbtoft@c
  3326  13C1  0874               	movf	___lbtoft@c,w
  3327  13C2  1283               	bcf	3,5	;RP0=0, select bank0
  3328  13C3  00AB               	movwf	??___lbtoft
  3329  13C4  01AC               	clrf	??___lbtoft+1
  3330  13C5  01AD               	clrf	??___lbtoft+2
  3331  13C6  082B               	movf	??___lbtoft,w
  3332  13C7  00A0               	movwf	___ftpack@arg
  3333  13C8  082C               	movf	??___lbtoft+1,w
  3334  13C9  00A1               	movwf	___ftpack@arg+1
  3335  13CA  082D               	movf	??___lbtoft+2,w
  3336  13CB  00A2               	movwf	___ftpack@arg+2
  3337  13CC  308E               	movlw	142
  3338  13CD  00FF               	movwf	127
  3339  13CE  087F               	movf	127,w
  3340  13CF  00A3               	movwf	___ftpack@exp
  3341  13D0  01A4               	clrf	___ftpack@sign
  3342  13D1  160A  118A  2723   	fcall	___ftpack
  3343  13D4  0820               	movf	?___ftpack,w
  3344  13D5  00A8               	movwf	?___lbtoft
  3345  13D6  0821               	movf	?___ftpack+1,w
  3346  13D7  00A9               	movwf	?___lbtoft+1
  3347  13D8  0822               	movf	?___ftpack+2,w
  3348  13D9  00AA               	movwf	?___lbtoft+2
  3349  13DA  0008               	return
  3350  13DB                     __end_of___lbtoft:
  3351                           
  3352                           	psect	text9
  3353  178F                     __ptext9:	
  3354 ;; *************** function _Pwm1_init *****************
  3355 ;; Defined at:
  3356 ;;		line 30 in file "Pwm_Soft.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  frecuencia      2   55[BANK0 ] unsigned int 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 300/800
  3367 ;;		On exit  : 300/100
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3370 ;;      Params:         0       2       0       0       0
  3371 ;;      Locals:         0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       0
  3373 ;;      Totals:         0       2       0       0       0
  3374 ;;Total ram usage:        2 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    4
  3377 ;; This function calls:
  3378 ;;		___ftadd
  3379 ;;		___ftdiv
  3380 ;;		___fttol
  3381 ;;		___lwtoft
  3382 ;; This function is called by:
  3383 ;;		_Task2
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           
  3388                           ;psect for function _Pwm1_init
  3389  178F                     _Pwm1_init:
  3390                           
  3391                           ;Pwm_Soft.c: 30: void Pwm1_init(unsigned int frecuencia);Pwm_Soft.c: 31: {;Pwm_Soft.c: 3
      +                          3:     TRISB4 = 0;
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _Pwm1_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3395  178F  1683               	bsf	3,5	;RP0=1, select bank1
  3396  1790  1206               	bcf	6,4	;volatile
  3397                           
  3398                           ;Pwm_Soft.c: 34:     RB4=0;
  3399  1791  1283               	bcf	3,5	;RP0=0, select bank0
  3400  1792  1206               	bcf	6,4	;volatile
  3401                           
  3402                           ;Pwm_Soft.c: 41:     freqPwmS1 = frecuencia;
  3403  1793  0858               	movf	Pwm1_init@frecuencia+1,w
  3404  1794  1683               	bsf	3,5	;RP0=1, select bank1
  3405  1795  00B5               	movwf	(_freqPwmS1+1)^(0+128)
  3406  1796  1283               	bcf	3,5	;RP0=0, select bank0
  3407  1797  0857               	movf	Pwm1_init@frecuencia,w
  3408  1798  1683               	bsf	3,5	;RP0=1, select bank1
  3409  1799  00B4               	movwf	_freqPwmS1^(0+128)
  3410                           
  3411                           ;Pwm_Soft.c: 42:     Per_PwmS1 = (1.0/frecuencia)-0.005;
  3412  179A  30D7               	movlw	215
  3413  179B  1283               	bcf	3,5	;RP0=0, select bank0
  3414  179C  00CA               	movwf	___ftadd@f1
  3415  179D  30A3               	movlw	163
  3416  179E  00CB               	movwf	___ftadd@f1+1
  3417  179F  30BB               	movlw	187
  3418  17A0  00CC               	movwf	___ftadd@f1+2
  3419  17A1  0858               	movf	Pwm1_init@frecuencia+1,w
  3420  17A2  00A9               	movwf	___lwtoft@c+1
  3421  17A3  0857               	movf	Pwm1_init@frecuencia,w
  3422  17A4  00A8               	movwf	___lwtoft@c
  3423  17A5  160A  118A  237E  160A  118A  	fcall	___lwtoft
  3424  17AA  0828               	movf	?___lwtoft,w
  3425  17AB  00BB               	movwf	___ftdiv@f2
  3426  17AC  0829               	movf	?___lwtoft+1,w
  3427  17AD  00BC               	movwf	___ftdiv@f2+1
  3428  17AE  082A               	movf	?___lwtoft+2,w
  3429  17AF  00BD               	movwf	___ftdiv@f2+2
  3430  17B0  3000               	movlw	0
  3431  17B1  00BE               	movwf	___ftdiv@f1
  3432  17B2  3080               	movlw	128
  3433  17B3  00BF               	movwf	___ftdiv@f1+1
  3434  17B4  303F               	movlw	63
  3435  17B5  00C0               	movwf	___ftdiv@f1+2
  3436  17B6  120A  158A  22E0  160A  118A  	fcall	___ftdiv
  3437  17BB  083B               	movf	?___ftdiv,w
  3438  17BC  00CD               	movwf	___ftadd@f2
  3439  17BD  083C               	movf	?___ftdiv+1,w
  3440  17BE  00CE               	movwf	___ftadd@f2+1
  3441  17BF  083D               	movf	?___ftdiv+2,w
  3442  17C0  00CF               	movwf	___ftadd@f2+2
  3443  17C1  120A  158A  26FB  160A  118A  	fcall	___ftadd
  3444  17C6  084A               	movf	?___ftadd,w
  3445  17C7  1683               	bsf	3,5	;RP0=1, select bank1
  3446  17C8  00AB               	movwf	_Per_PwmS1^(0+128)
  3447  17C9  1283               	bcf	3,5	;RP0=0, select bank0
  3448  17CA  084B               	movf	?___ftadd+1,w
  3449  17CB  1683               	bsf	3,5	;RP0=1, select bank1
  3450  17CC  00AC               	movwf	(_Per_PwmS1+1)^(0+128)
  3451  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  3452  17CE  084C               	movf	?___ftadd+2,w
  3453  17CF  1683               	bsf	3,5	;RP0=1, select bank1
  3454  17D0  00AD               	movwf	(_Per_PwmS1+2)^(0+128)
  3455                           
  3456                           ;Pwm_Soft.c: 43:     PER_T_S1 = Per_PwmS1 / 0.0001;
  3457  17D1  082B               	movf	_Per_PwmS1^(0+128),w
  3458  17D2  1283               	bcf	3,5	;RP0=0, select bank0
  3459  17D3  00BE               	movwf	___ftdiv@f1
  3460  17D4  1683               	bsf	3,5	;RP0=1, select bank1
  3461  17D5  082C               	movf	(_Per_PwmS1+1)^(0+128),w
  3462  17D6  1283               	bcf	3,5	;RP0=0, select bank0
  3463  17D7  00BF               	movwf	___ftdiv@f1+1
  3464  17D8  1683               	bsf	3,5	;RP0=1, select bank1
  3465  17D9  082D               	movf	(_Per_PwmS1+2)^(0+128),w
  3466  17DA  1283               	bcf	3,5	;RP0=0, select bank0
  3467  17DB  00C0               	movwf	___ftdiv@f1+2
  3468  17DC  30B7               	movlw	183
  3469  17DD  00BB               	movwf	___ftdiv@f2
  3470  17DE  30D1               	movlw	209
  3471  17DF  00BC               	movwf	___ftdiv@f2+1
  3472  17E0  3038               	movlw	56
  3473  17E1  00BD               	movwf	___ftdiv@f2+2
  3474  17E2  120A  158A  22E0  160A  118A  	fcall	___ftdiv
  3475  17E7  083B               	movf	?___ftdiv,w
  3476  17E8  00CA               	movwf	___fttol@f1
  3477  17E9  083C               	movf	?___ftdiv+1,w
  3478  17EA  00CB               	movwf	___fttol@f1+1
  3479  17EB  083D               	movf	?___ftdiv+2,w
  3480  17EC  00CC               	movwf	___fttol@f1+2
  3481  17ED  120A  158A  2061   	fcall	___fttol
  3482  17F0  084B               	movf	?___fttol+1,w
  3483  17F1  1683               	bsf	3,5	;RP0=1, select bank1
  3484  17F2  00AF               	movwf	(_PER_T_S1+1)^(0+128)
  3485  17F3  1283               	bcf	3,5	;RP0=0, select bank0
  3486  17F4  084A               	movf	?___fttol,w
  3487  17F5  1683               	bsf	3,5	;RP0=1, select bank1
  3488  17F6  00AE               	movwf	_PER_T_S1^(0+128)
  3489                           
  3490                           ;Pwm_Soft.c: 46:     Pw_PwmS1 = 0;
  3491  17F7  3000               	movlw	0
  3492  17F8  00A8               	movwf	_Pw_PwmS1^(0+128)
  3493  17F9  3000               	movlw	0
  3494  17FA  00A9               	movwf	(_Pw_PwmS1+1)^(0+128)
  3495  17FB  3000               	movlw	0
  3496  17FC  00AA               	movwf	(_Pw_PwmS1+2)^(0+128)
  3497                           
  3498                           ;Pwm_Soft.c: 47:     PwmS1 = 0;
  3499  17FD  01B2               	clrf	_PwmS1^(0+128)
  3500  17FE  01B3               	clrf	(_PwmS1+1)^(0+128)
  3501  17FF  0008               	return
  3502  1800                     __end_of_Pwm1_init:
  3503                           
  3504                           	psect	text10
  3505  137E                     __ptext10:	
  3506 ;; *************** function ___lwtoft *****************
  3507 ;; Defined at:
  3508 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwtoft.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  c               2    8[BANK0 ] unsigned int 
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  3    8[BANK0 ] float 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 300/800
  3519 ;;		On exit  : 300/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3522 ;;      Params:         0       3       0       0       0
  3523 ;;      Locals:         0       0       0       0       0
  3524 ;;      Temps:          0       0       0       0       0
  3525 ;;      Totals:         0       3       0       0       0
  3526 ;;Total ram usage:        3 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    3
  3529 ;; This function calls:
  3530 ;;		___ftpack
  3531 ;; This function is called by:
  3532 ;;		_Task2
  3533 ;;		_Pwm1_init
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           
  3538                           ;psect for function ___lwtoft
  3539  137E                     ___lwtoft:
  3540                           
  3541                           ;incstack = 0
  3542                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3543  137E  0828               	movf	___lwtoft@c,w
  3544  137F  00A0               	movwf	___ftpack@arg
  3545  1380  0829               	movf	___lwtoft@c+1,w
  3546  1381  00A1               	movwf	___ftpack@arg+1
  3547  1382  01A2               	clrf	___ftpack@arg+2
  3548  1383  308E               	movlw	142
  3549  1384  00FF               	movwf	127
  3550  1385  087F               	movf	127,w
  3551  1386  00A3               	movwf	___ftpack@exp
  3552  1387  01A4               	clrf	___ftpack@sign
  3553  1388  160A  118A  2723   	fcall	___ftpack
  3554  138B  0820               	movf	?___ftpack,w
  3555  138C  00A8               	movwf	?___lwtoft
  3556  138D  0821               	movf	?___ftpack+1,w
  3557  138E  00A9               	movwf	?___lwtoft+1
  3558  138F  0822               	movf	?___ftpack+2,w
  3559  1390  00AA               	movwf	?___lwtoft+2
  3560  1391  0008               	return
  3561  1392                     __end_of___lwtoft:
  3562                           
  3563                           	psect	text11
  3564  0EFB                     __ptext11:	
  3565 ;; *************** function ___ftadd *****************
  3566 ;; Defined at:
  3567 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftadd.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  f1              3   42[BANK0 ] float 
  3570 ;;  f2              3   45[BANK0 ] float 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  exp1            1   53[BANK0 ] unsigned char 
  3573 ;;  exp2            1   52[BANK0 ] unsigned char 
  3574 ;;  sign            1   51[BANK0 ] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  3   42[BANK0 ] float 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 300/800
  3581 ;;		On exit  : 300/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3584 ;;      Params:         0       6       0       0       0
  3585 ;;      Locals:         0       3       0       0       0
  3586 ;;      Temps:          0       3       0       0       0
  3587 ;;      Totals:         0      12       0       0       0
  3588 ;;Total ram usage:       12 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    3
  3591 ;; This function calls:
  3592 ;;		___ftpack
  3593 ;; This function is called by:
  3594 ;;		_Pwm1_init
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function ___ftadd
  3600  0EFB                     ___ftadd:
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3604  0EFB  084A               	movf	___ftadd@f1,w
  3605  0EFC  00D0               	movwf	??___ftadd
  3606  0EFD  084B               	movf	___ftadd@f1+1,w
  3607  0EFE  00D1               	movwf	??___ftadd+1
  3608  0EFF  084C               	movf	___ftadd@f1+2,w
  3609  0F00  00D2               	movwf	??___ftadd+2
  3610  0F01  1003               	clrc
  3611  0F02  0D51               	rlf	??___ftadd+1,w
  3612  0F03  0D52               	rlf	??___ftadd+2,w
  3613  0F04  00FF               	movwf	127
  3614  0F05  087F               	movf	127,w
  3615  0F06  00D5               	movwf	___ftadd@exp1
  3616  0F07  084D               	movf	___ftadd@f2,w
  3617  0F08  00D0               	movwf	??___ftadd
  3618  0F09  084E               	movf	___ftadd@f2+1,w
  3619  0F0A  00D1               	movwf	??___ftadd+1
  3620  0F0B  084F               	movf	___ftadd@f2+2,w
  3621  0F0C  00D2               	movwf	??___ftadd+2
  3622  0F0D  1003               	clrc
  3623  0F0E  0D51               	rlf	??___ftadd+1,w
  3624  0F0F  0D52               	rlf	??___ftadd+2,w
  3625  0F10  00FF               	movwf	127
  3626  0F11  087F               	movf	127,w
  3627  0F12  00D4               	movwf	___ftadd@exp2
  3628  0F13  0855               	movf	___ftadd@exp1,w
  3629  0F14  1903               	btfsc	3,2
  3630  0F15  2F22               	goto	l4250
  3631  0F16  0854               	movf	___ftadd@exp2,w
  3632  0F17  0255               	subwf	___ftadd@exp1,w
  3633  0F18  1803               	skipnc
  3634  0F19  2F29               	goto	l4254
  3635  0F1A  0854               	movf	___ftadd@exp2,w
  3636  0F1B  00D0               	movwf	??___ftadd
  3637  0F1C  0855               	movf	___ftadd@exp1,w
  3638  0F1D  02D0               	subwf	??___ftadd,f
  3639  0F1E  3019               	movlw	25
  3640  0F1F  0250               	subwf	??___ftadd,w
  3641  0F20  1C03               	skipc
  3642  0F21  2F29               	goto	l4254
  3643  0F22                     l4250:
  3644  0F22  084D               	movf	___ftadd@f2,w
  3645  0F23  00CA               	movwf	?___ftadd
  3646  0F24  084E               	movf	___ftadd@f2+1,w
  3647  0F25  00CB               	movwf	?___ftadd+1
  3648  0F26  084F               	movf	___ftadd@f2+2,w
  3649  0F27  00CC               	movwf	?___ftadd+2
  3650  0F28  0008               	return
  3651  0F29                     l4254:
  3652  0F29  0854               	movf	___ftadd@exp2,w
  3653  0F2A  1903               	btfsc	3,2
  3654  0F2B  0008               	return
  3655  0F2C  0855               	movf	___ftadd@exp1,w
  3656  0F2D  0254               	subwf	___ftadd@exp2,w
  3657  0F2E  1803               	skipnc
  3658  0F2F  2F38               	goto	l4260
  3659  0F30  0855               	movf	___ftadd@exp1,w
  3660  0F31  00D0               	movwf	??___ftadd
  3661  0F32  0854               	movf	___ftadd@exp2,w
  3662  0F33  02D0               	subwf	??___ftadd,f
  3663  0F34  3019               	movlw	25
  3664  0F35  0250               	subwf	??___ftadd,w
  3665  0F36  1803               	btfsc	3,0
  3666  0F37  0008               	return
  3667  0F38                     l4260:
  3668  0F38  3006               	movlw	6
  3669  0F39  00FF               	movwf	127
  3670  0F3A  087F               	movf	127,w
  3671  0F3B  00D3               	movwf	___ftadd@sign
  3672  0F3C  1BCC               	btfsc	___ftadd@f1+2,7
  3673  0F3D  17D3               	bsf	___ftadd@sign,7
  3674  0F3E  1BCF               	btfsc	___ftadd@f2+2,7
  3675  0F3F  1753               	bsf	___ftadd@sign,6
  3676  0F40  17CB               	bsf	___ftadd@f1+1,7
  3677  0F41  30FF               	movlw	255
  3678  0F42  05CA               	andwf	___ftadd@f1,f
  3679  0F43  30FF               	movlw	255
  3680  0F44  05CB               	andwf	___ftadd@f1+1,f
  3681  0F45  3000               	movlw	0
  3682  0F46  05CC               	andwf	___ftadd@f1+2,f
  3683  0F47  17CE               	bsf	___ftadd@f2+1,7
  3684  0F48  30FF               	movlw	255
  3685  0F49  05CD               	andwf	___ftadd@f2,f
  3686  0F4A  30FF               	movlw	255
  3687  0F4B  05CE               	andwf	___ftadd@f2+1,f
  3688  0F4C  3000               	movlw	0
  3689  0F4D  05CF               	andwf	___ftadd@f2+2,f
  3690  0F4E  0854               	movf	___ftadd@exp2,w
  3691  0F4F  0255               	subwf	___ftadd@exp1,w
  3692  0F50  1803               	skipnc
  3693  0F51  2F78               	goto	l4284
  3694  0F52                     l4272:
  3695  0F52  3001               	movlw	1
  3696  0F53                     u4865:
  3697  0F53  1003               	clrc
  3698  0F54  0DCD               	rlf	___ftadd@f2,f
  3699  0F55  0DCE               	rlf	___ftadd@f2+1,f
  3700  0F56  0DCF               	rlf	___ftadd@f2+2,f
  3701  0F57  3EFF               	addlw	-1
  3702  0F58  1D03               	skipz
  3703  0F59  2F53               	goto	u4865
  3704  0F5A  3001               	movlw	1
  3705  0F5B  02D4               	subwf	___ftadd@exp2,f
  3706  0F5C  0854               	movf	___ftadd@exp2,w
  3707  0F5D  0655               	xorwf	___ftadd@exp1,w
  3708  0F5E  1903               	skipnz
  3709  0F5F  2F73               	goto	l4282
  3710  0F60  3001               	movlw	1
  3711  0F61  02D3               	subwf	___ftadd@sign,f
  3712  0F62  0853               	movf	___ftadd@sign,w
  3713  0F63  3907               	andlw	7
  3714  0F64  1903               	btfsc	3,2
  3715  0F65  2F73               	goto	l4282
  3716  0F66  2F52               	goto	l4272
  3717  0F67                     l4278:
  3718  0F67  3001               	movlw	1
  3719  0F68                     u4895:
  3720  0F68  1003               	clrc
  3721  0F69  0CCC               	rrf	___ftadd@f1+2,f
  3722  0F6A  0CCB               	rrf	___ftadd@f1+1,f
  3723  0F6B  0CCA               	rrf	___ftadd@f1,f
  3724  0F6C  3EFF               	addlw	-1
  3725  0F6D  1D03               	skipz
  3726  0F6E  2F68               	goto	u4895
  3727  0F6F  3001               	movlw	1
  3728  0F70  00FF               	movwf	127
  3729  0F71  087F               	movf	127,w
  3730  0F72  07D5               	addwf	___ftadd@exp1,f
  3731  0F73                     l4282:
  3732  0F73  0855               	movf	___ftadd@exp1,w
  3733  0F74  0654               	xorwf	___ftadd@exp2,w
  3734  0F75  1903               	btfsc	3,2
  3735  0F76  2FA1               	goto	l873
  3736  0F77  2F67               	goto	l4278
  3737  0F78                     l4284:
  3738  0F78  0855               	movf	___ftadd@exp1,w
  3739  0F79  0254               	subwf	___ftadd@exp2,w
  3740  0F7A  1803               	skipnc
  3741  0F7B  2FA1               	goto	l873
  3742  0F7C                     l4286:
  3743  0F7C  3001               	movlw	1
  3744  0F7D                     u4925:
  3745  0F7D  1003               	clrc
  3746  0F7E  0DCA               	rlf	___ftadd@f1,f
  3747  0F7F  0DCB               	rlf	___ftadd@f1+1,f
  3748  0F80  0DCC               	rlf	___ftadd@f1+2,f
  3749  0F81  3EFF               	addlw	-1
  3750  0F82  1D03               	skipz
  3751  0F83  2F7D               	goto	u4925
  3752  0F84  3001               	movlw	1
  3753  0F85  02D5               	subwf	___ftadd@exp1,f
  3754  0F86  0854               	movf	___ftadd@exp2,w
  3755  0F87  0655               	xorwf	___ftadd@exp1,w
  3756  0F88  1903               	skipnz
  3757  0F89  2F9D               	goto	l4296
  3758  0F8A  3001               	movlw	1
  3759  0F8B  02D3               	subwf	___ftadd@sign,f
  3760  0F8C  0853               	movf	___ftadd@sign,w
  3761  0F8D  3907               	andlw	7
  3762  0F8E  1903               	btfsc	3,2
  3763  0F8F  2F9D               	goto	l4296
  3764  0F90  2F7C               	goto	l4286
  3765  0F91                     l4292:
  3766  0F91  3001               	movlw	1
  3767  0F92                     u4955:
  3768  0F92  1003               	clrc
  3769  0F93  0CCF               	rrf	___ftadd@f2+2,f
  3770  0F94  0CCE               	rrf	___ftadd@f2+1,f
  3771  0F95  0CCD               	rrf	___ftadd@f2,f
  3772  0F96  3EFF               	addlw	-1
  3773  0F97  1D03               	skipz
  3774  0F98  2F92               	goto	u4955
  3775  0F99  3001               	movlw	1
  3776  0F9A  00FF               	movwf	127
  3777  0F9B  087F               	movf	127,w
  3778  0F9C  07D4               	addwf	___ftadd@exp2,f
  3779  0F9D                     l4296:
  3780  0F9D  0855               	movf	___ftadd@exp1,w
  3781  0F9E  0654               	xorwf	___ftadd@exp2,w
  3782  0F9F  1D03               	skipz
  3783  0FA0  2F91               	goto	l4292
  3784  0FA1                     l873:
  3785  0FA1  1FD3               	btfss	___ftadd@sign,7
  3786  0FA2  2FB3               	goto	l4300
  3787  0FA3  30FF               	movlw	255
  3788  0FA4  06CA               	xorwf	___ftadd@f1,f
  3789  0FA5  30FF               	movlw	255
  3790  0FA6  06CB               	xorwf	___ftadd@f1+1,f
  3791  0FA7  30FF               	movlw	255
  3792  0FA8  06CC               	xorwf	___ftadd@f1+2,f
  3793  0FA9  3001               	movlw	1
  3794  0FAA  07CA               	addwf	___ftadd@f1,f
  3795  0FAB  3000               	movlw	0
  3796  0FAC  1803               	skipnc
  3797  0FAD  3001               	movlw	1
  3798  0FAE  07CB               	addwf	___ftadd@f1+1,f
  3799  0FAF  3000               	movlw	0
  3800  0FB0  1803               	skipnc
  3801  0FB1  3001               	movlw	1
  3802  0FB2  07CC               	addwf	___ftadd@f1+2,f
  3803  0FB3                     l4300:
  3804  0FB3  1F53               	btfss	___ftadd@sign,6
  3805  0FB4  2FC5               	goto	l4304
  3806  0FB5  30FF               	movlw	255
  3807  0FB6  06CD               	xorwf	___ftadd@f2,f
  3808  0FB7  30FF               	movlw	255
  3809  0FB8  06CE               	xorwf	___ftadd@f2+1,f
  3810  0FB9  30FF               	movlw	255
  3811  0FBA  06CF               	xorwf	___ftadd@f2+2,f
  3812  0FBB  3001               	movlw	1
  3813  0FBC  07CD               	addwf	___ftadd@f2,f
  3814  0FBD  3000               	movlw	0
  3815  0FBE  1803               	skipnc
  3816  0FBF  3001               	movlw	1
  3817  0FC0  07CE               	addwf	___ftadd@f2+1,f
  3818  0FC1  3000               	movlw	0
  3819  0FC2  1803               	skipnc
  3820  0FC3  3001               	movlw	1
  3821  0FC4  07CF               	addwf	___ftadd@f2+2,f
  3822  0FC5                     l4304:
  3823  0FC5  01D3               	clrf	___ftadd@sign
  3824  0FC6  084A               	movf	___ftadd@f1,w
  3825  0FC7  07CD               	addwf	___ftadd@f2,f
  3826  0FC8  084B               	movf	___ftadd@f1+1,w
  3827  0FC9  1103               	clrz
  3828  0FCA  1803               	skipnc
  3829  0FCB  0A4B               	incf	___ftadd@f1+1,w
  3830  0FCC  1D03               	btfss	3,2
  3831  0FCD  07CE               	addwf	___ftadd@f2+1,f
  3832  0FCE  084C               	movf	___ftadd@f1+2,w
  3833  0FCF  1103               	clrz
  3834  0FD0  1803               	skipnc
  3835  0FD1  0A4C               	incf	___ftadd@f1+2,w
  3836  0FD2  1D03               	btfss	3,2
  3837  0FD3  07CF               	addwf	___ftadd@f2+2,f
  3838  0FD4  1FCF               	btfss	___ftadd@f2+2,7
  3839  0FD5  2FE8               	goto	l4314
  3840  0FD6  30FF               	movlw	255
  3841  0FD7  06CD               	xorwf	___ftadd@f2,f
  3842  0FD8  30FF               	movlw	255
  3843  0FD9  06CE               	xorwf	___ftadd@f2+1,f
  3844  0FDA  30FF               	movlw	255
  3845  0FDB  06CF               	xorwf	___ftadd@f2+2,f
  3846  0FDC  3001               	movlw	1
  3847  0FDD  07CD               	addwf	___ftadd@f2,f
  3848  0FDE  3000               	movlw	0
  3849  0FDF  1803               	skipnc
  3850  0FE0  3001               	movlw	1
  3851  0FE1  07CE               	addwf	___ftadd@f2+1,f
  3852  0FE2  3000               	movlw	0
  3853  0FE3  1803               	skipnc
  3854  0FE4  3001               	movlw	1
  3855  0FE5  07CF               	addwf	___ftadd@f2+2,f
  3856  0FE6  01D3               	clrf	___ftadd@sign
  3857  0FE7  0AD3               	incf	___ftadd@sign,f
  3858  0FE8                     l4314:
  3859  0FE8  084D               	movf	___ftadd@f2,w
  3860  0FE9  00A0               	movwf	___ftpack@arg
  3861  0FEA  084E               	movf	___ftadd@f2+1,w
  3862  0FEB  00A1               	movwf	___ftpack@arg+1
  3863  0FEC  084F               	movf	___ftadd@f2+2,w
  3864  0FED  00A2               	movwf	___ftpack@arg+2
  3865  0FEE  0855               	movf	___ftadd@exp1,w
  3866  0FEF  00FF               	movwf	127
  3867  0FF0  087F               	movf	127,w
  3868  0FF1  00A3               	movwf	___ftpack@exp
  3869  0FF2  0853               	movf	___ftadd@sign,w
  3870  0FF3  00FF               	movwf	127
  3871  0FF4  087F               	movf	127,w
  3872  0FF5  00A4               	movwf	___ftpack@sign
  3873  0FF6  160A  118A  2723   	fcall	___ftpack
  3874  0FF9  0820               	movf	?___ftpack,w
  3875  0FFA  00CA               	movwf	?___ftadd
  3876  0FFB  0821               	movf	?___ftpack+1,w
  3877  0FFC  00CB               	movwf	?___ftadd+1
  3878  0FFD  0822               	movf	?___ftpack+2,w
  3879  0FFE  00CC               	movwf	?___ftadd+2
  3880  0FFF  0008               	return
  3881  1000                     __end_of___ftadd:
  3882                           
  3883                           	psect	text12
  3884  1656                     __ptext12:	
  3885 ;; *************** function _Pwm1 *****************
  3886 ;; Defined at:
  3887 ;;		line 54 in file "Pwm_Soft.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  duty            3   55[BANK0 ] float 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 300/800
  3898 ;;		On exit  : 300/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3901 ;;      Params:         0       3       0       0       0
  3902 ;;      Locals:         0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0
  3904 ;;      Totals:         0       3       0       0       0
  3905 ;;Total ram usage:        3 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    4
  3908 ;; This function calls:
  3909 ;;		___ftdiv
  3910 ;;		___ftmul
  3911 ;;		___fttol
  3912 ;; This function is called by:
  3913 ;;		_Task2
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           
  3918                           ;psect for function _Pwm1
  3919  1656                     _Pwm1:
  3920                           
  3921                           ;Pwm_Soft.c: 54: void Pwm1(float duty);Pwm_Soft.c: 55: {;Pwm_Soft.c: 57:     Act_PwmS1 =
      +                           1;
  3922                           
  3923                           ;incstack = 0
  3924                           ; Regs used in _Pwm1: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3925  1656  1683               	bsf	3,5	;RP0=1, select bank1
  3926  1657  01BE               	clrf	_Act_PwmS1^(0+128)
  3927  1658  0ABE               	incf	_Act_PwmS1^(0+128),f
  3928                           
  3929                           ;Pwm_Soft.c: 59:     Pw_PwmS1 = (duty * Per_PwmS1) / 100.0;
  3930  1659  3000               	movlw	0
  3931  165A  1283               	bcf	3,5	;RP0=0, select bank0
  3932  165B  00BB               	movwf	___ftdiv@f2
  3933  165C  30C8               	movlw	200
  3934  165D  00BC               	movwf	___ftdiv@f2+1
  3935  165E  3042               	movlw	66
  3936  165F  00BD               	movwf	___ftdiv@f2+2
  3937  1660  1683               	bsf	3,5	;RP0=1, select bank1
  3938  1661  082B               	movf	_Per_PwmS1^(0+128),w
  3939  1662  1283               	bcf	3,5	;RP0=0, select bank0
  3940  1663  00AC               	movwf	___ftmul@f1
  3941  1664  1683               	bsf	3,5	;RP0=1, select bank1
  3942  1665  082C               	movf	(_Per_PwmS1+1)^(0+128),w
  3943  1666  1283               	bcf	3,5	;RP0=0, select bank0
  3944  1667  00AD               	movwf	___ftmul@f1+1
  3945  1668  1683               	bsf	3,5	;RP0=1, select bank1
  3946  1669  082D               	movf	(_Per_PwmS1+2)^(0+128),w
  3947  166A  1283               	bcf	3,5	;RP0=0, select bank0
  3948  166B  00AE               	movwf	___ftmul@f1+2
  3949  166C  0857               	movf	Pwm1@duty,w
  3950  166D  00AF               	movwf	___ftmul@f2
  3951  166E  0858               	movf	Pwm1@duty+1,w
  3952  166F  00B0               	movwf	___ftmul@f2+1
  3953  1670  0859               	movf	Pwm1@duty+2,w
  3954  1671  00B1               	movwf	___ftmul@f2+2
  3955  1672  120A  158A  24BA  160A  118A  	fcall	___ftmul
  3956  1677  082C               	movf	?___ftmul,w
  3957  1678  00BE               	movwf	___ftdiv@f1
  3958  1679  082D               	movf	?___ftmul+1,w
  3959  167A  00BF               	movwf	___ftdiv@f1+1
  3960  167B  082E               	movf	?___ftmul+2,w
  3961  167C  00C0               	movwf	___ftdiv@f1+2
  3962  167D  120A  158A  22E0  160A  118A  	fcall	___ftdiv
  3963  1682  083B               	movf	?___ftdiv,w
  3964  1683  1683               	bsf	3,5	;RP0=1, select bank1
  3965  1684  00A8               	movwf	_Pw_PwmS1^(0+128)
  3966  1685  1283               	bcf	3,5	;RP0=0, select bank0
  3967  1686  083C               	movf	?___ftdiv+1,w
  3968  1687  1683               	bsf	3,5	;RP0=1, select bank1
  3969  1688  00A9               	movwf	(_Pw_PwmS1+1)^(0+128)
  3970  1689  1283               	bcf	3,5	;RP0=0, select bank0
  3971  168A  083D               	movf	?___ftdiv+2,w
  3972  168B  1683               	bsf	3,5	;RP0=1, select bank1
  3973  168C  00AA               	movwf	(_Pw_PwmS1+2)^(0+128)
  3974                           
  3975                           ;Pwm_Soft.c: 60:     P_W_T_S1 = Pw_PwmS1 / 0.0001;
  3976  168D  0828               	movf	_Pw_PwmS1^(0+128),w
  3977  168E  1283               	bcf	3,5	;RP0=0, select bank0
  3978  168F  00BE               	movwf	___ftdiv@f1
  3979  1690  1683               	bsf	3,5	;RP0=1, select bank1
  3980  1691  0829               	movf	(_Pw_PwmS1+1)^(0+128),w
  3981  1692  1283               	bcf	3,5	;RP0=0, select bank0
  3982  1693  00BF               	movwf	___ftdiv@f1+1
  3983  1694  1683               	bsf	3,5	;RP0=1, select bank1
  3984  1695  082A               	movf	(_Pw_PwmS1+2)^(0+128),w
  3985  1696  1283               	bcf	3,5	;RP0=0, select bank0
  3986  1697  00C0               	movwf	___ftdiv@f1+2
  3987  1698  30B7               	movlw	183
  3988  1699  00BB               	movwf	___ftdiv@f2
  3989  169A  30D1               	movlw	209
  3990  169B  00BC               	movwf	___ftdiv@f2+1
  3991  169C  3038               	movlw	56
  3992  169D  00BD               	movwf	___ftdiv@f2+2
  3993  169E  120A  158A  22E0  160A  118A  	fcall	___ftdiv
  3994  16A3  083B               	movf	?___ftdiv,w
  3995  16A4  00CA               	movwf	___fttol@f1
  3996  16A5  083C               	movf	?___ftdiv+1,w
  3997  16A6  00CB               	movwf	___fttol@f1+1
  3998  16A7  083D               	movf	?___ftdiv+2,w
  3999  16A8  00CC               	movwf	___fttol@f1+2
  4000  16A9  120A  158A  2061   	fcall	___fttol
  4001  16AC  084B               	movf	?___fttol+1,w
  4002  16AD  1683               	bsf	3,5	;RP0=1, select bank1
  4003  16AE  00B1               	movwf	(_P_W_T_S1+1)^(0+128)
  4004  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  4005  16B0  084A               	movf	?___fttol,w
  4006  16B1  1683               	bsf	3,5	;RP0=1, select bank1
  4007  16B2  00B0               	movwf	_P_W_T_S1^(0+128)
  4008                           
  4009                           ;Pwm_Soft.c: 62:     if(PwmS1 == 0) RB4=1;
  4010  16B3  0832               	movf	_PwmS1^(0+128),w
  4011  16B4  0433               	iorwf	(_PwmS1+1)^(0+128),w
  4012  16B5  1283               	bcf	3,5	;RP0=0, select bank0
  4013  16B6  1903               	btfsc	3,2
  4014  16B7  1606               	bsf	6,4	;volatile
  4015                           
  4016                           ;Pwm_Soft.c: 65:     TMR1ON = 1;
  4017  16B8  1283               	bcf	3,5	;RP0=0, select bank0
  4018  16B9  1410               	bsf	16,0	;volatile
  4019                           
  4020                           ;Pwm_Soft.c: 67:     return;
  4021  16BA  0008               	return
  4022  16BB                     __end_of_Pwm1:
  4023                           
  4024                           	psect	text13
  4025  0809                     __ptext13:	
  4026 ;; *************** function _Task1 *****************
  4027 ;; Defined at:
  4028 ;;		line 9 in file "Task_Control.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  Estado          1    wreg     PTR unsigned char 
  4031 ;;		 -> MP_Pulv@Maq_task1(1), 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  Estado          1   72[BANK0 ] PTR unsigned char 
  4034 ;;		 -> MP_Pulv@Maq_task1(1), 
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 300/800
  4041 ;;		On exit  : B00/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4044 ;;      Params:         0       0       0       0       0
  4045 ;;      Locals:         0       1       0       0       0
  4046 ;;      Temps:          0       0       0       0       0
  4047 ;;      Totals:         0       1       0       0       0
  4048 ;;Total ram usage:        1 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    6
  4051 ;; This function calls:
  4052 ;;		_E_Task1_Min
  4053 ;;		_E_Task1_Pwm
  4054 ;;		_E_Task1_Rpm
  4055 ;;		_E_Task1_Temp
  4056 ;; This function is called by:
  4057 ;;		_MP_Pulv
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _Task1
  4063  0809                     _Task1:
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _Task1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4067                           ;Task1@Estado stored from wreg
  4068  0809  00E8               	movwf	Task1@Estado
  4069                           
  4070                           ;Task_Control.c: 9: void Task1(unsigned char *Estado);Task_Control.c: 10: {;Task_Control
      +                          .c: 12:     if(*Estado == 1 && (Modo == 1 || Modo == 3 || Modo == 2)) E_Task1_Rpm();
  4071  080A  0868               	movf	Task1@Estado,w
  4072  080B  0084               	movwf	4
  4073  080C  1383               	bcf	3,7	;select IRP bank0
  4074  080D  0300               	decf	0,w
  4075  080E  1D03               	btfss	3,2
  4076  080F  2821               	goto	l4696
  4077  0810  0377               	decf	_Modo,w
  4078  0811  1903               	btfsc	3,2
  4079  0812  281B               	goto	l4694
  4080  0813  3003               	movlw	3
  4081  0814  0677               	xorwf	_Modo,w
  4082  0815  1903               	btfsc	3,2
  4083  0816  281B               	goto	l4694
  4084  0817  3002               	movlw	2
  4085  0818  0677               	xorwf	_Modo,w
  4086  0819  1D03               	btfss	3,2
  4087  081A  2821               	goto	l4696
  4088  081B                     l4694:
  4089  081B  120A  118A  21E0  120A  158A  	fcall	_E_Task1_Rpm
  4090  0820  284E               	goto	l4714
  4091  0821                     l4696:
  4092  0821  0868               	movf	Task1@Estado,w
  4093  0822  0084               	movwf	4
  4094  0823  3002               	movlw	2
  4095  0824  0600               	xorwf	0,w
  4096  0825  1D03               	btfss	3,2
  4097  0826  2834               	goto	l4704
  4098  0827  0377               	decf	_Modo,w
  4099  0828  1903               	btfsc	3,2
  4100  0829  282E               	goto	l4702
  4101  082A  3003               	movlw	3
  4102  082B  0677               	xorwf	_Modo,w
  4103  082C  1D03               	btfss	3,2
  4104  082D  2834               	goto	l4704
  4105  082E                     l4702:
  4106  082E  120A  158A  2412  120A  158A  	fcall	_E_Task1_Pwm
  4107  0833  284E               	goto	l4714
  4108  0834                     l4704:
  4109  0834  0868               	movf	Task1@Estado,w
  4110  0835  0084               	movwf	4
  4111  0836  3003               	movlw	3
  4112  0837  0600               	xorwf	0,w
  4113  0838  1D03               	btfss	3,2
  4114  0839  2843               	goto	l4710
  4115  083A  0876               	movf	_Out_E,w
  4116  083B  1D03               	btfss	3,2
  4117  083C  2843               	goto	l4710
  4118  083D  120A  118A  24B1  120A  158A  	fcall	_E_Task1_Min
  4119  0842  284E               	goto	l4714
  4120  0843                     l4710:
  4121  0843  0868               	movf	Task1@Estado,w
  4122  0844  0084               	movwf	4
  4123  0845  3004               	movlw	4
  4124  0846  0600               	xorwf	0,w
  4125  0847  1D03               	btfss	3,2
  4126  0848  284E               	goto	l4714
  4127  0849  120A  158A  225A  120A  158A  	fcall	_E_Task1_Temp
  4128  084E                     l4714:
  4129                           
  4130                           ;Task_Control.c: 20:     *Estado+=1;
  4131  084E  3001               	movlw	1
  4132  084F  00FF               	movwf	127
  4133  0850  1283               	bcf	3,5	;RP0=0, select bank0
  4134  0851  0868               	movf	Task1@Estado,w
  4135  0852  0084               	movwf	4
  4136  0853  087F               	movf	127,w
  4137  0854  1383               	bcf	3,7	;select IRP bank0
  4138  0855  0780               	addwf	0,f
  4139                           
  4140                           ;Task_Control.c: 21:     if(*Estado == 5) *Estado = 1;
  4141  0856  0868               	movf	Task1@Estado,w
  4142  0857  0084               	movwf	4
  4143  0858  3005               	movlw	5
  4144  0859  0600               	xorwf	0,w
  4145  085A  1D03               	btfss	3,2
  4146  085B  0008               	return
  4147  085C  0868               	movf	Task1@Estado,w
  4148  085D  0084               	movwf	4
  4149  085E  0180               	clrf	0
  4150  085F  0A80               	incf	0,f
  4151  0860  0008               	return
  4152  0861                     __end_of_Task1:
  4153                           
  4154                           	psect	text14
  4155  0A5A                     __ptext14:	
  4156 ;; *************** function _E_Task1_Temp *****************
  4157 ;; Defined at:
  4158 ;;		line 111 in file "Task_Control.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  buffer         10   57[BANK0 ] unsigned char [10]
  4163 ;;  aux             1   70[BANK0 ] unsigned char 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      void 
  4166 ;; Registers used:
  4167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : B00/0
  4170 ;;		On exit  : 300/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4173 ;;      Params:         0       0       0       0       0
  4174 ;;      Locals:         0      14       0       0       0
  4175 ;;      Temps:          0       2       0       0       0
  4176 ;;      Totals:         0      16       0       0       0
  4177 ;;Total ram usage:       16 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    5
  4180 ;; This function calls:
  4181 ;;		_Adc
  4182 ;;		_LCD_array
  4183 ;;		___awtoft
  4184 ;;		___ftdiv
  4185 ;;		___ftmul
  4186 ;;		___fttol
  4187 ;;		_sprintf
  4188 ;; This function is called by:
  4189 ;;		_Task1
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _E_Task1_Temp
  4195  0A5A                     _E_Task1_Temp:
  4196                           
  4197                           ;Task_Control.c: 113:     char buffer[10];;Task_Control.c: 114:     unsigned char aux;;T
      +                          ask_Control.c: 115:     aux = Temp;
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _E_Task1_Temp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4201  0A5A  1683               	bsf	3,5	;RP0=1, select bank1
  4202  0A5B  0843               	movf	_Temp^(0+128),w
  4203  0A5C  00FF               	movwf	127
  4204  0A5D  087F               	movf	127,w
  4205  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0A5F  00E6               	movwf	E_Task1_Temp@aux
  4207                           
  4208                           ;Task_Control.c: 116:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  4209  0A60  3003               	movlw	3
  4210  0A61  160A  118A  260C  120A  158A  	fcall	_Adc
  4211  0A66  0875               	movf	?_Adc+1,w
  4212  0A67  00A9               	movwf	___awtoft@c+1
  4213  0A68  0874               	movf	?_Adc,w
  4214  0A69  00A8               	movwf	___awtoft@c
  4215  0A6A  160A  118A  23F7  120A  158A  	fcall	___awtoft
  4216  0A6F  0828               	movf	?___awtoft,w
  4217  0A70  00AF               	movwf	___ftmul@f2
  4218  0A71  0829               	movf	?___awtoft+1,w
  4219  0A72  00B0               	movwf	___ftmul@f2+1
  4220  0A73  082A               	movf	?___awtoft+2,w
  4221  0A74  00B1               	movwf	___ftmul@f2+2
  4222  0A75  3000               	movlw	0
  4223  0A76  00AC               	movwf	___ftmul@f1
  4224  0A77  30A0               	movlw	160
  4225  0A78  00AD               	movwf	___ftmul@f1+1
  4226  0A79  3040               	movlw	64
  4227  0A7A  00AE               	movwf	___ftmul@f1+2
  4228  0A7B  120A  158A  24BA  120A  158A  	fcall	___ftmul
  4229  0A80  082C               	movf	?___ftmul,w
  4230  0A81  00BE               	movwf	___ftdiv@f1
  4231  0A82  082D               	movf	?___ftmul+1,w
  4232  0A83  00BF               	movwf	___ftdiv@f1+1
  4233  0A84  082E               	movf	?___ftmul+2,w
  4234  0A85  00C0               	movwf	___ftdiv@f1+2
  4235  0A86  30C0               	movlw	192
  4236  0A87  00BB               	movwf	___ftdiv@f2
  4237  0A88  307F               	movlw	127
  4238  0A89  00BC               	movwf	___ftdiv@f2+1
  4239  0A8A  3044               	movlw	68
  4240  0A8B  00BD               	movwf	___ftdiv@f2+2
  4241  0A8C  120A  158A  22E0  120A  158A  	fcall	___ftdiv
  4242  0A91  083B               	movf	?___ftdiv,w
  4243  0A92  00E3               	movwf	_E_Task1_Temp$1289
  4244  0A93  083C               	movf	?___ftdiv+1,w
  4245  0A94  00E4               	movwf	_E_Task1_Temp$1289+1
  4246  0A95  083D               	movf	?___ftdiv+2,w
  4247  0A96  00E5               	movwf	_E_Task1_Temp$1289+2
  4248                           
  4249                           ;Task_Control.c: 116:     Temp = (int)((Adc(3)*5.0/1023.0)*100.0);
  4250  0A97  0863               	movf	_E_Task1_Temp$1289,w
  4251  0A98  00AF               	movwf	___ftmul@f2
  4252  0A99  0864               	movf	_E_Task1_Temp$1289+1,w
  4253  0A9A  00B0               	movwf	___ftmul@f2+1
  4254  0A9B  0865               	movf	_E_Task1_Temp$1289+2,w
  4255  0A9C  00B1               	movwf	___ftmul@f2+2
  4256  0A9D  3000               	movlw	0
  4257  0A9E  00AC               	movwf	___ftmul@f1
  4258  0A9F  30C8               	movlw	200
  4259  0AA0  00AD               	movwf	___ftmul@f1+1
  4260  0AA1  3042               	movlw	66
  4261  0AA2  00AE               	movwf	___ftmul@f1+2
  4262  0AA3  120A  158A  24BA  120A  158A  	fcall	___ftmul
  4263  0AA8  082C               	movf	?___ftmul,w
  4264  0AA9  00CA               	movwf	___fttol@f1
  4265  0AAA  082D               	movf	?___ftmul+1,w
  4266  0AAB  00CB               	movwf	___fttol@f1+1
  4267  0AAC  082E               	movf	?___ftmul+2,w
  4268  0AAD  00CC               	movwf	___fttol@f1+2
  4269  0AAE  120A  158A  2061  120A  158A  	fcall	___fttol
  4270  0AB3  084A               	movf	?___fttol,w
  4271  0AB4  00FF               	movwf	127
  4272  0AB5  087F               	movf	127,w
  4273  0AB6  1683               	bsf	3,5	;RP0=1, select bank1
  4274  0AB7  00C3               	movwf	_Temp^(0+128)
  4275                           
  4276                           ;Task_Control.c: 117:     if(Temp != aux)
  4277  0AB8  0843               	movf	_Temp^(0+128),w
  4278  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
  4279  0ABA  0666               	xorwf	E_Task1_Temp@aux,w
  4280  0ABB  1903               	skipnz
  4281  0ABC  0008               	return
  4282                           
  4283                           ;Task_Control.c: 118:     {;Task_Control.c: 119:         sprintf(buffer,"%02d",Temp);
  4284  0ABD  30AE               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  4285  0ABE  00FF               	movwf	127
  4286  0ABF  087F               	movf	127,w
  4287  0AC0  00AB               	movwf	sprintf@f
  4288  0AC1  1683               	bsf	3,5	;RP0=1, select bank1
  4289  0AC2  0843               	movf	_Temp^(0+128),w
  4290  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  4291  0AC4  00D7               	movwf	??_E_Task1_Temp
  4292  0AC5  01D8               	clrf	??_E_Task1_Temp+1
  4293  0AC6  0857               	movf	??_E_Task1_Temp,w
  4294  0AC7  00AC               	movwf	?_sprintf+1
  4295  0AC8  0858               	movf	??_E_Task1_Temp+1,w
  4296  0AC9  00AD               	movwf	?_sprintf+2
  4297  0ACA  3059               	movlw	(low (E_Task1_Temp@buffer| 0))& (0+255)
  4298  0ACB  120A  118A  202F  120A  158A  	fcall	_sprintf
  4299                           
  4300                           ;Task_Control.c: 120:         LCD_array(4,13,buffer);
  4301  0AD0  3004               	movlw	4
  4302  0AD1  00A2               	movwf	LCD_array@x
  4303  0AD2  3000               	movlw	0
  4304  0AD3  00A3               	movwf	LCD_array@x+1
  4305  0AD4  300D               	movlw	13
  4306  0AD5  00A4               	movwf	LCD_array@y
  4307  0AD6  3000               	movlw	0
  4308  0AD7  00A5               	movwf	LCD_array@y+1
  4309  0AD8  3059               	movlw	(low (E_Task1_Temp@buffer| 0))& (0+255)
  4310  0AD9  00A6               	movwf	LCD_array@date
  4311  0ADA  3000               	movlw	0
  4312  0ADB  00A7               	movwf	LCD_array@date+1
  4313  0ADC  160A  118A  26BB   	fcall	_LCD_array
  4314  0ADF  0008               	return
  4315  0AE0                     __end_of_E_Task1_Temp:
  4316                           
  4317                           	psect	text15
  4318  01E0                     __ptext15:	
  4319 ;; *************** function _E_Task1_Rpm *****************
  4320 ;; Defined at:
  4321 ;;		line 28 in file "Task_Control.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  buffer         10    0[BANK1 ] unsigned char [10]
  4326 ;;  valor           2   21[BANK1 ] unsigned int 
  4327 ;;  dec_m           2   19[BANK1 ] unsigned int 
  4328 ;;  uni_m           2   17[BANK1 ] unsigned int 
  4329 ;;  cent            2   15[BANK1 ] unsigned int 
  4330 ;;  aux             2   13[BANK1 ] unsigned int 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : B00/0
  4337 ;;		On exit  : 200/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4340 ;;      Params:         0       0       0       0       0
  4341 ;;      Locals:         0       0      23       0       0
  4342 ;;      Temps:          0       4       0       0       0
  4343 ;;      Totals:         0       4      23       0       0
  4344 ;;Total ram usage:       27 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    5
  4347 ;; This function calls:
  4348 ;;		_Adc
  4349 ;;		_LCD_array
  4350 ;;		___awtoft
  4351 ;;		___ftdiv
  4352 ;;		___ftmul
  4353 ;;		___fttol
  4354 ;;		___lwdiv
  4355 ;;		___wmul
  4356 ;;		_sprintf
  4357 ;; This function is called by:
  4358 ;;		_Task1
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _E_Task1_Rpm
  4364  01E0                     _E_Task1_Rpm:
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _E_Task1_Rpm: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4368  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  4369  01E1  01D8               	clrf	E_Task1_Rpm@dec_m^(0+128)
  4370  01E2  01D9               	clrf	(E_Task1_Rpm@dec_m+1)^(0+128)
  4371  01E3  01D6               	clrf	E_Task1_Rpm@uni_m^(0+128)
  4372  01E4  01D7               	clrf	(E_Task1_Rpm@uni_m+1)^(0+128)
  4373                           
  4374                           ;Task_Control.c: 33:     aux = Rpm;
  4375  01E5  0837               	movf	(_Rpm+1)^(0+128),w
  4376  01E6  00D3               	movwf	(E_Task1_Rpm@aux+1)^(0+128)
  4377  01E7  0836               	movf	_Rpm^(0+128),w
  4378  01E8  00D2               	movwf	E_Task1_Rpm@aux^(0+128)
  4379                           
  4380                           ;Task_Control.c: 34:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  4381  01E9  3000               	movlw	0
  4382  01EA  160A  118A  260C  120A  118A  	fcall	_Adc
  4383  01EF  0875               	movf	?_Adc+1,w
  4384  01F0  00A9               	movwf	___awtoft@c+1
  4385  01F1  0874               	movf	?_Adc,w
  4386  01F2  00A8               	movwf	___awtoft@c
  4387  01F3  160A  118A  23F7  120A  118A  	fcall	___awtoft
  4388  01F8  0828               	movf	?___awtoft,w
  4389  01F9  00AF               	movwf	___ftmul@f2
  4390  01FA  0829               	movf	?___awtoft+1,w
  4391  01FB  00B0               	movwf	___ftmul@f2+1
  4392  01FC  082A               	movf	?___awtoft+2,w
  4393  01FD  00B1               	movwf	___ftmul@f2+2
  4394  01FE  3000               	movlw	0
  4395  01FF  00AC               	movwf	___ftmul@f1
  4396  0200  30A0               	movlw	160
  4397  0201  00AD               	movwf	___ftmul@f1+1
  4398  0202  3040               	movlw	64
  4399  0203  00AE               	movwf	___ftmul@f1+2
  4400  0204  120A  158A  24BA  120A  118A  	fcall	___ftmul
  4401  0209  082C               	movf	?___ftmul,w
  4402  020A  00BE               	movwf	___ftdiv@f1
  4403  020B  082D               	movf	?___ftmul+1,w
  4404  020C  00BF               	movwf	___ftdiv@f1+1
  4405  020D  082E               	movf	?___ftmul+2,w
  4406  020E  00C0               	movwf	___ftdiv@f1+2
  4407  020F  30C0               	movlw	192
  4408  0210  00BB               	movwf	___ftdiv@f2
  4409  0211  307F               	movlw	127
  4410  0212  00BC               	movwf	___ftdiv@f2+1
  4411  0213  3044               	movlw	68
  4412  0214  00BD               	movwf	___ftdiv@f2+2
  4413  0215  120A  158A  22E0  120A  118A  	fcall	___ftdiv
  4414  021A  083B               	movf	?___ftdiv,w
  4415  021B  1683               	bsf	3,5	;RP0=1, select bank1
  4416  021C  00CF               	movwf	_E_Task1_Rpm$1286^(0+128)
  4417  021D  1283               	bcf	3,5	;RP0=0, select bank0
  4418  021E  083C               	movf	?___ftdiv+1,w
  4419  021F  1683               	bsf	3,5	;RP0=1, select bank1
  4420  0220  00D0               	movwf	(_E_Task1_Rpm$1286+1)^(0+128)
  4421  0221  1283               	bcf	3,5	;RP0=0, select bank0
  4422  0222  083D               	movf	?___ftdiv+2,w
  4423  0223  1683               	bsf	3,5	;RP0=1, select bank1
  4424  0224  00D1               	movwf	(_E_Task1_Rpm$1286+2)^(0+128)
  4425                           
  4426                           ;Task_Control.c: 34:     valor = (int)((Adc(0)*5.0/1023.0)*10000.0/5.0);
  4427  0225  084F               	movf	_E_Task1_Rpm$1286^(0+128),w
  4428  0226  1283               	bcf	3,5	;RP0=0, select bank0
  4429  0227  00AF               	movwf	___ftmul@f2
  4430  0228  1683               	bsf	3,5	;RP0=1, select bank1
  4431  0229  0850               	movf	(_E_Task1_Rpm$1286+1)^(0+128),w
  4432  022A  1283               	bcf	3,5	;RP0=0, select bank0
  4433  022B  00B0               	movwf	___ftmul@f2+1
  4434  022C  1683               	bsf	3,5	;RP0=1, select bank1
  4435  022D  0851               	movf	(_E_Task1_Rpm$1286+2)^(0+128),w
  4436  022E  1283               	bcf	3,5	;RP0=0, select bank0
  4437  022F  00B1               	movwf	___ftmul@f2+2
  4438  0230  3040               	movlw	64
  4439  0231  00AC               	movwf	___ftmul@f1
  4440  0232  301C               	movlw	28
  4441  0233  00AD               	movwf	___ftmul@f1+1
  4442  0234  3046               	movlw	70
  4443  0235  00AE               	movwf	___ftmul@f1+2
  4444  0236  120A  158A  24BA  120A  118A  	fcall	___ftmul
  4445  023B  082C               	movf	?___ftmul,w
  4446  023C  00BE               	movwf	___ftdiv@f1
  4447  023D  082D               	movf	?___ftmul+1,w
  4448  023E  00BF               	movwf	___ftdiv@f1+1
  4449  023F  082E               	movf	?___ftmul+2,w
  4450  0240  00C0               	movwf	___ftdiv@f1+2
  4451  0241  3000               	movlw	0
  4452  0242  00BB               	movwf	___ftdiv@f2
  4453  0243  30A0               	movlw	160
  4454  0244  00BC               	movwf	___ftdiv@f2+1
  4455  0245  3040               	movlw	64
  4456  0246  00BD               	movwf	___ftdiv@f2+2
  4457  0247  120A  158A  22E0  120A  118A  	fcall	___ftdiv
  4458  024C  083B               	movf	?___ftdiv,w
  4459  024D  00CA               	movwf	___fttol@f1
  4460  024E  083C               	movf	?___ftdiv+1,w
  4461  024F  00CB               	movwf	___fttol@f1+1
  4462  0250  083D               	movf	?___ftdiv+2,w
  4463  0251  00CC               	movwf	___fttol@f1+2
  4464  0252  120A  158A  2061  120A  118A  	fcall	___fttol
  4465  0257  084B               	movf	?___fttol+1,w
  4466  0258  1683               	bsf	3,5	;RP0=1, select bank1
  4467  0259  00DB               	movwf	(E_Task1_Rpm@valor+1)^(0+128)
  4468  025A  1283               	bcf	3,5	;RP0=0, select bank0
  4469  025B  084A               	movf	?___fttol,w
  4470  025C  1683               	bsf	3,5	;RP0=1, select bank1
  4471  025D  00DA               	movwf	E_Task1_Rpm@valor^(0+128)
  4472                           
  4473                           ;Task_Control.c: 36:     dec_m = (int)(valor/10000)*10000;
  4474  025E  3010               	movlw	16
  4475  025F  1283               	bcf	3,5	;RP0=0, select bank0
  4476  0260  00A0               	movwf	___lwdiv@divisor
  4477  0261  3027               	movlw	39
  4478  0262  00A1               	movwf	___lwdiv@divisor+1
  4479  0263  1683               	bsf	3,5	;RP0=1, select bank1
  4480  0264  085B               	movf	(E_Task1_Rpm@valor+1)^(0+128),w
  4481  0265  1283               	bcf	3,5	;RP0=0, select bank0
  4482  0266  00A3               	movwf	___lwdiv@dividend+1
  4483  0267  1683               	bsf	3,5	;RP0=1, select bank1
  4484  0268  085A               	movf	E_Task1_Rpm@valor^(0+128),w
  4485  0269  1283               	bcf	3,5	;RP0=0, select bank0
  4486  026A  00A2               	movwf	___lwdiv@dividend
  4487  026B  160A  118A  24FC  120A  118A  	fcall	___lwdiv
  4488  0270  0821               	movf	?___lwdiv+1,w
  4489  0271  00A8               	movwf	___wmul@multiplier+1
  4490  0272  0820               	movf	?___lwdiv,w
  4491  0273  00A7               	movwf	___wmul@multiplier
  4492  0274  3010               	movlw	16
  4493  0275  00A9               	movwf	___wmul@multiplicand
  4494  0276  3027               	movlw	39
  4495  0277  00AA               	movwf	___wmul@multiplicand+1
  4496  0278  160A  118A  2418  120A  118A  	fcall	___wmul
  4497  027D  0828               	movf	?___wmul+1,w
  4498  027E  1683               	bsf	3,5	;RP0=1, select bank1
  4499  027F  00D9               	movwf	(E_Task1_Rpm@dec_m+1)^(0+128)
  4500  0280  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0281  0827               	movf	?___wmul,w
  4502  0282  1683               	bsf	3,5	;RP0=1, select bank1
  4503  0283  00D8               	movwf	E_Task1_Rpm@dec_m^(0+128)
  4504                           
  4505                           ;Task_Control.c: 37:     uni_m = (int)((valor-dec_m)/1000)*1000;
  4506  0284  30E8               	movlw	232
  4507  0285  1283               	bcf	3,5	;RP0=0, select bank0
  4508  0286  00A0               	movwf	___lwdiv@divisor
  4509  0287  3003               	movlw	3
  4510  0288  00A1               	movwf	___lwdiv@divisor+1
  4511  0289  1683               	bsf	3,5	;RP0=1, select bank1
  4512  028A  0858               	movf	E_Task1_Rpm@dec_m^(0+128),w
  4513  028B  025A               	subwf	E_Task1_Rpm@valor^(0+128),w
  4514  028C  1283               	bcf	3,5	;RP0=0, select bank0
  4515  028D  00A2               	movwf	___lwdiv@dividend
  4516  028E  1683               	bsf	3,5	;RP0=1, select bank1
  4517  028F  0859               	movf	(E_Task1_Rpm@dec_m+1)^(0+128),w
  4518  0290  1C03               	skipc
  4519  0291  0A59               	incf	(E_Task1_Rpm@dec_m+1)^(0+128),w
  4520  0292  025B               	subwf	(E_Task1_Rpm@valor+1)^(0+128),w
  4521  0293  1283               	bcf	3,5	;RP0=0, select bank0
  4522  0294  00A3               	movwf	___lwdiv@dividend+1
  4523  0295  160A  118A  24FC  120A  118A  	fcall	___lwdiv
  4524  029A  0821               	movf	?___lwdiv+1,w
  4525  029B  00A8               	movwf	___wmul@multiplier+1
  4526  029C  0820               	movf	?___lwdiv,w
  4527  029D  00A7               	movwf	___wmul@multiplier
  4528  029E  30E8               	movlw	232
  4529  029F  00A9               	movwf	___wmul@multiplicand
  4530  02A0  3003               	movlw	3
  4531  02A1  00AA               	movwf	___wmul@multiplicand+1
  4532  02A2  160A  118A  2418  120A  118A  	fcall	___wmul
  4533  02A7  0828               	movf	?___wmul+1,w
  4534  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  4535  02A9  00D7               	movwf	(E_Task1_Rpm@uni_m+1)^(0+128)
  4536  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  4537  02AB  0827               	movf	?___wmul,w
  4538  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  4539  02AD  00D6               	movwf	E_Task1_Rpm@uni_m^(0+128)
  4540                           
  4541                           ;Task_Control.c: 38:     cent = (int)((valor-(uni_m+dec_m))/100)*100;
  4542  02AE  3064               	movlw	100
  4543  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  4544  02B0  00A0               	movwf	___lwdiv@divisor
  4545  02B1  3000               	movlw	0
  4546  02B2  00A1               	movwf	___lwdiv@divisor+1
  4547  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  4548  02B4  0956               	comf	E_Task1_Rpm@uni_m^(0+128),w
  4549  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  4550  02B6  00D7               	movwf	??_E_Task1_Rpm
  4551  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  4552  02B8  0957               	comf	(E_Task1_Rpm@uni_m+1)^(0+128),w
  4553  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  4554  02BA  00D8               	movwf	??_E_Task1_Rpm+1
  4555  02BB  0AD7               	incf	??_E_Task1_Rpm,f
  4556  02BC  1903               	skipnz
  4557  02BD  0AD8               	incf	??_E_Task1_Rpm+1,f
  4558  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  4559  02BF  0858               	movf	E_Task1_Rpm@dec_m^(0+128),w
  4560  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  4561  02C1  0257               	subwf	??_E_Task1_Rpm,w
  4562  02C2  00D9               	movwf	??_E_Task1_Rpm+2
  4563  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  4564  02C4  0859               	movf	(E_Task1_Rpm@dec_m+1)^(0+128),w
  4565  02C5  1C03               	skipc
  4566  02C6  0A59               	incf	(E_Task1_Rpm@dec_m+1)^(0+128),w
  4567  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  4568  02C8  0258               	subwf	??_E_Task1_Rpm+1,w
  4569  02C9  00DA               	movwf	??_E_Task1_Rpm+3
  4570  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  4571  02CB  085A               	movf	E_Task1_Rpm@valor^(0+128),w
  4572  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  4573  02CD  0759               	addwf	??_E_Task1_Rpm+2,w
  4574  02CE  00A2               	movwf	___lwdiv@dividend
  4575  02CF  1683               	bsf	3,5	;RP0=1, select bank1
  4576  02D0  085B               	movf	(E_Task1_Rpm@valor+1)^(0+128),w
  4577  02D1  1803               	skipnc
  4578  02D2  0A5B               	incf	(E_Task1_Rpm@valor+1)^(0+128),w
  4579  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  4580  02D4  075A               	addwf	??_E_Task1_Rpm+3,w
  4581  02D5  00A3               	movwf	___lwdiv@dividend+1
  4582  02D6  160A  118A  24FC  120A  118A  	fcall	___lwdiv
  4583  02DB  0821               	movf	?___lwdiv+1,w
  4584  02DC  00A8               	movwf	___wmul@multiplier+1
  4585  02DD  0820               	movf	?___lwdiv,w
  4586  02DE  00A7               	movwf	___wmul@multiplier
  4587  02DF  3064               	movlw	100
  4588  02E0  00A9               	movwf	___wmul@multiplicand
  4589  02E1  3000               	movlw	0
  4590  02E2  00AA               	movwf	___wmul@multiplicand+1
  4591  02E3  160A  118A  2418  120A  118A  	fcall	___wmul
  4592  02E8  0828               	movf	?___wmul+1,w
  4593  02E9  1683               	bsf	3,5	;RP0=1, select bank1
  4594  02EA  00D5               	movwf	(E_Task1_Rpm@cent+1)^(0+128)
  4595  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  4596  02EC  0827               	movf	?___wmul,w
  4597  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  4598  02EE  00D4               	movwf	E_Task1_Rpm@cent^(0+128)
  4599                           
  4600                           ;Task_Control.c: 40:     valor = cent+uni_m+dec_m;
  4601  02EF  0856               	movf	E_Task1_Rpm@uni_m^(0+128),w
  4602  02F0  0754               	addwf	E_Task1_Rpm@cent^(0+128),w
  4603  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  4604  02F2  00D7               	movwf	??_E_Task1_Rpm
  4605  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  4606  02F4  0857               	movf	(E_Task1_Rpm@uni_m+1)^(0+128),w
  4607  02F5  1803               	skipnc
  4608  02F6  0A57               	incf	(E_Task1_Rpm@uni_m+1)^(0+128),w
  4609  02F7  0755               	addwf	(E_Task1_Rpm@cent+1)^(0+128),w
  4610  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  4611  02F9  00D8               	movwf	??_E_Task1_Rpm+1
  4612  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  4613  02FB  0858               	movf	E_Task1_Rpm@dec_m^(0+128),w
  4614  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  4615  02FD  0757               	addwf	??_E_Task1_Rpm,w
  4616  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  4617  02FF  00DA               	movwf	E_Task1_Rpm@valor^(0+128)
  4618  0300  0859               	movf	(E_Task1_Rpm@dec_m+1)^(0+128),w
  4619  0301  1803               	skipnc
  4620  0302  0A59               	incf	(E_Task1_Rpm@dec_m+1)^(0+128),w
  4621  0303  1283               	bcf	3,5	;RP0=0, select bank0
  4622  0304  0758               	addwf	??_E_Task1_Rpm+1,w
  4623  0305  1683               	bsf	3,5	;RP0=1, select bank1
  4624  0306  00DB               	movwf	(E_Task1_Rpm@valor+1)^(0+128)
  4625                           
  4626                           ;Task_Control.c: 41:     Rpm = valor;
  4627  0307  085B               	movf	(E_Task1_Rpm@valor+1)^(0+128),w
  4628  0308  00B7               	movwf	(_Rpm+1)^(0+128)
  4629  0309  085A               	movf	E_Task1_Rpm@valor^(0+128),w
  4630  030A  00B6               	movwf	_Rpm^(0+128)
  4631                           
  4632                           ;Task_Control.c: 43:     if(Rpm == 0) Rpm = 60;
  4633  030B  0836               	movf	_Rpm^(0+128),w
  4634  030C  0437               	iorwf	(_Rpm+1)^(0+128),w
  4635  030D  1D03               	btfss	3,2
  4636  030E  2B13               	goto	l4504
  4637  030F  303C               	movlw	60
  4638  0310  00B6               	movwf	_Rpm^(0+128)
  4639  0311  3000               	movlw	0
  4640  0312  2B1D               	goto	L1
  4641  0313                     l4504:
  4642  0313  3027               	movlw	39
  4643  0314  0237               	subwf	(_Rpm+1)^(0+128),w
  4644  0315  3011               	movlw	17
  4645  0316  1903               	skipnz
  4646  0317  0236               	subwf	_Rpm^(0+128),w
  4647  0318  1C03               	skipc
  4648  0319  2B1E               	goto	l341
  4649  031A  3010               	movlw	16
  4650  031B  00B6               	movwf	_Rpm^(0+128)
  4651  031C  3027               	movlw	39
  4652  031D                     L1:
  4653  031D  00B7               	movwf	(_Rpm^(0+128)+1)
  4654  031E                     l341:
  4655                           
  4656                           ;Task_Control.c: 46:     if(Rpm != aux)
  4657  031E  0853               	movf	(E_Task1_Rpm@aux+1)^(0+128),w
  4658  031F  0637               	xorwf	(_Rpm+1)^(0+128),w
  4659  0320  1D03               	skipz
  4660  0321  2B24               	goto	u5315
  4661  0322  0852               	movf	E_Task1_Rpm@aux^(0+128),w
  4662  0323  0636               	xorwf	_Rpm^(0+128),w
  4663  0324                     u5315:
  4664  0324  1903               	skipnz
  4665  0325  0008               	return
  4666                           
  4667                           ;Task_Control.c: 47:     {;Task_Control.c: 48:         sprintf(buffer,"%05u",Rpm);
  4668  0326  30B3               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  4669  0327  00FF               	movwf	127
  4670  0328  087F               	movf	127,w
  4671  0329  1283               	bcf	3,5	;RP0=0, select bank0
  4672  032A  00AB               	movwf	sprintf@f
  4673  032B  1683               	bsf	3,5	;RP0=1, select bank1
  4674  032C  0837               	movf	(_Rpm+1)^(0+128),w
  4675  032D  1283               	bcf	3,5	;RP0=0, select bank0
  4676  032E  00AD               	movwf	?_sprintf+2
  4677  032F  1683               	bsf	3,5	;RP0=1, select bank1
  4678  0330  0836               	movf	_Rpm^(0+128),w
  4679  0331  1283               	bcf	3,5	;RP0=0, select bank0
  4680  0332  00AC               	movwf	?_sprintf+1
  4681  0333  30C5               	movlw	(low (E_Task1_Rpm@buffer| 0))& (0+255)
  4682  0334  120A  118A  202F  120A  118A  	fcall	_sprintf
  4683                           
  4684                           ;Task_Control.c: 49:         LCD_array(1,5,buffer);
  4685  0339  3001               	movlw	1
  4686  033A  00A2               	movwf	LCD_array@x
  4687  033B  3000               	movlw	0
  4688  033C  00A3               	movwf	LCD_array@x+1
  4689  033D  3005               	movlw	5
  4690  033E  00A4               	movwf	LCD_array@y
  4691  033F  3000               	movlw	0
  4692  0340  00A5               	movwf	LCD_array@y+1
  4693  0341  30C5               	movlw	(low (E_Task1_Rpm@buffer| 0))& (0+255)
  4694  0342  00A6               	movwf	LCD_array@date
  4695  0343  3000               	movlw	0
  4696  0344  00A7               	movwf	LCD_array@date+1
  4697  0345  160A  118A  26BB   	fcall	_LCD_array
  4698  0348  0008               	return
  4699  0349                     __end_of_E_Task1_Rpm:
  4700                           
  4701                           	psect	text16
  4702  0C12                     __ptext16:	
  4703 ;; *************** function _E_Task1_Pwm *****************
  4704 ;; Defined at:
  4705 ;;		line 57 in file "Task_Control.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;  buffer         10   57[BANK0 ] unsigned char [10]
  4710 ;;  aux             1   70[BANK0 ] unsigned char 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : B00/0
  4717 ;;		On exit  : 300/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4720 ;;      Params:         0       0       0       0       0
  4721 ;;      Locals:         0      14       0       0       0
  4722 ;;      Temps:          0       2       0       0       0
  4723 ;;      Totals:         0      16       0       0       0
  4724 ;;Total ram usage:       16 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    5
  4727 ;; This function calls:
  4728 ;;		_Adc
  4729 ;;		_LCD_array
  4730 ;;		___awtoft
  4731 ;;		___ftdiv
  4732 ;;		___ftmul
  4733 ;;		___fttol
  4734 ;;		_sprintf
  4735 ;; This function is called by:
  4736 ;;		_Task1
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           
  4741                           ;psect for function _E_Task1_Pwm
  4742  0C12                     _E_Task1_Pwm:
  4743                           
  4744                           ;Task_Control.c: 59:     char buffer[10],aux;;Task_Control.c: 60:     aux = Pwm;
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _E_Task1_Pwm: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4748  0C12  0879               	movf	_Pwm,w
  4749  0C13  00FF               	movwf	127
  4750  0C14  087F               	movf	127,w
  4751  0C15  00E6               	movwf	E_Task1_Pwm@aux
  4752                           
  4753                           ;Task_Control.c: 62:     if(Modo == 1)
  4754  0C16  0377               	decf	_Modo,w
  4755  0C17  1D03               	btfss	3,2
  4756  0C18  2C8D               	goto	l4526
  4757                           
  4758                           ;Task_Control.c: 63:     {;Task_Control.c: 64:         Pwm = (int)((Adc(1)*5.0/1023.0)*1
      +                          00.0/5.0);
  4759  0C19  3001               	movlw	1
  4760  0C1A  160A  118A  260C  120A  158A  	fcall	_Adc
  4761  0C1F  0875               	movf	?_Adc+1,w
  4762  0C20  00A9               	movwf	___awtoft@c+1
  4763  0C21  0874               	movf	?_Adc,w
  4764  0C22  00A8               	movwf	___awtoft@c
  4765  0C23  160A  118A  23F7  120A  158A  	fcall	___awtoft
  4766  0C28  0828               	movf	?___awtoft,w
  4767  0C29  00AF               	movwf	___ftmul@f2
  4768  0C2A  0829               	movf	?___awtoft+1,w
  4769  0C2B  00B0               	movwf	___ftmul@f2+1
  4770  0C2C  082A               	movf	?___awtoft+2,w
  4771  0C2D  00B1               	movwf	___ftmul@f2+2
  4772  0C2E  3000               	movlw	0
  4773  0C2F  00AC               	movwf	___ftmul@f1
  4774  0C30  30A0               	movlw	160
  4775  0C31  00AD               	movwf	___ftmul@f1+1
  4776  0C32  3040               	movlw	64
  4777  0C33  00AE               	movwf	___ftmul@f1+2
  4778  0C34  120A  158A  24BA  120A  158A  	fcall	___ftmul
  4779  0C39  082C               	movf	?___ftmul,w
  4780  0C3A  00BE               	movwf	___ftdiv@f1
  4781  0C3B  082D               	movf	?___ftmul+1,w
  4782  0C3C  00BF               	movwf	___ftdiv@f1+1
  4783  0C3D  082E               	movf	?___ftmul+2,w
  4784  0C3E  00C0               	movwf	___ftdiv@f1+2
  4785  0C3F  30C0               	movlw	192
  4786  0C40  00BB               	movwf	___ftdiv@f2
  4787  0C41  307F               	movlw	127
  4788  0C42  00BC               	movwf	___ftdiv@f2+1
  4789  0C43  3044               	movlw	68
  4790  0C44  00BD               	movwf	___ftdiv@f2+2
  4791  0C45  120A  158A  22E0  120A  158A  	fcall	___ftdiv
  4792  0C4A  083B               	movf	?___ftdiv,w
  4793  0C4B  00E3               	movwf	_E_Task1_Pwm$1287
  4794  0C4C  083C               	movf	?___ftdiv+1,w
  4795  0C4D  00E4               	movwf	_E_Task1_Pwm$1287+1
  4796  0C4E  083D               	movf	?___ftdiv+2,w
  4797  0C4F  00E5               	movwf	_E_Task1_Pwm$1287+2
  4798                           
  4799                           ;Task_Control.c: 63:     {;Task_Control.c: 64:         Pwm = (int)((Adc(1)*5.0/1023.0)*1
      +                          00.0/5.0);
  4800  0C50  0863               	movf	_E_Task1_Pwm$1287,w
  4801  0C51  00AF               	movwf	___ftmul@f2
  4802  0C52  0864               	movf	_E_Task1_Pwm$1287+1,w
  4803  0C53  00B0               	movwf	___ftmul@f2+1
  4804  0C54  0865               	movf	_E_Task1_Pwm$1287+2,w
  4805  0C55  00B1               	movwf	___ftmul@f2+2
  4806  0C56  3000               	movlw	0
  4807  0C57  00AC               	movwf	___ftmul@f1
  4808  0C58  30C8               	movlw	200
  4809  0C59  00AD               	movwf	___ftmul@f1+1
  4810  0C5A  3042               	movlw	66
  4811  0C5B  00AE               	movwf	___ftmul@f1+2
  4812  0C5C  120A  158A  24BA  120A  158A  	fcall	___ftmul
  4813  0C61  082C               	movf	?___ftmul,w
  4814  0C62  00BE               	movwf	___ftdiv@f1
  4815  0C63  082D               	movf	?___ftmul+1,w
  4816  0C64  00BF               	movwf	___ftdiv@f1+1
  4817  0C65  082E               	movf	?___ftmul+2,w
  4818  0C66  00C0               	movwf	___ftdiv@f1+2
  4819  0C67  3000               	movlw	0
  4820  0C68  00BB               	movwf	___ftdiv@f2
  4821  0C69  30A0               	movlw	160
  4822  0C6A  00BC               	movwf	___ftdiv@f2+1
  4823  0C6B  3040               	movlw	64
  4824  0C6C  00BD               	movwf	___ftdiv@f2+2
  4825  0C6D  120A  158A  22E0  120A  158A  	fcall	___ftdiv
  4826  0C72  083B               	movf	?___ftdiv,w
  4827  0C73  00CA               	movwf	___fttol@f1
  4828  0C74  083C               	movf	?___ftdiv+1,w
  4829  0C75  00CB               	movwf	___fttol@f1+1
  4830  0C76  083D               	movf	?___ftdiv+2,w
  4831  0C77  00CC               	movwf	___fttol@f1+2
  4832  0C78  120A  158A  2061  120A  158A  	fcall	___fttol
  4833  0C7D  084A               	movf	?___fttol,w
  4834  0C7E  00FF               	movwf	127
  4835  0C7F  087F               	movf	127,w
  4836  0C80  00F9               	movwf	_Pwm
  4837                           
  4838                           ;Task_Control.c: 65:         if(Pwm > 95) Pwm = 95;
  4839  0C81  3060               	movlw	96
  4840  0C82  0279               	subwf	_Pwm,w
  4841  0C83  1C03               	skipc
  4842  0C84  2C87               	goto	l4522
  4843  0C85  305F               	movlw	95
  4844  0C86  2C92               	goto	L2
  4845  0C87                     l4522:
  4846  0C87  3005               	movlw	5
  4847  0C88  0279               	subwf	_Pwm,w
  4848  0C89  1803               	skipnc
  4849  0C8A  2C95               	goto	l4530
  4850  0C8B  3005               	movlw	5
  4851  0C8C  2C92               	goto	L2
  4852  0C8D                     l4526:
  4853  0C8D  3003               	movlw	3
  4854  0C8E  0677               	xorwf	_Modo,w
  4855  0C8F  1D03               	btfss	3,2
  4856  0C90  2C95               	goto	l4530
  4857  0C91  3063               	movlw	99
  4858  0C92                     L2:
  4859  0C92  00FF               	movwf	127
  4860  0C93  087F               	movf	127,w
  4861  0C94  00F9               	movwf	_Pwm
  4862  0C95                     l4530:
  4863                           
  4864                           ;Task_Control.c: 70:     if(Pwm != aux)
  4865  0C95  0879               	movf	_Pwm,w
  4866  0C96  0666               	xorwf	E_Task1_Pwm@aux,w
  4867  0C97  1903               	skipnz
  4868  0C98  0008               	return
  4869                           
  4870                           ;Task_Control.c: 71:     {;Task_Control.c: 72:         sprintf(buffer,"%02d",Pwm);
  4871  0C99  30AE               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  4872  0C9A  00FF               	movwf	127
  4873  0C9B  087F               	movf	127,w
  4874  0C9C  00AB               	movwf	sprintf@f
  4875  0C9D  0879               	movf	_Pwm,w
  4876  0C9E  00D7               	movwf	??_E_Task1_Pwm
  4877  0C9F  01D8               	clrf	??_E_Task1_Pwm+1
  4878  0CA0  0857               	movf	??_E_Task1_Pwm,w
  4879  0CA1  00AC               	movwf	?_sprintf+1
  4880  0CA2  0858               	movf	??_E_Task1_Pwm+1,w
  4881  0CA3  00AD               	movwf	?_sprintf+2
  4882  0CA4  3059               	movlw	(low (E_Task1_Pwm@buffer| 0))& (0+255)
  4883  0CA5  120A  118A  202F  120A  158A  	fcall	_sprintf
  4884                           
  4885                           ;Task_Control.c: 73:         LCD_array(2,5,buffer);
  4886  0CAA  3002               	movlw	2
  4887  0CAB  00A2               	movwf	LCD_array@x
  4888  0CAC  3000               	movlw	0
  4889  0CAD  00A3               	movwf	LCD_array@x+1
  4890  0CAE  3005               	movlw	5
  4891  0CAF  00A4               	movwf	LCD_array@y
  4892  0CB0  3000               	movlw	0
  4893  0CB1  00A5               	movwf	LCD_array@y+1
  4894  0CB2  3059               	movlw	(low (E_Task1_Pwm@buffer| 0))& (0+255)
  4895  0CB3  00A6               	movwf	LCD_array@date
  4896  0CB4  3000               	movlw	0
  4897  0CB5  00A7               	movwf	LCD_array@date+1
  4898  0CB6  160A  118A  26BB   	fcall	_LCD_array
  4899  0CB9  0008               	return
  4900  0CBA                     __end_of_E_Task1_Pwm:
  4901                           
  4902                           	psect	text17
  4903  04B1                     __ptext17:	
  4904 ;; *************** function _E_Task1_Min *****************
  4905 ;; Defined at:
  4906 ;;		line 81 in file "Task_Control.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  buffer         10   57[BANK0 ] unsigned char [10]
  4911 ;;  aux_seg         1   68[BANK0 ] unsigned char 
  4912 ;;  aux_min         1   67[BANK0 ] unsigned char 
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  1    wreg      void 
  4915 ;; Registers used:
  4916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : B00/0
  4919 ;;		On exit  : 200/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4922 ;;      Params:         0       0       0       0       0
  4923 ;;      Locals:         0      15       0       0       0
  4924 ;;      Temps:          0       2       0       0       0
  4925 ;;      Totals:         0      17       0       0       0
  4926 ;;Total ram usage:       17 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    5
  4929 ;; This function calls:
  4930 ;;		_Adc
  4931 ;;		_LCD_array
  4932 ;;		___awtoft
  4933 ;;		___ftdiv
  4934 ;;		___ftmul
  4935 ;;		___fttol
  4936 ;;		_sprintf
  4937 ;; This function is called by:
  4938 ;;		_Task1
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _E_Task1_Min
  4944  04B1                     _E_Task1_Min:
  4945                           
  4946                           ;Task_Control.c: 83:     char buffer[10],aux_min,aux_seg;;Task_Control.c: 86:     if(mod
      +                          _min == 1) aux_min = Min,Min = (int)((Adc(2)*5.0/1023.0)*59.0/5.0);
  4947                           
  4948                           ;incstack = 0
  4949                           ; Regs used in _E_Task1_Min: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4950  04B1  1683               	bsf	3,5	;RP0=1, select bank1
  4951  04B2  0340               	decf	_mod_min^(0+128),w
  4952  04B3  1D03               	btfss	3,2
  4953  04B4  2D24               	goto	l4544
  4954  04B5  0844               	movf	_Min^(0+128),w
  4955  04B6  00FF               	movwf	127
  4956  04B7  087F               	movf	127,w
  4957  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  4958  04B9  00E3               	movwf	E_Task1_Min@aux_min
  4959  04BA  3002               	movlw	2
  4960  04BB  160A  118A  260C  120A  118A  	fcall	_Adc
  4961  04C0  0875               	movf	?_Adc+1,w
  4962  04C1  00A9               	movwf	___awtoft@c+1
  4963  04C2  0874               	movf	?_Adc,w
  4964  04C3  00A8               	movwf	___awtoft@c
  4965  04C4  160A  118A  23F7  120A  118A  	fcall	___awtoft
  4966  04C9  0828               	movf	?___awtoft,w
  4967  04CA  00AF               	movwf	___ftmul@f2
  4968  04CB  0829               	movf	?___awtoft+1,w
  4969  04CC  00B0               	movwf	___ftmul@f2+1
  4970  04CD  082A               	movf	?___awtoft+2,w
  4971  04CE  00B1               	movwf	___ftmul@f2+2
  4972  04CF  3000               	movlw	0
  4973  04D0  00AC               	movwf	___ftmul@f1
  4974  04D1  30A0               	movlw	160
  4975  04D2  00AD               	movwf	___ftmul@f1+1
  4976  04D3  3040               	movlw	64
  4977  04D4  00AE               	movwf	___ftmul@f1+2
  4978  04D5  120A  158A  24BA  120A  118A  	fcall	___ftmul
  4979  04DA  082C               	movf	?___ftmul,w
  4980  04DB  00BE               	movwf	___ftdiv@f1
  4981  04DC  082D               	movf	?___ftmul+1,w
  4982  04DD  00BF               	movwf	___ftdiv@f1+1
  4983  04DE  082E               	movf	?___ftmul+2,w
  4984  04DF  00C0               	movwf	___ftdiv@f1+2
  4985  04E0  30C0               	movlw	192
  4986  04E1  00BB               	movwf	___ftdiv@f2
  4987  04E2  307F               	movlw	127
  4988  04E3  00BC               	movwf	___ftdiv@f2+1
  4989  04E4  3044               	movlw	68
  4990  04E5  00BD               	movwf	___ftdiv@f2+2
  4991  04E6  120A  158A  22E0  120A  118A  	fcall	___ftdiv
  4992  04EB  083B               	movf	?___ftdiv,w
  4993  04EC  00E5               	movwf	_E_Task1_Min$1288
  4994  04ED  083C               	movf	?___ftdiv+1,w
  4995  04EE  00E6               	movwf	_E_Task1_Min$1288+1
  4996  04EF  083D               	movf	?___ftdiv+2,w
  4997  04F0  00E7               	movwf	_E_Task1_Min$1288+2
  4998  04F1  0865               	movf	_E_Task1_Min$1288,w
  4999  04F2  00AF               	movwf	___ftmul@f2
  5000  04F3  0866               	movf	_E_Task1_Min$1288+1,w
  5001  04F4  00B0               	movwf	___ftmul@f2+1
  5002  04F5  0867               	movf	_E_Task1_Min$1288+2,w
  5003  04F6  00B1               	movwf	___ftmul@f2+2
  5004  04F7  3000               	movlw	0
  5005  04F8  00AC               	movwf	___ftmul@f1
  5006  04F9  306C               	movlw	108
  5007  04FA  00AD               	movwf	___ftmul@f1+1
  5008  04FB  3042               	movlw	66
  5009  04FC  00AE               	movwf	___ftmul@f1+2
  5010  04FD  120A  158A  24BA  120A  118A  	fcall	___ftmul
  5011  0502  082C               	movf	?___ftmul,w
  5012  0503  00BE               	movwf	___ftdiv@f1
  5013  0504  082D               	movf	?___ftmul+1,w
  5014  0505  00BF               	movwf	___ftdiv@f1+1
  5015  0506  082E               	movf	?___ftmul+2,w
  5016  0507  00C0               	movwf	___ftdiv@f1+2
  5017  0508  3000               	movlw	0
  5018  0509  00BB               	movwf	___ftdiv@f2
  5019  050A  30A0               	movlw	160
  5020  050B  00BC               	movwf	___ftdiv@f2+1
  5021  050C  3040               	movlw	64
  5022  050D  00BD               	movwf	___ftdiv@f2+2
  5023  050E  120A  158A  22E0  120A  118A  	fcall	___ftdiv
  5024  0513  083B               	movf	?___ftdiv,w
  5025  0514  00CA               	movwf	___fttol@f1
  5026  0515  083C               	movf	?___ftdiv+1,w
  5027  0516  00CB               	movwf	___fttol@f1+1
  5028  0517  083D               	movf	?___ftdiv+2,w
  5029  0518  00CC               	movwf	___fttol@f1+2
  5030  0519  120A  158A  2061  120A  118A  	fcall	___fttol
  5031  051E  084A               	movf	?___fttol,w
  5032  051F  00FF               	movwf	127
  5033  0520  087F               	movf	127,w
  5034  0521  1683               	bsf	3,5	;RP0=1, select bank1
  5035  0522  00C4               	movwf	_Min^(0+128)
  5036  0523  2D94               	goto	l4552
  5037  0524                     l4544:
  5038  0524  033F               	decf	_mod_seg^(0+128),w
  5039  0525  1D03               	btfss	3,2
  5040  0526  2D94               	goto	l4552
  5041  0527  0878               	movf	_Seg,w
  5042  0528  00FF               	movwf	127
  5043  0529  087F               	movf	127,w
  5044  052A  1283               	bcf	3,5	;RP0=0, select bank0
  5045  052B  00E4               	movwf	E_Task1_Min@aux_seg
  5046  052C  3002               	movlw	2
  5047  052D  160A  118A  260C  120A  118A  	fcall	_Adc
  5048  0532  0875               	movf	?_Adc+1,w
  5049  0533  00A9               	movwf	___awtoft@c+1
  5050  0534  0874               	movf	?_Adc,w
  5051  0535  00A8               	movwf	___awtoft@c
  5052  0536  160A  118A  23F7  120A  118A  	fcall	___awtoft
  5053  053B  0828               	movf	?___awtoft,w
  5054  053C  00AF               	movwf	___ftmul@f2
  5055  053D  0829               	movf	?___awtoft+1,w
  5056  053E  00B0               	movwf	___ftmul@f2+1
  5057  053F  082A               	movf	?___awtoft+2,w
  5058  0540  00B1               	movwf	___ftmul@f2+2
  5059  0541  3000               	movlw	0
  5060  0542  00AC               	movwf	___ftmul@f1
  5061  0543  30A0               	movlw	160
  5062  0544  00AD               	movwf	___ftmul@f1+1
  5063  0545  3040               	movlw	64
  5064  0546  00AE               	movwf	___ftmul@f1+2
  5065  0547  120A  158A  24BA  120A  118A  	fcall	___ftmul
  5066  054C  082C               	movf	?___ftmul,w
  5067  054D  00BE               	movwf	___ftdiv@f1
  5068  054E  082D               	movf	?___ftmul+1,w
  5069  054F  00BF               	movwf	___ftdiv@f1+1
  5070  0550  082E               	movf	?___ftmul+2,w
  5071  0551  00C0               	movwf	___ftdiv@f1+2
  5072  0552  30C0               	movlw	192
  5073  0553  00BB               	movwf	___ftdiv@f2
  5074  0554  307F               	movlw	127
  5075  0555  00BC               	movwf	___ftdiv@f2+1
  5076  0556  3044               	movlw	68
  5077  0557  00BD               	movwf	___ftdiv@f2+2
  5078  0558  120A  158A  22E0  120A  118A  	fcall	___ftdiv
  5079  055D  083B               	movf	?___ftdiv,w
  5080  055E  00E5               	movwf	_E_Task1_Min$1288
  5081  055F  083C               	movf	?___ftdiv+1,w
  5082  0560  00E6               	movwf	_E_Task1_Min$1288+1
  5083  0561  083D               	movf	?___ftdiv+2,w
  5084  0562  00E7               	movwf	_E_Task1_Min$1288+2
  5085  0563  0865               	movf	_E_Task1_Min$1288,w
  5086  0564  00AF               	movwf	___ftmul@f2
  5087  0565  0866               	movf	_E_Task1_Min$1288+1,w
  5088  0566  00B0               	movwf	___ftmul@f2+1
  5089  0567  0867               	movf	_E_Task1_Min$1288+2,w
  5090  0568  00B1               	movwf	___ftmul@f2+2
  5091  0569  3000               	movlw	0
  5092  056A  00AC               	movwf	___ftmul@f1
  5093  056B  306C               	movlw	108
  5094  056C  00AD               	movwf	___ftmul@f1+1
  5095  056D  3042               	movlw	66
  5096  056E  00AE               	movwf	___ftmul@f1+2
  5097  056F  120A  158A  24BA  120A  118A  	fcall	___ftmul
  5098  0574  082C               	movf	?___ftmul,w
  5099  0575  00BE               	movwf	___ftdiv@f1
  5100  0576  082D               	movf	?___ftmul+1,w
  5101  0577  00BF               	movwf	___ftdiv@f1+1
  5102  0578  082E               	movf	?___ftmul+2,w
  5103  0579  00C0               	movwf	___ftdiv@f1+2
  5104  057A  3000               	movlw	0
  5105  057B  00BB               	movwf	___ftdiv@f2
  5106  057C  30A0               	movlw	160
  5107  057D  00BC               	movwf	___ftdiv@f2+1
  5108  057E  3040               	movlw	64
  5109  057F  00BD               	movwf	___ftdiv@f2+2
  5110  0580  120A  158A  22E0  120A  118A  	fcall	___ftdiv
  5111  0585  083B               	movf	?___ftdiv,w
  5112  0586  00CA               	movwf	___fttol@f1
  5113  0587  083C               	movf	?___ftdiv+1,w
  5114  0588  00CB               	movwf	___fttol@f1+1
  5115  0589  083D               	movf	?___ftdiv+2,w
  5116  058A  00CC               	movwf	___fttol@f1+2
  5117  058B  120A  158A  2061  120A  118A  	fcall	___fttol
  5118  0590  084A               	movf	?___fttol,w
  5119  0591  00FF               	movwf	127
  5120  0592  087F               	movf	127,w
  5121  0593  00F8               	movwf	_Seg
  5122  0594                     l4552:
  5123                           
  5124                           ;Task_Control.c: 89:     if(Seg == 0) Seg = 1;
  5125  0594  0878               	movf	_Seg,w
  5126  0595  1D03               	btfss	3,2
  5127  0596  2D99               	goto	l4556
  5128  0597  01F8               	clrf	_Seg
  5129  0598  0AF8               	incf	_Seg,f
  5130  0599                     l4556:
  5131                           
  5132                           ;Task_Control.c: 91:     if((Min != aux_min && mod_min == 1) || (Seg != aux_seg && mod_s
      +                          eg == 1))
  5133  0599  1683               	bsf	3,5	;RP0=1, select bank1
  5134  059A  0844               	movf	_Min^(0+128),w
  5135  059B  1283               	bcf	3,5	;RP0=0, select bank0
  5136  059C  0663               	xorwf	E_Task1_Min@aux_min,w
  5137  059D  1903               	skipnz
  5138  059E  2DA3               	goto	l4560
  5139  059F  1683               	bsf	3,5	;RP0=1, select bank1
  5140  05A0  0340               	decf	_mod_min^(0+128),w
  5141  05A1  1903               	btfsc	3,2
  5142  05A2  2DAC               	goto	l4564
  5143  05A3                     l4560:
  5144  05A3  0878               	movf	_Seg,w
  5145  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  5146  05A5  0664               	xorwf	E_Task1_Min@aux_seg,w
  5147  05A6  1903               	skipnz
  5148  05A7  0008               	return
  5149  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  5150  05A9  033F               	decf	_mod_seg^(0+128),w
  5151  05AA  1D03               	btfss	3,2
  5152  05AB  0008               	return
  5153  05AC                     l4564:
  5154                           
  5155                           ;Task_Control.c: 92:     {;Task_Control.c: 93:         sprintf(buffer,"%02d",Min);
  5156  05AC  30AE               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  5157  05AD  00FF               	movwf	127
  5158  05AE  087F               	movf	127,w
  5159  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  5160  05B0  00AB               	movwf	sprintf@f
  5161  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  5162  05B2  0844               	movf	_Min^(0+128),w
  5163  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  5164  05B4  00D7               	movwf	??_E_Task1_Min
  5165  05B5  01D8               	clrf	??_E_Task1_Min+1
  5166  05B6  0857               	movf	??_E_Task1_Min,w
  5167  05B7  00AC               	movwf	?_sprintf+1
  5168  05B8  0858               	movf	??_E_Task1_Min+1,w
  5169  05B9  00AD               	movwf	?_sprintf+2
  5170  05BA  3059               	movlw	(low (E_Task1_Min@buffer| 0))& (0+255)
  5171  05BB  120A  118A  202F  120A  118A  	fcall	_sprintf
  5172                           
  5173                           ;Task_Control.c: 94:         LCD_array(3,8,buffer);
  5174  05C0  3003               	movlw	3
  5175  05C1  00A2               	movwf	LCD_array@x
  5176  05C2  3000               	movlw	0
  5177  05C3  00A3               	movwf	LCD_array@x+1
  5178  05C4  3008               	movlw	8
  5179  05C5  00A4               	movwf	LCD_array@y
  5180  05C6  3000               	movlw	0
  5181  05C7  00A5               	movwf	LCD_array@y+1
  5182  05C8  3059               	movlw	(low (E_Task1_Min@buffer| 0))& (0+255)
  5183  05C9  00A6               	movwf	LCD_array@date
  5184  05CA  3000               	movlw	0
  5185  05CB  00A7               	movwf	LCD_array@date+1
  5186  05CC  160A  118A  26BB  120A  118A  	fcall	_LCD_array
  5187                           
  5188                           ;Task_Control.c: 95:         sprintf(buffer,"%02d",Seg);
  5189  05D1  30AE               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  5190  05D2  00FF               	movwf	127
  5191  05D3  087F               	movf	127,w
  5192  05D4  00AB               	movwf	sprintf@f
  5193  05D5  0878               	movf	_Seg,w
  5194  05D6  00D7               	movwf	??_E_Task1_Min
  5195  05D7  01D8               	clrf	??_E_Task1_Min+1
  5196  05D8  0857               	movf	??_E_Task1_Min,w
  5197  05D9  00AC               	movwf	?_sprintf+1
  5198  05DA  0858               	movf	??_E_Task1_Min+1,w
  5199  05DB  00AD               	movwf	?_sprintf+2
  5200  05DC  3059               	movlw	(low (E_Task1_Min@buffer| 0))& (0+255)
  5201  05DD  120A  118A  202F  120A  118A  	fcall	_sprintf
  5202                           
  5203                           ;Task_Control.c: 96:         LCD_array(3,11,buffer);
  5204  05E2  3003               	movlw	3
  5205  05E3  00A2               	movwf	LCD_array@x
  5206  05E4  3000               	movlw	0
  5207  05E5  00A3               	movwf	LCD_array@x+1
  5208  05E6  300B               	movlw	11
  5209  05E7  00A4               	movwf	LCD_array@y
  5210  05E8  3000               	movlw	0
  5211  05E9  00A5               	movwf	LCD_array@y+1
  5212  05EA  3059               	movlw	(low (E_Task1_Min@buffer| 0))& (0+255)
  5213  05EB  00A6               	movwf	LCD_array@date
  5214  05EC  3000               	movlw	0
  5215  05ED  00A7               	movwf	LCD_array@date+1
  5216  05EE  160A  118A  26BB   	fcall	_LCD_array
  5217  05F1  0008               	return
  5218  05F2                     __end_of_E_Task1_Min:
  5219                           
  5220                           	psect	text18
  5221  002F                     __ptext18:	
  5222 ;; *************** function _sprintf *****************
  5223 ;; Defined at:
  5224 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  sp              1    wreg     PTR unsigned char 
  5227 ;;		 -> Task3@buffer(10), E_Task1_Temp@buffer(10), E_Task1_Min@buffer(10), E_Task1_Pwm@buffer(10), 
  5228 ;;		 -> E_Task1_Rpm@buffer(10), 
  5229 ;;  f               1   11[BANK0 ] PTR const unsigned char 
  5230 ;;		 -> STR_27(5), STR_26(5), STR_25(5), STR_24(5), 
  5231 ;;		 -> STR_23(5), STR_22(5), STR_21(5), 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  sp              1   25[BANK0 ] PTR unsigned char 
  5234 ;;		 -> Task3@buffer(10), E_Task1_Temp@buffer(10), E_Task1_Min@buffer(10), E_Task1_Pwm@buffer(10), 
  5235 ;;		 -> E_Task1_Rpm@buffer(10), 
  5236 ;;  tmpval          4    0        struct .
  5237 ;;  width           2   22[BANK0 ] int 
  5238 ;;  val             2   19[BANK0 ] unsigned int 
  5239 ;;  cp              2    0        PTR const unsigned char 
  5240 ;;  len             2    0        unsigned int 
  5241 ;;  c               1   24[BANK0 ] unsigned char 
  5242 ;;  flag            1   21[BANK0 ] unsigned char 
  5243 ;;  ap              1   18[BANK0 ] PTR void [1]
  5244 ;;		 -> ?_sprintf(2), 
  5245 ;;  prec            1   17[BANK0 ] char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  2   11[BANK0 ] int 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 300/800
  5252 ;;		On exit  : B00/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5255 ;;      Params:         0       3       0       0       0
  5256 ;;      Locals:         0       9       0       0       0
  5257 ;;      Temps:          0       3       0       0       0
  5258 ;;      Totals:         0      15       0       0       0
  5259 ;;Total ram usage:       15 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    3
  5262 ;; This function calls:
  5263 ;;		___lwdiv
  5264 ;;		___lwmod
  5265 ;;		___wmul
  5266 ;;		_isdigit
  5267 ;; This function is called by:
  5268 ;;		_E_Task1_Rpm
  5269 ;;		_E_Task1_Pwm
  5270 ;;		_E_Task1_Min
  5271 ;;		_E_Task1_Temp
  5272 ;;		_Task3
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           
  5277                           ;psect for function _sprintf
  5278  002F                     _sprintf:
  5279                           
  5280                           ;incstack = 0
  5281                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5282                           ;sprintf@sp stored from wreg
  5283  002F  00B9               	movwf	sprintf@sp
  5284                           
  5285                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  5286  0030  302C               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  5287  0031  00FF               	movwf	127
  5288  0032  087F               	movf	127,w
  5289  0033  00B2               	movwf	sprintf@ap
  5290  0034                     l4216:	
  5291                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  5292                           
  5293                           
  5294                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  5295  0034  3001               	movlw	1
  5296  0035  07AB               	addwf	sprintf@f,f
  5297  0036  30FF               	movlw	-1
  5298  0037  072B               	addwf	sprintf@f,w
  5299  0038  0084               	movwf	4
  5300  0039  120A  118A  270A  120A  118A  	fcall	stringdir
  5301  003E  00FF               	movwf	127
  5302  003F  087F               	movf	127,w
  5303  0040  00B8               	movwf	sprintf@c
  5304  0041  0838               	movf	sprintf@c,w
  5305  0042  1903               	btfsc	3,2
  5306  0043  29DB               	goto	l4218
  5307                           
  5308                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  5309  0044  3025               	movlw	37
  5310  0045  0638               	xorwf	sprintf@c,w
  5311  0046  1903               	btfsc	3,2
  5312  0047  2854               	goto	l4114
  5313                           
  5314                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  5315  0048  0838               	movf	sprintf@c,w
  5316  0049  00FF               	movwf	127
  5317  004A  0839               	movf	sprintf@sp,w
  5318  004B  0084               	movwf	4
  5319  004C  087F               	movf	127,w
  5320  004D  1383               	bcf	3,7	;select IRP bank0
  5321  004E  0080               	movwf	0
  5322  004F  3001               	movlw	1
  5323  0050  00FF               	movwf	127
  5324  0051  087F               	movf	127,w
  5325  0052  07B9               	addwf	sprintf@sp,f
  5326                           
  5327                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 559:    continue;
  5328  0053  2834               	goto	l4216
  5329  0054                     l4114:
  5330                           
  5331                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  5332  0054  01B6               	clrf	sprintf@width
  5333  0055  01B7               	clrf	sprintf@width+1
  5334                           
  5335                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  5336  0056  01B5               	clrf	sprintf@flag
  5337  0057  285D               	goto	l4120
  5338  0058                     l588:	
  5339                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 596:    case '0':
  5340                           
  5341                           
  5342                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  5343  0058  1535               	bsf	sprintf@flag,2
  5344                           
  5345                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 598:     f++;
  5346  0059  3001               	movlw	1
  5347  005A  00FF               	movwf	127
  5348  005B  087F               	movf	127,w
  5349  005C  07AB               	addwf	sprintf@f,f
  5350  005D                     l4120:	
  5351                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  5352                           
  5353  005D  082B               	movf	sprintf@f,w
  5354  005E  0084               	movwf	4
  5355  005F  120A  118A  270A  120A  118A  	fcall	stringdir
  5356  0064  00AE               	movwf	??_sprintf
  5357  0065  01AF               	clrf	??_sprintf+1
  5358                           
  5359                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5360                           ; Switch size 1, requested type "simple"
  5361                           ; Number of cases is 1, Range of values is 0 to 0
  5362                           ; switch strategies available:
  5363                           ; Name         Instructions Cycles
  5364                           ; simple_byte            4     3 (average)
  5365                           ; direct_byte           11     8 (fixed)
  5366                           ; jumptable            260     6 (fixed)
  5367                           ;	Chosen strategy is simple_byte
  5368  0066  082F               	movf	??_sprintf+1,w
  5369  0067  3A00               	xorlw	0	; case 0
  5370  0068  1903               	skipnz
  5371  0069  286B               	goto	l5182
  5372  006A  2870               	goto	l4122
  5373  006B                     l5182:
  5374                           
  5375                           ; Switch size 1, requested type "simple"
  5376                           ; Number of cases is 1, Range of values is 48 to 48
  5377                           ; switch strategies available:
  5378                           ; Name         Instructions Cycles
  5379                           ; simple_byte            4     3 (average)
  5380                           ; direct_byte           14    11 (fixed)
  5381                           ; jumptable            263     9 (fixed)
  5382                           ;	Chosen strategy is simple_byte
  5383  006B  082E               	movf	??_sprintf,w
  5384  006C  3A30               	xorlw	48	; case 48
  5385  006D  1903               	skipnz
  5386  006E  2858               	goto	l588
  5387  006F  2870               	goto	l4122
  5388  0070                     l4122:
  5389                           
  5390                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  5391  0070  082B               	movf	sprintf@f,w
  5392  0071  0084               	movwf	4
  5393  0072  120A  118A  270A  120A  118A  	fcall	stringdir
  5394  0077  160A  118A  233E  120A  118A  	fcall	_isdigit
  5395  007C  1C03               	btfss	3,0
  5396  007D  28B9               	goto	l4136
  5397                           
  5398                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  5399  007E  01B6               	clrf	sprintf@width
  5400  007F  01B7               	clrf	sprintf@width+1
  5401  0080                     l4126:
  5402                           
  5403                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  5404  0080  300A               	movlw	10
  5405  0081  00A7               	movwf	___wmul@multiplier
  5406  0082  3000               	movlw	0
  5407  0083  00A8               	movwf	___wmul@multiplier+1
  5408  0084  0837               	movf	sprintf@width+1,w
  5409  0085  00AA               	movwf	___wmul@multiplicand+1
  5410  0086  0836               	movf	sprintf@width,w
  5411  0087  00A9               	movwf	___wmul@multiplicand
  5412  0088  160A  118A  2418  120A  118A  	fcall	___wmul
  5413  008D  0828               	movf	?___wmul+1,w
  5414  008E  00B7               	movwf	sprintf@width+1
  5415  008F  0827               	movf	?___wmul,w
  5416  0090  00B6               	movwf	sprintf@width
  5417                           
  5418                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  5419  0091  082B               	movf	sprintf@f,w
  5420  0092  0084               	movwf	4
  5421  0093  120A  118A  270A  120A  118A  	fcall	stringdir
  5422  0098  3ED0               	addlw	208
  5423  0099  00AE               	movwf	??_sprintf
  5424  009A  30FF               	movlw	255
  5425  009B  1803               	skipnc
  5426  009C  3000               	movlw	0
  5427  009D  00AF               	movwf	??_sprintf+1
  5428  009E  082E               	movf	??_sprintf,w
  5429  009F  07B6               	addwf	sprintf@width,f
  5430  00A0  1803               	skipnc
  5431  00A1  0AB7               	incf	sprintf@width+1,f
  5432  00A2  082F               	movf	??_sprintf+1,w
  5433  00A3  07B7               	addwf	sprintf@width+1,f
  5434  00A4  3001               	movlw	1
  5435  00A5  00FF               	movwf	127
  5436  00A6  087F               	movf	127,w
  5437  00A7  07AB               	addwf	sprintf@f,f
  5438                           
  5439                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  5440  00A8  082B               	movf	sprintf@f,w
  5441  00A9  0084               	movwf	4
  5442  00AA  120A  118A  270A  120A  118A  	fcall	stringdir
  5443  00AF  160A  118A  233E  120A  118A  	fcall	_isdigit
  5444  00B4  1C03               	btfss	3,0
  5445  00B5  28B9               	goto	l4136
  5446  00B6  2880               	goto	l4126
  5447  00B7                     l602:	
  5448                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 843:   case 'u':
  5449                           
  5450                           
  5451                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          x40;
  5452  00B7  1735               	bsf	sprintf@flag,6
  5453                           
  5454                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 845:    break;
  5455  00B8  28D9               	goto	l600
  5456  00B9                     l4136:
  5457  00B9  3001               	movlw	1
  5458  00BA  07AB               	addwf	sprintf@f,f
  5459  00BB  30FF               	movlw	-1
  5460  00BC  072B               	addwf	sprintf@f,w
  5461  00BD  0084               	movwf	4
  5462  00BE  120A  118A  270A  120A  118A  	fcall	stringdir
  5463  00C3  00B8               	movwf	sprintf@c
  5464  00C4  00AE               	movwf	??_sprintf
  5465  00C5  01AF               	clrf	??_sprintf+1
  5466                           
  5467                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5468                           ; Switch size 1, requested type "simple"
  5469                           ; Number of cases is 1, Range of values is 0 to 0
  5470                           ; switch strategies available:
  5471                           ; Name         Instructions Cycles
  5472                           ; simple_byte            4     3 (average)
  5473                           ; direct_byte           11     8 (fixed)
  5474                           ; jumptable            260     6 (fixed)
  5475                           ;	Chosen strategy is simple_byte
  5476  00C6  082F               	movf	??_sprintf+1,w
  5477  00C7  3A00               	xorlw	0	; case 0
  5478  00C8  1903               	skipnz
  5479  00C9  28CB               	goto	l5184
  5480  00CA  2834               	goto	l4216
  5481  00CB                     l5184:
  5482                           
  5483                           ; Switch size 1, requested type "simple"
  5484                           ; Number of cases is 4, Range of values is 0 to 117
  5485                           ; switch strategies available:
  5486                           ; Name         Instructions Cycles
  5487                           ; simple_byte           13     7 (average)
  5488                           ; jumptable            260     6 (fixed)
  5489                           ;	Chosen strategy is simple_byte
  5490  00CB  082E               	movf	??_sprintf,w
  5491  00CC  3A00               	xorlw	0	; case 0
  5492  00CD  1903               	skipnz
  5493  00CE  29DB               	goto	l4218
  5494  00CF  3A64               	xorlw	100	; case 100
  5495  00D0  1903               	skipnz
  5496  00D1  28D9               	goto	l600
  5497  00D2  3A0D               	xorlw	13	; case 105
  5498  00D3  1903               	skipnz
  5499  00D4  28D9               	goto	l600
  5500  00D5  3A1C               	xorlw	28	; case 117
  5501  00D6  1903               	skipnz
  5502  00D7  28B7               	goto	l602
  5503  00D8  2834               	goto	l4216
  5504  00D9                     l600:
  5505                           
  5506                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1277:   if((flag 
      +                          & 0x40) == 0x00)
  5507  00D9  1B35               	btfsc	sprintf@flag,6
  5508  00DA  28F3               	goto	l4148
  5509                           
  5510                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5511  00DB  0832               	movf	sprintf@ap,w
  5512  00DC  0084               	movwf	4
  5513  00DD  1383               	bcf	3,7	;select IRP bank0
  5514  00DE  0800               	movf	0,w
  5515  00DF  00B3               	movwf	sprintf@val
  5516  00E0  0A84               	incf	4,f
  5517  00E1  0800               	movf	0,w
  5518  00E2  00B4               	movwf	sprintf@val+1
  5519  00E3  3002               	movlw	2
  5520  00E4  00FF               	movwf	127
  5521  00E5  087F               	movf	127,w
  5522  00E6  07B2               	addwf	sprintf@ap,f
  5523                           
  5524                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  5525  00E7  1FB4               	btfss	sprintf@val+1,7
  5526  00E8  28FF               	goto	l4152
  5527                           
  5528                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  5529  00E9  3003               	movlw	3
  5530  00EA  00FF               	movwf	127
  5531  00EB  087F               	movf	127,w
  5532  00EC  04B5               	iorwf	sprintf@flag,f
  5533                           
  5534                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  5535  00ED  09B3               	comf	sprintf@val,f
  5536  00EE  09B4               	comf	sprintf@val+1,f
  5537  00EF  0AB3               	incf	sprintf@val,f
  5538  00F0  1903               	skipnz
  5539  00F1  0AB4               	incf	sprintf@val+1,f
  5540  00F2  28FF               	goto	l4152
  5541  00F3                     l4148:
  5542                           
  5543                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5544  00F3  0832               	movf	sprintf@ap,w
  5545  00F4  0084               	movwf	4
  5546  00F5  1383               	bcf	3,7	;select IRP bank0
  5547  00F6  0800               	movf	0,w
  5548  00F7  00B3               	movwf	sprintf@val
  5549  00F8  0A84               	incf	4,f
  5550  00F9  0800               	movf	0,w
  5551  00FA  00B4               	movwf	sprintf@val+1
  5552  00FB  3002               	movlw	2
  5553  00FC  00FF               	movwf	127
  5554  00FD  087F               	movf	127,w
  5555  00FE  07B2               	addwf	sprintf@ap,f
  5556  00FF                     l4152:
  5557                           
  5558                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5559  00FF  01B8               	clrf	sprintf@c
  5560  0100  0AB8               	incf	sprintf@c,f
  5561  0101                     l4158:
  5562                           
  5563                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  5564  0101  0838               	movf	sprintf@c,w
  5565  0102  00AE               	movwf	??_sprintf
  5566  0103  072E               	addwf	??_sprintf,w
  5567  0104  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5568  0105  0084               	movwf	4
  5569  0106  120A  118A  270A  120A  118A  	fcall	stringdir
  5570  010B  00AF               	movwf	??_sprintf+1
  5571  010C  120A  118A  270A  120A  118A  	fcall	stringdir
  5572  0111  00B0               	movwf	??_sprintf+2
  5573  0112  0830               	movf	??_sprintf+2,w
  5574  0113  0234               	subwf	sprintf@val+1,w
  5575  0114  1D03               	skipz
  5576  0115  2918               	goto	u4625
  5577  0116  082F               	movf	??_sprintf+1,w
  5578  0117  0233               	subwf	sprintf@val,w
  5579  0118                     u4625:
  5580  0118  1C03               	btfss	3,0
  5581  0119  2922               	goto	l4166
  5582  011A  3001               	movlw	1
  5583  011B  00FF               	movwf	127
  5584  011C  087F               	movf	127,w
  5585  011D  07B8               	addwf	sprintf@c,f
  5586  011E  3005               	movlw	5
  5587  011F  0638               	xorwf	sprintf@c,w
  5588  0120  1D03               	btfss	3,2
  5589  0121  2901               	goto	l4158
  5590  0122                     l4166:
  5591                           
  5592                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  5593  0122  0836               	movf	sprintf@width,w
  5594  0123  0437               	iorwf	sprintf@width+1,w
  5595  0124  1903               	btfsc	3,2
  5596  0125  2930               	goto	l609
  5597  0126  0835               	movf	sprintf@flag,w
  5598  0127  3903               	andlw	3
  5599  0128  1903               	btfsc	3,2
  5600  0129  2930               	goto	l609
  5601                           
  5602                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1372:    width--;
  5603  012A  30FF               	movlw	255
  5604  012B  07B6               	addwf	sprintf@width,f
  5605  012C  1803               	skipnc
  5606  012D  0AB7               	incf	sprintf@width+1,f
  5607  012E  30FF               	movlw	255
  5608  012F  07B7               	addwf	sprintf@width+1,f
  5609  0130                     l609:
  5610                           
  5611                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  5612  0130  0837               	movf	sprintf@width+1,w
  5613  0131  3A80               	xorlw	128
  5614  0132  3C80               	sublw	128
  5615  0133  1D03               	skipz
  5616  0134  2937               	goto	u4665
  5617  0135  0836               	movf	sprintf@width,w
  5618  0136  0238               	subwf	sprintf@c,w
  5619  0137                     u4665:
  5620  0137  1803               	skipnc
  5621  0138  2945               	goto	l4174
  5622                           
  5623                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  5624  0139  1283               	bcf	3,5	;RP0=0, select bank0
  5625  013A  1303               	bcf	3,6	;RP1=0, select bank0
  5626  013B  0838               	movf	sprintf@c,w
  5627  013C  00AE               	movwf	??_sprintf
  5628  013D  01AF               	clrf	??_sprintf+1
  5629  013E  082E               	movf	??_sprintf,w
  5630  013F  02B6               	subwf	sprintf@width,f
  5631  0140  082F               	movf	??_sprintf+1,w
  5632  0141  1C03               	skipc
  5633  0142  03B7               	decf	sprintf@width+1,f
  5634  0143  02B7               	subwf	sprintf@width+1,f
  5635  0144  2949               	goto	l4176
  5636  0145                     l4174:
  5637                           
  5638                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  5639  0145  1283               	bcf	3,5	;RP0=0, select bank0
  5640  0146  1303               	bcf	3,6	;RP1=0, select bank0
  5641  0147  01B6               	clrf	sprintf@width
  5642  0148  01B7               	clrf	sprintf@width+1
  5643  0149                     l4176:
  5644                           
  5645                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  5646  0149  1D35               	btfss	sprintf@flag,2
  5647  014A  2970               	goto	l4192
  5648                           
  5649                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  5650  014B  0835               	movf	sprintf@flag,w
  5651  014C  3903               	andlw	3
  5652  014D  1903               	btfsc	3,2
  5653  014E  295A               	goto	l4184
  5654                           
  5655                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  5656  014F  302D               	movlw	45
  5657  0150  00FF               	movwf	127
  5658  0151  0839               	movf	sprintf@sp,w
  5659  0152  0084               	movwf	4
  5660  0153  087F               	movf	127,w
  5661  0154  1383               	bcf	3,7	;select IRP bank0
  5662  0155  0080               	movwf	0
  5663  0156  3001               	movlw	1
  5664  0157  00FF               	movwf	127
  5665  0158  087F               	movf	127,w
  5666  0159  07B9               	addwf	sprintf@sp,f
  5667  015A                     l4184:
  5668                           
  5669                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  5670  015A  0836               	movf	sprintf@width,w
  5671  015B  0437               	iorwf	sprintf@width+1,w
  5672  015C  1903               	btfsc	3,2
  5673  015D  2998               	goto	l4206
  5674                           
  5675                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  5676  015E  3030               	movlw	48
  5677  015F  00FF               	movwf	127
  5678  0160  0839               	movf	sprintf@sp,w
  5679  0161  0084               	movwf	4
  5680  0162  087F               	movf	127,w
  5681  0163  1383               	bcf	3,7	;select IRP bank0
  5682  0164  0080               	movwf	0
  5683  0165  3001               	movlw	1
  5684  0166  00FF               	movwf	127
  5685  0167  087F               	movf	127,w
  5686  0168  07B9               	addwf	sprintf@sp,f
  5687  0169  30FF               	movlw	255
  5688  016A  07B6               	addwf	sprintf@width,f
  5689  016B  1803               	skipnc
  5690  016C  0AB7               	incf	sprintf@width+1,f
  5691  016D  30FF               	movlw	255
  5692  016E  07B7               	addwf	sprintf@width+1,f
  5693  016F  295A               	goto	l4184
  5694  0170                     l4192:
  5695                           
  5696                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1450:    if(width
  5697  0170  0836               	movf	sprintf@width,w
  5698  0171  0437               	iorwf	sprintf@width+1,w
  5699  0172  1903               	btfsc	3,2
  5700  0173  2989               	goto	l4200
  5701  0174                     l4194:
  5702                           
  5703                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  5704  0174  3020               	movlw	32
  5705  0175  00FF               	movwf	127
  5706  0176  0839               	movf	sprintf@sp,w
  5707  0177  0084               	movwf	4
  5708  0178  087F               	movf	127,w
  5709  0179  1383               	bcf	3,7	;select IRP bank0
  5710  017A  0080               	movwf	0
  5711  017B  3001               	movlw	1
  5712  017C  00FF               	movwf	127
  5713  017D  087F               	movf	127,w
  5714  017E  07B9               	addwf	sprintf@sp,f
  5715  017F  30FF               	movlw	255
  5716  0180  07B6               	addwf	sprintf@width,f
  5717  0181  1803               	skipnc
  5718  0182  0AB7               	incf	sprintf@width+1,f
  5719  0183  30FF               	movlw	255
  5720  0184  07B7               	addwf	sprintf@width+1,f
  5721  0185  0836               	movf	sprintf@width,w
  5722  0186  0437               	iorwf	sprintf@width+1,w
  5723  0187  1D03               	btfss	3,2
  5724  0188  2974               	goto	l4194
  5725  0189                     l4200:
  5726                           
  5727                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  5728  0189  0835               	movf	sprintf@flag,w
  5729  018A  3903               	andlw	3
  5730  018B  1903               	btfsc	3,2
  5731  018C  2998               	goto	l4206
  5732                           
  5733                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  5734  018D  302D               	movlw	45
  5735  018E  00FF               	movwf	127
  5736  018F  0839               	movf	sprintf@sp,w
  5737  0190  0084               	movwf	4
  5738  0191  087F               	movf	127,w
  5739  0192  1383               	bcf	3,7	;select IRP bank0
  5740  0193  0080               	movwf	0
  5741  0194  3001               	movlw	1
  5742  0195  00FF               	movwf	127
  5743  0196  087F               	movf	127,w
  5744  0197  07B9               	addwf	sprintf@sp,f
  5745  0198                     l4206:
  5746                           
  5747                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  5748  0198  0838               	movf	sprintf@c,w
  5749  0199  00FF               	movwf	127
  5750  019A  087F               	movf	127,w
  5751  019B  00B1               	movwf	sprintf@prec
  5752  019C                     l4214:	
  5753                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  5754                           
  5755                           
  5756                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  5757  019C  30FF               	movlw	255
  5758  019D  00FF               	movwf	127
  5759  019E  087F               	movf	127,w
  5760  019F  07B1               	addwf	sprintf@prec,f
  5761  01A0  0A31               	incf	sprintf@prec,w
  5762  01A1  1903               	btfsc	3,2
  5763  01A2  2834               	goto	l4216
  5764                           
  5765                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  5766  01A3  300A               	movlw	10
  5767  01A4  00A7               	movwf	___lwmod@divisor
  5768  01A5  3000               	movlw	0
  5769  01A6  00A8               	movwf	___lwmod@divisor+1
  5770  01A7  0831               	movf	sprintf@prec,w
  5771  01A8  00AE               	movwf	??_sprintf
  5772  01A9  072E               	addwf	??_sprintf,w
  5773  01AA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5774  01AB  0084               	movwf	4
  5775  01AC  120A  118A  270A  120A  118A  	fcall	stringdir
  5776  01B1  00A0               	movwf	___lwdiv@divisor
  5777  01B2  120A  118A  270A  120A  118A  	fcall	stringdir
  5778  01B7  00A1               	movwf	___lwdiv@divisor+1
  5779  01B8  0834               	movf	sprintf@val+1,w
  5780  01B9  00A3               	movwf	___lwdiv@dividend+1
  5781  01BA  0833               	movf	sprintf@val,w
  5782  01BB  00A2               	movwf	___lwdiv@dividend
  5783  01BC  160A  118A  24FC  120A  118A  	fcall	___lwdiv
  5784  01C1  0821               	movf	?___lwdiv+1,w
  5785  01C2  00AA               	movwf	___lwmod@dividend+1
  5786  01C3  0820               	movf	?___lwdiv,w
  5787  01C4  00A9               	movwf	___lwmod@dividend
  5788  01C5  160A  118A  2497  120A  118A  	fcall	___lwmod
  5789  01CA  0827               	movf	?___lwmod,w
  5790  01CB  3E30               	addlw	48
  5791  01CC  00FF               	movwf	127
  5792  01CD  087F               	movf	127,w
  5793  01CE  00B8               	movwf	sprintf@c
  5794                           
  5795                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  5796  01CF  0838               	movf	sprintf@c,w
  5797  01D0  00FF               	movwf	127
  5798  01D1  0839               	movf	sprintf@sp,w
  5799  01D2  0084               	movwf	4
  5800  01D3  087F               	movf	127,w
  5801  01D4  1383               	bcf	3,7	;select IRP bank0
  5802  01D5  0080               	movwf	0
  5803  01D6  3001               	movlw	1
  5804  01D7  00FF               	movwf	127
  5805  01D8  087F               	movf	127,w
  5806  01D9  07B9               	addwf	sprintf@sp,f
  5807  01DA  299C               	goto	l4214
  5808  01DB                     l4218:
  5809                           
  5810                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  5811  01DB  0839               	movf	sprintf@sp,w
  5812  01DC  0084               	movwf	4
  5813  01DD  1383               	bcf	3,7	;select IRP bank0
  5814  01DE  0180               	clrf	0
  5815  01DF  0008               	return
  5816  01E0                     __end_of_sprintf:
  5817                           
  5818                           	psect	text19
  5819  133E                     __ptext19:	
  5820 ;; *************** function _isdigit *****************
  5821 ;; Defined at:
  5822 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\isdigit.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  c               1    wreg     unsigned char 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  c               1    5[COMMON] unsigned char 
  5827 ;; Return value:  Size  Location     Type
  5828 ;;		None               void
  5829 ;; Registers used:
  5830 ;;		wreg, status,2, status,0
  5831 ;; Tracked objects:
  5832 ;;		On entry : 300/800
  5833 ;;		On exit  : 300/0
  5834 ;;		Unchanged: 300/0
  5835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5836 ;;      Params:         0       0       0       0       0
  5837 ;;      Locals:         2       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0
  5839 ;;      Totals:         2       0       0       0       0
  5840 ;;Total ram usage:        2 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    2
  5843 ;; This function calls:
  5844 ;;		Nothing
  5845 ;; This function is called by:
  5846 ;;		_sprintf
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           
  5851                           ;psect for function _isdigit
  5852  133E                     _isdigit:
  5853                           
  5854                           ;incstack = 0
  5855                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5856                           ;isdigit@c stored from wreg
  5857  133E  00F5               	movwf	isdigit@c
  5858  133F  01F4               	clrf	_isdigit$1103
  5859  1340  303A               	movlw	58
  5860  1341  0275               	subwf	isdigit@c,w
  5861  1342  1803               	skipnc
  5862  1343  2B4A               	goto	l3952
  5863  1344  3030               	movlw	48
  5864  1345  0275               	subwf	isdigit@c,w
  5865  1346  1C03               	skipc
  5866  1347  2B4A               	goto	l3952
  5867  1348  01F4               	clrf	_isdigit$1103
  5868  1349  0AF4               	incf	_isdigit$1103,f
  5869  134A                     l3952:
  5870  134A  0C74               	rrf	_isdigit$1103,w
  5871  134B  0008               	return
  5872  134C                     __end_of_isdigit:
  5873                           
  5874                           	psect	text20
  5875  1418                     __ptext20:	
  5876 ;; *************** function ___wmul *****************
  5877 ;; Defined at:
  5878 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\Umul16.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  multiplier      2    7[BANK0 ] unsigned int 
  5881 ;;  multiplicand    2    9[BANK0 ] unsigned int 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  product         2    4[COMMON] unsigned int 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  2    7[BANK0 ] unsigned int 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 300/0
  5890 ;;		On exit  : 300/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5893 ;;      Params:         0       4       0       0       0
  5894 ;;      Locals:         2       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0
  5896 ;;      Totals:         2       4       0       0       0
  5897 ;;Total ram usage:        6 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    2
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_E_Task1_Rpm
  5904 ;;		_sprintf
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           
  5909                           ;psect for function ___wmul
  5910  1418                     ___wmul:
  5911                           
  5912                           ;incstack = 0
  5913                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5914  1418  01F4               	clrf	___wmul@product
  5915  1419  01F5               	clrf	___wmul@product+1
  5916  141A                     l3958:
  5917  141A  1C27               	btfss	___wmul@multiplier,0
  5918  141B  2C22               	goto	l630
  5919  141C  0829               	movf	___wmul@multiplicand,w
  5920  141D  07F4               	addwf	___wmul@product,f
  5921  141E  1803               	skipnc
  5922  141F  0AF5               	incf	___wmul@product+1,f
  5923  1420  082A               	movf	___wmul@multiplicand+1,w
  5924  1421  07F5               	addwf	___wmul@product+1,f
  5925  1422                     l630:
  5926  1422  3001               	movlw	1
  5927  1423                     u4265:
  5928  1423  1003               	clrc
  5929  1424  0DA9               	rlf	___wmul@multiplicand,f
  5930  1425  0DAA               	rlf	___wmul@multiplicand+1,f
  5931  1426  3EFF               	addlw	-1
  5932  1427  1D03               	skipz
  5933  1428  2C23               	goto	u4265
  5934  1429  3001               	movlw	1
  5935  142A                     u4275:
  5936  142A  1003               	clrc
  5937  142B  0CA8               	rrf	___wmul@multiplier+1,f
  5938  142C  0CA7               	rrf	___wmul@multiplier,f
  5939  142D  3EFF               	addlw	-1
  5940  142E  1D03               	skipz
  5941  142F  2C2A               	goto	u4275
  5942  1430  0827               	movf	___wmul@multiplier,w
  5943  1431  0428               	iorwf	___wmul@multiplier+1,w
  5944  1432  1D03               	btfss	3,2
  5945  1433  2C1A               	goto	l3958
  5946  1434  0875               	movf	___wmul@product+1,w
  5947  1435  00A8               	movwf	?___wmul+1
  5948  1436  0874               	movf	___wmul@product,w
  5949  1437  00A7               	movwf	?___wmul
  5950  1438  0008               	return
  5951  1439                     __end_of___wmul:
  5952                           
  5953                           	psect	text21
  5954  1497                     __ptext21:	
  5955 ;; *************** function ___lwmod *****************
  5956 ;; Defined at:
  5957 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwmod.c"
  5958 ;; Parameters:    Size  Location     Type
  5959 ;;  divisor         2    7[BANK0 ] unsigned int 
  5960 ;;  dividend        2    9[BANK0 ] unsigned int 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  counter         1    4[COMMON] unsigned char 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  2    7[BANK0 ] unsigned int 
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0, btemp+1
  5967 ;; Tracked objects:
  5968 ;;		On entry : 300/0
  5969 ;;		On exit  : 300/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5972 ;;      Params:         0       4       0       0       0
  5973 ;;      Locals:         1       0       0       0       0
  5974 ;;      Temps:          0       0       0       0       0
  5975 ;;      Totals:         1       4       0       0       0
  5976 ;;Total ram usage:        5 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    2
  5979 ;; This function calls:
  5980 ;;		Nothing
  5981 ;; This function is called by:
  5982 ;;		_sprintf
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function ___lwmod
  5988  1497                     ___lwmod:
  5989                           
  5990                           ;incstack = 0
  5991                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  5992  1497  0827               	movf	___lwmod@divisor,w
  5993  1498  0428               	iorwf	___lwmod@divisor+1,w
  5994  1499  1903               	btfsc	3,2
  5995  149A  2CC4               	goto	l4050
  5996  149B  01F4               	clrf	___lwmod@counter
  5997  149C  0AF4               	incf	___lwmod@counter,f
  5998  149D                     l4040:
  5999  149D  1BA8               	btfsc	___lwmod@divisor+1,7
  6000  149E  2CAB               	goto	l4042
  6001  149F  3001               	movlw	1
  6002  14A0                     u4495:
  6003  14A0  1003               	clrc
  6004  14A1  0DA7               	rlf	___lwmod@divisor,f
  6005  14A2  0DA8               	rlf	___lwmod@divisor+1,f
  6006  14A3  3EFF               	addlw	-1
  6007  14A4  1D03               	skipz
  6008  14A5  2CA0               	goto	u4495
  6009  14A6  3001               	movlw	1
  6010  14A7  00FF               	movwf	127
  6011  14A8  087F               	movf	127,w
  6012  14A9  07F4               	addwf	___lwmod@counter,f
  6013  14AA  2C9D               	goto	l4040
  6014  14AB                     l4042:
  6015  14AB  0828               	movf	___lwmod@divisor+1,w
  6016  14AC  022A               	subwf	___lwmod@dividend+1,w
  6017  14AD  1D03               	skipz
  6018  14AE  2CB1               	goto	u4515
  6019  14AF  0827               	movf	___lwmod@divisor,w
  6020  14B0  0229               	subwf	___lwmod@dividend,w
  6021  14B1                     u4515:
  6022  14B1  1C03               	skipc
  6023  14B2  2CB9               	goto	l4046
  6024  14B3  0827               	movf	___lwmod@divisor,w
  6025  14B4  02A9               	subwf	___lwmod@dividend,f
  6026  14B5  0828               	movf	___lwmod@divisor+1,w
  6027  14B6  1C03               	skipc
  6028  14B7  03AA               	decf	___lwmod@dividend+1,f
  6029  14B8  02AA               	subwf	___lwmod@dividend+1,f
  6030  14B9                     l4046:
  6031  14B9  3001               	movlw	1
  6032  14BA                     u4525:
  6033  14BA  1003               	clrc
  6034  14BB  0CA8               	rrf	___lwmod@divisor+1,f
  6035  14BC  0CA7               	rrf	___lwmod@divisor,f
  6036  14BD  3EFF               	addlw	-1
  6037  14BE  1D03               	skipz
  6038  14BF  2CBA               	goto	u4525
  6039  14C0  3001               	movlw	1
  6040  14C1  02F4               	subwf	___lwmod@counter,f
  6041  14C2  1D03               	btfss	3,2
  6042  14C3  2CAB               	goto	l4042
  6043  14C4                     l4050:
  6044  14C4  082A               	movf	___lwmod@dividend+1,w
  6045  14C5  00A8               	movwf	?___lwmod+1
  6046  14C6  0829               	movf	___lwmod@dividend,w
  6047  14C7  00A7               	movwf	?___lwmod
  6048  14C8  0008               	return
  6049  14C9                     __end_of___lwmod:
  6050                           
  6051                           	psect	text22
  6052  14FC                     __ptext22:	
  6053 ;; *************** function ___lwdiv *****************
  6054 ;; Defined at:
  6055 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\lwdiv.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  divisor         2    0[BANK0 ] unsigned int 
  6058 ;;  dividend        2    2[BANK0 ] unsigned int 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  quotient        2    5[BANK0 ] unsigned int 
  6061 ;;  counter         1    4[BANK0 ] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  2    0[BANK0 ] unsigned int 
  6064 ;; Registers used:
  6065 ;;		wreg, status,2, status,0, btemp+1
  6066 ;; Tracked objects:
  6067 ;;		On entry : 300/0
  6068 ;;		On exit  : 300/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6071 ;;      Params:         0       4       0       0       0
  6072 ;;      Locals:         0       3       0       0       0
  6073 ;;      Temps:          0       0       0       0       0
  6074 ;;      Totals:         0       7       0       0       0
  6075 ;;Total ram usage:        7 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    2
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_E_Task1_Rpm
  6082 ;;		_sprintf
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           
  6087                           ;psect for function ___lwdiv
  6088  14FC                     ___lwdiv:
  6089                           
  6090                           ;incstack = 0
  6091                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  6092  14FC  01A5               	clrf	___lwdiv@quotient
  6093  14FD  01A6               	clrf	___lwdiv@quotient+1
  6094  14FE  0820               	movf	___lwdiv@divisor,w
  6095  14FF  0421               	iorwf	___lwdiv@divisor+1,w
  6096  1500  1903               	btfsc	3,2
  6097  1501  2D33               	goto	l4028
  6098  1502  01A4               	clrf	___lwdiv@counter
  6099  1503  0AA4               	incf	___lwdiv@counter,f
  6100  1504                     l4016:
  6101  1504  1BA1               	btfsc	___lwdiv@divisor+1,7
  6102  1505  2D12               	goto	l4018
  6103  1506  3001               	movlw	1
  6104  1507                     u4425:
  6105  1507  1003               	clrc
  6106  1508  0DA0               	rlf	___lwdiv@divisor,f
  6107  1509  0DA1               	rlf	___lwdiv@divisor+1,f
  6108  150A  3EFF               	addlw	-1
  6109  150B  1D03               	skipz
  6110  150C  2D07               	goto	u4425
  6111  150D  3001               	movlw	1
  6112  150E  00FF               	movwf	127
  6113  150F  087F               	movf	127,w
  6114  1510  07A4               	addwf	___lwdiv@counter,f
  6115  1511  2D04               	goto	l4016
  6116  1512                     l4018:
  6117  1512  3001               	movlw	1
  6118  1513                     u4445:
  6119  1513  1003               	clrc
  6120  1514  0DA5               	rlf	___lwdiv@quotient,f
  6121  1515  0DA6               	rlf	___lwdiv@quotient+1,f
  6122  1516  3EFF               	addlw	-1
  6123  1517  1D03               	skipz
  6124  1518  2D13               	goto	u4445
  6125  1519  0821               	movf	___lwdiv@divisor+1,w
  6126  151A  0223               	subwf	___lwdiv@dividend+1,w
  6127  151B  1D03               	skipz
  6128  151C  2D1F               	goto	u4455
  6129  151D  0820               	movf	___lwdiv@divisor,w
  6130  151E  0222               	subwf	___lwdiv@dividend,w
  6131  151F                     u4455:
  6132  151F  1C03               	skipc
  6133  1520  2D28               	goto	l4024
  6134  1521  0820               	movf	___lwdiv@divisor,w
  6135  1522  02A2               	subwf	___lwdiv@dividend,f
  6136  1523  0821               	movf	___lwdiv@divisor+1,w
  6137  1524  1C03               	skipc
  6138  1525  03A3               	decf	___lwdiv@dividend+1,f
  6139  1526  02A3               	subwf	___lwdiv@dividend+1,f
  6140  1527  1425               	bsf	___lwdiv@quotient,0
  6141  1528                     l4024:
  6142  1528  3001               	movlw	1
  6143  1529                     u4465:
  6144  1529  1003               	clrc
  6145  152A  0CA1               	rrf	___lwdiv@divisor+1,f
  6146  152B  0CA0               	rrf	___lwdiv@divisor,f
  6147  152C  3EFF               	addlw	-1
  6148  152D  1D03               	skipz
  6149  152E  2D29               	goto	u4465
  6150  152F  3001               	movlw	1
  6151  1530  02A4               	subwf	___lwdiv@counter,f
  6152  1531  1D03               	btfss	3,2
  6153  1532  2D12               	goto	l4018
  6154  1533                     l4028:
  6155  1533  0826               	movf	___lwdiv@quotient+1,w
  6156  1534  00A1               	movwf	?___lwdiv+1
  6157  1535  0825               	movf	___lwdiv@quotient,w
  6158  1536  00A0               	movwf	?___lwdiv
  6159  1537  0008               	return
  6160  1538                     __end_of___lwdiv:
  6161                           
  6162                           	psect	text23
  6163  0861                     __ptext23:	
  6164 ;; *************** function ___fttol *****************
  6165 ;; Defined at:
  6166 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\fttol.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  f1              3   42[BANK0 ] float 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  lval            4   50[BANK0 ] unsigned long 
  6171 ;;  exp1            1   54[BANK0 ] unsigned char 
  6172 ;;  sign1           1   49[BANK0 ] unsigned char 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  4   42[BANK0 ] long 
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0, btemp+1
  6177 ;; Tracked objects:
  6178 ;;		On entry : 300/800
  6179 ;;		On exit  : 300/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6182 ;;      Params:         0       4       0       0       0
  6183 ;;      Locals:         0       6       0       0       0
  6184 ;;      Temps:          0       3       0       0       0
  6185 ;;      Totals:         0      13       0       0       0
  6186 ;;Total ram usage:       13 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; Hardware stack levels required when called:    2
  6189 ;; This function calls:
  6190 ;;		Nothing
  6191 ;; This function is called by:
  6192 ;;		_E_Task1_Rpm
  6193 ;;		_E_Task1_Pwm
  6194 ;;		_E_Task1_Min
  6195 ;;		_E_Task1_Temp
  6196 ;;		_Task2
  6197 ;;		_Pwm1_init
  6198 ;;		_Pwm1
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function ___fttol
  6204  0861                     ___fttol:
  6205                           
  6206                           ;incstack = 0
  6207                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  6208  0861  084A               	movf	___fttol@f1,w
  6209  0862  00CE               	movwf	??___fttol
  6210  0863  084B               	movf	___fttol@f1+1,w
  6211  0864  00CF               	movwf	??___fttol+1
  6212  0865  084C               	movf	___fttol@f1+2,w
  6213  0866  00D0               	movwf	??___fttol+2
  6214  0867  1003               	clrc
  6215  0868  0D4F               	rlf	??___fttol+1,w
  6216  0869  0D50               	rlf	??___fttol+2,w
  6217  086A  00FF               	movwf	127
  6218  086B  087F               	movf	127,w
  6219  086C  00D6               	movwf	___fttol@exp1
  6220  086D  0856               	movf	___fttol@exp1,w
  6221  086E  1D03               	btfss	3,2
  6222  086F  2879               	goto	l4422
  6223  0870                     l4418:
  6224  0870  3000               	movlw	0
  6225  0871  00CD               	movwf	?___fttol+3
  6226  0872  3000               	movlw	0
  6227  0873  00CC               	movwf	?___fttol+2
  6228  0874  3000               	movlw	0
  6229  0875  00CB               	movwf	?___fttol+1
  6230  0876  3000               	movlw	0
  6231  0877  00CA               	movwf	?___fttol
  6232  0878  0008               	return
  6233  0879                     l4422:
  6234  0879  084A               	movf	___fttol@f1,w
  6235  087A  00CE               	movwf	??___fttol
  6236  087B  084B               	movf	___fttol@f1+1,w
  6237  087C  00CF               	movwf	??___fttol+1
  6238  087D  084C               	movf	___fttol@f1+2,w
  6239  087E  00D0               	movwf	??___fttol+2
  6240  087F  3017               	movlw	23
  6241  0880                     u5205:
  6242  0880  1003               	clrc
  6243  0881  0CD0               	rrf	??___fttol+2,f
  6244  0882  0CCF               	rrf	??___fttol+1,f
  6245  0883  0CCE               	rrf	??___fttol,f
  6246  0884  3EFF               	addlw	-1
  6247  0885  1D03               	skipz
  6248  0886  2880               	goto	u5205
  6249  0887  084E               	movf	??___fttol,w
  6250  0888  00FF               	movwf	127
  6251  0889  087F               	movf	127,w
  6252  088A  00D1               	movwf	___fttol@sign1
  6253  088B  17CB               	bsf	___fttol@f1+1,7
  6254  088C  30FF               	movlw	255
  6255  088D  05CA               	andwf	___fttol@f1,f
  6256  088E  30FF               	movlw	255
  6257  088F  05CB               	andwf	___fttol@f1+1,f
  6258  0890  3000               	movlw	0
  6259  0891  05CC               	andwf	___fttol@f1+2,f
  6260  0892  084A               	movf	___fttol@f1,w
  6261  0893  00D2               	movwf	___fttol@lval
  6262  0894  084B               	movf	___fttol@f1+1,w
  6263  0895  00D3               	movwf	___fttol@lval+1
  6264  0896  084C               	movf	___fttol@f1+2,w
  6265  0897  00D4               	movwf	___fttol@lval+2
  6266  0898  01D5               	clrf	___fttol@lval+3
  6267  0899  308E               	movlw	142
  6268  089A  02D6               	subwf	___fttol@exp1,f
  6269  089B  1FD6               	btfss	___fttol@exp1,7
  6270  089C  28B2               	goto	l4444
  6271  089D  0856               	movf	___fttol@exp1,w
  6272  089E  3A80               	xorlw	128
  6273  089F  3E8F               	addlw	143
  6274  08A0  1C03               	btfss	3,0
  6275  08A1  2870               	goto	l4418
  6276  08A2                     l4440:
  6277  08A2  3001               	movlw	1
  6278  08A3                     u5235:
  6279  08A3  1003               	clrc
  6280  08A4  0CD5               	rrf	___fttol@lval+3,f
  6281  08A5  0CD4               	rrf	___fttol@lval+2,f
  6282  08A6  0CD3               	rrf	___fttol@lval+1,f
  6283  08A7  0CD2               	rrf	___fttol@lval,f
  6284  08A8  3EFF               	addlw	-1
  6285  08A9  1D03               	skipz
  6286  08AA  28A3               	goto	u5235
  6287  08AB  3001               	movlw	1
  6288  08AC  00FF               	movwf	127
  6289  08AD  087F               	movf	127,w
  6290  08AE  07D6               	addwf	___fttol@exp1,f
  6291  08AF  1903               	btfsc	3,2
  6292  08B0  28C5               	goto	l4452
  6293  08B1  28A2               	goto	l4440
  6294  08B2                     l4444:
  6295  08B2  3018               	movlw	24
  6296  08B3  0256               	subwf	___fttol@exp1,w
  6297  08B4  1803               	btfsc	3,0
  6298  08B5  2870               	goto	l4418
  6299  08B6                     l933:
  6300  08B6  0856               	movf	___fttol@exp1,w
  6301  08B7  1903               	btfsc	3,2
  6302  08B8  28C5               	goto	l4452
  6303  08B9  3001               	movlw	1
  6304  08BA  00CE               	movwf	??___fttol
  6305  08BB                     u5265:
  6306  08BB  1003               	clrc
  6307  08BC  0DD2               	rlf	___fttol@lval,f
  6308  08BD  0DD3               	rlf	___fttol@lval+1,f
  6309  08BE  0DD4               	rlf	___fttol@lval+2,f
  6310  08BF  0DD5               	rlf	___fttol@lval+3,f
  6311  08C0  0BCE               	decfsz	??___fttol,f
  6312  08C1  28BB               	goto	u5265
  6313  08C2  3001               	movlw	1
  6314  08C3  02D6               	subwf	___fttol@exp1,f
  6315  08C4  28B6               	goto	l933
  6316  08C5                     l4452:
  6317  08C5  0851               	movf	___fttol@sign1,w
  6318  08C6  1903               	btfsc	3,2
  6319  08C7  28D3               	goto	l4456
  6320  08C8  09D2               	comf	___fttol@lval,f
  6321  08C9  09D3               	comf	___fttol@lval+1,f
  6322  08CA  09D4               	comf	___fttol@lval+2,f
  6323  08CB  09D5               	comf	___fttol@lval+3,f
  6324  08CC  0AD2               	incf	___fttol@lval,f
  6325  08CD  1903               	skipnz
  6326  08CE  0AD3               	incf	___fttol@lval+1,f
  6327  08CF  1903               	skipnz
  6328  08D0  0AD4               	incf	___fttol@lval+2,f
  6329  08D1  1903               	skipnz
  6330  08D2  0AD5               	incf	___fttol@lval+3,f
  6331  08D3                     l4456:
  6332  08D3  0855               	movf	___fttol@lval+3,w
  6333  08D4  00CD               	movwf	?___fttol+3
  6334  08D5  0854               	movf	___fttol@lval+2,w
  6335  08D6  00CC               	movwf	?___fttol+2
  6336  08D7  0853               	movf	___fttol@lval+1,w
  6337  08D8  00CB               	movwf	?___fttol+1
  6338  08D9  0852               	movf	___fttol@lval,w
  6339  08DA  00CA               	movwf	?___fttol
  6340  08DB  0008               	return
  6341  08DC                     __end_of___fttol:
  6342                           
  6343                           	psect	text24
  6344  0CBA                     __ptext24:	
  6345 ;; *************** function ___ftmul *****************
  6346 ;; Defined at:
  6347 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftmul.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  f1              3   12[BANK0 ] float 
  6350 ;;  f2              3   15[BANK0 ] float 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  6353 ;;  sign            1   26[BANK0 ] unsigned char 
  6354 ;;  cntr            1   25[BANK0 ] unsigned char 
  6355 ;;  exp             1   21[BANK0 ] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  3   12[BANK0 ] float 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 300/800
  6362 ;;		On exit  : 300/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6365 ;;      Params:         0       6       0       0       0
  6366 ;;      Locals:         0       6       0       0       0
  6367 ;;      Temps:          0       3       0       0       0
  6368 ;;      Totals:         0      15       0       0       0
  6369 ;;Total ram usage:       15 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    3
  6372 ;; This function calls:
  6373 ;;		___ftpack
  6374 ;; This function is called by:
  6375 ;;		_E_Task1_Rpm
  6376 ;;		_E_Task1_Pwm
  6377 ;;		_E_Task1_Min
  6378 ;;		_E_Task1_Temp
  6379 ;;		_Pwm1
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           
  6384                           ;psect for function ___ftmul
  6385  0CBA                     ___ftmul:
  6386                           
  6387                           ;incstack = 0
  6388                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6389  0CBA  082C               	movf	___ftmul@f1,w
  6390  0CBB  00B2               	movwf	??___ftmul
  6391  0CBC  082D               	movf	___ftmul@f1+1,w
  6392  0CBD  00B3               	movwf	??___ftmul+1
  6393  0CBE  082E               	movf	___ftmul@f1+2,w
  6394  0CBF  00B4               	movwf	??___ftmul+2
  6395  0CC0  1003               	clrc
  6396  0CC1  0D33               	rlf	??___ftmul+1,w
  6397  0CC2  0D34               	rlf	??___ftmul+2,w
  6398  0CC3  00FF               	movwf	127
  6399  0CC4  087F               	movf	127,w
  6400  0CC5  00B5               	movwf	___ftmul@exp
  6401  0CC6  0835               	movf	___ftmul@exp,w
  6402  0CC7  1D03               	btfss	3,2
  6403  0CC8  2CD0               	goto	l4366
  6404  0CC9  3000               	movlw	0
  6405  0CCA  00AC               	movwf	?___ftmul
  6406  0CCB  3000               	movlw	0
  6407  0CCC  00AD               	movwf	?___ftmul+1
  6408  0CCD  3000               	movlw	0
  6409  0CCE  00AE               	movwf	?___ftmul+2
  6410  0CCF  0008               	return
  6411  0CD0                     l4366:
  6412  0CD0  082F               	movf	___ftmul@f2,w
  6413  0CD1  00B2               	movwf	??___ftmul
  6414  0CD2  0830               	movf	___ftmul@f2+1,w
  6415  0CD3  00B3               	movwf	??___ftmul+1
  6416  0CD4  0831               	movf	___ftmul@f2+2,w
  6417  0CD5  00B4               	movwf	??___ftmul+2
  6418  0CD6  1003               	clrc
  6419  0CD7  0D33               	rlf	??___ftmul+1,w
  6420  0CD8  0D34               	rlf	??___ftmul+2,w
  6421  0CD9  00FF               	movwf	127
  6422  0CDA  087F               	movf	127,w
  6423  0CDB  00BA               	movwf	___ftmul@sign
  6424  0CDC  083A               	movf	___ftmul@sign,w
  6425  0CDD  1D03               	btfss	3,2
  6426  0CDE  2CE6               	goto	l4372
  6427  0CDF  3000               	movlw	0
  6428  0CE0  00AC               	movwf	?___ftmul
  6429  0CE1  3000               	movlw	0
  6430  0CE2  00AD               	movwf	?___ftmul+1
  6431  0CE3  3000               	movlw	0
  6432  0CE4  00AE               	movwf	?___ftmul+2
  6433  0CE5  0008               	return
  6434  0CE6                     l4372:
  6435  0CE6  083A               	movf	___ftmul@sign,w
  6436  0CE7  3E7B               	addlw	123
  6437  0CE8  00FF               	movwf	127
  6438  0CE9  087F               	movf	127,w
  6439  0CEA  07B5               	addwf	___ftmul@exp,f
  6440  0CEB  082E               	movf	___ftmul@f1+2,w
  6441  0CEC  00FF               	movwf	127
  6442  0CED  087F               	movf	127,w
  6443  0CEE  00BA               	movwf	___ftmul@sign
  6444  0CEF  0831               	movf	___ftmul@f2+2,w
  6445  0CF0  00FF               	movwf	127
  6446  0CF1  087F               	movf	127,w
  6447  0CF2  06BA               	xorwf	___ftmul@sign,f
  6448  0CF3  3080               	movlw	128
  6449  0CF4  00FF               	movwf	127
  6450  0CF5  087F               	movf	127,w
  6451  0CF6  05BA               	andwf	___ftmul@sign,f
  6452  0CF7  17AD               	bsf	___ftmul@f1+1,7
  6453  0CF8  17B0               	bsf	___ftmul@f2+1,7
  6454  0CF9  30FF               	movlw	255
  6455  0CFA  05AF               	andwf	___ftmul@f2,f
  6456  0CFB  30FF               	movlw	255
  6457  0CFC  05B0               	andwf	___ftmul@f2+1,f
  6458  0CFD  3000               	movlw	0
  6459  0CFE  05B1               	andwf	___ftmul@f2+2,f
  6460  0CFF  3000               	movlw	0
  6461  0D00  00B6               	movwf	___ftmul@f3_as_product
  6462  0D01  3000               	movlw	0
  6463  0D02  00B7               	movwf	___ftmul@f3_as_product+1
  6464  0D03  3000               	movlw	0
  6465  0D04  00B8               	movwf	___ftmul@f3_as_product+2
  6466  0D05  3007               	movlw	7
  6467  0D06  00FF               	movwf	127
  6468  0D07  087F               	movf	127,w
  6469  0D08  00B9               	movwf	___ftmul@cntr
  6470  0D09                     l4390:
  6471  0D09  1C2C               	btfss	___ftmul@f1,0
  6472  0D0A  2D19               	goto	l4394
  6473  0D0B  082F               	movf	___ftmul@f2,w
  6474  0D0C  07B6               	addwf	___ftmul@f3_as_product,f
  6475  0D0D  0830               	movf	___ftmul@f2+1,w
  6476  0D0E  1103               	clrz
  6477  0D0F  1803               	skipnc
  6478  0D10  0A30               	incf	___ftmul@f2+1,w
  6479  0D11  1D03               	btfss	3,2
  6480  0D12  07B7               	addwf	___ftmul@f3_as_product+1,f
  6481  0D13  0831               	movf	___ftmul@f2+2,w
  6482  0D14  1103               	clrz
  6483  0D15  1803               	skipnc
  6484  0D16  0A31               	incf	___ftmul@f2+2,w
  6485  0D17  1D03               	btfss	3,2
  6486  0D18  07B8               	addwf	___ftmul@f3_as_product+2,f
  6487  0D19                     l4394:
  6488  0D19  3001               	movlw	1
  6489  0D1A                     u5115:
  6490  0D1A  1003               	clrc
  6491  0D1B  0CAE               	rrf	___ftmul@f1+2,f
  6492  0D1C  0CAD               	rrf	___ftmul@f1+1,f
  6493  0D1D  0CAC               	rrf	___ftmul@f1,f
  6494  0D1E  3EFF               	addlw	-1
  6495  0D1F  1D03               	skipz
  6496  0D20  2D1A               	goto	u5115
  6497  0D21  3001               	movlw	1
  6498  0D22                     u5125:
  6499  0D22  1003               	clrc
  6500  0D23  0DAF               	rlf	___ftmul@f2,f
  6501  0D24  0DB0               	rlf	___ftmul@f2+1,f
  6502  0D25  0DB1               	rlf	___ftmul@f2+2,f
  6503  0D26  3EFF               	addlw	-1
  6504  0D27  1D03               	skipz
  6505  0D28  2D22               	goto	u5125
  6506  0D29  3001               	movlw	1
  6507  0D2A  02B9               	subwf	___ftmul@cntr,f
  6508  0D2B  1D03               	btfss	3,2
  6509  0D2C  2D09               	goto	l4390
  6510  0D2D  3009               	movlw	9
  6511  0D2E  00FF               	movwf	127
  6512  0D2F  087F               	movf	127,w
  6513  0D30  00B9               	movwf	___ftmul@cntr
  6514  0D31                     l4402:
  6515  0D31  1C2C               	btfss	___ftmul@f1,0
  6516  0D32  2D41               	goto	l4406
  6517  0D33  082F               	movf	___ftmul@f2,w
  6518  0D34  07B6               	addwf	___ftmul@f3_as_product,f
  6519  0D35  0830               	movf	___ftmul@f2+1,w
  6520  0D36  1103               	clrz
  6521  0D37  1803               	skipnc
  6522  0D38  0A30               	incf	___ftmul@f2+1,w
  6523  0D39  1D03               	btfss	3,2
  6524  0D3A  07B7               	addwf	___ftmul@f3_as_product+1,f
  6525  0D3B  0831               	movf	___ftmul@f2+2,w
  6526  0D3C  1103               	clrz
  6527  0D3D  1803               	skipnc
  6528  0D3E  0A31               	incf	___ftmul@f2+2,w
  6529  0D3F  1D03               	btfss	3,2
  6530  0D40  07B8               	addwf	___ftmul@f3_as_product+2,f
  6531  0D41                     l4406:
  6532  0D41  3001               	movlw	1
  6533  0D42                     u5165:
  6534  0D42  1003               	clrc
  6535  0D43  0CAE               	rrf	___ftmul@f1+2,f
  6536  0D44  0CAD               	rrf	___ftmul@f1+1,f
  6537  0D45  0CAC               	rrf	___ftmul@f1,f
  6538  0D46  3EFF               	addlw	-1
  6539  0D47  1D03               	skipz
  6540  0D48  2D42               	goto	u5165
  6541  0D49  3001               	movlw	1
  6542  0D4A                     u5175:
  6543  0D4A  1003               	clrc
  6544  0D4B  0CB8               	rrf	___ftmul@f3_as_product+2,f
  6545  0D4C  0CB7               	rrf	___ftmul@f3_as_product+1,f
  6546  0D4D  0CB6               	rrf	___ftmul@f3_as_product,f
  6547  0D4E  3EFF               	addlw	-1
  6548  0D4F  1D03               	skipz
  6549  0D50  2D4A               	goto	u5175
  6550  0D51  3001               	movlw	1
  6551  0D52  02B9               	subwf	___ftmul@cntr,f
  6552  0D53  1D03               	btfss	3,2
  6553  0D54  2D31               	goto	l4402
  6554  0D55  0836               	movf	___ftmul@f3_as_product,w
  6555  0D56  00A0               	movwf	___ftpack@arg
  6556  0D57  0837               	movf	___ftmul@f3_as_product+1,w
  6557  0D58  00A1               	movwf	___ftpack@arg+1
  6558  0D59  0838               	movf	___ftmul@f3_as_product+2,w
  6559  0D5A  00A2               	movwf	___ftpack@arg+2
  6560  0D5B  0835               	movf	___ftmul@exp,w
  6561  0D5C  00FF               	movwf	127
  6562  0D5D  087F               	movf	127,w
  6563  0D5E  00A3               	movwf	___ftpack@exp
  6564  0D5F  083A               	movf	___ftmul@sign,w
  6565  0D60  00FF               	movwf	127
  6566  0D61  087F               	movf	127,w
  6567  0D62  00A4               	movwf	___ftpack@sign
  6568  0D63  160A  118A  2723   	fcall	___ftpack
  6569  0D66  0820               	movf	?___ftpack,w
  6570  0D67  00AC               	movwf	?___ftmul
  6571  0D68  0821               	movf	?___ftpack+1,w
  6572  0D69  00AD               	movwf	?___ftmul+1
  6573  0D6A  0822               	movf	?___ftpack+2,w
  6574  0D6B  00AE               	movwf	?___ftmul+2
  6575  0D6C  0008               	return
  6576  0D6D                     __end_of___ftmul:
  6577                           
  6578                           	psect	text25
  6579  0AE0                     __ptext25:	
  6580 ;; *************** function ___ftdiv *****************
  6581 ;; Defined at:
  6582 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\ftdiv.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  f2              3   27[BANK0 ] float 
  6585 ;;  f1              3   30[BANK0 ] float 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  f3              3   37[BANK0 ] float 
  6588 ;;  sign            1   41[BANK0 ] unsigned char 
  6589 ;;  exp             1   40[BANK0 ] unsigned char 
  6590 ;;  cntr            1   36[BANK0 ] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  3   27[BANK0 ] float 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 300/800
  6597 ;;		On exit  : 300/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6600 ;;      Params:         0       6       0       0       0
  6601 ;;      Locals:         0       6       0       0       0
  6602 ;;      Temps:          0       3       0       0       0
  6603 ;;      Totals:         0      15       0       0       0
  6604 ;;Total ram usage:       15 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    3
  6607 ;; This function calls:
  6608 ;;		___ftpack
  6609 ;; This function is called by:
  6610 ;;		_E_Task1_Rpm
  6611 ;;		_E_Task1_Pwm
  6612 ;;		_E_Task1_Min
  6613 ;;		_E_Task1_Temp
  6614 ;;		_Task2
  6615 ;;		_Pwm1_init
  6616 ;;		_Pwm1
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function ___ftdiv
  6622  0AE0                     ___ftdiv:
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6626  0AE0  083E               	movf	___ftdiv@f1,w
  6627  0AE1  00C1               	movwf	??___ftdiv
  6628  0AE2  083F               	movf	___ftdiv@f1+1,w
  6629  0AE3  00C2               	movwf	??___ftdiv+1
  6630  0AE4  0840               	movf	___ftdiv@f1+2,w
  6631  0AE5  00C3               	movwf	??___ftdiv+2
  6632  0AE6  1003               	clrc
  6633  0AE7  0D42               	rlf	??___ftdiv+1,w
  6634  0AE8  0D43               	rlf	??___ftdiv+2,w
  6635  0AE9  00FF               	movwf	127
  6636  0AEA  087F               	movf	127,w
  6637  0AEB  00C8               	movwf	___ftdiv@exp
  6638  0AEC  0848               	movf	___ftdiv@exp,w
  6639  0AED  1D03               	btfss	3,2
  6640  0AEE  2AF6               	goto	l4324
  6641  0AEF  3000               	movlw	0
  6642  0AF0  00BB               	movwf	?___ftdiv
  6643  0AF1  3000               	movlw	0
  6644  0AF2  00BC               	movwf	?___ftdiv+1
  6645  0AF3  3000               	movlw	0
  6646  0AF4  00BD               	movwf	?___ftdiv+2
  6647  0AF5  0008               	return
  6648  0AF6                     l4324:
  6649  0AF6  083B               	movf	___ftdiv@f2,w
  6650  0AF7  00C1               	movwf	??___ftdiv
  6651  0AF8  083C               	movf	___ftdiv@f2+1,w
  6652  0AF9  00C2               	movwf	??___ftdiv+1
  6653  0AFA  083D               	movf	___ftdiv@f2+2,w
  6654  0AFB  00C3               	movwf	??___ftdiv+2
  6655  0AFC  1003               	clrc
  6656  0AFD  0D42               	rlf	??___ftdiv+1,w
  6657  0AFE  0D43               	rlf	??___ftdiv+2,w
  6658  0AFF  00FF               	movwf	127
  6659  0B00  087F               	movf	127,w
  6660  0B01  00C9               	movwf	___ftdiv@sign
  6661  0B02  0849               	movf	___ftdiv@sign,w
  6662  0B03  1D03               	btfss	3,2
  6663  0B04  2B0C               	goto	l4330
  6664  0B05  3000               	movlw	0
  6665  0B06  00BB               	movwf	?___ftdiv
  6666  0B07  3000               	movlw	0
  6667  0B08  00BC               	movwf	?___ftdiv+1
  6668  0B09  3000               	movlw	0
  6669  0B0A  00BD               	movwf	?___ftdiv+2
  6670  0B0B  0008               	return
  6671  0B0C                     l4330:
  6672  0B0C  3000               	movlw	0
  6673  0B0D  00C5               	movwf	___ftdiv@f3
  6674  0B0E  3000               	movlw	0
  6675  0B0F  00C6               	movwf	___ftdiv@f3+1
  6676  0B10  3000               	movlw	0
  6677  0B11  00C7               	movwf	___ftdiv@f3+2
  6678  0B12  3089               	movlw	137
  6679  0B13  0749               	addwf	___ftdiv@sign,w
  6680  0B14  00C1               	movwf	??___ftdiv
  6681  0B15  0841               	movf	??___ftdiv,w
  6682  0B16  02C8               	subwf	___ftdiv@exp,f
  6683  0B17  0840               	movf	___ftdiv@f1+2,w
  6684  0B18  00FF               	movwf	127
  6685  0B19  087F               	movf	127,w
  6686  0B1A  00C9               	movwf	___ftdiv@sign
  6687  0B1B  083D               	movf	___ftdiv@f2+2,w
  6688  0B1C  00FF               	movwf	127
  6689  0B1D  087F               	movf	127,w
  6690  0B1E  06C9               	xorwf	___ftdiv@sign,f
  6691  0B1F  3080               	movlw	128
  6692  0B20  00FF               	movwf	127
  6693  0B21  087F               	movf	127,w
  6694  0B22  05C9               	andwf	___ftdiv@sign,f
  6695  0B23  17BF               	bsf	___ftdiv@f1+1,7
  6696  0B24  30FF               	movlw	255
  6697  0B25  05BE               	andwf	___ftdiv@f1,f
  6698  0B26  30FF               	movlw	255
  6699  0B27  05BF               	andwf	___ftdiv@f1+1,f
  6700  0B28  3000               	movlw	0
  6701  0B29  05C0               	andwf	___ftdiv@f1+2,f
  6702  0B2A  17BC               	bsf	___ftdiv@f2+1,7
  6703  0B2B  30FF               	movlw	255
  6704  0B2C  05BB               	andwf	___ftdiv@f2,f
  6705  0B2D  30FF               	movlw	255
  6706  0B2E  05BC               	andwf	___ftdiv@f2+1,f
  6707  0B2F  3000               	movlw	0
  6708  0B30  05BD               	andwf	___ftdiv@f2+2,f
  6709  0B31  3018               	movlw	24
  6710  0B32  00FF               	movwf	127
  6711  0B33  087F               	movf	127,w
  6712  0B34  00C4               	movwf	___ftdiv@cntr
  6713  0B35                     l4346:
  6714  0B35  3001               	movlw	1
  6715  0B36                     u5035:
  6716  0B36  1003               	clrc
  6717  0B37  0DC5               	rlf	___ftdiv@f3,f
  6718  0B38  0DC6               	rlf	___ftdiv@f3+1,f
  6719  0B39  0DC7               	rlf	___ftdiv@f3+2,f
  6720  0B3A  3EFF               	addlw	-1
  6721  0B3B  1D03               	skipz
  6722  0B3C  2B36               	goto	u5035
  6723  0B3D  083D               	movf	___ftdiv@f2+2,w
  6724  0B3E  0240               	subwf	___ftdiv@f1+2,w
  6725  0B3F  1D03               	skipz
  6726  0B40  2B47               	goto	u5045
  6727  0B41  083C               	movf	___ftdiv@f2+1,w
  6728  0B42  023F               	subwf	___ftdiv@f1+1,w
  6729  0B43  1D03               	skipz
  6730  0B44  2B47               	goto	u5045
  6731  0B45  083B               	movf	___ftdiv@f2,w
  6732  0B46  023E               	subwf	___ftdiv@f1,w
  6733  0B47                     u5045:
  6734  0B47  1C03               	skipc
  6735  0B48  2B54               	goto	l4352
  6736  0B49  083B               	movf	___ftdiv@f2,w
  6737  0B4A  02BE               	subwf	___ftdiv@f1,f
  6738  0B4B  083C               	movf	___ftdiv@f2+1,w
  6739  0B4C  1C03               	skipc
  6740  0B4D  0F3C               	incfsz	___ftdiv@f2+1,w
  6741  0B4E  02BF               	subwf	___ftdiv@f1+1,f
  6742  0B4F  083D               	movf	___ftdiv@f2+2,w
  6743  0B50  1C03               	skipc
  6744  0B51  0A3D               	incf	___ftdiv@f2+2,w
  6745  0B52  02C0               	subwf	___ftdiv@f1+2,f
  6746  0B53  1445               	bsf	___ftdiv@f3,0
  6747  0B54                     l4352:
  6748  0B54  3001               	movlw	1
  6749  0B55                     u5055:
  6750  0B55  1003               	clrc
  6751  0B56  0DBE               	rlf	___ftdiv@f1,f
  6752  0B57  0DBF               	rlf	___ftdiv@f1+1,f
  6753  0B58  0DC0               	rlf	___ftdiv@f1+2,f
  6754  0B59  3EFF               	addlw	-1
  6755  0B5A  1D03               	skipz
  6756  0B5B  2B55               	goto	u5055
  6757  0B5C  3001               	movlw	1
  6758  0B5D  02C4               	subwf	___ftdiv@cntr,f
  6759  0B5E  1D03               	btfss	3,2
  6760  0B5F  2B35               	goto	l4346
  6761  0B60  0845               	movf	___ftdiv@f3,w
  6762  0B61  00A0               	movwf	___ftpack@arg
  6763  0B62  0846               	movf	___ftdiv@f3+1,w
  6764  0B63  00A1               	movwf	___ftpack@arg+1
  6765  0B64  0847               	movf	___ftdiv@f3+2,w
  6766  0B65  00A2               	movwf	___ftpack@arg+2
  6767  0B66  0848               	movf	___ftdiv@exp,w
  6768  0B67  00FF               	movwf	127
  6769  0B68  087F               	movf	127,w
  6770  0B69  00A3               	movwf	___ftpack@exp
  6771  0B6A  0849               	movf	___ftdiv@sign,w
  6772  0B6B  00FF               	movwf	127
  6773  0B6C  087F               	movf	127,w
  6774  0B6D  00A4               	movwf	___ftpack@sign
  6775  0B6E  160A  118A  2723   	fcall	___ftpack
  6776  0B71  0820               	movf	?___ftpack,w
  6777  0B72  00BB               	movwf	?___ftdiv
  6778  0B73  0821               	movf	?___ftpack+1,w
  6779  0B74  00BC               	movwf	?___ftdiv+1
  6780  0B75  0822               	movf	?___ftpack+2,w
  6781  0B76  00BD               	movwf	?___ftdiv+2
  6782  0B77  0008               	return
  6783  0B78                     __end_of___ftdiv:
  6784                           
  6785                           	psect	text26
  6786  13F7                     __ptext26:	
  6787 ;; *************** function ___awtoft *****************
  6788 ;; Defined at:
  6789 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\awtoft.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  c               2    8[BANK0 ] int 
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  sign            1   11[BANK0 ] unsigned char 
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  3    8[BANK0 ] float 
  6796 ;; Registers used:
  6797 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6798 ;; Tracked objects:
  6799 ;;		On entry : 300/0
  6800 ;;		On exit  : 300/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6803 ;;      Params:         0       3       0       0       0
  6804 ;;      Locals:         0       1       0       0       0
  6805 ;;      Temps:          0       0       0       0       0
  6806 ;;      Totals:         0       4       0       0       0
  6807 ;;Total ram usage:        4 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    3
  6810 ;; This function calls:
  6811 ;;		___ftpack
  6812 ;; This function is called by:
  6813 ;;		_E_Task1_Rpm
  6814 ;;		_E_Task1_Pwm
  6815 ;;		_E_Task1_Min
  6816 ;;		_E_Task1_Temp
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           
  6821                           ;psect for function ___awtoft
  6822  13F7                     ___awtoft:
  6823                           
  6824                           ;incstack = 0
  6825                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6826  13F7  01AB               	clrf	___awtoft@sign
  6827  13F8  1FA9               	btfss	___awtoft@c+1,7
  6828  13F9  2C01               	goto	l4238
  6829  13FA  09A8               	comf	___awtoft@c,f
  6830  13FB  09A9               	comf	___awtoft@c+1,f
  6831  13FC  0AA8               	incf	___awtoft@c,f
  6832  13FD  1903               	skipnz
  6833  13FE  0AA9               	incf	___awtoft@c+1,f
  6834  13FF  01AB               	clrf	___awtoft@sign
  6835  1400  0AAB               	incf	___awtoft@sign,f
  6836  1401                     l4238:
  6837  1401  0828               	movf	___awtoft@c,w
  6838  1402  00A0               	movwf	___ftpack@arg
  6839  1403  0829               	movf	___awtoft@c+1,w
  6840  1404  00A1               	movwf	___ftpack@arg+1
  6841  1405  01A2               	clrf	___ftpack@arg+2
  6842  1406  308E               	movlw	142
  6843  1407  00FF               	movwf	127
  6844  1408  087F               	movf	127,w
  6845  1409  00A3               	movwf	___ftpack@exp
  6846  140A  082B               	movf	___awtoft@sign,w
  6847  140B  00FF               	movwf	127
  6848  140C  087F               	movf	127,w
  6849  140D  00A4               	movwf	___ftpack@sign
  6850  140E  160A  118A  2723   	fcall	___ftpack
  6851  1411  0820               	movf	?___ftpack,w
  6852  1412  00A8               	movwf	?___awtoft
  6853  1413  0821               	movf	?___ftpack+1,w
  6854  1414  00A9               	movwf	?___awtoft+1
  6855  1415  0822               	movf	?___ftpack+2,w
  6856  1416  00AA               	movwf	?___awtoft+2
  6857  1417  0008               	return
  6858  1418                     __end_of___awtoft:
  6859                           
  6860                           	psect	text27
  6861  1723                     __ptext27:	
  6862 ;; *************** function ___ftpack *****************
  6863 ;; Defined at:
  6864 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c90\common\float.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  arg             3    0[BANK0 ] unsigned um
  6867 ;;  exp             1    3[BANK0 ] unsigned char 
  6868 ;;  sign            1    4[BANK0 ] unsigned char 
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  3    0[BANK0 ] float 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2, status,0, btemp+1
  6875 ;; Tracked objects:
  6876 ;;		On entry : 300/800
  6877 ;;		On exit  : 300/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6880 ;;      Params:         0       5       0       0       0
  6881 ;;      Locals:         0       0       0       0       0
  6882 ;;      Temps:          0       3       0       0       0
  6883 ;;      Totals:         0       8       0       0       0
  6884 ;;Total ram usage:        8 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    2
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		___awtoft
  6891 ;;		___ftadd
  6892 ;;		___ftdiv
  6893 ;;		___ftmul
  6894 ;;		___lbtoft
  6895 ;;		___lwtoft
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           
  6900                           ;psect for function ___ftpack
  6901  1723                     ___ftpack:
  6902                           
  6903                           ;incstack = 0
  6904                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  6905  1723  0823               	movf	___ftpack@exp,w
  6906  1724  1903               	btfsc	3,2
  6907  1725  2F2B               	goto	l3974
  6908  1726  0822               	movf	___ftpack@arg+2,w
  6909  1727  0421               	iorwf	___ftpack@arg+1,w
  6910  1728  0420               	iorwf	___ftpack@arg,w
  6911  1729  1D03               	skipz
  6912  172A  2F3E               	goto	l3982
  6913  172B                     l3974:
  6914  172B  3000               	movlw	0
  6915  172C  00A0               	movwf	?___ftpack
  6916  172D  3000               	movlw	0
  6917  172E  00A1               	movwf	?___ftpack+1
  6918  172F  3000               	movlw	0
  6919  1730  00A2               	movwf	?___ftpack+2
  6920  1731  0008               	return
  6921  1732                     l3978:
  6922  1732  3001               	movlw	1
  6923  1733  00FF               	movwf	127
  6924  1734  087F               	movf	127,w
  6925  1735  07A3               	addwf	___ftpack@exp,f
  6926  1736  3001               	movlw	1
  6927  1737                     u4315:
  6928  1737  1003               	clrc
  6929  1738  0CA2               	rrf	___ftpack@arg+2,f
  6930  1739  0CA1               	rrf	___ftpack@arg+1,f
  6931  173A  0CA0               	rrf	___ftpack@arg,f
  6932  173B  3EFF               	addlw	-1
  6933  173C  1D03               	skipz
  6934  173D  2F37               	goto	u4315
  6935  173E                     l3982:
  6936  173E  30FE               	movlw	254
  6937  173F  0522               	andwf	___ftpack@arg+2,w
  6938  1740  1903               	btfsc	3,2
  6939  1741  2F59               	goto	l3990
  6940  1742  2F32               	goto	l3978
  6941  1743                     l3984:
  6942  1743  3001               	movlw	1
  6943  1744  00FF               	movwf	127
  6944  1745  087F               	movf	127,w
  6945  1746  07A3               	addwf	___ftpack@exp,f
  6946  1747  3001               	movlw	1
  6947  1748  07A0               	addwf	___ftpack@arg,f
  6948  1749  3000               	movlw	0
  6949  174A  1803               	skipnc
  6950  174B  3001               	movlw	1
  6951  174C  07A1               	addwf	___ftpack@arg+1,f
  6952  174D  3000               	movlw	0
  6953  174E  1803               	skipnc
  6954  174F  3001               	movlw	1
  6955  1750  07A2               	addwf	___ftpack@arg+2,f
  6956  1751  3001               	movlw	1
  6957  1752                     u4335:
  6958  1752  1003               	clrc
  6959  1753  0CA2               	rrf	___ftpack@arg+2,f
  6960  1754  0CA1               	rrf	___ftpack@arg+1,f
  6961  1755  0CA0               	rrf	___ftpack@arg,f
  6962  1756  3EFF               	addlw	-1
  6963  1757  1D03               	skipz
  6964  1758  2F52               	goto	u4335
  6965  1759                     l3990:
  6966  1759  30FF               	movlw	255
  6967  175A  0522               	andwf	___ftpack@arg+2,w
  6968  175B  1903               	btfsc	3,2
  6969  175C  2F6C               	goto	l3994
  6970  175D  2F43               	goto	l3984
  6971  175E                     l3996:
  6972  175E  3002               	movlw	2
  6973  175F  0223               	subwf	___ftpack@exp,w
  6974  1760  1C03               	btfss	3,0
  6975  1761  2F6E               	goto	l849
  6976  1762  3001               	movlw	1
  6977  1763  02A3               	subwf	___ftpack@exp,f
  6978  1764  3001               	movlw	1
  6979  1765                     u4355:
  6980  1765  1003               	clrc
  6981  1766  0DA0               	rlf	___ftpack@arg,f
  6982  1767  0DA1               	rlf	___ftpack@arg+1,f
  6983  1768  0DA2               	rlf	___ftpack@arg+2,f
  6984  1769  3EFF               	addlw	-1
  6985  176A  1D03               	skipz
  6986  176B  2F65               	goto	u4355
  6987  176C                     l3994:
  6988  176C  1FA1               	btfss	___ftpack@arg+1,7
  6989  176D  2F5E               	goto	l3996
  6990  176E                     l849:
  6991  176E  1823               	btfsc	___ftpack@exp,0
  6992  176F  2F76               	goto	l850
  6993  1770  30FF               	movlw	255
  6994  1771  05A0               	andwf	___ftpack@arg,f
  6995  1772  307F               	movlw	127
  6996  1773  05A1               	andwf	___ftpack@arg+1,f
  6997  1774  30FF               	movlw	255
  6998  1775  05A2               	andwf	___ftpack@arg+2,f
  6999  1776                     l850:
  7000  1776  1003               	clrc
  7001  1777  0CA3               	rrf	___ftpack@exp,f
  7002  1778  0823               	movf	___ftpack@exp,w
  7003  1779  00A5               	movwf	??___ftpack
  7004  177A  01A6               	clrf	??___ftpack+1
  7005  177B  01A7               	clrf	??___ftpack+2
  7006  177C  3010               	movlw	16
  7007  177D                     u4395:
  7008  177D  1003               	clrc
  7009  177E  0DA5               	rlf	??___ftpack,f
  7010  177F  0DA6               	rlf	??___ftpack+1,f
  7011  1780  0DA7               	rlf	??___ftpack+2,f
  7012  1781  3EFF               	addlw	-1
  7013  1782  1D03               	skipz
  7014  1783  2F7D               	goto	u4395
  7015  1784  0825               	movf	??___ftpack,w
  7016  1785  04A0               	iorwf	___ftpack@arg,f
  7017  1786  0826               	movf	??___ftpack+1,w
  7018  1787  04A1               	iorwf	___ftpack@arg+1,f
  7019  1788  0827               	movf	??___ftpack+2,w
  7020  1789  04A2               	iorwf	___ftpack@arg+2,f
  7021  178A  0824               	movf	___ftpack@sign,w
  7022  178B  1903               	btfsc	3,2
  7023  178C  0008               	return
  7024  178D  17A2               	bsf	___ftpack@arg+2,7
  7025  178E  0008               	return
  7026  178F                     __end_of___ftpack:
  7027                           
  7028                           	psect	text28
  7029  160C                     __ptext28:	
  7030 ;; *************** function _Adc *****************
  7031 ;; Defined at:
  7032 ;;		line 23 in file "ADC.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  channel         1    wreg     unsigned char 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  channel         1    2[BANK0 ] unsigned char 
  7037 ;;  convertion      2    3[BANK0 ] int 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  2    4[COMMON] int 
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0, btemp+1
  7042 ;; Tracked objects:
  7043 ;;		On entry : A00/0
  7044 ;;		On exit  : 300/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7047 ;;      Params:         2       0       0       0       0
  7048 ;;      Locals:         0       3       0       0       0
  7049 ;;      Temps:          0       2       0       0       0
  7050 ;;      Totals:         2       5       0       0       0
  7051 ;;Total ram usage:        7 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; Hardware stack levels required when called:    2
  7054 ;; This function calls:
  7055 ;;		Nothing
  7056 ;; This function is called by:
  7057 ;;		_E_Task1_Rpm
  7058 ;;		_E_Task1_Pwm
  7059 ;;		_E_Task1_Min
  7060 ;;		_E_Task1_Temp
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _Adc
  7066  160C                     _Adc:
  7067                           
  7068                           ;incstack = 0
  7069                           ; Regs used in _Adc: [wreg+status,2+status,0+btemp+1]
  7070                           ;Adc@channel stored from wreg
  7071  160C  1283               	bcf	3,5	;RP0=0, select bank0
  7072  160D  00A2               	movwf	Adc@channel
  7073                           
  7074                           ;ADC.c: 30:     ADCON0 &= 0xC3;
  7075  160E  30C3               	movlw	195
  7076  160F  00FF               	movwf	127
  7077  1610  087F               	movf	127,w
  7078  1611  059F               	andwf	31,f	;volatile
  7079                           
  7080                           ;ADC.c: 31:     ADCON0 |= channel<<2;
  7081  1612  0822               	movf	Adc@channel,w	;volatile
  7082  1613  00A0               	movwf	??_Adc
  7083  1614  3001               	movlw	1
  7084  1615                     u4555:
  7085  1615  1003               	clrc
  7086  1616  0DA0               	rlf	??_Adc,f
  7087  1617  3EFF               	addlw	-1
  7088  1618  1D03               	skipz
  7089  1619  2E15               	goto	u4555
  7090  161A  1003               	clrc
  7091  161B  0D20               	rlf	??_Adc,w
  7092  161C  00FF               	movwf	127
  7093  161D  087F               	movf	127,w
  7094  161E  049F               	iorwf	31,f	;volatile
  7095                           
  7096                           ;ADC.c: 34:     ADCON0bits.ADON = 1;
  7097  161F  141F               	bsf	31,0	;volatile
  7098                           
  7099                           ;ADC.c: 35:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  7100  1620  3073               	movlw	115
  7101  1621  1283               	bcf	3,5	;RP0=0, select bank0
  7102  1622  1303               	bcf	3,6	;RP1=0, select bank0
  7103  1623  00A0               	movwf	??_Adc
  7104  1624                     u6047:
  7105  1624  0BA0               	decfsz	??_Adc,f
  7106  1625  2E24               	goto	u6047
  7107  1626  2E27               	nop2
  7108                           
  7109                           ;ADC.c: 39:     ADCON0bits.GO_nDONE = 1;
  7110  1627  1283               	bcf	3,5	;RP0=0, select bank0
  7111  1628  1303               	bcf	3,6	;RP1=0, select bank0
  7112  1629  149F               	bsf	31,1	;volatile
  7113  162A                     l259:	
  7114                           ;ADC.c: 40:     while(ADCON0bits.GO_nDONE == 1);
  7115                           
  7116  162A  189F               	btfsc	31,1	;volatile
  7117  162B  2E2A               	goto	l259
  7118                           
  7119                           ;ADC.c: 41:     convertion = ADRESH, convertion = convertion<<8;
  7120  162C  081E               	movf	30,w	;volatile
  7121  162D  00A0               	movwf	??_Adc
  7122  162E  01A1               	clrf	??_Adc+1
  7123  162F  0820               	movf	??_Adc,w
  7124  1630  00A3               	movwf	Adc@convertion
  7125  1631  0821               	movf	??_Adc+1,w
  7126  1632  00A4               	movwf	Adc@convertion+1
  7127  1633  0824               	movf	Adc@convertion+1,w
  7128  1634  00A1               	movwf	??_Adc+1
  7129  1635  0823               	movf	Adc@convertion,w
  7130  1636  00A0               	movwf	??_Adc
  7131  1637  0820               	movf	??_Adc,w
  7132  1638  00A1               	movwf	??_Adc+1
  7133  1639  01A0               	clrf	??_Adc
  7134  163A  0820               	movf	??_Adc,w
  7135  163B  00A3               	movwf	Adc@convertion
  7136  163C  0821               	movf	??_Adc+1,w
  7137  163D  00A4               	movwf	Adc@convertion+1
  7138                           
  7139                           ;ADC.c: 42:     convertion |= ADRESL;
  7140  163E  1683               	bsf	3,5	;RP0=1, select bank1
  7141  163F  081E               	movf	30,w	;volatile
  7142  1640  1283               	bcf	3,5	;RP0=0, select bank0
  7143  1641  00A0               	movwf	??_Adc
  7144  1642  01A1               	clrf	??_Adc+1
  7145  1643  0820               	movf	??_Adc,w
  7146  1644  04A3               	iorwf	Adc@convertion,f
  7147  1645  0821               	movf	??_Adc+1,w
  7148  1646  04A4               	iorwf	Adc@convertion+1,f
  7149                           
  7150                           ;ADC.c: 46:     ADCON0bits.ADON = 0;
  7151  1647  101F               	bcf	31,0	;volatile
  7152                           
  7153                           ;ADC.c: 47:     _delay((unsigned long)((70)*(20000000/4000000.0)));
  7154  1648  3073               	movlw	115
  7155  1649  1283               	bcf	3,5	;RP0=0, select bank0
  7156  164A  1303               	bcf	3,6	;RP1=0, select bank0
  7157  164B  00A0               	movwf	??_Adc
  7158  164C                     u6057:
  7159  164C  0BA0               	decfsz	??_Adc,f
  7160  164D  2E4C               	goto	u6057
  7161  164E  2E4F               	nop2
  7162                           
  7163                           ;ADC.c: 49:     return convertion;
  7164  164F  1283               	bcf	3,5	;RP0=0, select bank0
  7165  1650  1303               	bcf	3,6	;RP1=0, select bank0
  7166  1651  0824               	movf	Adc@convertion+1,w
  7167  1652  00F5               	movwf	?_Adc+1
  7168  1653  0823               	movf	Adc@convertion,w
  7169  1654  00F4               	movwf	?_Adc
  7170  1655  0008               	return
  7171  1656                     __end_of_Adc:
  7172                           
  7173                           	psect	text29
  7174  1330                     __ptext29:	
  7175 ;; *************** function _Pwm1_stop *****************
  7176 ;; Defined at:
  7177 ;;		line 72 in file "Pwm_Soft.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;		None
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/A00
  7188 ;;		On exit  : 300/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7191 ;;      Params:         0       0       0       0       0
  7192 ;;      Locals:         0       0       0       0       0
  7193 ;;      Temps:          0       0       0       0       0
  7194 ;;      Totals:         0       0       0       0       0
  7195 ;;Total ram usage:        0 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    2
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_MP_Pulv
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           
  7206                           ;psect for function _Pwm1_stop
  7207  1330                     _Pwm1_stop:
  7208                           
  7209                           ;Pwm_Soft.c: 75:     Act_PwmS1 = 0;
  7210                           
  7211                           ;incstack = 0
  7212                           ; Regs used in _Pwm1_stop: [wreg+status,2]
  7213  1330  1683               	bsf	3,5	;RP0=1, select bank1
  7214  1331  1303               	bcf	3,6	;RP1=0, select bank1
  7215  1332  01BE               	clrf	_Act_PwmS1^(0+128)
  7216                           
  7217                           ;Pwm_Soft.c: 77:     Pw_PwmS1 = 0;
  7218  1333  3000               	movlw	0
  7219  1334  00A8               	movwf	_Pw_PwmS1^(0+128)
  7220  1335  3000               	movlw	0
  7221  1336  00A9               	movwf	(_Pw_PwmS1+1)^(0+128)
  7222  1337  3000               	movlw	0
  7223  1338  00AA               	movwf	(_Pw_PwmS1+2)^(0+128)
  7224                           
  7225                           ;Pwm_Soft.c: 78:     PwmS1 = 0;
  7226  1339  01B2               	clrf	_PwmS1^(0+128)
  7227  133A  01B3               	clrf	(_PwmS1+1)^(0+128)
  7228                           
  7229                           ;Pwm_Soft.c: 80:     RB4=0;
  7230  133B  1283               	bcf	3,5	;RP0=0, select bank0
  7231  133C  1206               	bcf	6,4	;volatile
  7232  133D  0008               	return
  7233  133E                     __end_of_Pwm1_stop:
  7234                           
  7235                           	psect	text30
  7236  08DC                     __ptext30:	
  7237 ;; *************** function _Lcd_PPAR *****************
  7238 ;; Defined at:
  7239 ;;		line 351 in file "Main.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 300/B00
  7250 ;;		On exit  : 300/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7253 ;;      Params:         0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0       0
  7255 ;;      Temps:          0       0       0       0       0
  7256 ;;      Totals:         0       0       0       0       0
  7257 ;;Total ram usage:        0 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    5
  7260 ;; This function calls:
  7261 ;;		_LCD_array
  7262 ;;		_LCD_date
  7263 ;;		_LCD_xy
  7264 ;; This function is called by:
  7265 ;;		_main
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           
  7270                           ;psect for function _Lcd_PPAR
  7271  08DC                     _Lcd_PPAR:
  7272                           
  7273                           ;Main.c: 353:     LCD_array(1,1,"RPM:");
  7274                           
  7275                           ;incstack = 0
  7276                           ; Regs used in _Lcd_PPAR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7277  08DC  3001               	movlw	1
  7278  08DD  1283               	bcf	3,5	;RP0=0, select bank0
  7279  08DE  1303               	bcf	3,6	;RP1=0, select bank0
  7280  08DF  00A2               	movwf	LCD_array@x
  7281  08E0  3000               	movlw	0
  7282  08E1  00A3               	movwf	LCD_array@x+1
  7283  08E2  3001               	movlw	1
  7284  08E3  00A4               	movwf	LCD_array@y
  7285  08E4  3000               	movlw	0
  7286  08E5  00A5               	movwf	LCD_array@y+1
  7287  08E6  30B8               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  7288  08E7  00A6               	movwf	LCD_array@date
  7289  08E8  3080               	movlw	128
  7290  08E9  00A7               	movwf	LCD_array@date+1
  7291  08EA  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  7292                           
  7293                           ;Main.c: 354:     LCD_array(2,1,"PWM:");
  7294  08EF  3002               	movlw	2
  7295  08F0  00A2               	movwf	LCD_array@x
  7296  08F1  3000               	movlw	0
  7297  08F2  00A3               	movwf	LCD_array@x+1
  7298  08F3  3001               	movlw	1
  7299  08F4  00A4               	movwf	LCD_array@y
  7300  08F5  3000               	movlw	0
  7301  08F6  00A5               	movwf	LCD_array@y+1
  7302  08F7  30BD               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  7303  08F8  00A6               	movwf	LCD_array@date
  7304  08F9  3080               	movlw	128
  7305  08FA  00A7               	movwf	LCD_array@date+1
  7306  08FB  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  7307                           
  7308                           ;Main.c: 355:     LCD_array(3,1,"TIEMPO:"),LCD_array(3,10,":");
  7309  0900  3003               	movlw	3
  7310  0901  00A2               	movwf	LCD_array@x
  7311  0902  3000               	movlw	0
  7312  0903  00A3               	movwf	LCD_array@x+1
  7313  0904  3001               	movlw	1
  7314  0905  00A4               	movwf	LCD_array@y
  7315  0906  3000               	movlw	0
  7316  0907  00A5               	movwf	LCD_array@y+1
  7317  0908  30A6               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  7318  0909  00A6               	movwf	LCD_array@date
  7319  090A  3080               	movlw	128
  7320  090B  00A7               	movwf	LCD_array@date+1
  7321  090C  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  7322  0911  3003               	movlw	3
  7323  0912  00A2               	movwf	LCD_array@x
  7324  0913  3000               	movlw	0
  7325  0914  00A3               	movwf	LCD_array@x+1
  7326  0915  300A               	movlw	10
  7327  0916  00A4               	movwf	LCD_array@y
  7328  0917  3000               	movlw	0
  7329  0918  00A5               	movwf	LCD_array@y+1
  7330  0919  3098               	movlw	(low (((STR_19+11)-__stringbase)| (0+32768)))& (0+255)
  7331  091A  00A6               	movwf	LCD_array@date
  7332  091B  3080               	movlw	128
  7333  091C  00A7               	movwf	LCD_array@date+1
  7334  091D  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  7335                           
  7336                           ;Main.c: 356:     LCD_array(4,1,"TEMPERATURA:"),LCD_xy(4,16),LCD_date(0x01);
  7337  0922  3004               	movlw	4
  7338  0923  00A2               	movwf	LCD_array@x
  7339  0924  3000               	movlw	0
  7340  0925  00A3               	movwf	LCD_array@x+1
  7341  0926  3001               	movlw	1
  7342  0927  00A4               	movwf	LCD_array@y
  7343  0928  3000               	movlw	0
  7344  0929  00A5               	movwf	LCD_array@y+1
  7345  092A  308D               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  7346  092B  00A6               	movwf	LCD_array@date
  7347  092C  3080               	movlw	128
  7348  092D  00A7               	movwf	LCD_array@date+1
  7349  092E  160A  118A  26BB  120A  158A  	fcall	_LCD_array
  7350  0933  3004               	movlw	4
  7351  0934  00A2               	movwf	LCD_xy@x
  7352  0935  3000               	movlw	0
  7353  0936  00A3               	movwf	LCD_xy@x+1
  7354  0937  3010               	movlw	16
  7355  0938  00A4               	movwf	LCD_xy@y
  7356  0939  3000               	movlw	0
  7357  093A  00A5               	movwf	LCD_xy@y+1
  7358  093B  160A  118A  2466  120A  158A  	fcall	_LCD_xy
  7359  0940  3001               	movlw	1
  7360  0941  160A  118A  25C4  120A  158A  	fcall	_LCD_date
  7361                           
  7362                           ;Main.c: 357:     LCD_array(4,17,"C");
  7363  0946  3004               	movlw	4
  7364  0947  1283               	bcf	3,5	;RP0=0, select bank0
  7365  0948  1303               	bcf	3,6	;RP1=0, select bank0
  7366  0949  00A2               	movwf	LCD_array@x
  7367  094A  3000               	movlw	0
  7368  094B  00A3               	movwf	LCD_array@x+1
  7369  094C  3011               	movlw	17
  7370  094D  00A4               	movwf	LCD_array@y
  7371  094E  3000               	movlw	0
  7372  094F  00A5               	movwf	LCD_array@y+1
  7373  0950  30C4               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  7374  0951  00A6               	movwf	LCD_array@date
  7375  0952  3080               	movlw	128
  7376  0953  00A7               	movwf	LCD_array@date+1
  7377  0954  160A  118A  26BB   	fcall	_LCD_array
  7378  0957  0008               	return
  7379  0958                     __end_of_Lcd_PPAR:
  7380                           
  7381                           	psect	text31
  7382  1466                     __ptext31:	
  7383 ;; *************** function _LCD_xy *****************
  7384 ;; Defined at:
  7385 ;;		line 125 in file "LCD_control.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  x               2    2[BANK0 ] int 
  7388 ;;  y               2    4[BANK0 ] int 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;		None
  7391 ;; Return value:  Size  Location     Type
  7392 ;;                  1    wreg      void 
  7393 ;; Registers used:
  7394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7395 ;; Tracked objects:
  7396 ;;		On entry : 300/800
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7400 ;;      Params:         0       4       0       0       0
  7401 ;;      Locals:         0       0       0       0       0
  7402 ;;      Temps:          0       0       0       0       0
  7403 ;;      Totals:         0       4       0       0       0
  7404 ;;Total ram usage:        4 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:    4
  7407 ;; This function calls:
  7408 ;;		_LCD_command
  7409 ;; This function is called by:
  7410 ;;		_Lcd_PTM
  7411 ;;		_Lcd_PPAR
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           
  7416                           ;psect for function _LCD_xy
  7417  1466                     _LCD_xy:
  7418                           
  7419                           ;LCD_control.c: 125: void LCD_xy(int x,int y);LCD_control.c: 126: {;LCD_control.c: 127: 
      +                              switch(x)
  7420                           
  7421                           ;incstack = 0
  7422                           ; Regs used in _LCD_xy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7423  1466  2C83               	goto	l4476
  7424  1467                     l4466:
  7425  1467  0824               	movf	LCD_xy@y,w
  7426  1468  3EFF               	addlw	255
  7427  1469  3880               	iorlw	128
  7428  146A  160A  118A  2538   	fcall	_LCD_command
  7429                           
  7430                           ;LCD_control.c: 130:         break;
  7431  146D  0008               	return
  7432  146E                     l4468:
  7433  146E  0824               	movf	LCD_xy@y,w
  7434  146F  3E3F               	addlw	63
  7435  1470  3880               	iorlw	128
  7436  1471  160A  118A  2538   	fcall	_LCD_command
  7437                           
  7438                           ;LCD_control.c: 132:         break;
  7439  1474  0008               	return
  7440  1475                     l4470:
  7441  1475  0824               	movf	LCD_xy@y,w
  7442  1476  3E13               	addlw	19
  7443  1477  3880               	iorlw	128
  7444  1478  160A  118A  2538   	fcall	_LCD_command
  7445                           
  7446                           ;LCD_control.c: 134:         break;
  7447  147B  0008               	return
  7448  147C                     l4472:
  7449  147C  0824               	movf	LCD_xy@y,w
  7450  147D  3E53               	addlw	83
  7451  147E  3880               	iorlw	128
  7452  147F  160A  118A  2538   	fcall	_LCD_command
  7453                           
  7454                           ;LCD_control.c: 136:         break;
  7455  1482  0008               	return
  7456  1483                     l4476:
  7457                           
  7458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7459                           ; Switch size 1, requested type "simple"
  7460                           ; Number of cases is 1, Range of values is 0 to 0
  7461                           ; switch strategies available:
  7462                           ; Name         Instructions Cycles
  7463                           ; simple_byte            4     3 (average)
  7464                           ; direct_byte           11     8 (fixed)
  7465                           ; jumptable            260     6 (fixed)
  7466                           ;	Chosen strategy is simple_byte
  7467  1483  0823               	movf	LCD_xy@x+1,w
  7468  1484  3A00               	xorlw	0	; case 0
  7469  1485  1903               	skipnz
  7470  1486  2C88               	goto	l5186
  7471  1487  2C96               	goto	l427
  7472  1488                     l5186:
  7473                           
  7474                           ; Switch size 1, requested type "simple"
  7475                           ; Number of cases is 4, Range of values is 1 to 4
  7476                           ; switch strategies available:
  7477                           ; Name         Instructions Cycles
  7478                           ; simple_byte           13     7 (average)
  7479                           ; direct_byte           23    11 (fixed)
  7480                           ; jumptable            263     9 (fixed)
  7481                           ;	Chosen strategy is simple_byte
  7482  1488  0822               	movf	LCD_xy@x,w
  7483  1489  3A01               	xorlw	1	; case 1
  7484  148A  1903               	skipnz
  7485  148B  2C67               	goto	l4466
  7486  148C  3A03               	xorlw	3	; case 2
  7487  148D  1903               	skipnz
  7488  148E  2C6E               	goto	l4468
  7489  148F  3A01               	xorlw	1	; case 3
  7490  1490  1903               	skipnz
  7491  1491  2C75               	goto	l4470
  7492  1492  3A07               	xorlw	7	; case 4
  7493  1493  1903               	skipnz
  7494  1494  2C7C               	goto	l4472
  7495  1495  2C96               	goto	l427
  7496  1496                     l427:
  7497  1496  0008               	return
  7498  1497                     __end_of_LCD_xy:
  7499                           
  7500                           	psect	text32
  7501  16BB                     __ptext32:	
  7502 ;; *************** function _LCD_array *****************
  7503 ;; Defined at:
  7504 ;;		line 98 in file "LCD_control.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  x               2    2[BANK0 ] int 
  7507 ;;  y               2    4[BANK0 ] int 
  7508 ;;  date            2    6[BANK0 ] PTR const unsigned char 
  7509 ;;		 -> Task3@buffer(10), E_Task1_Temp@buffer(10), E_Task1_Min@buffer(10), E_Task1_Pwm@buffer(10), 
  7510 ;;		 -> E_Task1_Rpm@buffer(10), STR_20(2), STR_19(13), STR_18(2), 
  7511 ;;		 -> STR_17(8), STR_16(5), STR_15(5), STR_14(2), 
  7512 ;;		 -> STR_13(2), STR_12(2), STR_11(2), STR_10(2), 
  7513 ;;		 -> STR_9(16), STR_8(18), STR_7(18), STR_6(12), 
  7514 ;;		 -> STR_5(15), STR_4(21), STR_3(21), STR_2(21), 
  7515 ;;		 -> STR_1(21), 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;		None
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      void 
  7520 ;; Registers used:
  7521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7522 ;; Tracked objects:
  7523 ;;		On entry : 300/800
  7524 ;;		On exit  : 300/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7527 ;;      Params:         0       6       0       0       0
  7528 ;;      Locals:         0       0       0       0       0
  7529 ;;      Temps:          0       2       0       0       0
  7530 ;;      Totals:         0       8       0       0       0
  7531 ;;Total ram usage:        8 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    4
  7534 ;; This function calls:
  7535 ;;		_LCD_command
  7536 ;;		_LCD_date
  7537 ;; This function is called by:
  7538 ;;		_main
  7539 ;;		_Seleccion_Modo
  7540 ;;		_Lcd_PTM
  7541 ;;		_Lcd_PPAR
  7542 ;;		_E_Task1_Rpm
  7543 ;;		_E_Task1_Pwm
  7544 ;;		_E_Task1_Min
  7545 ;;		_E_Task1_Temp
  7546 ;;		_Task3
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           
  7551                           ;psect for function _LCD_array
  7552  16BB                     _LCD_array:
  7553                           
  7554                           ;LCD_control.c: 98: void LCD_array(int x,int y,const char *date);LCD_control.c: 99: {;LC
      +                          D_control.c: 101:     switch(x)
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _LCD_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7558  16BB  2EE0               	goto	l4066
  7559  16BC                     l4056:
  7560  16BC  0824               	movf	LCD_array@y,w
  7561  16BD  3EFF               	addlw	255
  7562  16BE  3880               	iorlw	128
  7563  16BF  160A  118A  2538  160A  118A  	fcall	_LCD_command
  7564                           
  7565                           ;LCD_control.c: 104:         break;
  7566  16C4  2F14               	goto	l4074
  7567  16C5                     l4058:
  7568  16C5  0824               	movf	LCD_array@y,w
  7569  16C6  3E3F               	addlw	63
  7570  16C7  3880               	iorlw	128
  7571  16C8  160A  118A  2538  160A  118A  	fcall	_LCD_command
  7572                           
  7573                           ;LCD_control.c: 106:         break;
  7574  16CD  2F14               	goto	l4074
  7575  16CE                     l4060:
  7576  16CE  0824               	movf	LCD_array@y,w
  7577  16CF  3E13               	addlw	19
  7578  16D0  3880               	iorlw	128
  7579  16D1  160A  118A  2538  160A  118A  	fcall	_LCD_command
  7580                           
  7581                           ;LCD_control.c: 108:         break;
  7582  16D6  2F14               	goto	l4074
  7583  16D7                     l4062:
  7584  16D7  0824               	movf	LCD_array@y,w
  7585  16D8  3E53               	addlw	83
  7586  16D9  3880               	iorlw	128
  7587  16DA  160A  118A  2538  160A  118A  	fcall	_LCD_command
  7588                           
  7589                           ;LCD_control.c: 110:         break;
  7590  16DF  2F14               	goto	l4074
  7591  16E0                     l4066:
  7592                           
  7593                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7594                           ; Switch size 1, requested type "simple"
  7595                           ; Number of cases is 1, Range of values is 0 to 0
  7596                           ; switch strategies available:
  7597                           ; Name         Instructions Cycles
  7598                           ; simple_byte            4     3 (average)
  7599                           ; direct_byte           11     8 (fixed)
  7600                           ; jumptable            260     6 (fixed)
  7601                           ;	Chosen strategy is simple_byte
  7602  16E0  0823               	movf	LCD_array@x+1,w
  7603  16E1  3A00               	xorlw	0	; case 0
  7604  16E2  1903               	skipnz
  7605  16E3  2EE5               	goto	l5188
  7606  16E4  2F14               	goto	l4074
  7607  16E5                     l5188:
  7608                           
  7609                           ; Switch size 1, requested type "simple"
  7610                           ; Number of cases is 4, Range of values is 1 to 4
  7611                           ; switch strategies available:
  7612                           ; Name         Instructions Cycles
  7613                           ; simple_byte           13     7 (average)
  7614                           ; direct_byte           23    11 (fixed)
  7615                           ; jumptable            263     9 (fixed)
  7616                           ;	Chosen strategy is simple_byte
  7617  16E5  0822               	movf	LCD_array@x,w
  7618  16E6  3A01               	xorlw	1	; case 1
  7619  16E7  1903               	skipnz
  7620  16E8  2EBC               	goto	l4056
  7621  16E9  3A03               	xorlw	3	; case 2
  7622  16EA  1903               	skipnz
  7623  16EB  2EC5               	goto	l4058
  7624  16EC  3A01               	xorlw	1	; case 3
  7625  16ED  1903               	skipnz
  7626  16EE  2ECE               	goto	l4060
  7627  16EF  3A07               	xorlw	7	; case 4
  7628  16F0  1903               	skipnz
  7629  16F1  2ED7               	goto	l4062
  7630  16F2  2F14               	goto	l4074
  7631  16F3                     l4068:
  7632                           
  7633                           ;LCD_control.c: 115:     {;LCD_control.c: 116:         LCD_date(*date);
  7634  16F3  0827               	movf	LCD_array@date+1,w
  7635  16F4  00FF               	movwf	127
  7636  16F5  0826               	movf	LCD_array@date,w
  7637  16F6  0084               	movwf	4
  7638  16F7  120A  118A  2700  160A  118A  	fcall	stringtab
  7639  16FC  160A  118A  25C4  160A  118A  	fcall	_LCD_date
  7640                           
  7641                           ;LCD_control.c: 117:         _delay((unsigned long)((1)*(20000000/4000.0)));
  7642  1701  3007               	movlw	7
  7643  1702  1283               	bcf	3,5	;RP0=0, select bank0
  7644  1703  1303               	bcf	3,6	;RP1=0, select bank0
  7645  1704  00A9               	movwf	??_LCD_array+1
  7646  1705  307C               	movlw	124
  7647  1706  00A8               	movwf	??_LCD_array
  7648  1707                     u6067:
  7649  1707  0BA8               	decfsz	??_LCD_array,f
  7650  1708  2F07               	goto	u6067
  7651  1709  0BA9               	decfsz	??_LCD_array+1,f
  7652  170A  2F07               	goto	u6067
  7653  170B  0000               	nop
  7654                           
  7655                           ;LCD_control.c: 118:         date++;
  7656  170C  3001               	movlw	1
  7657  170D  1283               	bcf	3,5	;RP0=0, select bank0
  7658  170E  1303               	bcf	3,6	;RP1=0, select bank0
  7659  170F  07A6               	addwf	LCD_array@date,f
  7660  1710  1803               	skipnc
  7661  1711  0AA7               	incf	LCD_array@date+1,f
  7662  1712  3000               	movlw	0
  7663  1713  07A7               	addwf	LCD_array@date+1,f
  7664  1714                     l4074:
  7665                           
  7666                           ;LCD_control.c: 114:     while(*date)
  7667  1714  1283               	bcf	3,5	;RP0=0, select bank0
  7668  1715  1303               	bcf	3,6	;RP1=0, select bank0
  7669  1716  0827               	movf	LCD_array@date+1,w
  7670  1717  00FF               	movwf	127
  7671  1718  0826               	movf	LCD_array@date,w
  7672  1719  0084               	movwf	4
  7673  171A  120A  118A  2700  160A  118A  	fcall	stringtab
  7674  171F  3A00               	xorlw	0
  7675  1720  1903               	btfsc	3,2
  7676  1721  0008               	return
  7677  1722  2EF3               	goto	l4068
  7678  1723                     __end_of_LCD_array:
  7679                           
  7680                           	psect	text33
  7681  0958                     __ptext33:	
  7682 ;; *************** function _LCD_init *****************
  7683 ;; Defined at:
  7684 ;;		line 6 in file "LCD_control.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  i               1    4[BANK0 ] unsigned char 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : B00/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7698 ;;      Params:         0       0       0       0       0
  7699 ;;      Locals:         0       1       0       0       0
  7700 ;;      Temps:          0       2       0       0       0
  7701 ;;      Totals:         0       3       0       0       0
  7702 ;;Total ram usage:        3 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    4
  7705 ;; This function calls:
  7706 ;;		_LCD_command
  7707 ;; This function is called by:
  7708 ;;		_main
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _LCD_init
  7714  0958                     _LCD_init:
  7715                           
  7716                           ;LCD_control.c: 9:     _delay((unsigned long)((25)*(20000000/4000.0)));
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7720  0958  30A3               	movlw	163
  7721  0959  1283               	bcf	3,5	;RP0=0, select bank0
  7722  095A  1303               	bcf	3,6	;RP1=0, select bank0
  7723  095B  00A3               	movwf	??_LCD_init+1
  7724  095C  3054               	movlw	84
  7725  095D  00A2               	movwf	??_LCD_init
  7726  095E                     u6077:
  7727  095E  0BA2               	decfsz	??_LCD_init,f
  7728  095F  295E               	goto	u6077
  7729  0960  0BA3               	decfsz	??_LCD_init+1,f
  7730  0961  295E               	goto	u6077
  7731  0962  0000               	nop
  7732                           
  7733                           ;LCD_control.c: 11:     for(char i=0;i<3;i++)
  7734  0963  1283               	bcf	3,5	;RP0=0, select bank0
  7735  0964  1303               	bcf	3,6	;RP1=0, select bank0
  7736  0965  01A4               	clrf	LCD_init@i
  7737  0966                     l4760:
  7738                           
  7739                           ;LCD_control.c: 12:     {;LCD_control.c: 13:         LCD_command(0x03);
  7740  0966  3003               	movlw	3
  7741  0967  160A  118A  2538  120A  158A  	fcall	_LCD_command
  7742                           
  7743                           ;LCD_control.c: 14:         _delay((unsigned long)((7)*(20000000/4000.0)));
  7744  096C  302E               	movlw	46
  7745  096D  1283               	bcf	3,5	;RP0=0, select bank0
  7746  096E  1303               	bcf	3,6	;RP1=0, select bank0
  7747  096F  00A3               	movwf	??_LCD_init+1
  7748  0970  3072               	movlw	114
  7749  0971  00A2               	movwf	??_LCD_init
  7750  0972                     u6087:
  7751  0972  0BA2               	decfsz	??_LCD_init,f
  7752  0973  2972               	goto	u6087
  7753  0974  0BA3               	decfsz	??_LCD_init+1,f
  7754  0975  2972               	goto	u6087
  7755  0976  0000               	nop
  7756                           
  7757                           ;LCD_control.c: 15:     }
  7758  0977  3001               	movlw	1
  7759  0978  00FF               	movwf	127
  7760  0979  087F               	movf	127,w
  7761  097A  1283               	bcf	3,5	;RP0=0, select bank0
  7762  097B  1303               	bcf	3,6	;RP1=0, select bank0
  7763  097C  07A4               	addwf	LCD_init@i,f
  7764  097D  3003               	movlw	3
  7765  097E  0224               	subwf	LCD_init@i,w
  7766  097F  1C03               	skipc
  7767  0980  2966               	goto	l4760
  7768                           
  7769                           ;LCD_control.c: 18:  LCD_command(0x33);
  7770  0981  3033               	movlw	51
  7771  0982  160A  118A  2538  120A  158A  	fcall	_LCD_command
  7772                           
  7773                           ;LCD_control.c: 19:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7774  0987  30A5               	movlw	165
  7775  0988  1283               	bcf	3,5	;RP0=0, select bank0
  7776  0989  1303               	bcf	3,6	;RP1=0, select bank0
  7777  098A  00A2               	movwf	??_LCD_init
  7778  098B                     u6097:
  7779  098B  0BA2               	decfsz	??_LCD_init,f
  7780  098C  298B               	goto	u6097
  7781  098D  298E               	nop2
  7782                           
  7783                           ;LCD_control.c: 20:     LCD_command(0x32);
  7784  098E  3032               	movlw	50
  7785  098F  160A  118A  2538  120A  158A  	fcall	_LCD_command
  7786                           
  7787                           ;LCD_control.c: 21:     _delay((unsigned long)((5)*(20000000/4000.0)));
  7788  0994  3021               	movlw	33
  7789  0995  1283               	bcf	3,5	;RP0=0, select bank0
  7790  0996  1303               	bcf	3,6	;RP1=0, select bank0
  7791  0997  00A3               	movwf	??_LCD_init+1
  7792  0998  3075               	movlw	117
  7793  0999  00A2               	movwf	??_LCD_init
  7794  099A                     u6107:
  7795  099A  0BA2               	decfsz	??_LCD_init,f
  7796  099B  299A               	goto	u6107
  7797  099C  0BA3               	decfsz	??_LCD_init+1,f
  7798  099D  299A               	goto	u6107
  7799  099E  299F               	nop2
  7800                           
  7801                           ;LCD_control.c: 22:  LCD_command(0x28);
  7802  099F  3028               	movlw	40
  7803  09A0  160A  118A  2538  120A  158A  	fcall	_LCD_command
  7804                           
  7805                           ;LCD_control.c: 23:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7806  09A5  30A5               	movlw	165
  7807  09A6  1283               	bcf	3,5	;RP0=0, select bank0
  7808  09A7  1303               	bcf	3,6	;RP1=0, select bank0
  7809  09A8  00A2               	movwf	??_LCD_init
  7810  09A9                     u6117:
  7811  09A9  0BA2               	decfsz	??_LCD_init,f
  7812  09AA  29A9               	goto	u6117
  7813  09AB  29AC               	nop2
  7814                           
  7815                           ;LCD_control.c: 24:  LCD_command(0x0C);
  7816  09AC  300C               	movlw	12
  7817  09AD  160A  118A  2538  120A  158A  	fcall	_LCD_command
  7818                           
  7819                           ;LCD_control.c: 25:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7820  09B2  30A5               	movlw	165
  7821  09B3  1283               	bcf	3,5	;RP0=0, select bank0
  7822  09B4  1303               	bcf	3,6	;RP1=0, select bank0
  7823  09B5  00A2               	movwf	??_LCD_init
  7824  09B6                     u6127:
  7825  09B6  0BA2               	decfsz	??_LCD_init,f
  7826  09B7  29B6               	goto	u6127
  7827  09B8  29B9               	nop2
  7828                           
  7829                           ;LCD_control.c: 26:  LCD_command(0x06);
  7830  09B9  3006               	movlw	6
  7831  09BA  160A  118A  2538  120A  158A  	fcall	_LCD_command
  7832                           
  7833                           ;LCD_control.c: 27:     _delay((unsigned long)((100)*(20000000/4000000.0)));
  7834  09BF  30A5               	movlw	165
  7835  09C0  1283               	bcf	3,5	;RP0=0, select bank0
  7836  09C1  1303               	bcf	3,6	;RP1=0, select bank0
  7837  09C2  00A2               	movwf	??_LCD_init
  7838  09C3                     u6137:
  7839  09C3  0BA2               	decfsz	??_LCD_init,f
  7840  09C4  29C3               	goto	u6137
  7841  09C5  29C6               	nop2
  7842                           
  7843                           ;LCD_control.c: 28:     LCD_command(0x01);
  7844  09C6  3001               	movlw	1
  7845  09C7  160A  118A  2538  120A  158A  	fcall	_LCD_command
  7846                           
  7847                           ;LCD_control.c: 29:     _delay((unsigned long)((10)*(20000000/4000.0)));
  7848  09CC  3041               	movlw	65
  7849  09CD  1283               	bcf	3,5	;RP0=0, select bank0
  7850  09CE  1303               	bcf	3,6	;RP1=0, select bank0
  7851  09CF  00A3               	movwf	??_LCD_init+1
  7852  09D0  30ED               	movlw	237
  7853  09D1  00A2               	movwf	??_LCD_init
  7854  09D2                     u6147:
  7855  09D2  0BA2               	decfsz	??_LCD_init,f
  7856  09D3  29D2               	goto	u6147
  7857  09D4  0BA3               	decfsz	??_LCD_init+1,f
  7858  09D5  29D2               	goto	u6147
  7859  09D6  29D7               	nop2
  7860  09D7  0008               	return
  7861  09D8                     __end_of_LCD_init:
  7862                           
  7863                           	psect	text34
  7864  07D5                     __ptext34:	
  7865 ;; *************** function _LCD_character *****************
  7866 ;; Defined at:
  7867 ;;		line 161 in file "LCD_control.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;  adress          1    wreg     unsigned char 
  7870 ;;  caracter        1    2[BANK0 ] PTR unsigned char 
  7871 ;;		 -> main@caracter(8), main@caracter1(8), 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  adress          1    4[BANK0 ] unsigned char 
  7874 ;;  i               1    5[BANK0 ] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : B00/800
  7881 ;;		On exit  : 300/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7884 ;;      Params:         0       1       0       0       0
  7885 ;;      Locals:         0       2       0       0       0
  7886 ;;      Temps:          0       1       0       0       0
  7887 ;;      Totals:         0       4       0       0       0
  7888 ;;Total ram usage:        4 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    4
  7891 ;; This function calls:
  7892 ;;		_LCD_command
  7893 ;;		_LCD_date
  7894 ;; This function is called by:
  7895 ;;		_main
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _LCD_character
  7901  07D5                     _LCD_character:
  7902                           
  7903                           ;incstack = 0
  7904                           ; Regs used in _LCD_character: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7905                           ;LCD_character@adress stored from wreg
  7906  07D5  00A4               	movwf	LCD_character@adress
  7907                           
  7908                           ;LCD_control.c: 161: void LCD_character(unsigned char adress,char caracter[]);LCD_contro
      +                          l.c: 162: {;LCD_control.c: 163:     LCD_command(0x40 + (adress * 8));
  7909  07D6  0824               	movf	LCD_character@adress,w
  7910  07D7  00A3               	movwf	??_LCD_character
  7911  07D8  3002               	movlw	2
  7912  07D9                     u5715:
  7913  07D9  1003               	clrc
  7914  07DA  0DA3               	rlf	??_LCD_character,f
  7915  07DB  3EFF               	addlw	-1
  7916  07DC  1D03               	skipz
  7917  07DD  2FD9               	goto	u5715
  7918  07DE  1003               	clrc
  7919  07DF  0D23               	rlf	??_LCD_character,w
  7920  07E0  3E40               	addlw	64
  7921  07E1  160A  118A  2538  120A  118A  	fcall	_LCD_command
  7922                           
  7923                           ;LCD_control.c: 164:     for(char i=0;i<8;i++)
  7924  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  7925  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  7926  07E8  01A5               	clrf	LCD_character@i
  7927  07E9                     l4826:
  7928                           
  7929                           ;LCD_control.c: 165:     {;LCD_control.c: 166:         LCD_date(caracter[i]);
  7930  07E9  0825               	movf	LCD_character@i,w
  7931  07EA  0722               	addwf	LCD_character@caracter,w
  7932  07EB  00A3               	movwf	??_LCD_character
  7933  07EC  0823               	movf	??_LCD_character,w
  7934  07ED  0084               	movwf	4
  7935  07EE  1783               	bsf	3,7	;select IRP bank2
  7936  07EF  0800               	movf	0,w
  7937  07F0  160A  118A  25C4  120A  118A  	fcall	_LCD_date
  7938                           
  7939                           ;LCD_control.c: 167:     }
  7940  07F5  3001               	movlw	1
  7941  07F6  00FF               	movwf	127
  7942  07F7  087F               	movf	127,w
  7943  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  7944  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  7945  07FA  07A5               	addwf	LCD_character@i,f
  7946  07FB  3008               	movlw	8
  7947  07FC  0225               	subwf	LCD_character@i,w
  7948  07FD  1803               	btfsc	3,0
  7949  07FE  0008               	return
  7950  07FF  2FE9               	goto	l4826
  7951  0800                     __end_of_LCD_character:
  7952                           
  7953                           	psect	text35
  7954  15C4                     __ptext35:	
  7955 ;; *************** function _LCD_date *****************
  7956 ;; Defined at:
  7957 ;;		line 61 in file "LCD_control.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;  date            1    wreg     unsigned char 
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  date            1    5[COMMON] unsigned char 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      void 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/800
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7971 ;;      Params:         0       0       0       0       0
  7972 ;;      Locals:         1       0       0       0       0
  7973 ;;      Temps:          0       2       0       0       0
  7974 ;;      Totals:         1       2       0       0       0
  7975 ;;Total ram usage:        3 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    3
  7978 ;; This function calls:
  7979 ;;		_LCD_E
  7980 ;; This function is called by:
  7981 ;;		_Lcd_PTM
  7982 ;;		_Lcd_PPAR
  7983 ;;		_LCD_array
  7984 ;;		_LCD_character
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           
  7989                           ;psect for function _LCD_date
  7990  15C4                     _LCD_date:
  7991                           
  7992                           ;incstack = 0
  7993                           ; Regs used in _LCD_date: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7994                           ;LCD_date@date stored from wreg
  7995  15C4  00F5               	movwf	LCD_date@date
  7996                           
  7997                           ;LCD_control.c: 61: void LCD_date(char date);LCD_control.c: 62: {;LCD_control.c: 64:    
      +                           TRISC &= 0x00;
  7998  15C5  1683               	bsf	3,5	;RP0=1, select bank1
  7999  15C6  1303               	bcf	3,6	;RP1=0, select bank1
  8000  15C7  0187               	clrf	7	;volatile
  8001                           
  8002                           ;LCD_control.c: 67:     PORTC &= 0x00;
  8003  15C8  1283               	bcf	3,5	;RP0=0, select bank0
  8004  15C9  0187               	clrf	7	;volatile
  8005                           
  8006                           ;LCD_control.c: 68:     PORTC |= (date & 0xF0);
  8007  15CA  0875               	movf	LCD_date@date,w
  8008  15CB  39F0               	andlw	240
  8009  15CC  00FF               	movwf	127
  8010  15CD  087F               	movf	127,w
  8011  15CE  0487               	iorwf	7,f	;volatile
  8012                           
  8013                           ;LCD_control.c: 69:     PORTCbits.RC1 = 1;
  8014  15CF  1487               	bsf	7,1	;volatile
  8015                           
  8016                           ;LCD_control.c: 70:     LCD_E();
  8017  15D0  160A  118A  234C  160A  118A  	fcall	_LCD_E
  8018                           
  8019                           ;LCD_control.c: 71:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  8020  15D5  3052               	movlw	82
  8021  15D6  1283               	bcf	3,5	;RP0=0, select bank0
  8022  15D7  1303               	bcf	3,6	;RP1=0, select bank0
  8023  15D8  00A0               	movwf	??_LCD_date
  8024  15D9                     u6157:
  8025  15D9  0BA0               	decfsz	??_LCD_date,f
  8026  15DA  2DD9               	goto	u6157
  8027  15DB  0000               	nop
  8028                           
  8029                           ;LCD_control.c: 72:     PORTC &= 0x00;
  8030  15DC  1283               	bcf	3,5	;RP0=0, select bank0
  8031  15DD  1303               	bcf	3,6	;RP1=0, select bank0
  8032  15DE  0187               	clrf	7	;volatile
  8033                           
  8034                           ;LCD_control.c: 73:     PORTC |= (date<<4 & 0xF0);
  8035  15DF  0875               	movf	LCD_date@date,w
  8036  15E0  00A0               	movwf	??_LCD_date
  8037  15E1  3003               	movlw	3
  8038  15E2                     u4225:
  8039  15E2  1003               	clrc
  8040  15E3  0DA0               	rlf	??_LCD_date,f
  8041  15E4  3EFF               	addlw	-1
  8042  15E5  1D03               	skipz
  8043  15E6  2DE2               	goto	u4225
  8044  15E7  1003               	clrc
  8045  15E8  0D20               	rlf	??_LCD_date,w
  8046  15E9  39F0               	andlw	240
  8047  15EA  00FF               	movwf	127
  8048  15EB  087F               	movf	127,w
  8049  15EC  0487               	iorwf	7,f	;volatile
  8050                           
  8051                           ;LCD_control.c: 74:     PORTCbits.RC1 = 1;
  8052  15ED  1487               	bsf	7,1	;volatile
  8053                           
  8054                           ;LCD_control.c: 75:     LCD_E();
  8055  15EE  160A  118A  234C  160A  118A  	fcall	_LCD_E
  8056                           
  8057                           ;LCD_control.c: 76:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  8058  15F3  3052               	movlw	82
  8059  15F4  1283               	bcf	3,5	;RP0=0, select bank0
  8060  15F5  1303               	bcf	3,6	;RP1=0, select bank0
  8061  15F6  00A0               	movwf	??_LCD_date
  8062  15F7                     u6167:
  8063  15F7  0BA0               	decfsz	??_LCD_date,f
  8064  15F8  2DF7               	goto	u6167
  8065  15F9  0000               	nop
  8066                           
  8067                           ;LCD_control.c: 78:     TRISC &= 0xF0;
  8068  15FA  30F0               	movlw	240
  8069  15FB  00FF               	movwf	127
  8070  15FC  087F               	movf	127,w
  8071  15FD  1683               	bsf	3,5	;RP0=1, select bank1
  8072  15FE  1303               	bcf	3,6	;RP1=0, select bank1
  8073  15FF  0587               	andwf	7,f	;volatile
  8074                           
  8075                           ;LCD_control.c: 80:     _delay((unsigned long)((5)*(20000000/4000.0)));
  8076  1600  3021               	movlw	33
  8077  1601  1283               	bcf	3,5	;RP0=0, select bank0
  8078  1602  1303               	bcf	3,6	;RP1=0, select bank0
  8079  1603  00A1               	movwf	??_LCD_date+1
  8080  1604  3075               	movlw	117
  8081  1605  00A0               	movwf	??_LCD_date
  8082  1606                     u6177:
  8083  1606  0BA0               	decfsz	??_LCD_date,f
  8084  1607  2E06               	goto	u6177
  8085  1608  0BA1               	decfsz	??_LCD_date+1,f
  8086  1609  2E06               	goto	u6177
  8087  160A  2E0B               	nop2
  8088  160B  0008               	return
  8089  160C                     __end_of_LCD_date:
  8090                           
  8091                           	psect	text36
  8092  1538                     __ptext36:	
  8093 ;; *************** function _LCD_command *****************
  8094 ;; Defined at:
  8095 ;;		line 37 in file "LCD_control.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  cmd             1    wreg     unsigned char 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  cmd             1    5[COMMON] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      void 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/800
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8109 ;;      Params:         0       0       0       0       0
  8110 ;;      Locals:         1       0       0       0       0
  8111 ;;      Temps:          0       2       0       0       0
  8112 ;;      Totals:         1       2       0       0       0
  8113 ;;Total ram usage:        3 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    3
  8116 ;; This function calls:
  8117 ;;		_LCD_E
  8118 ;; This function is called by:
  8119 ;;		_main
  8120 ;;		_Seleccion_Modo
  8121 ;;		_MP_Pulv
  8122 ;;		_Lcd_PTM
  8123 ;;		_LCD_init
  8124 ;;		_LCD_array
  8125 ;;		_LCD_xy
  8126 ;;		_LCD_character
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           
  8131                           ;psect for function _LCD_command
  8132  1538                     _LCD_command:
  8133                           
  8134                           ;incstack = 0
  8135                           ; Regs used in _LCD_command: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8136                           ;LCD_command@cmd stored from wreg
  8137  1538  00F5               	movwf	LCD_command@cmd
  8138                           
  8139                           ;LCD_control.c: 37: void LCD_command(unsigned char cmd);LCD_control.c: 38: {;LCD_control
      +                          .c: 40:     TRISC &= 0x00;
  8140  1539  1683               	bsf	3,5	;RP0=1, select bank1
  8141  153A  1303               	bcf	3,6	;RP1=0, select bank1
  8142  153B  0187               	clrf	7	;volatile
  8143                           
  8144                           ;LCD_control.c: 43:     PORTC &= 0x00;
  8145  153C  1283               	bcf	3,5	;RP0=0, select bank0
  8146  153D  0187               	clrf	7	;volatile
  8147                           
  8148                           ;LCD_control.c: 44:     PORTC |= (cmd & 0xF0);
  8149  153E  0875               	movf	LCD_command@cmd,w
  8150  153F  39F0               	andlw	240
  8151  1540  00FF               	movwf	127
  8152  1541  087F               	movf	127,w
  8153  1542  0487               	iorwf	7,f	;volatile
  8154                           
  8155                           ;LCD_control.c: 45:     LCD_E();
  8156  1543  160A  118A  234C  160A  118A  	fcall	_LCD_E
  8157                           
  8158                           ;LCD_control.c: 46:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  8159  1548  3052               	movlw	82
  8160  1549  1283               	bcf	3,5	;RP0=0, select bank0
  8161  154A  1303               	bcf	3,6	;RP1=0, select bank0
  8162  154B  00A0               	movwf	??_LCD_command
  8163  154C                     u6187:
  8164  154C  0BA0               	decfsz	??_LCD_command,f
  8165  154D  2D4C               	goto	u6187
  8166  154E  0000               	nop
  8167                           
  8168                           ;LCD_control.c: 47:     PORTC &= 0x00;
  8169  154F  1283               	bcf	3,5	;RP0=0, select bank0
  8170  1550  1303               	bcf	3,6	;RP1=0, select bank0
  8171  1551  0187               	clrf	7	;volatile
  8172                           
  8173                           ;LCD_control.c: 48:     PORTC |= (cmd<<4 & 0xF0);
  8174  1552  0875               	movf	LCD_command@cmd,w
  8175  1553  00A0               	movwf	??_LCD_command
  8176  1554  3003               	movlw	3
  8177  1555                     u4215:
  8178  1555  1003               	clrc
  8179  1556  0DA0               	rlf	??_LCD_command,f
  8180  1557  3EFF               	addlw	-1
  8181  1558  1D03               	skipz
  8182  1559  2D55               	goto	u4215
  8183  155A  1003               	clrc
  8184  155B  0D20               	rlf	??_LCD_command,w
  8185  155C  39F0               	andlw	240
  8186  155D  00FF               	movwf	127
  8187  155E  087F               	movf	127,w
  8188  155F  0487               	iorwf	7,f	;volatile
  8189                           
  8190                           ;LCD_control.c: 49:     LCD_E();
  8191  1560  160A  118A  234C  160A  118A  	fcall	_LCD_E
  8192                           
  8193                           ;LCD_control.c: 50:     _delay((unsigned long)((50)*(20000000/4000000.0)));
  8194  1565  3052               	movlw	82
  8195  1566  1283               	bcf	3,5	;RP0=0, select bank0
  8196  1567  1303               	bcf	3,6	;RP1=0, select bank0
  8197  1568  00A0               	movwf	??_LCD_command
  8198  1569                     u6197:
  8199  1569  0BA0               	decfsz	??_LCD_command,f
  8200  156A  2D69               	goto	u6197
  8201  156B  0000               	nop
  8202                           
  8203                           ;LCD_control.c: 52:     TRISC &= 0xF0;
  8204  156C  30F0               	movlw	240
  8205  156D  00FF               	movwf	127
  8206  156E  087F               	movf	127,w
  8207  156F  1683               	bsf	3,5	;RP0=1, select bank1
  8208  1570  1303               	bcf	3,6	;RP1=0, select bank1
  8209  1571  0587               	andwf	7,f	;volatile
  8210                           
  8211                           ;LCD_control.c: 54:     _delay((unsigned long)((5)*(20000000/4000.0)));
  8212  1572  3021               	movlw	33
  8213  1573  1283               	bcf	3,5	;RP0=0, select bank0
  8214  1574  1303               	bcf	3,6	;RP1=0, select bank0
  8215  1575  00A1               	movwf	??_LCD_command+1
  8216  1576  3075               	movlw	117
  8217  1577  00A0               	movwf	??_LCD_command
  8218  1578                     u6207:
  8219  1578  0BA0               	decfsz	??_LCD_command,f
  8220  1579  2D78               	goto	u6207
  8221  157A  0BA1               	decfsz	??_LCD_command+1,f
  8222  157B  2D78               	goto	u6207
  8223  157C  2D7D               	nop2
  8224  157D  0008               	return
  8225  157E                     __end_of_LCD_command:
  8226                           
  8227                           	psect	text37
  8228  134C                     __ptext37:	
  8229 ;; *************** function _LCD_E *****************
  8230 ;; Defined at:
  8231 ;;		line 87 in file "LCD_control.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;		None
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;		None
  8236 ;; Return value:  Size  Location     Type
  8237 ;;                  1    wreg      void 
  8238 ;; Registers used:
  8239 ;;		wreg
  8240 ;; Tracked objects:
  8241 ;;		On entry : 300/800
  8242 ;;		On exit  : 0/0
  8243 ;;		Unchanged: 0/0
  8244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8245 ;;      Params:         0       0       0       0       0
  8246 ;;      Locals:         0       0       0       0       0
  8247 ;;      Temps:          1       0       0       0       0
  8248 ;;      Totals:         1       0       0       0       0
  8249 ;;Total ram usage:        1 bytes
  8250 ;; Hardware stack levels used:    1
  8251 ;; Hardware stack levels required when called:    2
  8252 ;; This function calls:
  8253 ;;		Nothing
  8254 ;; This function is called by:
  8255 ;;		_LCD_command
  8256 ;;		_LCD_date
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           
  8261                           ;psect for function _LCD_E
  8262  134C                     _LCD_E:
  8263                           
  8264                           ;LCD_control.c: 89:     PORTCbits.RC3 = 1;
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _LCD_E: [wreg]
  8268  134C  1587               	bsf	7,3	;volatile
  8269                           
  8270                           ;LCD_control.c: 90:     _delay((unsigned long)((10)*(20000000/4000000.0)));
  8271  134D  3010               	movlw	16
  8272  134E  00F4               	movwf	??_LCD_E
  8273  134F                     u6217:
  8274  134F  0BF4               	decfsz	??_LCD_E,f
  8275  1350  2B4F               	goto	u6217
  8276  1351  0000               	nop
  8277                           
  8278                           ;LCD_control.c: 91:     PORTCbits.RC3 = 0;
  8279  1352  1283               	bcf	3,5	;RP0=0, select bank0
  8280  1353  1303               	bcf	3,6	;RP1=0, select bank0
  8281  1354  1187               	bcf	7,3	;volatile
  8282                           
  8283                           ;LCD_control.c: 92:     _delay((unsigned long)((10)*(20000000/4000000.0)));
  8284  1355  3010               	movlw	16
  8285  1356  00F4               	movwf	??_LCD_E
  8286  1357                     u6227:
  8287  1357  0BF4               	decfsz	??_LCD_E,f
  8288  1358  2B57               	goto	u6227
  8289  1359  0000               	nop
  8290  135A  0008               	return
  8291  135B                     __end_of_LCD_E:
  8292                           
  8293                           	psect	text38
  8294  13DB                     __ptext38:	
  8295 ;; *************** function _Adc_init *****************
  8296 ;; Defined at:
  8297 ;;		line 3 in file "ADC.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;		None
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;		None
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  1    wreg      void 
  8304 ;; Registers used:
  8305 ;;		wreg, status,2, status,0
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 300/100
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8311 ;;      Params:         0       0       0       0       0
  8312 ;;      Locals:         0       0       0       0       0
  8313 ;;      Temps:          0       0       0       0       0
  8314 ;;      Totals:         0       0       0       0       0
  8315 ;;Total ram usage:        0 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    2
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_main
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           
  8326                           ;psect for function _Adc_init
  8327  13DB                     _Adc_init:
  8328                           
  8329                           ;ADC.c: 6:     TRISAbits.TRISA0 = 1,ANSELbits.ANS0 = 1;
  8330                           
  8331                           ;incstack = 0
  8332                           ; Regs used in _Adc_init: [wreg+status,2+status,0]
  8333  13DB  1683               	bsf	3,5	;RP0=1, select bank1
  8334  13DC  1303               	bcf	3,6	;RP1=0, select bank1
  8335  13DD  1405               	bsf	5,0	;volatile
  8336  13DE  1703               	bsf	3,6	;RP1=1, select bank3
  8337  13DF  1408               	bsf	8,0	;volatile
  8338                           
  8339                           ;ADC.c: 7:     TRISAbits.TRISA1 = 1;ANSELbits.ANS1 = 1;
  8340  13E0  1303               	bcf	3,6	;RP1=0, select bank1
  8341  13E1  1485               	bsf	5,1	;volatile
  8342  13E2  1703               	bsf	3,6	;RP1=1, select bank3
  8343  13E3  1488               	bsf	8,1	;volatile
  8344                           
  8345                           ;ADC.c: 8:     TRISAbits.TRISA2 = 1,ANSELbits.ANS2 = 1;
  8346  13E4  1303               	bcf	3,6	;RP1=0, select bank1
  8347  13E5  1505               	bsf	5,2	;volatile
  8348  13E6  1703               	bsf	3,6	;RP1=1, select bank3
  8349  13E7  1508               	bsf	8,2	;volatile
  8350                           
  8351                           ;ADC.c: 9:     TRISAbits.TRISA3 = 1,ANSELbits.ANS3 = 1;
  8352  13E8  1303               	bcf	3,6	;RP1=0, select bank1
  8353  13E9  1585               	bsf	5,3	;volatile
  8354  13EA  1703               	bsf	3,6	;RP1=1, select bank3
  8355  13EB  1588               	bsf	8,3	;volatile
  8356                           
  8357                           ;ADC.c: 12:     ADCON0bits.ADCS = 0b10;
  8358  13EC  1283               	bcf	3,5	;RP0=0, select bank0
  8359  13ED  1303               	bcf	3,6	;RP1=0, select bank0
  8360  13EE  081F               	movf	31,w	;volatile
  8361  13EF  393F               	andlw	-193
  8362  13F0  3880               	iorlw	128
  8363  13F1  009F               	movwf	31	;volatile
  8364                           
  8365                           ;ADC.c: 15:     ADCON1bits.ADFM = 1;
  8366  13F2  1683               	bsf	3,5	;RP0=1, select bank1
  8367  13F3  179F               	bsf	31,7	;volatile
  8368                           
  8369                           ;ADC.c: 17:     ADCON1bits.VCFG0 = 0;
  8370  13F4  121F               	bcf	31,4	;volatile
  8371                           
  8372                           ;ADC.c: 18:     ADCON1bits.VCFG1 = 0;
  8373  13F5  129F               	bcf	31,5	;volatile
  8374  13F6  0008               	return
  8375  13F7                     __end_of_Adc_init:
  8376                           
  8377                           	psect	text39
  8378  0D6D                     __ptext39:	
  8379 ;; *************** function _ISR *****************
  8380 ;; Defined at:
  8381 ;;		line 364 in file "Main.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  f_pwmS1         1    3[COMMON] _Bool 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 300/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8395 ;;      Params:         0       0       0       0       0
  8396 ;;      Locals:         1       0       0       0       0
  8397 ;;      Temps:          3       0       0       0       0
  8398 ;;      Totals:         4       0       0       0       0
  8399 ;;Total ram usage:        4 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    1
  8402 ;; This function calls:
  8403 ;;		_Pwm_Signal
  8404 ;;		_Task_Ready
  8405 ;; This function is called by:
  8406 ;;		Interrupt level 1
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _ISR
  8412  0D6D                     _ISR:
  8413                           
  8414                           ;Main.c: 366:     _Bool f_pwmS1=0;
  8415  0D6D  01F3               	clrf	ISR@f_pwmS1
  8416                           
  8417                           ;Main.c: 369:     if(TMR1IF == 1)
  8418  0D6E  1C0C               	btfss	12,0	;volatile
  8419  0D6F  2DEE               	goto	i1l3720
  8420                           
  8421                           ;Main.c: 370:     {;Main.c: 371:         clock100us = !clock100us;
  8422  0D70  1683               	bsf	3,5	;RP0=1, select bank1
  8423  0D71  0838               	movf	_clock100us^(0+128),w
  8424  0D72  1D03               	btfss	3,2
  8425  0D73  2D76               	goto	u395_20
  8426  0D74  3001               	movlw	1
  8427  0D75  2D77               	goto	u396_20
  8428  0D76                     u395_20:
  8429  0D76  3000               	movlw	0
  8430  0D77                     u396_20:
  8431  0D77  00FF               	movwf	127
  8432  0D78  087F               	movf	127,w
  8433  0D79  00B8               	movwf	_clock100us^(0+128)
  8434                           
  8435                           ;Main.c: 372:         if(clock100us) RB5 = 1;
  8436  0D7A  0838               	movf	_clock100us^(0+128),w
  8437  0D7B  1903               	btfsc	3,2
  8438  0D7C  2D80               	goto	i1l205
  8439  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  8440  0D7E  1686               	bsf	6,5	;volatile
  8441  0D7F  2D82               	goto	i1l3682
  8442  0D80                     i1l205:	
  8443                           ;Main.c: 373:         else RB5 = 0;
  8444                           
  8445  0D80  1283               	bcf	3,5	;RP0=0, select bank0
  8446  0D81  1286               	bcf	6,5	;volatile
  8447  0D82                     i1l3682:
  8448                           
  8449                           ;Main.c: 375:         if(T_Task1 != 0 && Out_E == 0) T_Task1--;
  8450  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  8451  0D83  086A               	movf	_T_Task1^(0+128),w
  8452  0D84  046B               	iorwf	(_T_Task1+1)^(0+128),w
  8453  0D85  1903               	btfsc	3,2
  8454  0D86  2D90               	goto	i1l3688
  8455  0D87  0876               	movf	_Out_E,w
  8456  0D88  1D03               	btfss	3,2
  8457  0D89  2D90               	goto	i1l3688
  8458  0D8A  3001               	movlw	1
  8459  0D8B  02EA               	subwf	_T_Task1^(0+128),f
  8460  0D8C  3000               	movlw	0
  8461  0D8D  1C03               	skipc
  8462  0D8E  03EB               	decf	(_T_Task1+1)^(0+128),f
  8463  0D8F  02EB               	subwf	(_T_Task1+1)^(0+128),f
  8464  0D90                     i1l3688:
  8465                           
  8466                           ;Main.c: 376:         if(T_Task2 != 0 && Out_E == 1) T_Task2--;
  8467  0D90  0868               	movf	_T_Task2^(0+128),w
  8468  0D91  0469               	iorwf	(_T_Task2+1)^(0+128),w
  8469  0D92  1903               	btfsc	3,2
  8470  0D93  2D9D               	goto	i1l3694
  8471  0D94  0376               	decf	_Out_E,w
  8472  0D95  1D03               	btfss	3,2
  8473  0D96  2D9D               	goto	i1l3694
  8474  0D97  3001               	movlw	1
  8475  0D98  02E8               	subwf	_T_Task2^(0+128),f
  8476  0D99  3000               	movlw	0
  8477  0D9A  1C03               	skipc
  8478  0D9B  03E9               	decf	(_T_Task2+1)^(0+128),f
  8479  0D9C  02E9               	subwf	(_T_Task2+1)^(0+128),f
  8480  0D9D                     i1l3694:
  8481                           
  8482                           ;Main.c: 377:         if(T_Task3 != 0 && Out_E == 1) T_Task3--;
  8483  0D9D  0866               	movf	_T_Task3^(0+128),w
  8484  0D9E  0467               	iorwf	(_T_Task3+1)^(0+128),w
  8485  0D9F  1903               	btfsc	3,2
  8486  0DA0  2DAA               	goto	i1l3700
  8487  0DA1  0376               	decf	_Out_E,w
  8488  0DA2  1D03               	btfss	3,2
  8489  0DA3  2DAA               	goto	i1l3700
  8490  0DA4  3001               	movlw	1
  8491  0DA5  02E6               	subwf	_T_Task3^(0+128),f
  8492  0DA6  3000               	movlw	0
  8493  0DA7  1C03               	skipc
  8494  0DA8  03E7               	decf	(_T_Task3+1)^(0+128),f
  8495  0DA9  02E7               	subwf	(_T_Task3+1)^(0+128),f
  8496  0DAA                     i1l3700:
  8497                           
  8498                           ;Main.c: 378:         if(T_Tiempo != 0 && Out_E == 1) T_Tiempo--;
  8499  0DAA  086C               	movf	_T_Tiempo^(0+128),w
  8500  0DAB  046D               	iorwf	(_T_Tiempo+1)^(0+128),w
  8501  0DAC  1903               	btfsc	3,2
  8502  0DAD  2DB7               	goto	i1l3706
  8503  0DAE  0376               	decf	_Out_E,w
  8504  0DAF  1D03               	btfss	3,2
  8505  0DB0  2DB7               	goto	i1l3706
  8506  0DB1  3001               	movlw	1
  8507  0DB2  02EC               	subwf	_T_Tiempo^(0+128),f
  8508  0DB3  3000               	movlw	0
  8509  0DB4  1C03               	skipc
  8510  0DB5  03ED               	decf	(_T_Tiempo+1)^(0+128),f
  8511  0DB6  02ED               	subwf	(_T_Tiempo+1)^(0+128),f
  8512  0DB7                     i1l3706:
  8513                           
  8514                           ;Main.c: 379:         if(T_Lcd != 0 && Modo == 0) T_Lcd--;
  8515  0DB7  0864               	movf	_T_Lcd^(0+128),w
  8516  0DB8  0465               	iorwf	(_T_Lcd+1)^(0+128),w
  8517  0DB9  1903               	btfsc	3,2
  8518  0DBA  2DC4               	goto	i1l3712
  8519  0DBB  0877               	movf	_Modo,w
  8520  0DBC  1D03               	btfss	3,2
  8521  0DBD  2DC4               	goto	i1l3712
  8522  0DBE  3001               	movlw	1
  8523  0DBF  02E4               	subwf	_T_Lcd^(0+128),f
  8524  0DC0  3000               	movlw	0
  8525  0DC1  1C03               	skipc
  8526  0DC2  03E5               	decf	(_T_Lcd+1)^(0+128),f
  8527  0DC3  02E5               	subwf	(_T_Lcd+1)^(0+128),f
  8528  0DC4                     i1l3712:
  8529                           
  8530                           ;Main.c: 382:         if(Act_PwmS1 && PwmS1!=PER_T_S1) PwmS1++;
  8531  0DC4  083E               	movf	_Act_PwmS1^(0+128),w
  8532  0DC5  1903               	btfsc	3,2
  8533  0DC6  2DD5               	goto	i1l212
  8534  0DC7  082F               	movf	(_PER_T_S1+1)^(0+128),w
  8535  0DC8  0633               	xorwf	(_PwmS1+1)^(0+128),w
  8536  0DC9  1D03               	skipz
  8537  0DCA  2DCD               	goto	u409_25
  8538  0DCB  082E               	movf	_PER_T_S1^(0+128),w
  8539  0DCC  0632               	xorwf	_PwmS1^(0+128),w
  8540  0DCD                     u409_25:
  8541  0DCD  1903               	skipnz
  8542  0DCE  2DD5               	goto	i1l212
  8543  0DCF  3001               	movlw	1
  8544  0DD0  07B2               	addwf	_PwmS1^(0+128),f
  8545  0DD1  1803               	skipnc
  8546  0DD2  0AB3               	incf	(_PwmS1+1)^(0+128),f
  8547  0DD3  3000               	movlw	0
  8548  0DD4  07B3               	addwf	(_PwmS1+1)^(0+128),f
  8549  0DD5                     i1l212:
  8550                           
  8551                           ;Main.c: 383:         if(PwmS1 == P_W_T_S1 || PwmS1 == PER_T_S1) f_pwmS1=1;
  8552  0DD5  0831               	movf	(_P_W_T_S1+1)^(0+128),w
  8553  0DD6  0633               	xorwf	(_PwmS1+1)^(0+128),w
  8554  0DD7  1D03               	skipz
  8555  0DD8  2DDB               	goto	u410_25
  8556  0DD9  0830               	movf	_P_W_T_S1^(0+128),w
  8557  0DDA  0632               	xorwf	_PwmS1^(0+128),w
  8558  0DDB                     u410_25:
  8559  0DDB  1903               	skipnz
  8560  0DDC  2DE5               	goto	i1l215
  8561  0DDD  082F               	movf	(_PER_T_S1+1)^(0+128),w
  8562  0DDE  0633               	xorwf	(_PwmS1+1)^(0+128),w
  8563  0DDF  1D03               	skipz
  8564  0DE0  2DE3               	goto	u411_25
  8565  0DE1  082E               	movf	_PER_T_S1^(0+128),w
  8566  0DE2  0632               	xorwf	_PwmS1^(0+128),w
  8567  0DE3                     u411_25:
  8568  0DE3  1D03               	skipz
  8569  0DE4  2DE7               	goto	i1l213
  8570  0DE5                     i1l215:
  8571  0DE5  01F3               	clrf	ISR@f_pwmS1
  8572  0DE6  0AF3               	incf	ISR@f_pwmS1,f
  8573  0DE7                     i1l213:
  8574                           
  8575                           ;Main.c: 385:         TMR1 = 65285;
  8576  0DE7  30FF               	movlw	255
  8577  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  8578  0DE9  008F               	movwf	15	;volatile
  8579  0DEA  3005               	movlw	5
  8580  0DEB  008E               	movwf	14	;volatile
  8581                           
  8582                           ;Main.c: 387:         TMR1ON = 1;
  8583  0DEC  1410               	bsf	16,0	;volatile
  8584                           
  8585                           ;Main.c: 388:         TMR1IF = 0;
  8586  0DED  100C               	bcf	12,0	;volatile
  8587  0DEE                     i1l3720:
  8588                           
  8589                           ;Main.c: 391:     if(!T_Task1 || !T_Lcd || !T_Task2 || !T_Task3) Task_Ready();
  8590  0DEE  1683               	bsf	3,5	;RP0=1, select bank1
  8591  0DEF  086A               	movf	_T_Task1^(0+128),w
  8592  0DF0  046B               	iorwf	(_T_Task1+1)^(0+128),w
  8593  0DF1  1903               	btfsc	3,2
  8594  0DF2  2DFF               	goto	i1l3728
  8595  0DF3  0864               	movf	_T_Lcd^(0+128),w
  8596  0DF4  0465               	iorwf	(_T_Lcd+1)^(0+128),w
  8597  0DF5  1903               	btfsc	3,2
  8598  0DF6  2DFF               	goto	i1l3728
  8599  0DF7  0868               	movf	_T_Task2^(0+128),w
  8600  0DF8  0469               	iorwf	(_T_Task2+1)^(0+128),w
  8601  0DF9  1903               	btfsc	3,2
  8602  0DFA  2DFF               	goto	i1l3728
  8603  0DFB  0866               	movf	_T_Task3^(0+128),w
  8604  0DFC  0467               	iorwf	(_T_Task3+1)^(0+128),w
  8605  0DFD  1D03               	btfss	3,2
  8606  0DFE  2E04               	goto	i1l3730
  8607  0DFF                     i1l3728:
  8608  0DFF  160A  118A  24C9  120A  158A  	fcall	_Task_Ready
  8609  0E04                     i1l3730:
  8610                           
  8611                           ;Main.c: 392:     if(f_pwmS1 && Act_PwmS1) Pwm_Signal();
  8612  0E04  0873               	movf	ISR@f_pwmS1,w
  8613  0E05  1903               	btfsc	3,2
  8614  0E06  2E0F               	goto	i1l3736
  8615  0E07  083E               	movf	_Act_PwmS1^(0+128),w
  8616  0E08  1903               	btfsc	3,2
  8617  0E09  2E0F               	goto	i1l3736
  8618  0E0A  160A  118A  2392  120A  158A  	fcall	_Pwm_Signal
  8619  0E0F                     i1l3736:
  8620                           
  8621                           ;Main.c: 395:     if(T_Tiempo == 0)
  8622  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  8623  0E10  086C               	movf	_T_Tiempo^(0+128),w
  8624  0E11  046D               	iorwf	(_T_Tiempo+1)^(0+128),w
  8625  0E12  1D03               	btfss	3,2
  8626  0E13  2E29               	goto	i1l224
  8627                           
  8628                           ;Main.c: 396:     {;Main.c: 397:         if(Seg == 0)
  8629  0E14  0878               	movf	_Seg,w
  8630  0E15  1D03               	btfss	3,2
  8631  0E16  2E21               	goto	i1l3746
  8632                           
  8633                           ;Main.c: 398:         {;Main.c: 399:             if(Min != 0)
  8634  0E17  0844               	movf	_Min^(0+128),w
  8635  0E18  1903               	btfsc	3,2
  8636  0E19  2E23               	goto	i1l3748
  8637                           
  8638                           ;Main.c: 400:             {;Main.c: 401:                 Min--;
  8639  0E1A  3001               	movlw	1
  8640  0E1B  02C4               	subwf	_Min^(0+128),f
  8641                           
  8642                           ;Main.c: 402:                 Seg = 59;
  8643  0E1C  303B               	movlw	59
  8644  0E1D  00FF               	movwf	127
  8645  0E1E  087F               	movf	127,w
  8646  0E1F  00F8               	movwf	_Seg
  8647  0E20  2E23               	goto	i1l3748
  8648  0E21                     i1l3746:
  8649  0E21  3001               	movlw	1
  8650  0E22  02F8               	subwf	_Seg,f
  8651  0E23                     i1l3748:
  8652                           
  8653                           ;Main.c: 406:         T_Tiempo = 10000;
  8654  0E23  3010               	movlw	16
  8655  0E24  00EC               	movwf	_T_Tiempo^(0+128)
  8656  0E25  3027               	movlw	39
  8657  0E26  00ED               	movwf	(_T_Tiempo^(0+128)+1)
  8658                           
  8659                           ;Main.c: 407:         Temporizador = 1;
  8660  0E27  01C1               	clrf	_Temporizador^(0+128)
  8661  0E28  0AC1               	incf	_Temporizador^(0+128),f
  8662  0E29                     i1l224:
  8663  0E29  0872               	movf	??_ISR+2,w
  8664  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  8665  0E2B  00FF               	movwf	127
  8666  0E2C  0871               	movf	??_ISR+1,w
  8667  0E2D  008A               	movwf	10
  8668  0E2E  0E70               	swapf	??_ISR^(0+4294967168),w
  8669  0E2F  0083               	movwf	3
  8670  0E30  0EFE               	swapf	126,f
  8671  0E31  0E7E               	swapf	126,w
  8672  0E32  0009               	retfie
  8673  0E33                     __end_of_ISR:
  8674                           
  8675                           	psect	intentry
  8676  0004                     __pintentry:	
  8677                           ;incstack = 0
  8678                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8679                           
  8680  0004                     interrupt_function:
  8681  007E                     saved_w	set	btemp
  8682  0004  00FE               	movwf	btemp
  8683  0005  0E03               	swapf	3,w
  8684  0006  00F0               	movwf	??_ISR
  8685  0007  080A               	movf	10,w
  8686  0008  00F1               	movwf	??_ISR+1
  8687  0009  1283               	bcf	3,5	;RP0=0, select bank0
  8688  000A  1303               	bcf	3,6	;RP1=0, select bank0
  8689  000B  087F               	movf	btemp+1,w
  8690  000C  00F2               	movwf	??_ISR+2
  8691  000D  120A  158A  2D6D   	ljmp	_ISR
  8692                           
  8693                           	psect	text40
  8694  14C9                     __ptext40:	
  8695 ;; *************** function _Task_Ready *****************
  8696 ;; Defined at:
  8697 ;;		line 415 in file "Main.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, status,2, status,0, btemp+1
  8706 ;; Tracked objects:
  8707 ;;		On entry : 300/100
  8708 ;;		On exit  : 300/100
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8711 ;;      Params:         0       0       0       0       0
  8712 ;;      Locals:         0       0       0       0       0
  8713 ;;      Temps:          0       0       0       0       0
  8714 ;;      Totals:         0       0       0       0       0
  8715 ;;Total ram usage:        0 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; This function calls:
  8718 ;;		Nothing
  8719 ;; This function is called by:
  8720 ;;		_ISR
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           
  8725                           ;psect for function _Task_Ready
  8726  14C9                     _Task_Ready:
  8727                           
  8728                           ;Main.c: 417:     if(T_Task1 == 0)
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _Task_Ready: [wreg+status,2+status,0+btemp+1]
  8732  14C9  086A               	movf	_T_Task1^(0+128),w
  8733  14CA  046B               	iorwf	(_T_Task1+1)^(0+128),w
  8734  14CB  1D03               	btfss	3,2
  8735  14CC  2CD5               	goto	i1l3546
  8736                           
  8737                           ;Main.c: 418:     {;Main.c: 419:         T_Task1 = 200;
  8738  14CD  30C8               	movlw	200
  8739  14CE  00EA               	movwf	_T_Task1^(0+128)
  8740  14CF  3000               	movlw	0
  8741  14D0  00EB               	movwf	(_T_Task1^(0+128)+1)
  8742                           
  8743                           ;Main.c: 420:         Est_Task1 = 1;
  8744  14D1  01BD               	clrf	_Est_Task1^(0+128)
  8745  14D2  0ABD               	incf	_Est_Task1^(0+128),f
  8746                           
  8747                           ;Main.c: 421:         T_running = 1;
  8748  14D3  01BA               	clrf	_T_running^(0+128)
  8749  14D4  0ABA               	incf	_T_running^(0+128),f
  8750  14D5                     i1l3546:
  8751                           
  8752                           ;Main.c: 423:     if(T_Lcd == 0)
  8753  14D5  0864               	movf	_T_Lcd^(0+128),w
  8754  14D6  0465               	iorwf	(_T_Lcd+1)^(0+128),w
  8755  14D7  1D03               	btfss	3,2
  8756  14D8  2CDF               	goto	i1l3552
  8757                           
  8758                           ;Main.c: 424:     {;Main.c: 425:         T_Lcd = 700;
  8759  14D9  30BC               	movlw	188
  8760  14DA  00E4               	movwf	_T_Lcd^(0+128)
  8761  14DB  3002               	movlw	2
  8762  14DC  00E5               	movwf	(_T_Lcd^(0+128)+1)
  8763                           
  8764                           ;Main.c: 426:         mostrar = 1;
  8765  14DD  01B9               	clrf	_mostrar^(0+128)
  8766  14DE  0AB9               	incf	_mostrar^(0+128),f
  8767  14DF                     i1l3552:
  8768                           
  8769                           ;Main.c: 428:     if(T_Task2 == 0)
  8770  14DF  0868               	movf	_T_Task2^(0+128),w
  8771  14E0  0469               	iorwf	(_T_Task2+1)^(0+128),w
  8772  14E1  1D03               	btfss	3,2
  8773  14E2  2CED               	goto	i1l3560
  8774                           
  8775                           ;Main.c: 429:     {;Main.c: 430:         T_Task2 = 400;
  8776  14E3  3090               	movlw	144
  8777  14E4  00E8               	movwf	_T_Task2^(0+128)
  8778  14E5  3001               	movlw	1
  8779  14E6  00E9               	movwf	(_T_Task2^(0+128)+1)
  8780                           
  8781                           ;Main.c: 431:         Est_Task2 = 1;
  8782  14E7  01BC               	clrf	_Est_Task2^(0+128)
  8783  14E8  0ABC               	incf	_Est_Task2^(0+128),f
  8784                           
  8785                           ;Main.c: 432:         T_running = 2;
  8786  14E9  3002               	movlw	2
  8787  14EA  00FF               	movwf	127
  8788  14EB  087F               	movf	127,w
  8789  14EC  00BA               	movwf	_T_running^(0+128)
  8790  14ED                     i1l3560:
  8791                           
  8792                           ;Main.c: 434:     if(T_Task3 == 0)
  8793  14ED  0866               	movf	_T_Task3^(0+128),w
  8794  14EE  0467               	iorwf	(_T_Task3+1)^(0+128),w
  8795  14EF  1D03               	btfss	3,2
  8796  14F0  0008               	return
  8797                           
  8798                           ;Main.c: 435:     {;Main.c: 436:         T_Task3 = 400;
  8799  14F1  3090               	movlw	144
  8800  14F2  00E6               	movwf	_T_Task3^(0+128)
  8801  14F3  3001               	movlw	1
  8802  14F4  00E7               	movwf	(_T_Task3^(0+128)+1)
  8803                           
  8804                           ;Main.c: 437:         Est_Task3 = 1;
  8805  14F5  01BB               	clrf	_Est_Task3^(0+128)
  8806  14F6  0ABB               	incf	_Est_Task3^(0+128),f
  8807                           
  8808                           ;Main.c: 438:         T_running = 3;
  8809  14F7  3003               	movlw	3
  8810  14F8  00FF               	movwf	127
  8811  14F9  087F               	movf	127,w
  8812  14FA  00BA               	movwf	_T_running^(0+128)
  8813  14FB  0008               	return
  8814  14FC                     __end_of_Task_Ready:
  8815                           
  8816                           	psect	text41
  8817  1392                     __ptext41:	
  8818 ;; *************** function _Pwm_Signal *****************
  8819 ;; Defined at:
  8820 ;;		line 87 in file "Pwm_Soft.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;		None
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;		None
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  1    wreg      void 
  8827 ;; Registers used:
  8828 ;;		wreg, status,2
  8829 ;; Tracked objects:
  8830 ;;		On entry : 300/100
  8831 ;;		On exit  : 200/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8834 ;;      Params:         0       0       0       0       0
  8835 ;;      Locals:         0       0       0       0       0
  8836 ;;      Temps:          0       0       0       0       0
  8837 ;;      Totals:         0       0       0       0       0
  8838 ;;Total ram usage:        0 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; This function calls:
  8841 ;;		Nothing
  8842 ;; This function is called by:
  8843 ;;		_ISR
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           
  8848                           ;psect for function _Pwm_Signal
  8849  1392                     _Pwm_Signal:
  8850                           
  8851                           ;Pwm_Soft.c: 89:     if(PwmS1==P_W_T_S1)
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in _Pwm_Signal: [wreg+status,2]
  8855  1392  0831               	movf	(_P_W_T_S1+1)^(0+128),w
  8856  1393  0633               	xorwf	(_PwmS1+1)^(0+128),w
  8857  1394  1D03               	skipz
  8858  1395  2B98               	goto	u389_25
  8859  1396  0830               	movf	_P_W_T_S1^(0+128),w
  8860  1397  0632               	xorwf	_PwmS1^(0+128),w
  8861  1398                     u389_25:
  8862                           
  8863                           ;Pwm_Soft.c: 90:     {;Pwm_Soft.c: 91:         RB4=0;
  8864  1398  1283               	bcf	3,5	;RP0=0, select bank0
  8865  1399  1903               	btfsc	3,2
  8866  139A  1206               	bcf	6,4	;volatile
  8867                           
  8868                           ;Pwm_Soft.c: 93:     if(PwmS1==PER_T_S1)
  8869  139B  1683               	bsf	3,5	;RP0=1, select bank1
  8870  139C  082F               	movf	(_PER_T_S1+1)^(0+128),w
  8871  139D  0633               	xorwf	(_PwmS1+1)^(0+128),w
  8872  139E  1D03               	skipz
  8873  139F  2BA2               	goto	u390_25
  8874  13A0  082E               	movf	_PER_T_S1^(0+128),w
  8875  13A1  0632               	xorwf	_PwmS1^(0+128),w
  8876  13A2                     u390_25:
  8877  13A2  1D03               	skipz
  8878  13A3  0008               	return
  8879                           
  8880                           ;Pwm_Soft.c: 94:     {;Pwm_Soft.c: 95:         PwmS1 = 0;
  8881  13A4  01B2               	clrf	_PwmS1^(0+128)
  8882  13A5  01B3               	clrf	(_PwmS1+1)^(0+128)
  8883                           
  8884                           ;Pwm_Soft.c: 96:         RB4=1;
  8885  13A6  1283               	bcf	3,5	;RP0=0, select bank0
  8886  13A7  1606               	bsf	6,4	;volatile
  8887  13A8  0008               	return
  8888  13A9                     __end_of_Pwm_Signal:
  8889  007E                     btemp	set	126	;btemp
  8890  007E                     wtemp0	set	126
  8891                           
  8892                           	psect	config
  8893                           
  8894                           ;Config register CONFIG1 @ 0x2007
  8895                           ;	Oscillator Selection bits
  8896                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  8897                           ;	Watchdog Timer Enable bit
  8898                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  8899                           ;	Power-up Timer Enable bit
  8900                           ;	PWRTE = ON, PWRT enabled
  8901                           ;	RE3/MCLR pin function select bit
  8902                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  8903                           ;	Code Protection bit
  8904                           ;	CP = OFF, Program memory code protection is disabled
  8905                           ;	Data Code Protection bit
  8906                           ;	CPD = OFF, Data memory code protection is disabled
  8907                           ;	Brown Out Reset Selection bits
  8908                           ;	BOREN = OFF, BOR disabled
  8909                           ;	Internal External Switchover bit
  8910                           ;	IESO = ON, Internal/External Switchover mode is enabled
  8911                           ;	Fail-Safe Clock Monitor Enabled bit
  8912                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  8913                           ;	Low Voltage Programming Enable bit
  8914                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  8915                           ;	In-Circuit Debugger Mode bit
  8916                           ;	DEBUG = 0x1, unprogrammed default
  8917  2007                     	org	8199
  8918  2007  2CE2               	dw	11490
  8919                           
  8920                           ;Config register CONFIG2 @ 0x2008
  8921                           ;	Brown-out Reset Selection bit
  8922                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  8923                           ;	Flash Program Memory Self Write Enable bits
  8924                           ;	WRT = OFF, Write protection off
  8925  2008                     	org	8200
  8926  2008  3FFF               	dw	16383

Data Sizes:
    Strings     187
    Constant    10
    Data        18
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     80      80
    BANK1            80     23      78
    BANK3            96     17      17
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_27(CODE[5]), STR_26(CODE[5]), STR_25(CODE[5]), STR_24(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Task3@buffer(BANK0[10]), E_Task1_Temp@buffer(BANK0[10]), E_Task1_Min@buffer(BANK0[10]), E_Task1_Pwm@buffer(BANK0[10]), 
		 -> E_Task1_Rpm@buffer(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_character@caracter	PTR unsigned char  size(1) Largest target is 8
		 -> main@caracter(BANK3[8]), main@caracter1(BANK3[8]), 

    LCD_array@date	PTR const unsigned char  size(2) Largest target is 21
		 -> Task3@buffer(BANK0[10]), E_Task1_Temp@buffer(BANK0[10]), E_Task1_Min@buffer(BANK0[10]), E_Task1_Pwm@buffer(BANK0[10]), 
		 -> E_Task1_Rpm@buffer(BANK1[10]), STR_20(CODE[2]), STR_19(CODE[13]), STR_18(CODE[2]), 
		 -> STR_17(CODE[8]), STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), 
		 -> STR_9(CODE[16]), STR_8(CODE[18]), STR_7(CODE[18]), STR_6(CODE[12]), 
		 -> STR_5(CODE[15]), STR_4(CODE[21]), STR_3(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 

    Task1@Estado	PTR unsigned char  size(1) Largest target is 1
		 -> MP_Pulv@Maq_task1(BANK0[1]), 

    Seleccion_Modo@opcion	PTR unsigned char  size(1) Largest target is 1
		 -> main@opcion(BANK3[1]), 


Critical Paths under _main in COMMON

    _main->_LCD_command
    _Seleccion_Modo->_LCD_command
    _Lcd_PTM->_LCD_command
    _Lcd_PTM->_LCD_date
    _MP_Pulv->_LCD_command
    _E_Task1_Temp->_Adc
    _E_Task1_Rpm->_Adc
    _E_Task1_Rpm->___wmul
    _E_Task1_Pwm->_Adc
    _E_Task1_Min->_Adc
    _sprintf->___wmul
    _sprintf->_isdigit
    ___fttol->_Adc
    ___ftmul->_Adc
    ___ftdiv->_Adc
    ___awtoft->_Adc
    _Lcd_PPAR->_LCD_date
    _LCD_xy->_LCD_command
    _LCD_array->_LCD_command
    _LCD_array->_LCD_date
    _LCD_init->_LCD_command
    _LCD_character->_LCD_command
    _LCD_character->_LCD_date
    _LCD_date->_LCD_E
    _LCD_command->_LCD_E

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_MP_Pulv
    _Seleccion_Modo->_Lcd_PTM
    _Lcd_PTM->_LCD_array
    _MP_Pulv->_Task1
    _Task3->_sprintf
    _Task2->_Pwm1
    ___lbtoft->___ftpack
    _Pwm1_init->___fttol
    ___lwtoft->___ftpack
    ___ftadd->___ftdiv
    _Pwm1->___fttol
    _Task1->_E_Task1_Min
    _E_Task1_Temp->___fttol
    _E_Task1_Rpm->___fttol
    _E_Task1_Pwm->___fttol
    _E_Task1_Min->___fttol
    _sprintf->___lwmod
    _sprintf->___wmul
    ___wmul->___lwdiv
    ___lwmod->___lwdiv
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _Lcd_PPAR->_LCD_array
    _LCD_xy->_LCD_command
    _LCD_array->_LCD_command
    _LCD_array->_LCD_date
    _LCD_init->_LCD_command
    _LCD_character->_LCD_command
    _LCD_character->_LCD_date

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Task1->_E_Task1_Rpm

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0  163830
                                             76 BANK0      4     4      0
                                              0 BANK3     17    17      0
                           _Adc_init
                          _LCD_array
                      _LCD_character
                        _LCD_command
                           _LCD_init
                           _Lcd_PPAR
                            _MP_Pulv
                           _Pwm_init
                     _Seleccion_Modo
                        _antirrebote
 ---------------------------------------------------------------------------------
 (1) _Seleccion_Modo                                       5     5      0   13843
                                             11 BANK0      5     5      0
                          _LCD_array
                        _LCD_command
                            _Lcd_PTM
                        _antirrebote
 ---------------------------------------------------------------------------------
 (2) _Lcd_PTM                                              1     1      0    7795
                                             10 BANK0      1     1      0
                          _LCD_array
                        _LCD_command
                           _LCD_date
                             _LCD_xy
 ---------------------------------------------------------------------------------
 (1) _Pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MP_Pulv                                              3     3      0  135984
                                             73 BANK0      3     3      0
                        _LCD_command
                          _Pwm1_stop
                              _Task1
                              _Task2
                              _Task3
                        _antirrebote
 ---------------------------------------------------------------------------------
 (1) _antirrebote                                          3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Task3                                               14    14      0    9787
                                             26 BANK0     14    14      0
                          _LCD_array
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _Task2                                                2     2      0   33054
                                             58 BANK0      2     2      0
                               _Pwm1
                          _Pwm1_init
                            ___ftdiv
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             7     4      3    2489
                                              4 COMMON     1     1      0
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _Pwm1_init                                            2     0      2   12244
                                             55 BANK0      2     0      2
                            ___ftadd
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2619
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3903
                                             42 BANK0     12     6      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _Pwm1                                                 3     0      3   10073
                                             55 BANK0      3     0      3
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _Task1                                                1     1      0   93020
                                             72 BANK0      1     1      0
                        _E_Task1_Min
                        _E_Task1_Pwm
                        _E_Task1_Rpm
                       _E_Task1_Temp
 ---------------------------------------------------------------------------------
 (3) _E_Task1_Temp                                        16    16      0   22723
                                             55 BANK0     16    16      0
                                _Adc
                          _LCD_array
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _E_Task1_Rpm                                         27    27      0   24474
                                             55 BANK0      4     4      0
                                              0 BANK1     23    23      0
                                _Adc
                          _LCD_array
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lwdiv
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _E_Task1_Pwm                                         16    16      0   22723
                                             55 BANK0     16    16      0
                                _Adc
                          _LCD_array
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _E_Task1_Min                                         17    17      0   22853
                                             55 BANK0     17    17      0
                                _Adc
                          _LCD_array
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    20      3    3938
                                             11 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     656
                                              4 COMMON     2     2      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     362
                                              4 COMMON     1     1      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     761
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             13     9      4     891
                                             42 BANK0     13     9      4
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4382
                                             12 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4704
                                             27 BANK0     15     9      6
                                _Adc (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2916
                                              8 BANK0      4     1      3
                                _Adc (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2458
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _Adc                                                  7     5      2     105
                                              4 COMMON     2     0      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _Pwm1_stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_PPAR                                             0     0      0    7578
                          _LCD_array
                           _LCD_date
                             _LCD_xy
 ---------------------------------------------------------------------------------
 (3) _LCD_xy                                               4     0      4    1907
                                              2 BANK0      4     0      4
                        _LCD_command
 ---------------------------------------------------------------------------------
 (3) _LCD_array                                            8     2      6    5609
                                              2 BANK0      8     2      6
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0     130
                                              2 BANK0      3     3      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_character                                        4     3      1     415
                                              2 BANK0      4     3      1
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (3) _LCD_date                                             3     3      0      62
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _LCD_E
 ---------------------------------------------------------------------------------
 (4) _LCD_command                                          3     3      0      62
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _LCD_E
 ---------------------------------------------------------------------------------
 (5) _LCD_E                                                1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0      24
                                              0 COMMON     4     4      0
                         _Pwm_Signal
                         _Task_Ready
 ---------------------------------------------------------------------------------
 (8) _Task_Ready                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Pwm_Signal                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Adc_init
   _LCD_array
     _LCD_command
       _LCD_E
     _LCD_date
       _LCD_E
   _LCD_character
     _LCD_command
       _LCD_E
     _LCD_date
       _LCD_E
   _LCD_command
     _LCD_E
   _LCD_init
     _LCD_command
       _LCD_E
   _Lcd_PPAR
     _LCD_array
       _LCD_command
         _LCD_E
       _LCD_date
         _LCD_E
     _LCD_date
       _LCD_E
     _LCD_xy
       _LCD_command
         _LCD_E
   _MP_Pulv
     _LCD_command
       _LCD_E
     _Pwm1_stop
     _Task1
       _E_Task1_Min
         _Adc
         _LCD_array
           _LCD_command
             _LCD_E
           _LCD_date
             _LCD_E
         ___awtoft
           _Adc (ARG)
           ___ftpack (ARG)
         ___ftdiv
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
       _E_Task1_Pwm
         _Adc
         _LCD_array
           _LCD_command
             _LCD_E
           _LCD_date
             _LCD_E
         ___awtoft
           _Adc (ARG)
           ___ftpack (ARG)
         ___ftdiv
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
       _E_Task1_Rpm
         _Adc
         _LCD_array
           _LCD_command
             _LCD_E
           _LCD_date
             _LCD_E
         ___awtoft
           _Adc (ARG)
           ___ftpack (ARG)
         ___ftdiv
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwdiv
         ___wmul
           ___lwdiv (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
       _E_Task1_Temp
         _Adc
         _LCD_array
           _LCD_command
             _LCD_E
           _LCD_date
             _LCD_E
         ___awtoft
           _Adc (ARG)
           ___ftpack (ARG)
         ___ftdiv
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             ___lwdiv (ARG)
           _isdigit
     _Task2
       _Pwm1
         ___ftdiv
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___fttol
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       _Pwm1_init
         ___ftadd
           ___ftdiv (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _Adc (ARG)
               ___awtoft (ARG)
                 _Adc (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       ___ftdiv
         _Adc (ARG)
         ___awtoft (ARG)
           _Adc (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         _Adc (ARG)
         ___awtoft (ARG)
           _Adc (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _Adc (ARG)
             ___awtoft (ARG)
               _Adc (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _Adc (ARG)
           ___awtoft (ARG)
             _Adc (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
     _Task3
       _LCD_array
         _LCD_command
           _LCD_E
         _LCD_date
           _LCD_E
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           ___lwdiv (ARG)
         _isdigit
     _antirrebote
   _Pwm_init
   _Seleccion_Modo
     _LCD_array
       _LCD_command
         _LCD_E
       _LCD_date
         _LCD_E
     _LCD_command
       _LCD_E
     _Lcd_PTM
       _LCD_array
         _LCD_command
           _LCD_E
         _LCD_date
           _LCD_E
       _LCD_command
         _LCD_E
       _LCD_date
         _LCD_E
       _LCD_xy
         _LCD_command
           _LCD_E
     _antirrebote
   _antirrebote

 _ISR (ROOT)
   _Pwm_Signal
   _Task_Ready

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     11      11       9       17.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      4E       7       97.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B9      12        0.0%
ABS                  0      0      B9       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat Nov 28 13:48:14 2020

           ?_antirrebote 0070          ?_Seleccion_Modo 0070                        pc 0002  
                     fsr 0004      ___wmul@multiplicand 0029             ___ftadd@exp1 0055  
           ___ftadd@exp2 0054     Seleccion_Modo@opcion 002F             ___ftadd@sign 0053  
                    l162 0ED9                      l171 0B92                      l180 0BED  
                    l341 031E                      l175 0BAA                      l600 00D9  
                    l602 00B7                      l427 1496                      l259 162A  
                    l630 1422                      l375 0A2F                      l609 0130  
                    l850 1776                      l588 0058                      l933 08B6  
                    l849 176E                      l873 0FA1                      _GIE 005F  
                    _RB4 0034                      _RB5 0035                      _ISR 0D6D  
                    _Adc 160C                      _Fin 00C2                      _Min 00C4  
                    _Seg 0078                      _Rpm 00B6                      _Pwm 0079  
                    fsr0 0004                      indf 0000    Seleccion_Modo@opc_ant 002E  
                   ?_ISR 0070                     ?_Adc 0074             ___ftdiv@cntr 0044  
           ___ftdiv@sign 0049                     l4024 1528                     l4016 1504  
                   l4040 149D                     l4200 0189                     l4120 005D  
                   l4018 1512                     l4042 14AB                     l4050 14C4  
                   l4122 0070                     l4114 0054                     l4060 16CE  
                   l4028 1533                     l4300 0FB3                     l4062 16D7  
                   l4046 14B9                     l4214 019C                     l4206 0198  
                   l4126 0080                     l5014 06BD                     l5006 06B7  
                   l4056 16BC                     l4152 00FF                     l4136 00B9  
                   l4216 0034                     l4304 0FC5                     l5024 06DF  
                   l5016 06C8                     l4058 16C5                     l4074 1714  
                   l4066 16E0                     l4330 0B0C                     l4402 0D31  
                   l4218 01DB                     l4314 0FE8                     l4250 0F22  
                   l4068 16F3                     l4324 0AF6                     l4148 00F3  
                   l4260 0F38                     l5028 06E5                     l4238 1401  
                   l4406 0D41                     l4422 0879                     l4174 0145  
                   l4166 0122                     l4158 0101                     l4254 0F29  
                   l4352 0B54                     l4440 08A2                     l4184 015A  
                   l4192 0170                     l4176 0149                     l4504 0313  
                   l4272 0F52                     l4346 0B35                     l4418 0870  
                   l4194 0174                     l4530 0C95                     l4522 0C87  
                   l4282 0F73                     l4610 1452                     l4372 0CE6  
                   l4452 08C5                     l4444 08B2                     l4292 0F91  
                   l4284 0F78                     l4612 144E                     l5180 0BD1  
                   l4470 1475                     l4390 0D09                     l4366 0CD0  
                   l5182 006B                     l4526 0C8D                     l4710 0843  
                   l4702 082E                     l4286 0F7C                     l4278 0F67  
                   l4614 145E                     l4472 147C                     l4456 08D3  
                   l5184 00CB                     l4560 05A3                     l4552 0594  
                   l4544 0524                     l4704 0834                     l4296 0F9D  
                   l4632 039C                     l5186 1488                     l4466 1467  
                   l4394 0D19                     l4714 084E                     l5178 06F1  
                   l5188 16E5                     l4468 146E                     l4476 1483  
                   l4564 05AC                     l4556 0599                     l4732 0A25  
                   l4900 0BAC                     l4644 03EF                     l4760 0966  
                   l3952 134A                     l4912 0BBE                     l4904 0BB4  
                   l4920 0BC6                     l4656 0442                     l4826 07E9  
                   l4906 0BB6                     l4922 0BDF                     l4668 0495  
                   l4852 0EAF                     l4844 0E8E                     l3990 1759  
                   l3982 173E                     l3974 172B                     l3958 141A  
                   l4694 081B                     l4934 0C0A                     l4862 0ECE  
                   l3984 1743                     l4696 0821                     l4856 0EBC  
                   l3994 176C                     l3978 1732                     l3996 175E  
                   l4868 0EE4                     l4888 0B80                     STR_1 0744  
                   STR_2 072F                     STR_3 071A                     STR_4 0744  
                   STR_5 078D                     STR_6 07A9                     STR_7 0759  
                   STR_8 076B                     STR_9 077D             ?_LCD_command 0070  
                   u4215 1555                     u4225 15E2                     u4315 1737  
                   u5035 0B36                     u5115 0D1A                     u5045 0B47  
                   u5125 0D22                     u5205 0880                     u4335 1752  
                   u5055 0B55                     u6007 1445                     u4425 1507  
                   u4265 1423                     u6017 1458                     u6107 099A  
                   u4355 1765                     u5235 08A3                     u4515 14B1  
                   u4275 142A                     u5315 0324                     u6027 0A38  
                   _PEIE 005E                     u6117 09A9                     u5165 0D42  
                   u4445 1513                     u4525 14BA                     u6037 0A49  
                   u6207 1578                     u6127 09B6                     u6047 1624  
                   u5175 0D4A                     u4455 151F                     u6217 134F  
                   u6137 09C3                     u6057 164C                     u5265 08BB  
                   u4465 1529                     u4625 0118                     u6227 1357  
                   u6147 09D2                     u6067 1707                     u4555 1615  
                   u4395 177D                     u6157 15D9                     u6077 095E  
                   u6167 15F7                     u6087 0972                     u4495 14A0  
                   u6177 1606                     u6097 098B                     u4665 0137  
                   u6187 154C                     u5715 07D9                     u6197 1569  
                   u4925 0F7D                     u5910 0BFC                     u5830 0B8D  
                   u5920 0BFD                     u5840 0B8E                     u4865 0F53  
                   u5930 0C05                     u4955 0F92                     u5940 0C06  
                   u5860 0BA3                     u5870 0BA4                     u5950 061F  
                   u4895 0F68                     u5960 063B                     u5987 069E  
                   u5997 0EF4                     _TMR1 000E                     _Modo 0077  
                   _Pwm1 1656                     _Temp 00C3                     _main 05F2  
           ___ftpack@arg 0020             ___ftpack@exp 0023                     btemp 007E  
        __end_of_MP_Pulv 0C12                     start 0010       __size_of_LCD_array 0068  
        __end_of_Lcd_PTM 04B1             ___ftmul@cntr 0039             ___ftmul@sign 003A  
           main@caracter 0198                    ??_ISR 0070                    ??_Adc 0020  
           ___fttol@exp1 0056             ___fttol@lval 0052         __end_of_LCD_date 160C  
                  ?_Pwm1 0057         __end_of_LCD_init 09D8                    ?_main 0070  
        __end_of___ftadd 1000                    STR_10 07D1                    STR_11 07D1  
                  STR_12 07D1                    STR_20 07D3                    STR_13 07D1  
                  STR_21 07C2                    _ANS13 0C4D                    STR_14 07D1  
                  STR_22 07BD                    STR_23 07BD                    STR_15 07C7  
                  STR_24 07BD                    STR_16 07CC                    STR_25 07BD  
                  STR_17 07B5                    STR_18 07A7                    STR_26 07BD  
                  STR_27 07BD                    STR_19 079C          __end_of___ftdiv 0B78  
        __end_of___ftmul 0D6D          __end_of___fttol 08DC            _LCD_character 07D5  
                  _LCD_E 134C          __end_of___lwdiv 1538                    i1l212 0DD5  
                  i1l213 0DE7                    i1l205 0D80                    i1l215 0DE5  
                  i1l224 0E29          __end_of___lwmod 14C9                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISB 0086  
                  _TRISC 0087                    _T_Lcd 00E4                    _Task1 0809  
                  _Task2 157E                    _Task3 09D8                    _PwmS1 00B2  
                  _Out_E 0076            ___awtoft@sign 002B          __end_of_dpowers 071A  
        __end_of_isdigit 134C            ___ftpack@sign 0024         __end_of_Adc_init 13F7  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 01E0         __end_of_Lcd_PPAR 0958          __initialization 0013  
           __end_of_Pwm1 16BB               _Task2$1290 005A            main@caracter1 0190  
           __end_of_main 06FF                   ??_Pwm1 0076           ?_LCD_character 0022  
                 ??_main 006C            ___fttol@sign1 0051                   ?_LCD_E 0070  
      __end_of_LCD_array 1723                   ?_Task1 0070                   ?_Task2 0070  
                 ?_Task3 0070         __end_of_Pwm_init 13C0                   _ADCON0 001F  
                 _ADRESH 001E                   _ADRESL 009E                ??_MP_Pulv 0069  
       __end_of___awtoft 1418         __end_of___ftpack 178F         __end_of___lbtoft 13DB  
            Task1@Estado 0068                   i1l3700 0DAA                   i1l3560 14ED  
                 i1l3552 14DF                   i1l3712 0DC4                   i1l3720 0DEE  
                 i1l3546 14D5                   i1l3730 0E04                   i1l3706 0DB7  
                 i1l3736 0E0F                   i1l3728 0DFF                   i1l3746 0E21  
                 i1l3682 0D82                   i1l3748 0E23                   i1l3694 0D9D  
                 i1l3688 0D90                   u410_25 0DDB                   u411_25 0DE3  
                 _LCD_xy 1466                   u409_25 0DCD         __end_of___lwtoft 1392  
                 u390_25 13A2                   u395_20 0D76                   u396_20 0D77  
                 u389_25 1398                ??_Lcd_PTM 0076                   _TMR1IE 0460  
                 _TMR1IF 0060               _Task_Ready 14C9                   _TMR1ON 0080  
                 _TRISB4 0434                   _TRISB5 0435         MP_Pulv@Maq_task1 006B  
                 Task3@i 0047              Task3@buffer 003D                   ___wmul 1418  
              ??___ftadd 0050                ??___ftdiv 0041       __size_of_Pwm1_init 0071  
              ??___ftmul 0032                ??___fttol 004E                ??___lwdiv 0074  
     __size_of_Pwm1_stop 000E                ??___lwmod 0074     __size_of_antirrebote 002D  
           LCD_date@date 0075               _Pwm_Signal 1392    ___ftmul@f3_as_product 0036  
              ??_isdigit 0074             ?_E_Task1_Min 0070                   saved_w 007E  
           ?_E_Task1_Rpm 0070             ?_E_Task1_Pwm 0070                ??_sprintf 002E  
__end_of__initialization 002B               ___ftadd@f1 004A               ___ftadd@f2 004D  
   __size_of_LCD_command 0046                ?_LCD_date 0070                ?_LCD_init 0070  
       ??_Seleccion_Modo 002B               ___ftdiv@f1 003E               ___ftdiv@f2 003B  
             ___ftdiv@f3 0045            __end_of_LCD_E 135B               ___awtoft@c 0028  
             ___lbtoft@c 0074               ___ftmul@f1 002C               ___ftmul@f2 002F  
             ___fttol@f1 004A           __pcstackCOMMON 0070            __end_of_Task1 0861  
          __end_of_Task2 15C4            __end_of_Task3 0A5A             __pidataBANK1 136C  
        ??_LCD_character 0023                LCD_init@i 0024                ?_Adc_init 0070  
             ___lwtoft@c 0028                  ??_LCD_E 0074                  ??_Task1 0076  
                ??_Task2 0076                  ??_Task3 003A                ?_Lcd_PPAR 0070  
           sprintf@width 0036        __end_of_Pwm1_init 1800        __end_of_Pwm1_stop 133E  
             __pbssBANK1 00A0                  ?_LCD_xy 0022              ?_Task_Ready 0070  
             ??_LCD_date 0020                  LCD_xy@x 0022                  LCD_xy@y 0024  
             ??_LCD_init 0022               _clock100us 00B8               __pmaintext 05F2  
                ?___wmul 0027                ?_Pwm_init 0070               __pintentry 0004  
              ?___awtoft 0028                ?___ftpack 0020                ?___lbtoft 0028  
             ??_Adc_init 0074              ?_Pwm_Signal 0070                ?___lwtoft 0028  
             ??_Lcd_PPAR 0076            Lcd_PTM@opcion 002A                  _MP_Pulv 0B78  
             __stringtab 0700          __size_of_LCD_xy 0031                  _Lcd_PTM 0349  
                _T_Task1 00EA                  _T_Task2 00E8                  _T_Task3 00E6  
                ___ftadd 0EFB                  ___ftdiv 0AE0               ??_Pwm_init 0074  
        __size_of___wmul 0021                  ___ftmul 0CBA                  ___fttol 0861  
                ___lwdiv 14FC                  ___lwmod 1497               ??___awtoft 0076  
             ??___ftpack 0025               ??___lbtoft 002B                _ANSELbits 0188  
                __ptext1 0E33                  __ptext2 0349                  __ptext3 13A9  
                __ptext4 0B78                  __ptext5 1439                  __ptext6 09D8  
                __ptext7 157E                  __ptext8 13C0                  __ptext9 178F  
             ??___lwtoft 0074      __size_of_Task_Ready 0033             __size_of_ISR 00C6  
           __size_of_Adc 004A                _T1CONbits 0010                  _dpowers 0710  
                _isdigit 133E                  _mod_min 00C0                  _mod_seg 00BF  
                _mostrar 00B9     __size_of_E_Task1_Min 0141                  _sprintf 002F  
   __size_of_E_Task1_Rpm 0169                  clrloop0 0802     __size_of_E_Task1_Pwm 00A8  
   end_of_initialization 002B                _LCD_array 16BB      __size_of_Pwm_Signal 0017  
          ?_E_Task1_Temp 0070                _PORTAbits 0005                _PORTBbits 0006  
              _PORTCbits 0007            LCD_array@date 0026                _TRISAbits 0085  
              _Act_PwmS1 00BE               ?_LCD_array 0022              ___ftdiv@exp 0048  
         __end_of_LCD_xy 1497           ??_E_Task1_Temp 0057               main@opcion 01A0  
      __size_of_LCD_date 0048        __size_of_LCD_init 0080              ___ftmul@exp 0035  
          ??_antirrebote 0020           __end_of___wmul 1439        __size_of_Adc_init 001C  
              _Est_Task1 00BD                _Est_Task2 00BC                _Est_Task3 00BB  
             LCD_array@x 0022               LCD_array@y 0024      start_initialization 0013  
            __end_of_ISR 0E33              __end_of_Adc 1656            ??_LCD_command 0020  
      __size_of_Lcd_PPAR 007C                _Per_PwmS1 00AB       E_Task1_Min@aux_min 0063  
     E_Task1_Min@aux_seg 0064                 ??_LCD_xy 0076             ??_Task_Ready 0070  
              _Pwm1_init 178F                _Pwm1_stop 1330                _T_running 00BA  
               ??___wmul 0074               init_fetch0 135B              __pdataBANK1 00DC  
      __size_of_Pwm_init 0017             ??_Pwm_Signal 0070    __end_of_LCD_character 0800  
    __end_of_antirrebote 1466        __size_of___awtoft 0021        __size_of___ftpack 006C  
      __size_of___lbtoft 001B       __end_of_Task_Ready 14FC              __pbssCOMMON 0076  
              ___latbits 0002        __size_of___lwtoft 0014            __pcstackBANK0 0020  
          __pcstackBANK1 00C5            __pcstackBANK3 0190               ISR@f_pwmS1 0073  
           _isdigit$1103 0074                 ?_MP_Pulv 0070              ??_LCD_array 0028  
               ?_Lcd_PTM 0070              sprintf@flag 0035              sprintf@prec 0031  
             ?_Pwm1_init 0057               ?_Pwm1_stop 0070       __end_of_Pwm_Signal 13A9  
    __end_of_LCD_command 157E         ___lwdiv@dividend 0022                 ?___ftadd 004A  
               ?___ftdiv 003B                 ?___ftmul 002C                 ?___fttol 004A  
               ?___lwdiv 0020                 ?___lwmod 0027  __size_of_Seleccion_Modo 00C8  
              __pstrings 0700           __size_of_LCD_E 000F                _freqPwmS1 00B4  
               ?_isdigit 0070     __end_of_E_Task1_Temp 0AE0           __size_of_Task1 0058  
         __size_of_Task2 0046           __size_of_Task3 0082         ___lwdiv@quotient 0025  
               ?_sprintf 002B               Adc@channel 0022       E_Task1_Temp@buffer 0059  
      interrupt_function 0004      LCD_character@adress 0024           ___wmul@product 0074  
               _LCD_date 15C4                 _LCD_init 0958                clear_ram0 0801  
               _PER_T_S1 00AE              _antirrebote 1439                main@F1361 00DC  
              main@F1363 00A0        _E_Task1_Temp$1289 0063                 _Adc_init 13DB  
             _ADCON0bits 001F              __stringbase 070F               _ADCON1bits 009F  
      ___wmul@multiplier 0027            ??_E_Task1_Min 0057            ??_E_Task1_Rpm 0057  
          ??_E_Task1_Pwm 0057                 _P_W_T_S1 00B0                 _Lcd_PPAR 08DC  
               Pwm1@duty 0057              _LCD_command 1538         __size_of_MP_Pulv 009A  
               _T_Tiempo 00EC            Adc@convertion 0023              ??_Pwm1_init 0076  
       __size_of_Lcd_PTM 0168        E_Task1_Min@buffer 0059              ??_Pwm1_stop 0074  
               _Pw_PwmS1 00A8                 _Pwm_init 13A9         __size_of___ftadd 0105  
       __size_of___ftdiv 0098         __size_of___ftmul 00B3         __size_of___fttol 007B  
       __size_of___lwdiv 003C         __size_of___lwmod 0032                 ___awtoft 13F7  
               ___ftpack 1723                 ___lbtoft 13C0       __end_of__stringtab 0710  
               ___lwtoft 137E               _ANSELHbits 0189               sprintf@val 0033  
       __size_of_isdigit 000E          ___lwdiv@divisor 0020          ___lwdiv@counter 0024  
               __ptext10 137E                 __ptext11 0EFB                 __ptext20 1418  
               __ptext12 1656                 __ptext21 1497                 __ptext13 0809  
               __ptext30 08DC                 __ptext22 14FC                 __ptext14 0A5A  
               __ptext31 1466                 __ptext23 0861                 __ptext15 01E0  
               __ptext40 14C9                 __ptext32 16BB                 __ptext24 0CBA  
               __ptext16 0C12                 __ptext41 1392                 __ptext33 0958  
               __ptext25 0AE0                 __ptext17 04B1                 __ptext34 07D5  
               __ptext26 13F7                 __ptext18 002F                 __ptext35 15C4  
               __ptext27 1723                 __ptext19 133E                 __ptext36 1538  
               __ptext28 160C                 __ptext37 134C                 __ptext29 1330  
               __ptext38 13DB                 __ptext39 0D6D         __size_of_sprintf 01B1  
       _E_Task1_Min$1288 0065      __end_of_E_Task1_Min 05F2      __end_of_E_Task1_Rpm 0349  
    __end_of_E_Task1_Pwm 0CBA            __size_of_Pwm1 0065             _Temporizador 00C1  
          __size_of_main 010D        E_Task1_Rpm@buffer 00C5         _E_Task1_Rpm$1286 00CF  
       _E_Task1_Pwm$1287 0063        E_Task1_Pwm@buffer 0059    LCD_character@caracter 0022  
         _Seleccion_Modo 0E33    __size_of_E_Task1_Temp 0086           LCD_character@i 0025  
               init_ram0 135F                 isdigit@c 0075                 intlevel1 0000  
              sprintf@ap 0032                sprintf@sp 0039         ___lwmod@dividend 0029  
       E_Task1_Rpm@dec_m 00D8                stringcode 070A             _E_Task1_Temp 0A5A  
       E_Task1_Rpm@valor 00DA         E_Task1_Rpm@uni_m 00D6   __end_of_Seleccion_Modo 0EFB  
               sprintf@c 0038                 sprintf@f 002B          ___lwmod@divisor 0027  
        ___lwmod@counter 0074          E_Task1_Rpm@cent 00D4                 stringdir 070A  
        E_Task1_Temp@aux 0066              _E_Task1_Min 04B1                 stringtab 0700  
            _E_Task1_Rpm 01E0              _E_Task1_Pwm 0C12               _WDTCONbits 0105  
         E_Task1_Rpm@aux 00D2           E_Task1_Pwm@aux 0066      Pwm1_init@frecuencia 0057  
 __size_of_LCD_character 002B           LCD_command@cmd 0075  
